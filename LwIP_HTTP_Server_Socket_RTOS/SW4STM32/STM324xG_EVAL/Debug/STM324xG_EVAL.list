
STM324xG_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed0c  0800f288  0800f288  0001f288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801df94  0801df94  0002df94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801df9c  0801df9c  0002df9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801dfa0  0801dfa0  0002dfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000000  0801dfa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
  8 .bss          00014990  200000a8  200000a8  000300a8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20014a38  20014a38  000300a8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 11 .debug_line   00042cec  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000601dc  00000000  00000000  00072dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bc27  00000000  00000000  000d2fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe0  00000000  00000000  000debc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000fddcb  00000000  00000000  000e0ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003658  00000000  00000000  001de978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00027e3b  00000000  00000000  001e1fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00033a35  00000000  00000000  00209e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023d840  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007028  00000000  00000000  0023d894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f270 	.word	0x0800f270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800f270 	.word	0x0800f270

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800059c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800059e:	e003      	b.n	80005a8 <LoopCopyDataInit>

080005a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005a6:	3104      	adds	r1, #4

080005a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b0:	d3f6      	bcc.n	80005a0 <CopyDataInit>
  ldr  r2, =_sbss
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005b4:	e002      	b.n	80005bc <LoopFillZerobss>

080005b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005b8:	f842 3b04 	str.w	r3, [r2], #4

080005bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c0:	d3f9      	bcc.n	80005b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005c2:	f000 ff29 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c6:	f00d fc03 	bl	800ddd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ca:	f000 fc45 	bl	8000e58 <main>
  bx  lr    
 80005ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80005d4:	0801dfa4 	.word	0x0801dfa4
  ldr  r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005dc:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 80005e0:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 80005e4:	20014a38 	.word	0x20014a38

080005e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC_IRQHandler>
	...

080005ec <_sbrk>:




caddr_t _sbrk(int incr)
{
 80005ec:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <_sbrk+0x34>)
 80005f0:	6819      	ldr	r1, [r3, #0]
{
 80005f2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80005f4:	b909      	cbnz	r1, 80005fa <_sbrk+0xe>
		heap_end = &end;
 80005f6:	490b      	ldr	r1, [pc, #44]	; (8000624 <_sbrk+0x38>)
 80005f8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80005fa:	490b      	ldr	r1, [pc, #44]	; (8000628 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 80005fc:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80005fe:	6809      	ldr	r1, [r1, #0]
 8000600:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000602:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 8000604:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000608:	428a      	cmp	r2, r1
 800060a:	d906      	bls.n	800061a <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800060c:	f00d fbda 	bl	800ddc4 <__errno>
 8000610:	230c      	movs	r3, #12
 8000612:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000614:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000618:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800061a:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 800061c:	e7fc      	b.n	8000618 <_sbrk+0x2c>
 800061e:	bf00      	nop
 8000620:	200000c4 	.word	0x200000c4
 8000624:	20014a38 	.word	0x20014a38
 8000628:	e000ed08 	.word	0xe000ed08

0800062c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800062c:	2001      	movs	r0, #1
 800062e:	4770      	bx	lr

08000630 <_kill>:

int _kill(int pid, int sig)
{
 8000630:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000632:	f00d fbc7 	bl	800ddc4 <__errno>
 8000636:	2316      	movs	r3, #22
 8000638:	6003      	str	r3, [r0, #0]
	return -1;
}
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	bd08      	pop	{r3, pc}

08000640 <_exit>:

void _exit (int status)
{
 8000640:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000642:	f00d fbbf 	bl	800ddc4 <__errno>
 8000646:	2316      	movs	r3, #22
 8000648:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 800064a:	e7fe      	b.n	800064a <_exit+0xa>

0800064c <_write>:
}

int _write(int file, char *ptr, int len)
{
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	460e      	mov	r6, r1
 8000650:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000652:	2500      	movs	r5, #0
 8000654:	42a5      	cmp	r5, r4
 8000656:	db01      	blt.n	800065c <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000658:	4620      	mov	r0, r4
 800065a:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800065c:	5d70      	ldrb	r0, [r6, r5]
 800065e:	f000 fcf7 	bl	8001050 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	3501      	adds	r5, #1
 8000664:	e7f6      	b.n	8000654 <_write+0x8>

08000666 <_close>:

int _close(int file)
{
	return -1;
}
 8000666:	f04f 30ff 	mov.w	r0, #4294967295
 800066a:	4770      	bx	lr

0800066c <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800066c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000670:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000672:	2000      	movs	r0, #0
 8000674:	4770      	bx	lr

08000676 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000676:	2001      	movs	r0, #1
 8000678:	4770      	bx	lr

0800067a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800067a:	2000      	movs	r0, #0
 800067c:	4770      	bx	lr

0800067e <_read>:

int _read(int file, char *ptr, int len)
{
 800067e:	b570      	push	{r4, r5, r6, lr}
 8000680:	460e      	mov	r6, r1
 8000682:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000684:	2500      	movs	r5, #0
 8000686:	42a5      	cmp	r5, r4
 8000688:	db01      	blt.n	800068e <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800068a:	4620      	mov	r0, r4
 800068c:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800068e:	f3af 8000 	nop.w
 8000692:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000694:	3501      	adds	r5, #1
 8000696:	e7f6      	b.n	8000686 <_read+0x8>

08000698 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 8000698:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800069c:	07db      	lsls	r3, r3, #31
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#else    
    /* Turn On LED 1 to indicate ETH and LwIP init success*/
    BSP_LED_On(LED1);
 800069e:	bf4c      	ite	mi
 80006a0:	2000      	movmi	r0, #0
#endif  /* USE_DHCP */
#ifdef USE_LCD
    LCD_UsrLog ("The network cable is not connected \n");
#else    
    /* Turn On LED 2 to indicate ETH and LwIP init error */
    BSP_LED_On(LED2);
 80006a2:	2001      	movpl	r0, #1
 80006a4:	f000 bdc2 	b.w	800122c <BSP_LED_On>

080006a8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 80006a8:	b530      	push	{r4, r5, lr}
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
#endif
  
  if(netif_is_link_up(netif))
 80006aa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80006ae:	0759      	lsls	r1, r3, #29
{
 80006b0:	b085      	sub	sp, #20
 80006b2:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 80006b4:	f3c3 0580 	ubfx	r5, r3, #2, #1
 80006b8:	d519      	bpl.n	80006ee <ethernetif_notify_conn_changed+0x46>
  {
#ifdef USE_LCD        
    LCD_UsrLog ("The network cable is now connected \n");
#else
    BSP_LED_Off(LED2);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fdc4 	bl	8001248 <BSP_LED_Off>
    BSP_LED_On(LED1);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fdb3 	bl	800122c <BSP_LED_On>
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
    IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <ethernetif_notify_conn_changed+0x58>)
 80006c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80006cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
    IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);  
 80006d0:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 80006d4:	33c1      	adds	r3, #193	; 0xc1
 80006d6:	9303      	str	r3, [sp, #12]
 
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 80006d8:	4620      	mov	r0, r4
 80006da:	ab03      	add	r3, sp, #12
 80006dc:	aa02      	add	r2, sp, #8
 80006de:	a901      	add	r1, sp, #4
 80006e0:	f008 ffb2 	bl	8009648 <netif_set_addr>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#endif /* USE_LCD */
#endif /* USE_DHCP */   
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);     
 80006e4:	4620      	mov	r0, r4
 80006e6:	f009 f879 	bl	80097dc <netif_set_up>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* USE_LCD */    
  }
}
 80006ea:	b005      	add	sp, #20
 80006ec:	bd30      	pop	{r4, r5, pc}
    netif_set_down(netif);
 80006ee:	f009 f88f 	bl	8009810 <netif_set_down>
    BSP_LED_Off(LED1);
 80006f2:	4628      	mov	r0, r5
 80006f4:	f000 fda8 	bl	8001248 <BSP_LED_Off>
    BSP_LED_On(LED2);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 fd97 	bl	800122c <BSP_LED_On>
}
 80006fe:	e7f4      	b.n	80006ea <ethernetif_notify_conn_changed+0x42>
 8000700:	6e01a8c0 	.word	0x6e01a8c0

08000704 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000708:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <low_level_output+0x9c>)
 800070a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 800070c:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000710:	68b3      	ldr	r3, [r6, #8]
{
 8000712:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8000714:	4647      	mov	r7, r8
 8000716:	4691      	mov	r9, r2
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;

    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000718:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 800071c:	b92c      	cbnz	r4, 800072a <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 800071e:	4820      	ldr	r0, [pc, #128]	; (80007a0 <low_level_output+0x9c>)
 8000720:	4639      	mov	r1, r7
 8000722:	f001 f84b 	bl	80017bc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8000726:	4620      	mov	r0, r4
 8000728:	e004      	b.n	8000734 <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800072a:	6832      	ldr	r2, [r6, #0]
 800072c:	2a00      	cmp	r2, #0
 800072e:	da11      	bge.n	8000754 <low_level_output+0x50>
      errval = ERR_USE;
 8000730:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000734:	f8d9 3000 	ldr.w	r3, [r9]
 8000738:	f241 0214 	movw	r2, #4116	; 0x1014
 800073c:	5899      	ldr	r1, [r3, r2]
 800073e:	0689      	lsls	r1, r1, #26
 8000740:	d505      	bpl.n	800074e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 8000742:	2120      	movs	r1, #32
 8000744:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 8000746:	f241 0204 	movw	r2, #4100	; 0x1004
 800074a:	2100      	movs	r1, #0
 800074c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800074e:	b003      	add	sp, #12
 8000750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 8000754:	8962      	ldrh	r2, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000756:	4645      	mov	r5, r8
    payloadoffset = 0;
 8000758:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800075c:	6861      	ldr	r1, [r4, #4]
 800075e:	eb05 0802 	add.w	r8, r5, r2
 8000762:	45d8      	cmp	r8, fp
 8000764:	eb03 0005 	add.w	r0, r3, r5
 8000768:	4451      	add	r1, sl
 800076a:	d808      	bhi.n	800077e <low_level_output+0x7a>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800076c:	e9cd 2300 	strd	r2, r3, [sp]
 8000770:	f00d fb60 	bl	800de34 <memcpy>
    framelength = framelength + byteslefttocopy;
 8000774:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 8000776:	6824      	ldr	r4, [r4, #0]
 8000778:	9b01      	ldr	r3, [sp, #4]
    framelength = framelength + byteslefttocopy;
 800077a:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 800077c:	e7ce      	b.n	800071c <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800077e:	ebab 0505 	sub.w	r5, fp, r5
 8000782:	462a      	mov	r2, r5
 8000784:	f00d fb56 	bl	800de34 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8000788:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800078a:	6833      	ldr	r3, [r6, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dbcf      	blt.n	8000730 <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8000790:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000792:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8000794:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8000796:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
      bufferoffset = 0;
 800079a:	2500      	movs	r5, #0
 800079c:	e7de      	b.n	800075c <low_level_output+0x58>
 800079e:	bf00      	nop
 80007a0:	20006804 	.word	0x20006804

080007a4 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 80007a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a8:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80007aa:	4c3a      	ldr	r4, [pc, #232]	; (8000894 <ethernetif_input+0xf0>)
 80007ac:	6820      	ldr	r0, [r4, #0]
 80007ae:	f04f 31ff 	mov.w	r1, #4294967295
 80007b2:	f003 fc1d 	bl	8003ff0 <osSemaphoreWait>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d1f8      	bne.n	80007ac <ethernetif_input+0x8>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80007ba:	4e37      	ldr	r6, [pc, #220]	; (8000898 <ethernetif_input+0xf4>)
    {
      do
      {
        LOCK_TCPIP_CORE();
 80007bc:	4837      	ldr	r0, [pc, #220]	; (800089c <ethernetif_input+0xf8>)
 80007be:	f00d fab5 	bl	800dd2c <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 80007c2:	4630      	mov	r0, r6
 80007c4:	f001 f86e 	bl	80018a4 <HAL_ETH_GetReceivedFrame_IT>
 80007c8:	4605      	mov	r5, r0
 80007ca:	b130      	cbz	r0, 80007da <ethernetif_input+0x36>
    return NULL;
 80007cc:	2400      	movs	r4, #0
          {
            pbuf_free(p);
          }
        }

        UNLOCK_TCPIP_CORE();
 80007ce:	4833      	ldr	r0, [pc, #204]	; (800089c <ethernetif_input+0xf8>)
 80007d0:	f00d fab1 	bl	800dd36 <sys_mutex_unlock>

      }while(p!=NULL);
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d1f0      	bne.n	80007ba <ethernetif_input+0x16>
 80007d8:	e7e7      	b.n	80007aa <ethernetif_input+0x6>
  len = EthHandle.RxFrameInfos.length;
 80007da:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
 80007dc:	bb01      	cbnz	r1, 8000820 <ethernetif_input+0x7c>
  struct pbuf *p = NULL, *q = NULL;
 80007de:	2400      	movs	r4, #0
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 80007e0:	6b33      	ldr	r3, [r6, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80007e2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 80007e4:	2200      	movs	r2, #0
 80007e6:	4282      	cmp	r2, r0
 80007e8:	d14d      	bne.n	8000886 <ethernetif_input+0xe2>
  EthHandle.RxFrameInfos.SegCount =0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80007ee:	f241 0214 	movw	r2, #4116	; 0x1014
 80007f2:	6833      	ldr	r3, [r6, #0]
 80007f4:	5899      	ldr	r1, [r3, r2]
 80007f6:	0609      	lsls	r1, r1, #24
 80007f8:	d505      	bpl.n	8000806 <ethernetif_input+0x62>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	5099      	str	r1, [r3, r2]
    EthHandle.Instance->DMARPDR = 0;
 80007fe:	f241 0208 	movw	r2, #4104	; 0x1008
 8000802:	2100      	movs	r1, #0
 8000804:	5099      	str	r1, [r3, r2]
        if (p != NULL)
 8000806:	2c00      	cmp	r4, #0
 8000808:	d0e0      	beq.n	80007cc <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 800080a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800080e:	4641      	mov	r1, r8
 8000810:	4620      	mov	r0, r4
 8000812:	4798      	blx	r3
 8000814:	2800      	cmp	r0, #0
 8000816:	d0da      	beq.n	80007ce <ethernetif_input+0x2a>
            pbuf_free(p);
 8000818:	4620      	mov	r0, r4
 800081a:	f009 f8d3 	bl	80099c4 <pbuf_free>
 800081e:	e7d6      	b.n	80007ce <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000820:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000824:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000826:	f009 f935 	bl	8009a94 <pbuf_alloc>
  if (p != NULL)
 800082a:	4604      	mov	r4, r0
 800082c:	2800      	cmp	r0, #0
 800082e:	d0d6      	beq.n	80007de <ethernetif_input+0x3a>
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000830:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000834:	46b9      	mov	r9, r7
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000836:	f240 5bf4 	movw	fp, #1524	; 0x5f4
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800083a:	4607      	mov	r7, r0
      byteslefttocopy = q->len;
 800083c:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000840:	46ac      	mov	ip, r5
      payloadoffset = 0;
 8000842:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	eb0c 050e 	add.w	r5, ip, lr
 800084a:	455d      	cmp	r5, fp
 800084c:	4418      	add	r0, r3
 800084e:	eb09 010c 	add.w	r1, r9, ip
 8000852:	d806      	bhi.n	8000862 <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000854:	4672      	mov	r2, lr
 8000856:	f00d faed 	bl	800de34 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800085a:	683f      	ldr	r7, [r7, #0]
 800085c:	2f00      	cmp	r7, #0
 800085e:	d1ed      	bne.n	800083c <ethernetif_input+0x98>
 8000860:	e7be      	b.n	80007e0 <ethernetif_input+0x3c>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000862:	ebab 020c 	sub.w	r2, fp, ip
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	9200      	str	r2, [sp, #0]
 800086a:	f00d fae3 	bl	800de34 <memcpy>
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800086e:	e9dd 2300 	ldrd	r2, r3, [sp]
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000872:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000876:	f2a5 5ef4 	subw	lr, r5, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800087a:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800087e:	4413      	add	r3, r2
        bufferoffset = 0;
 8000880:	f04f 0c00 	mov.w	ip, #0
 8000884:	e7de      	b.n	8000844 <ethernetif_input+0xa0>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000886:	6819      	ldr	r1, [r3, #0]
 8000888:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800088c:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800088e:	68db      	ldr	r3, [r3, #12]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000890:	3201      	adds	r2, #1
 8000892:	e7a8      	b.n	80007e6 <ethernetif_input+0x42>
 8000894:	200000c8 	.word	0x200000c8
 8000898:	20006804 	.word	0x20006804
 800089c:	2000e458 	.word	0x2000e458

080008a0 <HAL_ETH_MspInit>:
{
 80008a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(heth->Instance==ETH)
 80008a4:	6802      	ldr	r2, [r0, #0]
 80008a6:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <HAL_ETH_MspInit+0x144>)
 80008a8:	429a      	cmp	r2, r3
{
 80008aa:	b08d      	sub	sp, #52	; 0x34
 80008ac:	4605      	mov	r5, r0
  if(heth->Instance==ETH)
 80008ae:	d166      	bne.n	800097e <HAL_ETH_MspInit+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80008b0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80008b4:	2400      	movs	r4, #0
 80008b6:	9400      	str	r4, [sp, #0]
 80008b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	484b      	ldr	r0, [pc, #300]	; (80009e8 <HAL_ETH_MspInit+0x148>)
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80008bc:	f042 0210 	orr.w	r2, r2, #16
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
 80008c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c4:	f002 0210 	and.w	r2, r2, #16
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008cc:	9401      	str	r4, [sp, #4]
 80008ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d0:	f042 0204 	orr.w	r2, r2, #4
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
 80008d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008d8:	f002 0204 	and.w	r2, r2, #4
 80008dc:	9201      	str	r2, [sp, #4]
 80008de:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	9402      	str	r4, [sp, #8]
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	f042 0201 	orr.w	r2, r2, #1
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
 80008ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ec:	f002 0201 	and.w	r2, r2, #1
 80008f0:	9202      	str	r2, [sp, #8]
 80008f2:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	9403      	str	r4, [sp, #12]
 80008f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f8:	f042 0202 	orr.w	r2, r2, #2
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	9409      	str	r4, [sp, #36]	; 0x24
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	f003 0302 	and.w	r3, r3, #2
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2702      	movs	r7, #2
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000908:	260b      	movs	r6, #11
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	f04f 0832 	mov.w	r8, #50	; 0x32
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090e:	f04f 0903 	mov.w	r9, #3
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000916:	e9cd 960a 	strd	r9, r6, [sp, #40]	; 0x28
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	e9cd 8707 	strd	r8, r7, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	f001 fab0 	bl	8001e84 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000924:	2386      	movs	r3, #134	; 0x86
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	4831      	ldr	r0, [pc, #196]	; (80009ec <HAL_ETH_MspInit+0x14c>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000928:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	e9cd 3707 	strd	r3, r7, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f001 faa6 	bl	8001e84 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000938:	f44f 5360 	mov.w	r3, #14336	; 0x3800
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <HAL_ETH_MspInit+0x150>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093e:	960b      	str	r6, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	e9cd 3707 	strd	r3, r7, [sp, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000946:	2601      	movs	r6, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	e9cd 4909 	strd	r4, r9, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f001 fa9a 	bl	8001e84 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	4826      	ldr	r0, [pc, #152]	; (80009ec <HAL_ETH_MspInit+0x14c>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	970a      	str	r7, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	e9cd 6607 	strd	r6, r6, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f001 fa93 	bl	8001e84 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);
 800095e:	4622      	mov	r2, r4
 8000960:	4631      	mov	r1, r6
 8000962:	4822      	ldr	r0, [pc, #136]	; (80009ec <HAL_ETH_MspInit+0x14c>)
 8000964:	f001 fb68 	bl	8002038 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000968:	4640      	mov	r0, r8
 800096a:	f000 fda5 	bl	80014b8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);
 800096e:	481f      	ldr	r0, [pc, #124]	; (80009ec <HAL_ETH_MspInit+0x14c>)
 8000970:	4632      	mov	r2, r6
 8000972:	4631      	mov	r1, r6
 8000974:	f001 fb60 	bl	8002038 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000978:	4640      	mov	r0, r8
 800097a:	f000 fd9d 	bl	80014b8 <HAL_Delay>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2107      	movs	r1, #7
 8000982:	203d      	movs	r0, #61	; 0x3d
 8000984:	f000 fdc4 	bl	8001510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000988:	203d      	movs	r0, #61	; 0x3d
 800098a:	f000 fdf3 	bl	8001574 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <HAL_ETH_MspInit+0x154>)
 8000990:	2200      	movs	r2, #0
 8000992:	9204      	str	r2, [sp, #16]
 8000994:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000996:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800099a:	6319      	str	r1, [r3, #48]	; 0x30
 800099c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800099e:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
 80009a2:	9104      	str	r1, [sp, #16]
 80009a4:	9904      	ldr	r1, [sp, #16]
 80009a6:	9205      	str	r2, [sp, #20]
 80009a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009aa:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80009ae:	6319      	str	r1, [r3, #48]	; 0x30
 80009b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009b2:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 80009b6:	9105      	str	r1, [sp, #20]
 80009b8:	9905      	ldr	r1, [sp, #20]
 80009ba:	9206      	str	r2, [sp, #24]
 80009bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009be:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if (heth->Init.MediaInterface == ETH_MEDIA_INTERFACE_MII)
 80009c6:	6a2a      	ldr	r2, [r5, #32]
  __HAL_RCC_ETH_CLK_ENABLE();
 80009c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009cc:	9306      	str	r3, [sp, #24]
 80009ce:	9b06      	ldr	r3, [sp, #24]
  if (heth->Init.MediaInterface == ETH_MEDIA_INTERFACE_MII)
 80009d0:	b922      	cbnz	r2, 80009dc <HAL_ETH_MspInit+0x13c>
    HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80009d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80009d6:	4610      	mov	r0, r2
 80009d8:	f001 fce8 	bl	80023ac <HAL_RCC_MCOConfig>
}
 80009dc:	b00d      	add	sp, #52	; 0x34
 80009de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009e2:	bf00      	nop
 80009e4:	40028000 	.word	0x40028000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <HAL_ETH_RxCpltCallback+0x8>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f003 bb1e 	b.w	800403c <osSemaphoreRelease>
 8000a00:	200000c8 	.word	0x200000c8

08000a04 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000a06:	4604      	mov	r4, r0
{
 8000a08:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000a0a:	b930      	cbnz	r0, 8000a1a <ethernetif_init+0x16>
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <ethernetif_init+0xe0>)
 8000a0e:	4936      	ldr	r1, [pc, #216]	; (8000ae8 <ethernetif_init+0xe4>)
 8000a10:	4836      	ldr	r0, [pc, #216]	; (8000aec <ethernetif_init+0xe8>)
 8000a12:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000a16:	f00d fa3d 	bl	800de94 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8000a1a:	f247 4373 	movw	r3, #29811	; 0x7473
 8000a1e:	8663      	strh	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;

  netif->output = etharp_output;
 8000a20:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <ethernetif_init+0xec>)
 8000a22:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <ethernetif_init+0xf0>)
  EthHandle.Instance = ETH;
 8000a26:	4d34      	ldr	r5, [pc, #208]	; (8000af8 <ethernetif_init+0xf4>)
  netif->linkoutput = low_level_output;
 8000a28:	61a3      	str	r3, [r4, #24]
  EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <ethernetif_init+0xf8>)
 8000a2c:	2601      	movs	r6, #1
 8000a2e:	e9c5 3600 	strd	r3, r6, [r5]
  MACAddr[0] = MAC_ADDR0;
 8000a32:	2302      	movs	r3, #2
 8000a34:	9301      	str	r3, [sp, #4]
  EthHandle.Init.MACAddr = &MACAddr[0];
 8000a36:	ab01      	add	r3, sp, #4
  EthHandle.Init.PhyAddress = 0;
 8000a38:	2700      	movs	r7, #0
  EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8000a3a:	e9c5 3605 	strd	r3, r6, [r5, #20]
	HAL_ETH_Init(&EthHandle);
 8000a3e:	4628      	mov	r0, r5
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  EthHandle.Init.PhyAddress = 0;
 8000a44:	822f      	strh	r7, [r5, #16]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000a46:	61ef      	str	r7, [r5, #28]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000a48:	622b      	str	r3, [r5, #32]
  MACAddr[4] = MAC_ADDR4;
 8000a4a:	f8ad 7008 	strh.w	r7, [sp, #8]
	HAL_ETH_Init(&EthHandle);
 8000a4e:	f001 f81b 	bl	8001a88 <HAL_ETH_Init>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000a52:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <ethernetif_init+0xfc>)
 8000a58:	492a      	ldr	r1, [pc, #168]	; (8000b04 <ethernetif_init+0x100>)
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000a62:	4628      	mov	r0, r5
 8000a64:	2305      	movs	r3, #5
 8000a66:	f000 fe33 	bl	80016d0 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8000a6a:	4927      	ldr	r1, [pc, #156]	; (8000b08 <ethernetif_init+0x104>)
 8000a6c:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <ethernetif_init+0x108>)
 8000a6e:	2305      	movs	r3, #5
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 fe69 	bl	8001748 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8000a76:	2306      	movs	r3, #6
 8000a78:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  EthHandle.Init.MACAddr[0];
 8000a7c:	696b      	ldr	r3, [r5, #20]
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[1] =  EthHandle.Init.MACAddr[1];
 8000a84:	785a      	ldrb	r2, [r3, #1]
 8000a86:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[2] =  EthHandle.Init.MACAddr[2];
 8000a8a:	789a      	ldrb	r2, [r3, #2]
 8000a8c:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[3] =  EthHandle.Init.MACAddr[3];
 8000a90:	78da      	ldrb	r2, [r3, #3]
 8000a92:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  EthHandle.Init.MACAddr[4];
 8000a96:	791a      	ldrb	r2, [r3, #4]
 8000a98:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  netif->hwaddr[5] =  EthHandle.Init.MACAddr[5];
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->mtu = 1500;
 8000aa2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000aa6:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000aa8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000aac:	f043 030a 	orr.w	r3, r3, #10
 8000ab0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_Start(&EthHandle);
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f001 f8e5 	bl	8001c84 <HAL_ETH_Start>
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000aba:	4631      	mov	r1, r6
 8000abc:	4668      	mov	r0, sp
  osSemaphoreDef(SEM);
 8000abe:	9700      	str	r7, [sp, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000ac0:	f003 fa80 	bl	8003fc4 <osSemaphoreCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000ac4:	4e12      	ldr	r6, [pc, #72]	; (8000b10 <ethernetif_init+0x10c>)
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <ethernetif_init+0x110>)
 8000ac8:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000aca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000acc:	ad03      	add	r5, sp, #12
 8000ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad0:	6833      	ldr	r3, [r6, #0]
 8000ad2:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	a803      	add	r0, sp, #12
 8000ad8:	f003 f9f8 	bl	8003ecc <osThreadCreate>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8000adc:	4638      	mov	r0, r7
 8000ade:	b009      	add	sp, #36	; 0x24
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	0801a483 	.word	0x0801a483
 8000ae8:	0801b704 	.word	0x0801b704
 8000aec:	0801a4e1 	.word	0x0801a4e1
 8000af0:	080080d9 	.word	0x080080d9
 8000af4:	08000705 	.word	0x08000705
 8000af8:	20006804 	.word	0x20006804
 8000afc:	40028000 	.word	0x40028000
 8000b00:	20008750 	.word	0x20008750
 8000b04:	2000684c 	.word	0x2000684c
 8000b08:	200086b0 	.word	0x200086b0
 8000b0c:	200068ec 	.word	0x200068ec
 8000b10:	0800f288 	.word	0x0800f288
 8000b14:	200000c8 	.word	0x200000c8

08000b18 <ethernetif_update_config>:
  *         to update low level driver configuration.
  * @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8000b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
  uint32_t regvalue = 0;
  
  if(netif_is_link_up(netif))
 8000b1a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  __IO uint32_t tickstart = 0;
 8000b1e:	2100      	movs	r1, #0
{
 8000b20:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8000b22:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8000b24:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8000b26:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8000b28:	d544      	bpl.n	8000bb4 <ethernetif_update_config+0x9c>
  { 
    /* Restart the auto-negotiation */
    if(EthHandle.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000b2a:	4c24      	ldr	r4, [pc, #144]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d035      	beq.n	8000b9e <ethernetif_update_config+0x86>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, PHY_AUTONEGOTIATION);
 8000b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b36:	4620      	mov	r0, r4
 8000b38:	f000 ff6e 	bl	8001a18 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8000b3c:	f000 fcb6 	bl	80014ac <HAL_GetTick>

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8000b40:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8000b42:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&EthHandle, PHY_BSR, &regvalue);
 8000b44:	aa01      	add	r2, sp, #4
 8000b46:	2101      	movs	r1, #1
 8000b48:	4630      	mov	r0, r6
 8000b4a:	f000 ff2a 	bl	80019a2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8000b4e:	f000 fcad 	bl	80014ac <HAL_GetTick>
 8000b52:	9b00      	ldr	r3, [sp, #0]
 8000b54:	1ac0      	subs	r0, r0, r3
 8000b56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b5a:	d820      	bhi.n	8000b9e <ethernetif_update_config+0x86>
        {
          /* In case of timeout */
          goto error;
        }

      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000b5c:	9b01      	ldr	r3, [sp, #4]
 8000b5e:	069a      	lsls	r2, r3, #26
 8000b60:	d5f0      	bpl.n	8000b44 <ethernetif_update_config+0x2c>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&EthHandle, PHY_SR, &regvalue);
 8000b62:	aa01      	add	r2, sp, #4
 8000b64:	4815      	ldr	r0, [pc, #84]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000b66:	211f      	movs	r1, #31
 8000b68:	f000 ff1b 	bl	80019a2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b6c:	9b01      	ldr	r3, [sp, #4]
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000b6e:	f013 0210 	ands.w	r2, r3, #16
 8000b72:	bf18      	it	ne
 8000b74:	f44f 6200 	movne.w	r2, #2048	; 0x800
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        EthHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8000b78:	075b      	lsls	r3, r3, #29
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        EthHandle.Init.Speed = ETH_SPEED_10M;
 8000b7a:	bf4c      	ite	mi
 8000b7c:	2300      	movmi	r3, #0
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        EthHandle.Init.Speed = ETH_SPEED_100M;
 8000b7e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8000b82:	60e2      	str	r2, [r4, #12]
 8000b84:	60a3      	str	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
                                                     (uint16_t)(EthHandle.Init.Speed >> 1)));
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&EthHandle, (ETH_MACInitTypeDef *) NULL);
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f001 f8ef 	bl	8001d6c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&EthHandle);
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000b90:	f001 f878 	bl	8001c84 <HAL_ETH_Start>
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&EthHandle);
  }

  ethernetif_notify_conn_changed(netif);
 8000b94:	4628      	mov	r0, r5
 8000b96:	f7ff fd87 	bl	80006a8 <ethernetif_notify_conn_changed>
}
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(EthHandle.Init.Speed >> 1)));
 8000b9e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8000ba2:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&EthHandle, PHY_BCR, ((uint16_t)(EthHandle.Init.DuplexMode >> 3) |
 8000ba4:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8000ba8:	b292      	uxth	r2, r2
 8000baa:	2100      	movs	r1, #0
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000bae:	f000 ff33 	bl	8001a18 <HAL_ETH_WritePHYRegister>
 8000bb2:	e7e8      	b.n	8000b86 <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&EthHandle);
 8000bb4:	4801      	ldr	r0, [pc, #4]	; (8000bbc <ethernetif_update_config+0xa4>)
 8000bb6:	f001 f89f 	bl	8001cf8 <HAL_ETH_Stop>
 8000bba:	e7eb      	b.n	8000b94 <ethernetif_update_config+0x7c>
 8000bbc:	20006804 	.word	0x20006804

08000bc0 <sys_now>:
  */
}

u32_t sys_now(void)
{
  return HAL_GetTick();
 8000bc0:	f000 bc74 	b.w	80014ac <HAL_GetTick>

08000bc4 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 8000bc4:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 2, WEBSERVER_THREAD_PRIO);
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	4905      	ldr	r1, [pc, #20]	; (8000be0 <http_server_socket_init+0x1c>)
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <http_server_socket_init+0x20>)
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f00d f8b2 	bl	800dd3c <sys_thread_new>
}
 8000bd8:	b003      	add	sp, #12
 8000bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bde:	bf00      	nop
 8000be0:	08000d49 	.word	0x08000d49
 8000be4:	0801a509 	.word	0x0801a509

08000be8 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 8000be8:	b530      	push	{r4, r5, lr}
  portCHAR pagehits[10];

  memset(PAGE_BODY, 0,512);
 8000bea:	4c1d      	ldr	r4, [pc, #116]	; (8000c60 <DynWebPage+0x78>)
{
 8000bec:	b085      	sub	sp, #20
 8000bee:	4605      	mov	r5, r0
  memset(PAGE_BODY, 0,512);
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f00d f944 	bl	800de84 <memset>

  /* Update the hit count */
  nPageHits++;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <DynWebPage+0x7c>)
  sprintf( pagehits, "%d", (int)nPageHits );
 8000bfe:	491a      	ldr	r1, [pc, #104]	; (8000c68 <DynWebPage+0x80>)
  nPageHits++;
 8000c00:	681a      	ldr	r2, [r3, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8000c02:	a801      	add	r0, sp, #4
  nPageHits++;
 8000c04:	3201      	adds	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 8000c08:	f00d f99c 	bl	800df44 <siprintf>
  strcat(PAGE_BODY, pagehits);
 8000c0c:	a901      	add	r1, sp, #4
 8000c0e:	4620      	mov	r0, r4
 8000c10:	f00d f9b8 	bl	800df84 <strcat>
  strcat((char *) PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8000c14:	4915      	ldr	r1, [pc, #84]	; (8000c6c <DynWebPage+0x84>)
 8000c16:	4620      	mov	r0, r4
 8000c18:	f00d f9b4 	bl	800df84 <strcat>
  strcat((char *) PAGE_BODY, "<br>---------------------------------------------<br>"); 
 8000c1c:	4914      	ldr	r1, [pc, #80]	; (8000c70 <DynWebPage+0x88>)
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f00d f9b0 	bl	800df84 <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8000c24:	4620      	mov	r0, r4
 8000c26:	f7ff fadd 	bl	80001e4 <strlen>
 8000c2a:	4420      	add	r0, r4
 8000c2c:	f003 fa7a 	bl	8004124 <osThreadList>
  strcat((char *) PAGE_BODY, "<br><br>---------------------------------------------"); 
 8000c30:	4910      	ldr	r1, [pc, #64]	; (8000c74 <DynWebPage+0x8c>)
 8000c32:	4620      	mov	r0, r4
 8000c34:	f00d f9a6 	bl	800df84 <strcat>
  strcat((char *) PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000c38:	490f      	ldr	r1, [pc, #60]	; (8000c78 <DynWebPage+0x90>)
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f00d f9a2 	bl	800df84 <strcat>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8000c40:	490e      	ldr	r1, [pc, #56]	; (8000c7c <DynWebPage+0x94>)
 8000c42:	f240 623b 	movw	r2, #1595	; 0x63b
 8000c46:	4628      	mov	r0, r5
 8000c48:	f005 fdb2 	bl	80067b0 <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fac9 	bl	80001e4 <strlen>
 8000c52:	4621      	mov	r1, r4
 8000c54:	4602      	mov	r2, r0
 8000c56:	4628      	mov	r0, r5
 8000c58:	f005 fdaa 	bl	80067b0 <lwip_write>
}
 8000c5c:	b005      	add	sp, #20
 8000c5e:	bd30      	pop	{r4, r5, pc}
 8000c60:	2000a514 	.word	0x2000a514
 8000c64:	200000cc 	.word	0x200000cc
 8000c68:	0801a50e 	.word	0x0801a50e
 8000c6c:	0801a511 	.word	0x0801a511
 8000c70:	0801a545 	.word	0x0801a545
 8000c74:	0801a57b 	.word	0x0801a57b
 8000c78:	0801a5b1 	.word	0x0801a5b1
 8000c7c:	0800f29c 	.word	0x0800f29c

08000c80 <http_server_serve>:
{
 8000c80:	b510      	push	{r4, lr}
 8000c82:	f5ad 6dbe 	sub.w	sp, sp, #1520	; 0x5f0
  ret = read(conn, recv_buffer, buflen); 
 8000c86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c8a:	a905      	add	r1, sp, #20
{
 8000c8c:	4604      	mov	r4, r0
  ret = read(conn, recv_buffer, buflen); 
 8000c8e:	f005 fca1 	bl	80065d4 <lwip_read>
  if(ret < 0) return;
 8000c92:	2800      	cmp	r0, #0
 8000c94:	db2e      	blt.n	8000cf4 <http_server_serve+0x74>
  if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/ST.gif",27)==0)
 8000c96:	4921      	ldr	r1, [pc, #132]	; (8000d1c <http_server_serve+0x9c>)
 8000c98:	221b      	movs	r2, #27
 8000c9a:	a805      	add	r0, sp, #20
 8000c9c:	f00d f989 	bl	800dfb2 <strncmp>
 8000ca0:	b960      	cbnz	r0, 8000cbc <http_server_serve+0x3c>
    fs_open(&file, "/STM32F4xx_files/ST.gif"); 
 8000ca2:	491f      	ldr	r1, [pc, #124]	; (8000d20 <http_server_serve+0xa0>)
    fs_open(&file, "/404.html");
 8000ca4:	4668      	mov	r0, sp
 8000ca6:	f00d f86b 	bl	800dd80 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8000caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8000cae:	4620      	mov	r0, r4
 8000cb0:	f005 fd7e 	bl	80067b0 <lwip_write>
    fs_close(&file);
 8000cb4:	4668      	mov	r0, sp
 8000cb6:	f00d f883 	bl	800ddc0 <fs_close>
 8000cba:	e018      	b.n	8000cee <http_server_serve+0x6e>
  else if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/stm32.jpg",30)==0)
 8000cbc:	4919      	ldr	r1, [pc, #100]	; (8000d24 <http_server_serve+0xa4>)
 8000cbe:	221e      	movs	r2, #30
 8000cc0:	a805      	add	r0, sp, #20
 8000cc2:	f00d f976 	bl	800dfb2 <strncmp>
 8000cc6:	b908      	cbnz	r0, 8000ccc <http_server_serve+0x4c>
    fs_open(&file, "/STM32F4xx_files/stm32.jpg"); 
 8000cc8:	4917      	ldr	r1, [pc, #92]	; (8000d28 <http_server_serve+0xa8>)
 8000cca:	e7eb      	b.n	8000ca4 <http_server_serve+0x24>
  else if (strncmp((char *)recv_buffer,"GET /STM32F4xx_files/logo.jpg", 29) == 0)
 8000ccc:	4917      	ldr	r1, [pc, #92]	; (8000d2c <http_server_serve+0xac>)
 8000cce:	221d      	movs	r2, #29
 8000cd0:	a805      	add	r0, sp, #20
 8000cd2:	f00d f96e 	bl	800dfb2 <strncmp>
 8000cd6:	b908      	cbnz	r0, 8000cdc <http_server_serve+0x5c>
    fs_open(&file, "/STM32F4xx_files/logo.jpg"); 
 8000cd8:	4915      	ldr	r1, [pc, #84]	; (8000d30 <http_server_serve+0xb0>)
 8000cda:	e7e3      	b.n	8000ca4 <http_server_serve+0x24>
  else if(strncmp((char *)recv_buffer, "GET /STM32F4xxTASKS.html", 24) == 0)
 8000cdc:	4915      	ldr	r1, [pc, #84]	; (8000d34 <http_server_serve+0xb4>)
 8000cde:	2218      	movs	r2, #24
 8000ce0:	a805      	add	r0, sp, #20
 8000ce2:	f00d f966 	bl	800dfb2 <strncmp>
 8000ce6:	b940      	cbnz	r0, 8000cfa <http_server_serve+0x7a>
    DynWebPage(conn);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f7ff ff7d 	bl	8000be8 <DynWebPage>
  close(conn);
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f005 fbb8 	bl	8006464 <lwip_close>
}
 8000cf4:	f50d 6dbe 	add.w	sp, sp, #1520	; 0x5f0
 8000cf8:	bd10      	pop	{r4, pc}
  else if((strncmp((char *)recv_buffer, "GET /STM32F4xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 8000cfa:	490f      	ldr	r1, [pc, #60]	; (8000d38 <http_server_serve+0xb8>)
 8000cfc:	2213      	movs	r2, #19
 8000cfe:	a805      	add	r0, sp, #20
 8000d00:	f00d f957 	bl	800dfb2 <strncmp>
 8000d04:	b128      	cbz	r0, 8000d12 <http_server_serve+0x92>
 8000d06:	490d      	ldr	r1, [pc, #52]	; (8000d3c <http_server_serve+0xbc>)
 8000d08:	2206      	movs	r2, #6
 8000d0a:	a805      	add	r0, sp, #20
 8000d0c:	f00d f951 	bl	800dfb2 <strncmp>
 8000d10:	b908      	cbnz	r0, 8000d16 <http_server_serve+0x96>
    fs_open(&file, "/STM32F4xx.html"); 
 8000d12:	490b      	ldr	r1, [pc, #44]	; (8000d40 <http_server_serve+0xc0>)
 8000d14:	e7c6      	b.n	8000ca4 <http_server_serve+0x24>
    fs_open(&file, "/404.html");
 8000d16:	490b      	ldr	r1, [pc, #44]	; (8000d44 <http_server_serve+0xc4>)
 8000d18:	e7c4      	b.n	8000ca4 <http_server_serve+0x24>
 8000d1a:	bf00      	nop
 8000d1c:	0801a5ec 	.word	0x0801a5ec
 8000d20:	0801a5f0 	.word	0x0801a5f0
 8000d24:	0801a608 	.word	0x0801a608
 8000d28:	0801a60c 	.word	0x0801a60c
 8000d2c:	0801a627 	.word	0x0801a627
 8000d30:	0801a62b 	.word	0x0801a62b
 8000d34:	0801a645 	.word	0x0801a645
 8000d38:	0801a65e 	.word	0x0801a65e
 8000d3c:	0801a672 	.word	0x0801a672
 8000d40:	0801a662 	.word	0x0801a662
 8000d44:	0801a679 	.word	0x0801a679

08000d48 <http_server_socket_thread>:
{
 8000d48:	b510      	push	{r4, lr}
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 8000d4a:	2200      	movs	r2, #0
{
 8000d4c:	b08a      	sub	sp, #40	; 0x28
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2002      	movs	r0, #2
 8000d52:	f005 fcf5 	bl	8006740 <lwip_socket>
 8000d56:	1e04      	subs	r4, r0, #0
 8000d58:	db1e      	blt.n	8000d98 <http_server_socket_thread+0x50>
  address.sin_family = AF_INET;
 8000d5a:	2302      	movs	r3, #2
  address.sin_port = htons(80);
 8000d5c:	2050      	movs	r0, #80	; 0x50
  address.sin_family = AF_INET;
 8000d5e:	f88d 3009 	strb.w	r3, [sp, #9]
  address.sin_port = htons(80);
 8000d62:	f008 f8c9 	bl	8008ef8 <lwip_htons>
  address.sin_addr.s_addr = INADDR_ANY;
 8000d66:	2300      	movs	r3, #0
  address.sin_port = htons(80);
 8000d68:	f8ad 000a 	strh.w	r0, [sp, #10]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	a902      	add	r1, sp, #8
 8000d70:	4620      	mov	r0, r4
  address.sin_addr.s_addr = INADDR_ANY;
 8000d72:	9303      	str	r3, [sp, #12]
  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 8000d74:	f005 fb40 	bl	80063f8 <lwip_bind>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	db0d      	blt.n	8000d98 <http_server_socket_thread+0x50>
  listen(sock, 5);
 8000d7c:	2105      	movs	r1, #5
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f005 fba8 	bl	80064d4 <lwip_listen>
  size = sizeof(remotehost);
 8000d84:	2310      	movs	r3, #16
 8000d86:	9301      	str	r3, [sp, #4]
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 8000d88:	aa01      	add	r2, sp, #4
 8000d8a:	a906      	add	r1, sp, #24
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f005 fa8d 	bl	80062ac <lwip_accept>
    http_server_serve(newconn);
 8000d92:	f7ff ff75 	bl	8000c80 <http_server_serve>
  while (1) 
 8000d96:	e7f7      	b.n	8000d88 <http_server_socket_thread+0x40>
}
 8000d98:	b00a      	add	sp, #40	; 0x28
 8000d9a:	bd10      	pop	{r4, pc}

08000d9c <ToggleLed4>:
  * @brief  Toggle LED4 thread
  * @param  pvParameters not used
  * @retval None
  */
static void ToggleLed4(void const * argument)
{
 8000d9c:	b508      	push	{r3, lr}
  for( ;; )
  {
    /* Toggle LED4 each 250ms */
    BSP_LED_Toggle(LED4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f000 fa60 	bl	8001264 <BSP_LED_Toggle>
    osDelay(250);
 8000da4:	20fa      	movs	r0, #250	; 0xfa
 8000da6:	f003 f8ae 	bl	8003f06 <osDelay>
  for( ;; )
 8000daa:	e7f8      	b.n	8000d9e <ToggleLed4+0x2>

08000dac <StartThread>:
{
 8000dac:	b500      	push	{lr}
  BSP_LED_Init(LED1);
 8000dae:	2000      	movs	r0, #0
{
 8000db0:	b08d      	sub	sp, #52	; 0x34
  BSP_LED_Init(LED1);
 8000db2:	f000 f9e7 	bl	8001184 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 f9e4 	bl	8001184 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f9e1 	bl	8001184 <BSP_LED_Init>
  tcpip_init(NULL, NULL);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	f005 fda5 	bl	8006914 <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000dca:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <StartThread+0x94>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000dcc:	4c1d      	ldr	r4, [pc, #116]	; (8000e44 <StartThread+0x98>)
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000dce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000dd6:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 8000dda:	33c1      	adds	r3, #193	; 0xc1
 8000ddc:	9307      	str	r3, [sp, #28]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <StartThread+0x9c>)
 8000de0:	9302      	str	r3, [sp, #8]
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <StartThread+0xa0>)
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	2300      	movs	r3, #0
 8000de8:	a905      	add	r1, sp, #20
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	aa06      	add	r2, sp, #24
 8000dee:	ab07      	add	r3, sp, #28
 8000df0:	4620      	mov	r0, r4
 8000df2:	f008 fc55 	bl	80096a0 <netif_add>
  netif_set_default(&gnetif);
 8000df6:	4620      	mov	r0, r4
 8000df8:	f008 fcea 	bl	80097d0 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8000dfc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000e00:	0759      	lsls	r1, r3, #29
    netif_set_up(&gnetif);
 8000e02:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8000e04:	d518      	bpl.n	8000e38 <StartThread+0x8c>
    netif_set_up(&gnetif);
 8000e06:	f008 fce9 	bl	80097dc <netif_set_up>
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8000e0a:	4911      	ldr	r1, [pc, #68]	; (8000e50 <StartThread+0xa4>)
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <StartThread+0x98>)
  osThreadDef(LED4, ToggleLed4, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8000e0e:	4d11      	ldr	r5, [pc, #68]	; (8000e54 <StartThread+0xa8>)
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8000e10:	f008 fd1a 	bl	8009848 <netif_set_link_callback>
  http_server_socket_init();
 8000e14:	f7ff fed6 	bl	8000bc4 <http_server_socket_init>
  User_notification(&gnetif);
 8000e18:	480a      	ldr	r0, [pc, #40]	; (8000e44 <StartThread+0x98>)
 8000e1a:	f7ff fc3d 	bl	8000698 <User_notification>
  osThreadDef(LED4, ToggleLed4, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	ac07      	add	r4, sp, #28
 8000e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e24:	682b      	ldr	r3, [r5, #0]
 8000e26:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(LED4), NULL);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	a807      	add	r0, sp, #28
 8000e2c:	f003 f84e 	bl	8003ecc <osThreadCreate>
    osThreadTerminate(NULL);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f003 f863 	bl	8003efc <osThreadTerminate>
  for( ;; )
 8000e36:	e7fb      	b.n	8000e30 <StartThread+0x84>
    netif_set_down(&gnetif);
 8000e38:	f008 fcea 	bl	8009810 <netif_set_down>
 8000e3c:	e7e5      	b.n	8000e0a <StartThread+0x5e>
 8000e3e:	bf00      	nop
 8000e40:	6e01a8c0 	.word	0x6e01a8c0
 8000e44:	2000a71c 	.word	0x2000a71c
 8000e48:	080068d9 	.word	0x080068d9
 8000e4c:	08000a05 	.word	0x08000a05
 8000e50:	08000b19 	.word	0x08000b19
 8000e54:	0800f8d8 	.word	0x0800f8d8

08000e58 <main>:
{
 8000e58:	b500      	push	{lr}
 8000e5a:	b095      	sub	sp, #84	; 0x54
  HAL_Init();  
 8000e5c:	f000 fb04 	bl	8001468 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2400      	movs	r4, #0
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <main+0xb0>)
 8000e64:	9401      	str	r4, [sp, #4]
 8000e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <main+0xb4>)
 8000e7a:	9402      	str	r4, [sp, #8]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	9302      	str	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e8c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e98:	2502      	movs	r5, #2
 8000e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e9e:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea2:	2119      	movs	r1, #25
 8000ea4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ea8:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000eac:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eae:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eb2:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000eb4:	f001 f8ce 	bl	8002054 <HAL_RCC_OscConfig>
 
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000eb8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eba:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000ebe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000eca:	2105      	movs	r1, #5
 8000ecc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000ed0:	f001 fae6 	bl	80024a0 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8000ed4:	f000 fb04 	bl	80014e0 <HAL_GetREVID>
 8000ed8:	f241 0301 	movw	r3, #4097	; 0x1001
 8000edc:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ede:	bf08      	it	eq
 8000ee0:	4a0b      	ldreq	r2, [pc, #44]	; (8000f10 <main+0xb8>)
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000ee2:	4d0c      	ldr	r5, [pc, #48]	; (8000f14 <main+0xbc>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	bf02      	ittt	eq
 8000ee6:	6813      	ldreq	r3, [r2, #0]
 8000ee8:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8000eec:	6013      	streq	r3, [r2, #0]
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8000eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef0:	ac08      	add	r4, sp, #32
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	a808      	add	r0, sp, #32
 8000efc:	f002 ffe6 	bl	8003ecc <osThreadCreate>
  osKernelStart();
 8000f00:	f002 ffd8 	bl	8003eb4 <osKernelStart>
  for( ;; );
 8000f04:	e7fe      	b.n	8000f04 <main+0xac>
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	40023c00 	.word	0x40023c00
 8000f14:	0800f8ec 	.word	0x0800f8ec

08000f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	b088      	sub	sp, #32
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f000 faf5 	bl	8001510 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f26:	2036      	movs	r0, #54	; 0x36
 8000f28:	f000 fb24 	bl	8001574 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_InitTick+0x78>)
 8000f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f34:	f042 0210 	orr.w	r2, r2, #16
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f42:	a901      	add	r1, sp, #4
 8000f44:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f46:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f48:	f001 fb5c 	bl	8002604 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000f4c:	9b06      	ldr	r3, [sp, #24]
 8000f4e:	b9cb      	cbnz	r3, 8000f84 <HAL_InitTick+0x6c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f50:	f001 fb48 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000f54:	4c0f      	ldr	r4, [pc, #60]	; (8000f94 <HAL_InitTick+0x7c>)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_InitTick+0x80>)
 8000f58:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000f5a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f5e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_InitTick+0x84>)
 8000f62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f66:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 8000f68:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000f6a:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000f6c:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000f6e:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	60a3      	str	r3, [r4, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	61a3      	str	r3, [r4, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000f74:	f001 fcac 	bl	80028d0 <HAL_TIM_Base_Init>
 8000f78:	b940      	cbnz	r0, 8000f8c <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f001 fb62 	bl	8002644 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000f80:	b008      	add	sp, #32
 8000f82:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f84:	f001 fb2e 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8000f88:	0040      	lsls	r0, r0, #1
 8000f8a:	e7e3      	b.n	8000f54 <HAL_InitTick+0x3c>
  return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e7f7      	b.n	8000f80 <HAL_InitTick+0x68>
 8000f90:	40023800 	.word	0x40023800
 8000f94:	2000a754 	.word	0x2000a754
 8000f98:	40001000 	.word	0x40001000
 8000f9c:	000f4240 	.word	0x000f4240

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8000fa0:	f000 ba78 	b.w	8001494 <HAL_IncTick>

08000fa4 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000fa4:	4801      	ldr	r0, [pc, #4]	; (8000fac <TIM6_DAC_IRQHandler+0x8>)
 8000fa6:	f001 bb8b 	b.w	80026c0 <HAL_TIM_IRQHandler>
 8000faa:	bf00      	nop
 8000fac:	2000a754 	.word	0x2000a754

08000fb0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000fb0:	4770      	bx	lr

08000fb2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler>

08000fb4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler>

08000fb6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler>

08000fb8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler>

08000fba <DebugMon_Handler>:
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000fbc:	f003 b8a8 	b.w	8004110 <osSystickHandler>

08000fc0 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <ETH_IRQHandler+0x8>)
 8000fc2:	f000 bcb6 	b.w	8001932 <HAL_ETH_IRQHandler>
 8000fc6:	bf00      	nop
 8000fc8:	20006804 	.word	0x20006804

08000fcc <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8000fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8000fd0:	4d1c      	ldr	r5, [pc, #112]	; (8001044 <LCD_LOG_UpdateDisplay+0x78>)
 8000fd2:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <LCD_LOG_UpdateDisplay+0x7c>)
 8000fd4:	882b      	ldrh	r3, [r5, #0]
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	4f1c      	ldr	r7, [pc, #112]	; (800104c <LCD_LOG_UpdateDisplay+0x80>)
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	d811      	bhi.n	8001002 <LCD_LOG_UpdateDisplay+0x36>
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d311      	bcc.n	8001006 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8000fe2:	2484      	movs	r4, #132	; 0x84
 8000fe4:	fb04 7303 	mla	r3, r4, r3, r7
 8000fe8:	f8b3 0080 	ldrh.w	r0, [r3, #128]	; 0x80
 8000fec:	f000 f94e 	bl	800128c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8000ff0:	8829      	ldrh	r1, [r5, #0]
 8000ff2:	1d08      	adds	r0, r1, #4
 8000ff4:	b280      	uxth	r0, r0
 8000ff6:	fb04 7101 	mla	r1, r4, r1, r7
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8000ffa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8000ffe:	f000 b9fd 	b.w	80013fc <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001002:	4293      	cmp	r3, r2
 8001004:	d201      	bcs.n	800100a <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001006:	3375      	adds	r3, #117	; 0x75
 8001008:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800100a:	3b10      	subs	r3, #16
 800100c:	b29c      	uxth	r4, r3
 800100e:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001010:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001014:	f04f 0984 	mov.w	r9, #132	; 0x84
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001018:	19a1      	adds	r1, r4, r6
 800101a:	fbb1 f5f8 	udiv	r5, r1, r8
 800101e:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001022:	fb09 7505 	mla	r5, r9, r5, r7
 8001026:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
 800102a:	f000 f92f 	bl	800128c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800102e:	1d30      	adds	r0, r6, #4
 8001030:	4629      	mov	r1, r5
 8001032:	b280      	uxth	r0, r0
 8001034:	3601      	adds	r6, #1
 8001036:	f000 f9e1 	bl	80013fc <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800103a:	2e11      	cmp	r6, #17
 800103c:	d1ec      	bne.n	8001018 <LCD_LOG_UpdateDisplay+0x4c>
}
 800103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001042:	bf00      	nop
 8001044:	2000a7a0 	.word	0x2000a7a0
 8001048:	2000a7a8 	.word	0x2000a7a8
 800104c:	2000a7ac 	.word	0x2000a7ac

08001050 <__io_putchar>:
{
 8001050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8001056:	f000 f91f 	bl	8001298 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 800105a:	4b3e      	ldr	r3, [pc, #248]	; (8001154 <__io_putchar+0x104>)
 800105c:	781b      	ldrb	r3, [r3, #0]
  sFONT *cFont = BSP_LCD_GetFont();
 800105e:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 8001060:	bb43      	cbnz	r3, 80010b4 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 8001062:	4a3d      	ldr	r2, [pc, #244]	; (8001158 <__io_putchar+0x108>)
 8001064:	4c3d      	ldr	r4, [pc, #244]	; (800115c <__io_putchar+0x10c>)
 8001066:	7811      	ldrb	r1, [r2, #0]
 8001068:	2901      	cmp	r1, #1
 800106a:	d10b      	bne.n	8001084 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800106c:	493c      	ldr	r1, [pc, #240]	; (8001160 <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 800106e:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001070:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 8001072:	4a3c      	ldr	r2, [pc, #240]	; (8001164 <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001074:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001076:	493c      	ldr	r1, [pc, #240]	; (8001168 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 8001078:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800107a:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 800107c:	4a3b      	ldr	r2, [pc, #236]	; (800116c <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800107e:	493c      	ldr	r1, [pc, #240]	; (8001170 <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 8001080:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001082:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001084:	4f3b      	ldr	r7, [pc, #236]	; (8001174 <__io_putchar+0x124>)
 8001086:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001180 <__io_putchar+0x130>
 800108a:	883e      	ldrh	r6, [r7, #0]
 800108c:	f000 f8f6 	bl	800127c <BSP_LCD_GetXSize>
 8001090:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001094:	fbb0 f0f3 	udiv	r0, r0, r3
 8001098:	4286      	cmp	r6, r0
 800109a:	463e      	mov	r6, r7
 800109c:	d20d      	bcs.n	80010ba <__io_putchar+0x6a>
 800109e:	2d0a      	cmp	r5, #10
 80010a0:	d00b      	beq.n	80010ba <__io_putchar+0x6a>
 80010a2:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80010a4:	8823      	ldrh	r3, [r4, #0]
 80010a6:	1c51      	adds	r1, r2, #1
 80010a8:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80010aa:	2184      	movs	r1, #132	; 0x84
 80010ac:	fb01 9903 	mla	r9, r1, r3, r9
 80010b0:	f809 5002 	strb.w	r5, [r9, r2]
}
 80010b4:	4628      	mov	r0, r5
 80010b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80010ba:	4f2d      	ldr	r7, [pc, #180]	; (8001170 <__io_putchar+0x120>)
 80010bc:	8822      	ldrh	r2, [r4, #0]
 80010be:	883b      	ldrh	r3, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d809      	bhi.n	80010d8 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 80010c4:	4a2c      	ldr	r2, [pc, #176]	; (8001178 <__io_putchar+0x128>)
 80010c6:	7811      	ldrb	r1, [r2, #0]
 80010c8:	2900      	cmp	r1, #0
 80010ca:	d135      	bne.n	8001138 <__io_putchar+0xe8>
          LCD_CacheBuffer_yptr_top++;
 80010cc:	3301      	adds	r3, #1
 80010ce:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 80010d0:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 80010d2:	bf14      	ite	ne
 80010d4:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 80010d6:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80010d8:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80010dc:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80010e0:	f000 f8cc 	bl	800127c <BSP_LCD_GetXSize>
 80010e4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80010e8:	fbb0 f0f2 	udiv	r0, r0, r2
 80010ec:	4550      	cmp	r0, sl
 80010ee:	f04f 0320 	mov.w	r3, #32
 80010f2:	d824      	bhi.n	800113e <__io_putchar+0xee>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80010f4:	8823      	ldrh	r3, [r4, #0]
 80010f6:	2284      	movs	r2, #132	; 0x84
 80010f8:	fb02 9303 	mla	r3, r2, r3, r9
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <__io_putchar+0x12c>)
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_CacheBuffer_xptr = 0;
 8001104:	f04f 0800 	mov.w	r8, #0
 8001108:	f8a6 8000 	strh.w	r8, [r6]
      LCD_LOG_UpdateDisplay (); 
 800110c:	f7ff ff5e 	bl	8000fcc <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8001110:	8823      	ldrh	r3, [r4, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001116:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001118:	bf09      	itett	eq
 800111a:	4a17      	ldreq	r2, [pc, #92]	; (8001178 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 800111c:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 800111e:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_bottom = 0;
 8001120:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 8001124:	bf04      	itt	eq
 8001126:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001128:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 800112a:	2d0a      	cmp	r5, #10
 800112c:	d0c2      	beq.n	80010b4 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800112e:	8832      	ldrh	r2, [r6, #0]
 8001130:	8823      	ldrh	r3, [r4, #0]
 8001132:	1c51      	adds	r1, r2, #1
 8001134:	8031      	strh	r1, [r6, #0]
 8001136:	e7b8      	b.n	80010aa <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	7013      	strb	r3, [r2, #0]
 800113c:	e7cc      	b.n	80010d8 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800113e:	8822      	ldrh	r2, [r4, #0]
 8001140:	8831      	ldrh	r1, [r6, #0]
 8001142:	fb0b 9202 	mla	r2, fp, r2, r9
 8001146:	1c48      	adds	r0, r1, #1
 8001148:	5453      	strb	r3, [r2, r1]
 800114a:	8030      	strh	r0, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800114c:	f10a 0a01 	add.w	sl, sl, #1
 8001150:	e7c6      	b.n	80010e0 <__io_putchar+0x90>
 8001152:	bf00      	nop
 8001154:	2000a7a5 	.word	0x2000a7a5
 8001158:	2000a7aa 	.word	0x2000a7aa
 800115c:	2000a7a0 	.word	0x2000a7a0
 8001160:	2000a79c 	.word	0x2000a79c
 8001164:	2000a7a6 	.word	0x2000a7a6
 8001168:	2000a79e 	.word	0x2000a79e
 800116c:	2000e404 	.word	0x2000e404
 8001170:	2000a7a8 	.word	0x2000a7a8
 8001174:	2000a7a2 	.word	0x2000a7a2
 8001178:	2000a7a4 	.word	0x2000a7a4
 800117c:	2000e400 	.word	0x2000e400
 8001180:	2000a7ac 	.word	0x2000a7ac

08001184 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001184:	b500      	push	{lr}
 8001186:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001188:	b9e0      	cbnz	r0, 80011c4 <BSP_LED_Init+0x40>
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <BSP_LED_Init+0x9c>)
 800118c:	9001      	str	r0, [sp, #4]
 800118e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001190:	f042 0208 	orr.w	r2, r2, #8
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <BSP_LED_Init+0xa0>)
 80011a2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80011a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	e9cd 3306 	strd	r3, r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80011ae:	2302      	movs	r3, #2
 80011b0:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <BSP_LED_Init+0xa4>)
 80011b4:	a905      	add	r1, sp, #20
 80011b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80011ba:	f000 fe63 	bl	8001e84 <HAL_GPIO_Init>
}
 80011be:	b00b      	add	sp, #44	; 0x2c
 80011c0:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 80011c4:	2801      	cmp	r0, #1
 80011c6:	d10c      	bne.n	80011e2 <BSP_LED_Init+0x5e>
 80011c8:	2300      	movs	r3, #0
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <BSP_LED_Init+0x9c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	f042 0208 	orr.w	r2, r2, #8
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	9b02      	ldr	r3, [sp, #8]
 80011e0:	e7de      	b.n	80011a0 <BSP_LED_Init+0x1c>
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d10c      	bne.n	8001200 <BSP_LED_Init+0x7c>
 80011e6:	2300      	movs	r3, #0
 80011e8:	9303      	str	r3, [sp, #12]
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <BSP_LED_Init+0x9c>)
 80011ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011ee:	f042 0208 	orr.w	r2, r2, #8
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	9303      	str	r3, [sp, #12]
 80011fc:	9b03      	ldr	r3, [sp, #12]
 80011fe:	e7cf      	b.n	80011a0 <BSP_LED_Init+0x1c>
 8001200:	2803      	cmp	r0, #3
 8001202:	d1cd      	bne.n	80011a0 <BSP_LED_Init+0x1c>
 8001204:	2300      	movs	r3, #0
 8001206:	9304      	str	r3, [sp, #16]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <BSP_LED_Init+0x9c>)
 800120a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800120c:	f042 0208 	orr.w	r2, r2, #8
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	9304      	str	r3, [sp, #16]
 800121a:	9b04      	ldr	r3, [sp, #16]
 800121c:	e7c0      	b.n	80011a0 <BSP_LED_Init+0x1c>
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	0800f900 	.word	0x0800f900
 8001228:	20000000 	.word	0x20000000

0800122c <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <BSP_LED_On+0x14>)
 800122e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <BSP_LED_On+0x18>)
 8001234:	2201      	movs	r2, #1
 8001236:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800123a:	f000 befd 	b.w	8002038 <HAL_GPIO_WritePin>
 800123e:	bf00      	nop
 8001240:	0800f900 	.word	0x0800f900
 8001244:	20000000 	.word	0x20000000

08001248 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <BSP_LED_Off+0x14>)
 800124a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <BSP_LED_Off+0x18>)
 8001250:	2200      	movs	r2, #0
 8001252:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001256:	f000 beef 	b.w	8002038 <HAL_GPIO_WritePin>
 800125a:	bf00      	nop
 800125c:	0800f900 	.word	0x0800f900
 8001260:	20000000 	.word	0x20000000

08001264 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <BSP_LED_Toggle+0x10>)
 8001266:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800126a:	4b03      	ldr	r3, [pc, #12]	; (8001278 <BSP_LED_Toggle+0x14>)
 800126c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001270:	f000 bee7 	b.w	8002042 <HAL_GPIO_TogglePin>
 8001274:	0800f900 	.word	0x0800f900
 8001278:	20000000 	.word	0x20000000

0800127c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800127c:	b508      	push	{r3, lr}
  return(lcd_drv->GetLcdPixelWidth());
 800127e:	4b02      	ldr	r3, [pc, #8]	; (8001288 <BSP_LCD_GetXSize+0xc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	4798      	blx	r3
}
 8001286:	bd08      	pop	{r3, pc}
 8001288:	200000d0 	.word	0x200000d0

0800128c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 800128c:	4b01      	ldr	r3, [pc, #4]	; (8001294 <BSP_LCD_SetTextColor+0x8>)
 800128e:	6018      	str	r0, [r3, #0]
}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000e408 	.word	0x2000e408

08001298 <BSP_LCD_GetFont>:
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp.pFont;
}
 8001298:	4b01      	ldr	r3, [pc, #4]	; (80012a0 <BSP_LCD_GetFont+0x8>)
 800129a:	6898      	ldr	r0, [r3, #8]
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000e408 	.word	0x2000e408

080012a4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(lcd_drv->WritePixel != NULL)
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <BSP_LCD_DrawPixel+0xc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	b103      	cbz	r3, 80012ae <BSP_LCD_DrawPixel+0xa>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80012ac:	4718      	bx	r3
  }
}
 80012ae:	4770      	bx	lr
 80012b0:	200000d0 	.word	0x200000d0

080012b4 <BSP_LCD_DisplayChar>:
{
 80012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <BSP_LCD_DisplayChar+0xa8>)
{
 80012ba:	b085      	sub	sp, #20
 80012bc:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80012c0:	6899      	ldr	r1, [r3, #8]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80012c2:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 80012c6:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80012ca:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80012ce:	f10b 0607 	add.w	r6, fp, #7
 80012d2:	680a      	ldr	r2, [r1, #0]
 80012d4:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80012d6:	fb0a f505 	mul.w	r5, sl, r5
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 80012da:	ebcb 09c6 	rsb	r9, fp, r6, lsl #3
  
  for(i = 0; i < height; i++)
 80012de:	fb06 2505 	mla	r5, r6, r5, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 80012e2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80012e6:	fa52 f389 	uxtab	r3, r2, r9
  for(i = 0; i < height; i++)
 80012ea:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 80012f2:	45d0      	cmp	r8, sl
 80012f4:	eb03 0108 	add.w	r1, r3, r8
 80012f8:	b289      	uxth	r1, r1
 80012fa:	d302      	bcc.n	8001302 <BSP_LCD_DisplayChar+0x4e>
}
 80012fc:	b005      	add	sp, #20
 80012fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001302:	2e01      	cmp	r6, #1
 8001304:	782c      	ldrb	r4, [r5, #0]
 8001306:	d004      	beq.n	8001312 <BSP_LCD_DisplayChar+0x5e>
 8001308:	2e02      	cmp	r6, #2
 800130a:	d10b      	bne.n	8001324 <BSP_LCD_DisplayChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 800130c:	882c      	ldrh	r4, [r5, #0]
 800130e:	ba64      	rev16	r4, r4
 8001310:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001312:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800135c <BSP_LCD_DisplayChar+0xa8>
 8001316:	2700      	movs	r7, #0
 8001318:	45bb      	cmp	fp, r7
 800131a:	d80a      	bhi.n	8001332 <BSP_LCD_DisplayChar+0x7e>
  for(i = 0; i < height; i++)
 800131c:	f108 0801 	add.w	r8, r8, #1
 8001320:	4435      	add	r5, r6
 8001322:	e7e5      	b.n	80012f0 <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001324:	786a      	ldrb	r2, [r5, #1]
 8001326:	0424      	lsls	r4, r4, #16
 8001328:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800132c:	78aa      	ldrb	r2, [r5, #2]
 800132e:	4314      	orrs	r4, r2
      break;
 8001330:	e7ef      	b.n	8001312 <BSP_LCD_DisplayChar+0x5e>
      if(line & (1 << (width- j + offset- 1))) 
 8001332:	9b00      	ldr	r3, [sp, #0]
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001334:	9103      	str	r1, [sp, #12]
 8001336:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001338:	9b02      	ldr	r3, [sp, #8]
 800133a:	2201      	movs	r2, #1
 800133c:	eba3 0c07 	sub.w	ip, r3, r7
 8001340:	fa02 f20c 	lsl.w	r2, r2, ip
 8001344:	4222      	tst	r2, r4
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8001346:	bf14      	ite	ne
 8001348:	f8b9 2000 	ldrhne.w	r2, [r9]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800134c:	f8b9 2004 	ldrheq.w	r2, [r9, #4]
 8001350:	b280      	uxth	r0, r0
 8001352:	f7ff ffa7 	bl	80012a4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001356:	3701      	adds	r7, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001358:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 800135a:	e7dd      	b.n	8001318 <BSP_LCD_DisplayChar+0x64>
 800135c:	2000e408 	.word	0x2000e408

08001360 <BSP_LCD_DisplayStringAt>:
{
 8001360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001364:	4699      	mov	r9, r3
 8001366:	4606      	mov	r6, r0
 8001368:	460f      	mov	r7, r1
 800136a:	4615      	mov	r5, r2
  uint8_t  *ptr = Text;
 800136c:	4613      	mov	r3, r2
 800136e:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001374:	2a00      	cmp	r2, #0
 8001376:	d1fa      	bne.n	800136e <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001378:	f7ff ff80 	bl	800127c <BSP_LCD_GetXSize>
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <BSP_LCD_DisplayStringAt+0x98>)
 800137e:	689a      	ldr	r2, [r3, #8]
  switch (Mode)
 8001380:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8001384:	8892      	ldrh	r2, [r2, #4]
 8001386:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 800138a:	4698      	mov	r8, r3
 800138c:	d017      	beq.n	80013be <BSP_LCD_DisplayStringAt+0x5e>
 800138e:	f1b9 0f02 	cmp.w	r9, #2
 8001392:	d01b      	beq.n	80013cc <BSP_LCD_DisplayStringAt+0x6c>
 8001394:	3d01      	subs	r5, #1
  uint8_t  *ptr = Text;
 8001396:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800139a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 800139e:	3c00      	subs	r4, #0
 80013a0:	bf18      	it	ne
 80013a2:	2401      	movne	r4, #1
 80013a4:	f7ff ff6a 	bl	800127c <BSP_LCD_GetXSize>
 80013a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	fb03 0019 	mls	r0, r3, r9, r0
 80013b2:	b280      	uxth	r0, r0
 80013b4:	4298      	cmp	r0, r3
 80013b6:	d300      	bcc.n	80013ba <BSP_LCD_DisplayStringAt+0x5a>
 80013b8:	b974      	cbnz	r4, 80013d8 <BSP_LCD_DisplayStringAt+0x78>
}
 80013ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80013be:	1b2c      	subs	r4, r5, r4
 80013c0:	4420      	add	r0, r4
 80013c2:	4350      	muls	r0, r2
 80013c4:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80013c8:	b286      	uxth	r6, r0
      break;
 80013ca:	e7e3      	b.n	8001394 <BSP_LCD_DisplayStringAt+0x34>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80013cc:	1b2c      	subs	r4, r5, r4
 80013ce:	4404      	add	r4, r0
 80013d0:	fb14 f402 	smulbb	r4, r4, r2
 80013d4:	1ba0      	subs	r0, r4, r6
 80013d6:	e7f7      	b.n	80013c8 <BSP_LCD_DisplayStringAt+0x68>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80013d8:	4630      	mov	r0, r6
 80013da:	782a      	ldrb	r2, [r5, #0]
 80013dc:	4639      	mov	r1, r7
 80013de:	f7ff ff69 	bl	80012b4 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 80013e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80013e6:	8898      	ldrh	r0, [r3, #4]
    i++;
 80013e8:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp.pFont->Width;
 80013ec:	4430      	add	r0, r6
 80013ee:	b286      	uxth	r6, r0
    i++;
 80013f0:	fa1f f989 	uxth.w	r9, r9
 80013f4:	e7d1      	b.n	800139a <BSP_LCD_DisplayStringAt+0x3a>
 80013f6:	bf00      	nop
 80013f8:	2000e408 	.word	0x2000e408

080013fc <BSP_LCD_DisplayStringAtLine>:
  return DrawProp.pFont;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <BSP_LCD_DisplayStringAtLine+0x18>)
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	88db      	ldrh	r3, [r3, #6]
 8001402:	fb13 f000 	smulbb	r0, r3, r0
{
 8001406:	460a      	mov	r2, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001408:	2303      	movs	r3, #3
 800140a:	b281      	uxth	r1, r0
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff bfa7 	b.w	8001360 <BSP_LCD_DisplayStringAt>
 8001412:	bf00      	nop
 8001414:	2000e408 	.word	0x2000e408

08001418 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	490f      	ldr	r1, [pc, #60]	; (8001458 <SystemInit+0x40>)
 800141a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800141e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <SystemInit+0x44>)
 8001428:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800142a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001432:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800143a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800143e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <SystemInit+0x48>)
 8001442:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800144a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800144c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800144e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001452:	608b      	str	r3, [r1, #8]
#endif
}
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	40023800 	.word	0x40023800
 8001460:	24003010 	.word	0x24003010

08001464 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_Init>:
{
 8001468:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_Init+0x28>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001472:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800147a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f835 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	200f      	movs	r0, #15
 8001484:	f7ff fd48 	bl	8000f18 <HAL_InitTick>
  HAL_MspInit();
 8001488:	f7ff ffec 	bl	8001464 <HAL_MspInit>
}
 800148c:	2000      	movs	r0, #0
 800148e:	bd08      	pop	{r3, pc}
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x10>)
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_IncTick+0x14>)
 8001498:	6811      	ldr	r1, [r2, #0]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	440b      	add	r3, r1
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2000e414 	.word	0x2000e414
 80014a8:	2000002c 	.word	0x2000002c

080014ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014ac:	4b01      	ldr	r3, [pc, #4]	; (80014b4 <HAL_GetTick+0x8>)
 80014ae:	6818      	ldr	r0, [r3, #0]
}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000e414 	.word	0x2000e414

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff fff6 	bl	80014ac <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	bf1c      	itt	ne
 80014c4:	4b05      	ldrne	r3, [pc, #20]	; (80014dc <HAL_Delay+0x24>)
 80014c6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80014ca:	bf18      	it	ne
 80014cc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ce:	f7ff ffed 	bl	80014ac <HAL_GetTick>
 80014d2:	1b43      	subs	r3, r0, r5
 80014d4:	42a3      	cmp	r3, r4
 80014d6:	d3fa      	bcc.n	80014ce <HAL_Delay+0x16>
  {
  }
}
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	2000002c 	.word	0x2000002c

080014e0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 80014e0:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <HAL_GetREVID+0x8>)
 80014e2:	6818      	ldr	r0, [r3, #0]
}
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4770      	bx	lr
 80014e8:	e0042000 	.word	0xe0042000

080014ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001508:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b530      	push	{r4, r5, lr}
 8001514:	68dc      	ldr	r4, [r3, #12]
 8001516:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	2d04      	cmp	r5, #4
 8001522:	bf28      	it	cs
 8001524:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001526:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152c:	bf8c      	ite	hi
 800152e:	3c03      	subhi	r4, #3
 8001530:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001532:	fa03 f505 	lsl.w	r5, r3, r5
 8001536:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153a:	40a3      	lsls	r3, r4
 800153c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001542:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	bfac      	ite	ge
 800154a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	4a08      	ldrlt	r2, [pc, #32]	; (8001570 <HAL_NVIC_SetPriority+0x60>)
 8001550:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001554:	bfb8      	it	lt
 8001556:	f000 000f 	andlt.w	r0, r0, #15
 800155a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	bfaa      	itet	ge
 800155e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001568:	bd30      	pop	{r4, r5, pc}
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	e000ed14 	.word	0xe000ed14

08001574 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001574:	2800      	cmp	r0, #0
 8001576:	db08      	blt.n	800158a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001578:	0942      	lsrs	r2, r0, #5
 800157a:	2301      	movs	r3, #1
 800157c:	f000 001f 	and.w	r0, r0, #31
 8001580:	fa03 f000 	lsl.w	r0, r3, r0
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <HAL_NVIC_EnableIRQ+0x18>)
 8001586:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100

08001590 <ETH_Delay.constprop.0>:
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <ETH_Delay.constprop.0+0x20>)
static void ETH_Delay(uint32_t mdelay)
 8001592:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800159a:	fbb3 f3f2 	udiv	r3, r3, r2
 800159e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 80015a0:	bf00      	nop
  } 
  while (Delay --);
 80015a2:	9b01      	ldr	r3, [sp, #4]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <ETH_Delay.constprop.0+0x10>
}
 80015ac:	b002      	add	sp, #8
 80015ae:	4770      	bx	lr
 80015b0:	20000028 	.word	0x20000028

080015b4 <ETH_FlushTransmitFIFO>:
{
 80015b4:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80015ba:	f241 0118 	movw	r1, #4120	; 0x1018
 80015be:	6803      	ldr	r3, [r0, #0]
 80015c0:	585a      	ldr	r2, [r3, r1]
 80015c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015c6:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015c8:	585b      	ldr	r3, [r3, r1]
 80015ca:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80015cc:	f7ff ffe0 	bl	8001590 <ETH_Delay.constprop.0>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015d0:	9a01      	ldr	r2, [sp, #4]
 80015d2:	6803      	ldr	r3, [r0, #0]
 80015d4:	505a      	str	r2, [r3, r1]
}
 80015d6:	b003      	add	sp, #12
 80015d8:	f85d fb04 	ldr.w	pc, [sp], #4

080015dc <ETH_MACDMAConfig>:
{
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80015e0:	b129      	cbz	r1, 80015ee <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 80015e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ea:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015ee:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 80015f0:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80015f2:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 80015f4:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80015f8:	bf0c      	ite	eq
 80015fa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80015fe:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8001600:	432b      	orrs	r3, r5
  tmpreg1 = (heth->Instance)->MACCR;
 8001602:	6810      	ldr	r0, [r2, #0]
                       (heth->Init).DuplexMode | 
 8001604:	430b      	orrs	r3, r1
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001606:	492d      	ldr	r1, [pc, #180]	; (80016bc <ETH_MACDMAConfig+0xe0>)
 8001608:	4001      	ands	r1, r0
 800160a:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800160c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001610:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001612:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001614:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001616:	f7ff ff4f 	bl	80014b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800161a:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800161c:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 800161e:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001620:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001622:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001624:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001626:	f7ff ff47 	bl	80014b8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800162e:	2500      	movs	r5, #0
 8001630:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001632:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001634:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001636:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800163a:	0412      	lsls	r2, r2, #16
 800163c:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800163e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001642:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001644:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8001646:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001648:	f7ff ff36 	bl	80014b8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800164c:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800164e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8001650:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001652:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001654:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001656:	f7ff ff2f 	bl	80014b8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800165a:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800165e:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001660:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001664:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001666:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001668:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800166a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800166e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001672:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001674:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001676:	f7ff ff1f 	bl	80014b8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800167a:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800167c:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800167e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001684:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001686:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8001688:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800168a:	f7ff ff15 	bl	80014b8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001694:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001696:	69a3      	ldr	r3, [r4, #24]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d107      	bne.n	80016ac <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800169c:	f241 011c 	movw	r1, #4124	; 0x101c
 80016a0:	5853      	ldr	r3, [r2, r1]
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016aa:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016ac:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <ETH_MACDMAConfig+0xec>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016b0:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016b2:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016b4:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <ETH_MACDMAConfig+0xf0>)
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	ff20810f 	.word	0xff20810f
 80016c0:	f8de3f23 	.word	0xf8de3f23
 80016c4:	02c12080 	.word	0x02c12080
 80016c8:	40028040 	.word	0x40028040
 80016cc:	40028044 	.word	0x40028044

080016d0 <HAL_ETH_DMATxDescListInit>:
{
 80016d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80016d4:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80016d8:	2c01      	cmp	r4, #1
 80016da:	f04f 0402 	mov.w	r4, #2
 80016de:	d031      	beq.n	8001744 <HAL_ETH_DMATxDescListInit+0x74>
 80016e0:	2501      	movs	r5, #1
 80016e2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016e6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80016ea:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 80016ec:	460c      	mov	r4, r1
 80016ee:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016f0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016f4:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 80016f8:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 80016fc:	429d      	cmp	r5, r3
 80016fe:	d10c      	bne.n	800171a <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001700:	6802      	ldr	r2, [r0, #0]
 8001702:	f241 0310 	movw	r3, #4112	; 0x1010
 8001706:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001708:	2301      	movs	r3, #1
 800170a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800170e:	2300      	movs	r3, #0
 8001710:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001714:	4618      	mov	r0, r3
}
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800171a:	fb0c 2605 	mla	r6, ip, r5, r2
 800171e:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001720:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001722:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001724:	b91e      	cbnz	r6, 800172e <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001726:	6826      	ldr	r6, [r4, #0]
 8001728:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800172c:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1U))
 800172e:	f104 0620 	add.w	r6, r4, #32
 8001732:	45ae      	cmp	lr, r5
 8001734:	bf94      	ite	ls
 8001736:	4688      	movls	r8, r1
 8001738:	46b0      	movhi	r8, r6
 800173a:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0U; i < TxBuffCount; i++)
 800173e:	3501      	adds	r5, #1
 8001740:	4634      	mov	r4, r6
 8001742:	e7db      	b.n	80016fc <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8001744:	4620      	mov	r0, r4
 8001746:	e7e6      	b.n	8001716 <HAL_ETH_DMATxDescListInit+0x46>

08001748 <HAL_ETH_DMARxDescListInit>:
{
 8001748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 800174c:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001750:	2c01      	cmp	r4, #1
 8001752:	f04f 0402 	mov.w	r4, #2
 8001756:	d02f      	beq.n	80017b8 <HAL_ETH_DMARxDescListInit+0x70>
 8001758:	2501      	movs	r5, #1
 800175a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800175e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8001762:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8001764:	460c      	mov	r4, r1
 8001766:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001768:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800176c:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001770:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8001774:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8001778:	42ab      	cmp	r3, r5
 800177a:	d10c      	bne.n	8001796 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800177c:	6802      	ldr	r2, [r0, #0]
 800177e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001782:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001784:	2301      	movs	r3, #1
 8001786:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800178a:	2300      	movs	r3, #0
 800178c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001790:	4618      	mov	r0, r3
}
 8001792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001796:	fb0e 2605 	mla	r6, lr, r5, r2
 800179a:	60a6      	str	r6, [r4, #8]
 800179c:	f104 0620 	add.w	r6, r4, #32
 80017a0:	45a8      	cmp	r8, r5
 80017a2:	bf94      	ite	ls
 80017a4:	4689      	movls	r9, r1
 80017a6:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017a8:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017aa:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1U))
 80017ae:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0U; i < RxBuffCount; i++)
 80017b2:	3501      	adds	r5, #1
 80017b4:	4634      	mov	r4, r6
 80017b6:	e7df      	b.n	8001778 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 80017b8:	4620      	mov	r0, r4
 80017ba:	e7ea      	b.n	8001792 <HAL_ETH_DMARxDescListInit+0x4a>

080017bc <HAL_ETH_TransmitFrame>:
{
 80017bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80017be:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	f04f 0302 	mov.w	r3, #2
 80017c8:	d068      	beq.n	800189c <HAL_ETH_TransmitFrame+0xe0>
 80017ca:	2201      	movs	r2, #1
 80017cc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80017d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 80017d4:	b929      	cbnz	r1, 80017e2 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80017d6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80017da:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80017de:	4610      	mov	r0, r2
}
 80017e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	2c00      	cmp	r4, #0
 80017e8:	da06      	bge.n	80017f8 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017ea:	2312      	movs	r3, #18
 80017ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80017f0:	2300      	movs	r3, #0
 80017f2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80017f6:	e7f2      	b.n	80017de <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017f8:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80017fc:	42a1      	cmp	r1, r4
 80017fe:	d92e      	bls.n	800185e <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001800:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001804:	fb04 1412 	mls	r4, r4, r2, r1
 8001808:	b33c      	cbz	r4, 800185a <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 800180a:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800180c:	4c24      	ldr	r4, [pc, #144]	; (80018a0 <HAL_ETH_TransmitFrame+0xe4>)
 800180e:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8001812:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001816:	f3c1 010c 	ubfx	r1, r1, #0, #13
    for (i=0U; i< bufcount; i++)
 800181a:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800181c:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8001820:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001822:	681d      	ldr	r5, [r3, #0]
 8001824:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8001828:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 800182a:	b91c      	cbnz	r4, 8001834 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800182c:	681d      	ldr	r5, [r3, #0]
 800182e:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001832:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8001834:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001836:	bf08      	it	eq
 8001838:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800183a:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800183c:	bf04      	itt	eq
 800183e:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8001842:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001844:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001846:	bf08      	it	eq
 8001848:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 800184a:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800184c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 8001850:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001852:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001854:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8001856:	d1e4      	bne.n	8001822 <HAL_ETH_TransmitFrame+0x66>
 8001858:	e00d      	b.n	8001876 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 800185a:	2a01      	cmp	r2, #1
 800185c:	d1d6      	bne.n	800180c <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001864:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001866:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001868:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800186c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001870:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001872:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001878:	f241 0214 	movw	r2, #4116	; 0x1014
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	5899      	ldr	r1, [r3, r2]
 8001880:	0749      	lsls	r1, r1, #29
 8001882:	d505      	bpl.n	8001890 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001884:	2104      	movs	r1, #4
 8001886:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8001888:	f241 0204 	movw	r2, #4100	; 0x1004
 800188c:	2100      	movs	r1, #0
 800188e:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8001890:	2301      	movs	r3, #1
 8001892:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001896:	2300      	movs	r3, #0
 8001898:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800189c:	4618      	mov	r0, r3
 800189e:	e79f      	b.n	80017e0 <HAL_ETH_TransmitFrame+0x24>
 80018a0:	fffffa0c 	.word	0xfffffa0c

080018a4 <HAL_ETH_GetReceivedFrame_IT>:
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80018a6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f04f 0302 	mov.w	r3, #2
 80018b0:	d03b      	beq.n	800192a <HAL_ETH_GetReceivedFrame_IT+0x86>
 80018b2:	2201      	movs	r2, #1
 80018b4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80018b8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018bc:	2406      	movs	r4, #6
      heth->RxFrameInfos.SegCount = 1U;   
 80018be:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2a00      	cmp	r2, #0
 80018c6:	db01      	blt.n	80018cc <HAL_ETH_GetReceivedFrame_IT+0x28>
 80018c8:	3c01      	subs	r4, #1
 80018ca:	d106      	bne.n	80018da <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 80018cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80018ce:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80018d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80018d4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80018d8:	e027      	b.n	800192a <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68dd      	ldr	r5, [r3, #12]
 80018de:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80018e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80018e6:	d103      	bne.n	80018f0 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80018e8:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80018ea:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80018ec:	6285      	str	r5, [r0, #40]	; 0x28
 80018ee:	e7e7      	b.n	80018c0 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80018f0:	681e      	ldr	r6, [r3, #0]
 80018f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80018f4:	f416 7f40 	tst.w	r6, #768	; 0x300
 80018f8:	f102 0201 	add.w	r2, r2, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 80018fe:	6382      	str	r2, [r0, #56]	; 0x38
 8001900:	e7f4      	b.n	80018ec <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001902:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001904:	bf08      	it	eq
 8001906:	6303      	streq	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos.SegCount)++;
 8001908:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8001912:	3b04      	subs	r3, #4
 8001914:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001916:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 800191c:	2301      	movs	r3, #1
 800191e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001922:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001924:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8001926:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd70      	pop	{r4, r5, r6, pc}

0800192e <HAL_ETH_TxCpltCallback>:
 800192e:	4770      	bx	lr

08001930 <HAL_ETH_ErrorCallback>:
 8001930:	4770      	bx	lr

08001932 <HAL_ETH_IRQHandler>:
{
 8001932:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001934:	6802      	ldr	r2, [r0, #0]
 8001936:	f241 0614 	movw	r6, #4116	; 0x1014
{
 800193a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800193c:	5995      	ldr	r5, [r2, r6]
 800193e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001942:	d021      	beq.n	8001988 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8001944:	f7ff f858 	bl	80009f8 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 800194e:	2301      	movs	r3, #1
 8001950:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001954:	2300      	movs	r3, #0
 8001956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f241 0514 	movw	r5, #4116	; 0x1014
 8001960:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001964:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001966:	595b      	ldr	r3, [r3, r5]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	d50c      	bpl.n	8001986 <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff ffdf 	bl	8001930 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001978:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001980:	2300      	movs	r3, #0
 8001982:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001986:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001988:	5993      	ldr	r3, [r2, r6]
 800198a:	07da      	lsls	r2, r3, #31
 800198c:	d5e5      	bpl.n	800195a <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 800198e:	f7ff ffce 	bl	800192e <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001992:	6822      	ldr	r2, [r4, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8001998:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800199c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80019a0:	e7db      	b.n	800195a <HAL_ETH_IRQHandler+0x28>

080019a2 <HAL_ETH_ReadPHYRegister>:
{
 80019a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019a4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80019a8:	2b82      	cmp	r3, #130	; 0x82
{
 80019aa:	4606      	mov	r6, r0
 80019ac:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019ae:	d031      	beq.n	8001a14 <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019b0:	2382      	movs	r3, #130	; 0x82
 80019b2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019b6:	8a34      	ldrh	r4, [r6, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 80019b8:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019ba:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 80019bc:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019be:	0189      	lsls	r1, r1, #6
 80019c0:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019c4:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019c6:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019ca:	430c      	orrs	r4, r1
 80019cc:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019ce:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80019d2:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80019d4:	f7ff fd6a 	bl	80014ac <HAL_GetTick>
 80019d8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019da:	f014 0401 	ands.w	r4, r4, #1
 80019de:	d108      	bne.n	80019f2 <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019e0:	6833      	ldr	r3, [r6, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 80019ee:	4620      	mov	r0, r4
 80019f0:	e00c      	b.n	8001a0c <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019f2:	f7ff fd5b 	bl	80014ac <HAL_GetTick>
 80019f6:	1bc0      	subs	r0, r0, r7
 80019f8:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 80019fc:	d307      	bcc.n	8001a0e <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001a04:	2300      	movs	r3, #0
 8001a06:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
      return HAL_TIMEOUT;
 8001a0a:	2003      	movs	r0, #3
}
 8001a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a0e:	6833      	ldr	r3, [r6, #0]
 8001a10:	691c      	ldr	r4, [r3, #16]
 8001a12:	e7e2      	b.n	80019da <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8001a14:	2002      	movs	r0, #2
 8001a16:	e7f9      	b.n	8001a0c <HAL_ETH_ReadPHYRegister+0x6a>

08001a18 <HAL_ETH_WritePHYRegister>:
{
 8001a18:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a1a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001a1e:	2b42      	cmp	r3, #66	; 0x42
{
 8001a20:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a22:	d02f      	beq.n	8001a84 <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a24:	2342      	movs	r3, #66	; 0x42
 8001a26:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a2a:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a2c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a2e:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a30:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a32:	0189      	lsls	r1, r1, #6
 8001a34:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a38:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a3a:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a3e:	430c      	orrs	r4, r1
 8001a40:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a48:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001a4a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8001a4c:	f7ff fd2e 	bl	80014ac <HAL_GetTick>
 8001a50:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a52:	f014 0401 	ands.w	r4, r4, #1
 8001a56:	d104      	bne.n	8001a62 <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8001a5e:	4620      	mov	r0, r4
 8001a60:	e00c      	b.n	8001a7c <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a62:	f7ff fd23 	bl	80014ac <HAL_GetTick>
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8001a6c:	d307      	bcc.n	8001a7e <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001a74:	2300      	movs	r3, #0
 8001a76:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001a7a:	2003      	movs	r0, #3
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	691c      	ldr	r4, [r3, #16]
 8001a82:	e7e6      	b.n	8001a52 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8001a84:	2002      	movs	r0, #2
 8001a86:	e7f9      	b.n	8001a7c <HAL_ETH_WritePHYRegister+0x64>

08001a88 <HAL_ETH_Init>:
{
 8001a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8001a8e:	4604      	mov	r4, r0
 8001a90:	2800      	cmp	r0, #0
 8001a92:	f000 80e0 	beq.w	8001c56 <HAL_ETH_Init+0x1ce>
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a96:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001a9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a9e:	b91b      	cbnz	r3, 8001aa8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8001aa0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8001aa4:	f7fe fefc 	bl	80008a0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_ETH_Init+0x1d4>)
 8001aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ab0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ac0:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_ETH_Init+0x1d8>)
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001ac8:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	6a21      	ldr	r1, [r4, #32]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001ae0:	f7ff fce4 	bl	80014ac <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	07d0      	lsls	r0, r2, #31
 8001af0:	d41d      	bmi.n	8001b2e <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001af2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8001af4:	f000 fd70 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001af8:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_ETH_Init+0x1dc>)
 8001afa:	4a5b      	ldr	r2, [pc, #364]	; (8001c68 <HAL_ETH_Init+0x1e0>)
 8001afc:	4403      	add	r3, r0
 8001afe:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001b00:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001b04:	d222      	bcs.n	8001b4c <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b06:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b0a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b10:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4620      	mov	r0, r4
 8001b16:	f7ff ff7f 	bl	8001a18 <HAL_ETH_WritePHYRegister>
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	b368      	cbz	r0, 8001b7a <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8001b22:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8001b24:	f7ff fd5a 	bl	80015dc <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001b28:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001b2c:	e00b      	b.n	8001b46 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001b2e:	f7ff fcbd 	bl	80014ac <HAL_GetTick>
 8001b32:	1b40      	subs	r0, r0, r5
 8001b34:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001b38:	d9d5      	bls.n	8001ae6 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b3a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8001b3c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001b3e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001b42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001b46:	4628      	mov	r0, r5
 8001b48:	b003      	add	sp, #12
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001b4c:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_ETH_Init+0x1e4>)
 8001b4e:	4a48      	ldr	r2, [pc, #288]	; (8001c70 <HAL_ETH_Init+0x1e8>)
 8001b50:	4403      	add	r3, r0
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d802      	bhi.n	8001b5c <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b56:	f045 050c 	orr.w	r5, r5, #12
 8001b5a:	e7d6      	b.n	8001b0a <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_ETH_Init+0x1ec>)
 8001b5e:	4a46      	ldr	r2, [pc, #280]	; (8001c78 <HAL_ETH_Init+0x1f0>)
 8001b60:	4403      	add	r3, r0
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d3d1      	bcc.n	8001b0a <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <HAL_ETH_Init+0x1f4>)
 8001b68:	4a45      	ldr	r2, [pc, #276]	; (8001c80 <HAL_ETH_Init+0x1f8>)
 8001b6a:	4403      	add	r3, r0
 8001b6c:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b6e:	bf94      	ite	ls
 8001b70:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b74:	f045 0510 	orrhi.w	r5, r5, #16
 8001b78:	e7c7      	b.n	8001b0a <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8001b7a:	f240 20ff 	movw	r0, #767	; 0x2ff
 8001b7e:	f7ff fc9b 	bl	80014b8 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b82:	6863      	ldr	r3, [r4, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d054      	beq.n	8001c32 <HAL_ETH_Init+0x1aa>
    tickstart = HAL_GetTick();
 8001b88:	f7ff fc90 	bl	80014ac <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b8c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001b90:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b92:	466a      	mov	r2, sp
 8001b94:	2101      	movs	r1, #1
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7ff ff03 	bl	80019a2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b9c:	f7ff fc86 	bl	80014ac <HAL_GetTick>
 8001ba0:	1b80      	subs	r0, r0, r6
 8001ba2:	42b8      	cmp	r0, r7
 8001ba4:	d90b      	bls.n	8001bbe <HAL_ETH_Init+0x136>
        ETH_MACDMAConfig(heth, err);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff fd17 	bl	80015dc <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001bba:	2503      	movs	r5, #3
 8001bbc:	e7c3      	b.n	8001b46 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	0759      	lsls	r1, r3, #29
 8001bc2:	d5e6      	bpl.n	8001b92 <HAL_ETH_Init+0x10a>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4620      	mov	r0, r4
 8001bcc:	f7ff ff24 	bl	8001a18 <HAL_ETH_WritePHYRegister>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d1a4      	bne.n	8001b1e <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8001bd4:	f7ff fc6a 	bl	80014ac <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001bd8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bdc:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001bde:	466a      	mov	r2, sp
 8001be0:	2101      	movs	r1, #1
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7ff fedd 	bl	80019a2 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001be8:	f7ff fc60 	bl	80014ac <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	42b8      	cmp	r0, r7
 8001bf0:	d8d9      	bhi.n	8001ba6 <HAL_ETH_Init+0x11e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001bf2:	9b00      	ldr	r3, [sp, #0]
 8001bf4:	069a      	lsls	r2, r3, #26
 8001bf6:	d5f2      	bpl.n	8001bde <HAL_ETH_Init+0x156>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001bf8:	466a      	mov	r2, sp
 8001bfa:	211f      	movs	r1, #31
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff fed0 	bl	80019a2 <HAL_ETH_ReadPHYRegister>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d18b      	bne.n	8001b1e <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c06:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c08:	f013 0210 	ands.w	r2, r3, #16
 8001c0c:	bf18      	it	ne
 8001c0e:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c12:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c14:	bf58      	it	pl
 8001c16:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8001c1a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c1c:	bf4c      	ite	mi
 8001c1e:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c20:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001c22:	2100      	movs	r1, #0
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7ff fcd9 	bl	80015dc <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001c30:	e789      	b.n	8001b46 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001c32:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8001c36:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c38:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001c3c:	b292      	uxth	r2, r2
 8001c3e:	4629      	mov	r1, r5
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff fee9 	bl	8001a18 <HAL_ETH_WritePHYRegister>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	f47f af69 	bne.w	8001b1e <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c50:	f7ff fc32 	bl	80014b8 <HAL_Delay>
 8001c54:	e7e5      	b.n	8001c22 <HAL_ETH_Init+0x19a>
    return HAL_ERROR;
 8001c56:	2501      	movs	r5, #1
 8001c58:	e775      	b.n	8001b46 <HAL_ETH_Init+0xbe>
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	feced300 	.word	0xfeced300
 8001c68:	00e4e1c0 	.word	0x00e4e1c0
 8001c6c:	fde9f140 	.word	0xfde9f140
 8001c70:	017d783f 	.word	0x017d783f
 8001c74:	fc6c7900 	.word	0xfc6c7900
 8001c78:	02625a00 	.word	0x02625a00
 8001c7c:	fa0a1f00 	.word	0xfa0a1f00
 8001c80:	02faf07f 	.word	0x02faf07f

08001c84 <HAL_ETH_Start>:
{  
 8001c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 8001c86:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f04f 0402 	mov.w	r4, #2
 8001c90:	d02f      	beq.n	8001cf2 <HAL_ETH_Start+0x6e>
  heth->State = HAL_ETH_STATE_BUSY;
 8001c92:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001c96:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001c98:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 8001c9a:	2501      	movs	r5, #1
 8001c9c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  __IO uint32_t tmpreg1 = 0U;
 8001ca0:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	f042 0208 	orr.w	r2, r2, #8
 8001ca8:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001cae:	f7ff fc6f 	bl	8001590 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8001cb2:	6803      	ldr	r3, [r0, #0]
 8001cb4:	9a01      	ldr	r2, [sp, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001cb8:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f042 0204 	orr.w	r2, r2, #4
 8001cc0:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	f7ff fc63 	bl	8001590 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8001cca:	6803      	ldr	r3, [r0, #0]
 8001ccc:	9a00      	ldr	r2, [sp, #0]
 8001cce:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001cd0:	f7ff fc70 	bl	80015b4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001cd4:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cd8:	6802      	ldr	r2, [r0, #0]
 8001cda:	58d1      	ldr	r1, [r2, r3]
 8001cdc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001ce0:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001ce2:	58d1      	ldr	r1, [r2, r3]
 8001ce4:	f041 0102 	orr.w	r1, r1, #2
 8001ce8:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001cea:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001cee:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001cf2:	4620      	mov	r0, r4
}
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd30      	pop	{r4, r5, pc}

08001cf8 <HAL_ETH_Stop>:
{  
 8001cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 8001cfa:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	f04f 0402 	mov.w	r4, #2
 8001d04:	d02f      	beq.n	8001d66 <HAL_ETH_Stop+0x6e>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d06:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8001d08:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d0c:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 8001d10:	2501      	movs	r5, #1
 8001d12:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001d16:	5899      	ldr	r1, [r3, r2]
 8001d18:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001d1c:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001d1e:	5899      	ldr	r1, [r3, r2]
 8001d20:	f021 0102 	bic.w	r1, r1, #2
 8001d24:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 8001d26:	2400      	movs	r4, #0
 8001d28:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f022 0204 	bic.w	r2, r2, #4
 8001d30:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d36:	f7ff fc2b 	bl	8001590 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8001d3a:	6803      	ldr	r3, [r0, #0]
 8001d3c:	9a01      	ldr	r2, [sp, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8001d40:	f7ff fc38 	bl	80015b4 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d44:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 8001d46:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d54:	f7ff fc1c 	bl	8001590 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	9a00      	ldr	r2, [sp, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8001d5e:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001d62:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8001d66:	4620      	mov	r0, r4
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	bd30      	pop	{r4, r5, pc}

08001d6c <HAL_ETH_ConfigMAC>:
{
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8001d6e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001d72:	2b01      	cmp	r3, #1
{
 8001d74:	4605      	mov	r5, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8001d7c:	d071      	beq.n	8001e62 <HAL_ETH_ConfigMAC+0xf6>
 8001d7e:	2601      	movs	r6, #1
  heth->State= HAL_ETH_STATE_BUSY;
 8001d80:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
 8001d84:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(heth);
 8001d86:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  if (macconf != NULL)
 8001d8a:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
 8001d8e:	2900      	cmp	r1, #0
 8001d90:	d068      	beq.n	8001e64 <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 8001d92:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d94:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8001e80 <HAL_ETH_ConfigMAC+0x114>
 8001d98:	ea0c 0c03 	and.w	ip, ip, r3
                         macconf->BackOffLimit | 
 8001d9c:	e9d1 3100 	ldrd	r3, r1, [r1]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	68a1      	ldr	r1, [r4, #8]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	68e1      	ldr	r1, [r4, #12]
 8001da8:	430b      	orrs	r3, r1
 8001daa:	6921      	ldr	r1, [r4, #16]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6961      	ldr	r1, [r4, #20]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	69a1      	ldr	r1, [r4, #24]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	69e1      	ldr	r1, [r4, #28]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	6a21      	ldr	r1, [r4, #32]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	433b      	orrs	r3, r7
 8001dc8:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001dca:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dce:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd0:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8001dd2:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd4:	f7ff fb70 	bl	80014b8 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dd8:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 8001ddc:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8001dde:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1; 
 8001de0:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 8001de2:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8001de4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1; 
 8001de6:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 8001de8:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8001dea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001dec:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8001dee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001df0:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 8001df2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001df4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8001df6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001df8:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dfa:	6053      	str	r3, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfc:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFFR;
 8001dfe:	6857      	ldr	r7, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e00:	f7ff fb5a 	bl	80014b8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001e04:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACFFR = tmpreg1;
 8001e08:	6057      	str	r7, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e0a:	6093      	str	r3, [r2, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001e0e:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 8001e10:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 8001e14:	4303      	orrs	r3, r0
 8001e16:	6e20      	ldr	r0, [r4, #96]	; 0x60
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e18:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8001e1a:	4303      	orrs	r3, r0
 8001e1c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e1e:	4303      	orrs	r3, r0
 8001e20:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e22:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 8001e26:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e2a:	0409      	lsls	r1, r1, #16
 8001e2c:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 8001e2e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e32:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e34:	6193      	str	r3, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e36:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e38:	6997      	ldr	r7, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e3a:	f7ff fb3d 	bl	80014b8 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e3e:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg1;
 8001e42:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e44:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg1;
 8001e46:	619f      	str	r7, [r3, #24]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e48:	4630      	mov	r0, r6
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e4a:	61da      	str	r2, [r3, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e4c:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4e:	f7ff fb33 	bl	80014b8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 8001e56:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8001e58:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 8001e5a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001e5e:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 8001e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 8001e64:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e66:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 8001e6a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e6e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e70:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e72:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 8001e74:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e76:	f7ff fb1f 	bl	80014b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e7a:	682b      	ldr	r3, [r5, #0]
 8001e7c:	601c      	str	r4, [r3, #0]
 8001e7e:	e7ea      	b.n	8001e56 <HAL_ETH_ConfigMAC+0xea>
 8001e80:	ff20810f 	.word	0xff20810f

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e88:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002034 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8c:	4a67      	ldr	r2, [pc, #412]	; (800202c <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e90:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001e92:	2401      	movs	r4, #1
 8001e94:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e96:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001e9a:	43ac      	bics	r4, r5
 8001e9c:	f040 80b0 	bne.w	8002000 <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea0:	684d      	ldr	r5, [r1, #4]
 8001ea2:	f005 0403 	and.w	r4, r5, #3
 8001ea6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001eaa:	2603      	movs	r6, #3
 8001eac:	1e67      	subs	r7, r4, #1
 8001eae:	fa06 f608 	lsl.w	r6, r6, r8
 8001eb2:	2f01      	cmp	r7, #1
 8001eb4:	ea6f 0606 	mvn.w	r6, r6
 8001eb8:	d834      	bhi.n	8001f24 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001eba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec0:	68cf      	ldr	r7, [r1, #12]
 8001ec2:	fa07 f708 	lsl.w	r7, r7, r8
 8001ec6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001eca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ecc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ece:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001ed6:	409f      	lsls	r7, r3
 8001ed8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001edc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001ede:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee4:	688f      	ldr	r7, [r1, #8]
 8001ee6:	fa07 f708 	lsl.w	r7, r7, r8
 8001eea:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001ef0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	d119      	bne.n	8001f28 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001ef4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001ef8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001f00:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f04:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001f08:	f04f 0e0f 	mov.w	lr, #15
 8001f0c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001f10:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f14:	690f      	ldr	r7, [r1, #16]
 8001f16:	fa07 f70b 	lsl.w	r7, r7, fp
 8001f1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f1e:	f8ca 7020 	str.w	r7, [sl, #32]
 8001f22:	e001      	b.n	8001f28 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f24:	2c03      	cmp	r4, #3
 8001f26:	d1da      	bne.n	8001ede <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001f28:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f2a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f32:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8001f34:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	d563      	bpl.n	8002000 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f38:	f04f 0a00 	mov.w	sl, #0
 8001f3c:	f8cd a004 	str.w	sl, [sp, #4]
 8001f40:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f44:	4c3a      	ldr	r4, [pc, #232]	; (8002030 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001f4a:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001f4e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001f52:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001f56:	9601      	str	r6, [sp, #4]
 8001f58:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f5a:	f023 0603 	bic.w	r6, r3, #3
 8001f5e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001f62:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f66:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f6e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f72:	270f      	movs	r7, #15
 8001f74:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f78:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7a:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f7e:	d046      	beq.n	800200e <HAL_GPIO_Init+0x18a>
 8001f80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f84:	42a0      	cmp	r0, r4
 8001f86:	d044      	beq.n	8002012 <HAL_GPIO_Init+0x18e>
 8001f88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f8c:	42a0      	cmp	r0, r4
 8001f8e:	d042      	beq.n	8002016 <HAL_GPIO_Init+0x192>
 8001f90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f94:	42a0      	cmp	r0, r4
 8001f96:	d040      	beq.n	800201a <HAL_GPIO_Init+0x196>
 8001f98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f9c:	42a0      	cmp	r0, r4
 8001f9e:	d03e      	beq.n	800201e <HAL_GPIO_Init+0x19a>
 8001fa0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fa4:	42a0      	cmp	r0, r4
 8001fa6:	d03c      	beq.n	8002022 <HAL_GPIO_Init+0x19e>
 8001fa8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fac:	42a0      	cmp	r0, r4
 8001fae:	d03a      	beq.n	8002026 <HAL_GPIO_Init+0x1a2>
 8001fb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fb4:	42a0      	cmp	r0, r4
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2407      	moveq	r4, #7
 8001fba:	2408      	movne	r4, #8
 8001fbc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001fc0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001fc4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fca:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	bf54      	ite	pl
 8001fce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001fd0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001fd4:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001fd6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001fda:	bf54      	ite	pl
 8001fdc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001fde:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001fe2:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe4:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe6:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	bf54      	ite	pl
 8001fea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001fec:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001ff0:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001ff2:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	bf54      	ite	pl
 8001ff8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001ffa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001ffe:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002000:	3301      	adds	r3, #1
 8002002:	2b10      	cmp	r3, #16
 8002004:	f47f af44 	bne.w	8001e90 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002008:	b003      	add	sp, #12
 800200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	4654      	mov	r4, sl
 8002010:	e7d4      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 8002012:	2401      	movs	r4, #1
 8002014:	e7d2      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 8002016:	2402      	movs	r4, #2
 8002018:	e7d0      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 800201a:	2403      	movs	r4, #3
 800201c:	e7ce      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 800201e:	2404      	movs	r4, #4
 8002020:	e7cc      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 8002022:	2405      	movs	r4, #5
 8002024:	e7ca      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 8002026:	2406      	movs	r4, #6
 8002028:	e7c8      	b.n	8001fbc <HAL_GPIO_Init+0x138>
 800202a:	bf00      	nop
 800202c:	40013c00 	.word	0x40013c00
 8002030:	40020000 	.word	0x40020000
 8002034:	40023800 	.word	0x40023800

08002038 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	b10a      	cbz	r2, 800203e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203a:	6181      	str	r1, [r0, #24]
  }
}
 800203c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800203e:	0409      	lsls	r1, r1, #16
 8002040:	e7fb      	b.n	800203a <HAL_GPIO_WritePin+0x2>

08002042 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002042:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002044:	ea01 0203 	and.w	r2, r1, r3
 8002048:	ea21 0103 	bic.w	r1, r1, r3
 800204c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002050:	6181      	str	r1, [r0, #24]
}
 8002052:	4770      	bx	lr

08002054 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002058:	4604      	mov	r4, r0
 800205a:	b340      	cbz	r0, 80020ae <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205c:	6803      	ldr	r3, [r0, #0]
 800205e:	07dd      	lsls	r5, r3, #31
 8002060:	d410      	bmi.n	8002084 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	0798      	lsls	r0, r3, #30
 8002066:	d45e      	bmi.n	8002126 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	071a      	lsls	r2, r3, #28
 800206c:	f100 80a0 	bmi.w	80021b0 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	075b      	lsls	r3, r3, #29
 8002074:	f100 80be 	bmi.w	80021f4 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002078:	69a0      	ldr	r0, [r4, #24]
 800207a:	2800      	cmp	r0, #0
 800207c:	f040 811f 	bne.w	80022be <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2000      	movs	r0, #0
 8002082:	e02b      	b.n	80020dc <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002084:	4ba6      	ldr	r3, [pc, #664]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	f002 020c 	and.w	r2, r2, #12
 800208c:	2a04      	cmp	r2, #4
 800208e:	d007      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002096:	2a08      	cmp	r2, #8
 8002098:	d10b      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	0251      	lsls	r1, r2, #9
 800209e:	d508      	bpl.n	80020b2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	4b9f      	ldr	r3, [pc, #636]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	039a      	lsls	r2, r3, #14
 80020a6:	d5dc      	bpl.n	8002062 <HAL_RCC_OscConfig+0xe>
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1d9      	bne.n	8002062 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80020ae:	2001      	movs	r0, #1
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	6862      	ldr	r2, [r4, #4]
 80020b4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80020b8:	d113      	bne.n	80020e2 <HAL_RCC_OscConfig+0x8e>
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020c2:	f7ff f9f3 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4e96      	ldr	r6, [pc, #600]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80020c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	6833      	ldr	r3, [r6, #0]
 80020cc:	039b      	lsls	r3, r3, #14
 80020ce:	d4c8      	bmi.n	8002062 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f9ec 	bl	80014ac <HAL_GetTick>
 80020d4:	1b40      	subs	r0, r0, r5
 80020d6:	2864      	cmp	r0, #100	; 0x64
 80020d8:	d9f7      	bls.n	80020ca <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
}
 80020dc:	b002      	add	sp, #8
 80020de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	4d8f      	ldr	r5, [pc, #572]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 80020e4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_OscConfig+0xa8>
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	602b      	str	r3, [r5, #0]
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020fa:	e7e2      	b.n	80020c2 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002100:	602b      	str	r3, [r5, #0]
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002108:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800210a:	2a00      	cmp	r2, #0
 800210c:	d1d9      	bne.n	80020c2 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800210e:	f7ff f9cd 	bl	80014ac <HAL_GetTick>
 8002112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	039f      	lsls	r7, r3, #14
 8002118:	d5a3      	bpl.n	8002062 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211a:	f7ff f9c7 	bl	80014ac <HAL_GetTick>
 800211e:	1b80      	subs	r0, r0, r6
 8002120:	2864      	cmp	r0, #100	; 0x64
 8002122:	d9f7      	bls.n	8002114 <HAL_RCC_OscConfig+0xc0>
 8002124:	e7d9      	b.n	80020da <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	f012 0f0c 	tst.w	r2, #12
 800212e:	d007      	beq.n	8002140 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	2a08      	cmp	r2, #8
 8002138:	d111      	bne.n	800215e <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	025e      	lsls	r6, r3, #9
 800213e:	d40e      	bmi.n	800215e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002140:	4b77      	ldr	r3, [pc, #476]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	0795      	lsls	r5, r2, #30
 8002146:	d502      	bpl.n	800214e <HAL_RCC_OscConfig+0xfa>
 8002148:	68e2      	ldr	r2, [r4, #12]
 800214a:	2a01      	cmp	r2, #1
 800214c:	d1af      	bne.n	80020ae <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6921      	ldr	r1, [r4, #16]
 8002152:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002156:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800215a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215c:	e784      	b.n	8002068 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800215e:	68e2      	ldr	r2, [r4, #12]
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x2d0>)
 8002162:	b1b2      	cbz	r2, 8002192 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002168:	f7ff f9a0 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	4d6c      	ldr	r5, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800216e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	0798      	lsls	r0, r3, #30
 8002174:	d507      	bpl.n	8002186 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	6922      	ldr	r2, [r4, #16]
 800217a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800217e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002182:	602b      	str	r3, [r5, #0]
 8002184:	e770      	b.n	8002068 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff f991 	bl	80014ac <HAL_GetTick>
 800218a:	1b80      	subs	r0, r0, r6
 800218c:	2802      	cmp	r0, #2
 800218e:	d9ef      	bls.n	8002170 <HAL_RCC_OscConfig+0x11c>
 8002190:	e7a3      	b.n	80020da <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002192:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002194:	f7ff f98a 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002198:	4e61      	ldr	r6, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800219a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219c:	6833      	ldr	r3, [r6, #0]
 800219e:	0799      	lsls	r1, r3, #30
 80021a0:	f57f af62 	bpl.w	8002068 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff f982 	bl	80014ac <HAL_GetTick>
 80021a8:	1b40      	subs	r0, r0, r5
 80021aa:	2802      	cmp	r0, #2
 80021ac:	d9f6      	bls.n	800219c <HAL_RCC_OscConfig+0x148>
 80021ae:	e794      	b.n	80020da <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021b0:	6962      	ldr	r2, [r4, #20]
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_OscConfig+0x2d4>)
 80021b4:	b17a      	cbz	r2, 80021d6 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021ba:	f7ff f977 	bl	80014ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4e58      	ldr	r6, [pc, #352]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80021c0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021c4:	079f      	lsls	r7, r3, #30
 80021c6:	f53f af53 	bmi.w	8002070 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff f96f 	bl	80014ac <HAL_GetTick>
 80021ce:	1b40      	subs	r0, r0, r5
 80021d0:	2802      	cmp	r0, #2
 80021d2:	d9f6      	bls.n	80021c2 <HAL_RCC_OscConfig+0x16e>
 80021d4:	e781      	b.n	80020da <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80021d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80021d8:	f7ff f968 	bl	80014ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4e50      	ldr	r6, [pc, #320]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80021de:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021e2:	0798      	lsls	r0, r3, #30
 80021e4:	f57f af44 	bpl.w	8002070 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff f960 	bl	80014ac <HAL_GetTick>
 80021ec:	1b40      	subs	r0, r0, r5
 80021ee:	2802      	cmp	r0, #2
 80021f0:	d9f6      	bls.n	80021e0 <HAL_RCC_OscConfig+0x18c>
 80021f2:	e772      	b.n	80020da <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 80021f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80021fc:	d128      	bne.n	8002250 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002202:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002212:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4d45      	ldr	r5, [pc, #276]	; (800232c <HAL_RCC_OscConfig+0x2d8>)
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	05d9      	lsls	r1, r3, #23
 800221a:	d51b      	bpl.n	8002254 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	68a3      	ldr	r3, [r4, #8]
 800221e:	4d40      	ldr	r5, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 8002220:	2b01      	cmp	r3, #1
 8002222:	d127      	bne.n	8002274 <HAL_RCC_OscConfig+0x220>
 8002224:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800222c:	f7ff f93e 	bl	80014ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4e3b      	ldr	r6, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002232:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800223a:	079b      	lsls	r3, r3, #30
 800223c:	d539      	bpl.n	80022b2 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 800223e:	2f00      	cmp	r7, #0
 8002240:	f43f af1a 	beq.w	8002078 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4a36      	ldr	r2, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 8002246:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	e713      	b.n	8002078 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002250:	2700      	movs	r7, #0
 8002252:	e7df      	b.n	8002214 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800225c:	f7ff f926 	bl	80014ac <HAL_GetTick>
 8002260:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	05da      	lsls	r2, r3, #23
 8002266:	d4d9      	bmi.n	800221c <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002268:	f7ff f920 	bl	80014ac <HAL_GetTick>
 800226c:	1b80      	subs	r0, r0, r6
 800226e:	2802      	cmp	r0, #2
 8002270:	d9f7      	bls.n	8002262 <HAL_RCC_OscConfig+0x20e>
 8002272:	e732      	b.n	80020da <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	2b05      	cmp	r3, #5
 8002276:	d104      	bne.n	8002282 <HAL_RCC_OscConfig+0x22e>
 8002278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	672b      	str	r3, [r5, #112]	; 0x70
 8002280:	e7d0      	b.n	8002224 <HAL_RCC_OscConfig+0x1d0>
 8002282:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	672a      	str	r2, [r5, #112]	; 0x70
 800228a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800228c:	f022 0204 	bic.w	r2, r2, #4
 8002290:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ca      	bne.n	800222c <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002296:	f7ff f909 	bl	80014ac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800229e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022a2:	0798      	lsls	r0, r3, #30
 80022a4:	d5cb      	bpl.n	800223e <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7ff f901 	bl	80014ac <HAL_GetTick>
 80022aa:	1b80      	subs	r0, r0, r6
 80022ac:	4540      	cmp	r0, r8
 80022ae:	d9f7      	bls.n	80022a0 <HAL_RCC_OscConfig+0x24c>
 80022b0:	e713      	b.n	80020da <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff f8fb 	bl	80014ac <HAL_GetTick>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	4540      	cmp	r0, r8
 80022ba:	d9bd      	bls.n	8002238 <HAL_RCC_OscConfig+0x1e4>
 80022bc:	e70d      	b.n	80020da <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022be:	4d18      	ldr	r5, [pc, #96]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
 80022c0:	68ab      	ldr	r3, [r5, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d047      	beq.n	800235a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	4e19      	ldr	r6, [pc, #100]	; (8002330 <HAL_RCC_OscConfig+0x2dc>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80022d0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d2:	d135      	bne.n	8002340 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80022d4:	f7ff f8ea 	bl	80014ac <HAL_GetTick>
 80022d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	0199      	lsls	r1, r3, #6
 80022de:	d429      	bmi.n	8002334 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e0:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	3a01      	subs	r2, #1
 80022f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80022fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80022fe:	2301      	movs	r3, #1
 8002300:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002302:	f7ff f8d3 	bl	80014ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4d06      	ldr	r5, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002308:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	682b      	ldr	r3, [r5, #0]
 800230c:	019a      	lsls	r2, r3, #6
 800230e:	f53f aeb7 	bmi.w	8002080 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7ff f8cb 	bl	80014ac <HAL_GetTick>
 8002316:	1b00      	subs	r0, r0, r4
 8002318:	2802      	cmp	r0, #2
 800231a:	d9f6      	bls.n	800230a <HAL_RCC_OscConfig+0x2b6>
 800231c:	e6dd      	b.n	80020da <HAL_RCC_OscConfig+0x86>
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
 800232c:	40007000 	.word	0x40007000
 8002330:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff f8ba 	bl	80014ac <HAL_GetTick>
 8002338:	1bc0      	subs	r0, r0, r7
 800233a:	2802      	cmp	r0, #2
 800233c:	d9cd      	bls.n	80022da <HAL_RCC_OscConfig+0x286>
 800233e:	e6cc      	b.n	80020da <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002340:	f7ff f8b4 	bl	80014ac <HAL_GetTick>
 8002344:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	f57f ae99 	bpl.w	8002080 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7ff f8ad 	bl	80014ac <HAL_GetTick>
 8002352:	1b00      	subs	r0, r0, r4
 8002354:	2802      	cmp	r0, #2
 8002356:	d9f6      	bls.n	8002346 <HAL_RCC_OscConfig+0x2f2>
 8002358:	e6bf      	b.n	80020da <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235a:	2801      	cmp	r0, #1
 800235c:	f43f aebe 	beq.w	80020dc <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002360:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002362:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002368:	4291      	cmp	r1, r2
 800236a:	f47f aea0 	bne.w	80020ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	428a      	cmp	r2, r1
 8002376:	f47f ae9a 	bne.w	80020ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800237a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002380:	401a      	ands	r2, r3
 8002382:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002386:	f47f ae92 	bne.w	80020ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800238a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800238c:	0852      	lsrs	r2, r2, #1
 800238e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002392:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002394:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002398:	f47f ae89 	bne.w	80020ae <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800239c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800239e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80023a6:	f43f ae6b 	beq.w	8002080 <HAL_RCC_OscConfig+0x2c>
 80023aa:	e680      	b.n	80020ae <HAL_RCC_OscConfig+0x5a>

080023ac <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4c22      	ldr	r4, [pc, #136]	; (8002438 <HAL_RCC_MCOConfig+0x8c>)
 80023b0:	b088      	sub	sp, #32
 80023b2:	460e      	mov	r6, r1
 80023b4:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80023b6:	b9f8      	cbnz	r0, 80023f8 <HAL_RCC_MCOConfig+0x4c>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80023b8:	9001      	str	r0, [sp, #4]
 80023ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6323      	str	r3, [r4, #48]	; 0x30
 80023c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80023c4:	9007      	str	r0, [sp, #28]
    __MCO1_CLK_ENABLE();
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80023d2:	2302      	movs	r3, #2
 80023d4:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80023de:	a903      	add	r1, sp, #12
 80023e0:	4816      	ldr	r0, [pc, #88]	; (800243c <HAL_RCC_MCOConfig+0x90>)
 80023e2:	f7ff fd4f 	bl	8001e84 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80023e6:	68a3      	ldr	r3, [r4, #8]
 80023e8:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 80023ec:	ea43 0106 	orr.w	r1, r3, r6
 80023f0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80023f2:	60a1      	str	r1, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80023f4:	b008      	add	sp, #32
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
    __MCO2_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80023fe:	4810      	ldr	r0, [pc, #64]	; (8002440 <HAL_RCC_MCOConfig+0x94>)
    __MCO2_CLK_ENABLE();
 8002400:	f042 0204 	orr.w	r2, r2, #4
 8002404:	6322      	str	r2, [r4, #48]	; 0x30
 8002406:	6b22      	ldr	r2, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002408:	9307      	str	r3, [sp, #28]
    __MCO2_CLK_ENABLE();
 800240a:	f002 0204 	and.w	r2, r2, #4
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002416:	2202      	movs	r2, #2
 8002418:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2203      	movs	r2, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800241e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	e9cd 3205 	strd	r3, r2, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002424:	f7ff fd2e 	bl	8001e84 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002428:	68a3      	ldr	r3, [r4, #8]
 800242a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800242e:	ea43 0106 	orr.w	r1, r3, r6
 8002432:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
 8002436:	e7dc      	b.n	80023f2 <HAL_RCC_MCOConfig+0x46>
 8002438:	40023800 	.word	0x40023800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020800 	.word	0x40020800

08002444 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002444:	4913      	ldr	r1, [pc, #76]	; (8002494 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002446:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002448:	688b      	ldr	r3, [r1, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d01c      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x48>
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002456:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002458:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	bf14      	ite	ne
 8002462:	480d      	ldrne	r0, [pc, #52]	; (8002498 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002464:	480d      	ldreq	r0, [pc, #52]	; (800249c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002466:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800246a:	bf18      	it	ne
 800246c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002472:	fba1 0100 	umull	r0, r1, r1, r0
 8002476:	f7fd ff13 	bl	80002a0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_RCC_GetSysClockFreq+0x50>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002486:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800248a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <HAL_RCC_GetSysClockFreq+0x54>)
 800248e:	e7fc      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002492:	e7fa      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x46>
 8002494:	40023800 	.word	0x40023800
 8002498:	017d7840 	.word	0x017d7840
 800249c:	00f42400 	.word	0x00f42400

080024a0 <HAL_RCC_ClockConfig>:
{
 80024a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80024a6:	4604      	mov	r4, r0
 80024a8:	b910      	cbnz	r0, 80024b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
}
 80024ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_RCC_ClockConfig+0x124>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f002 0207 	and.w	r2, r2, #7
 80024b8:	428a      	cmp	r2, r1
 80024ba:	d328      	bcc.n	800250e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	6822      	ldr	r2, [r4, #0]
 80024be:	0797      	lsls	r7, r2, #30
 80024c0:	d42d      	bmi.n	800251e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	07d0      	lsls	r0, r2, #31
 80024c4:	d441      	bmi.n	800254a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_ClockConfig+0x124>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f002 0207 	and.w	r2, r2, #7
 80024ce:	42aa      	cmp	r2, r5
 80024d0:	d866      	bhi.n	80025a0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	6822      	ldr	r2, [r4, #0]
 80024d4:	0751      	lsls	r1, r2, #29
 80024d6:	d46c      	bmi.n	80025b2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	0713      	lsls	r3, r2, #28
 80024da:	d507      	bpl.n	80024ec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024dc:	4a3a      	ldr	r2, [pc, #232]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 80024de:	6921      	ldr	r1, [r4, #16]
 80024e0:	6893      	ldr	r3, [r2, #8]
 80024e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ec:	f7ff ffaa 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80024f0:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 80024f2:	4a36      	ldr	r2, [pc, #216]	; (80025cc <HAL_RCC_ClockConfig+0x12c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	40d8      	lsrs	r0, r3
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_ClockConfig+0x130>)
 8002500:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002502:	4b34      	ldr	r3, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x134>)
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f7fe fd07 	bl	8000f18 <HAL_InitTick>
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
 800250c:	e7ce      	b.n	80024ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	428b      	cmp	r3, r1
 800251a:	d1c6      	bne.n	80024aa <HAL_RCC_ClockConfig+0xa>
 800251c:	e7ce      	b.n	80024bc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 8002520:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	bf1e      	ittt	ne
 8002526:	6899      	ldrne	r1, [r3, #8]
 8002528:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800252c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	bf42      	ittt	mi
 8002532:	6899      	ldrmi	r1, [r3, #8]
 8002534:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002538:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253a:	4923      	ldr	r1, [pc, #140]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 800253c:	68a0      	ldr	r0, [r4, #8]
 800253e:	688b      	ldr	r3, [r1, #8]
 8002540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002544:	4303      	orrs	r3, r0
 8002546:	608b      	str	r3, [r1, #8]
 8002548:	e7bb      	b.n	80024c2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	6862      	ldr	r2, [r4, #4]
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 800254e:	2a01      	cmp	r2, #1
 8002550:	d11c      	bne.n	800258c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	d0a7      	beq.n	80024aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4e1b      	ldr	r6, [pc, #108]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 800255c:	68b3      	ldr	r3, [r6, #8]
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	4313      	orrs	r3, r2
 8002564:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002566:	f7fe ffa1 	bl	80014ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800256e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002570:	68b3      	ldr	r3, [r6, #8]
 8002572:	6862      	ldr	r2, [r4, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800257c:	d0a3      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe ff95 	bl	80014ac <HAL_GetTick>
 8002582:	1bc0      	subs	r0, r0, r7
 8002584:	4540      	cmp	r0, r8
 8002586:	d9f3      	bls.n	8002570 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e78f      	b.n	80024ac <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258c:	1e91      	subs	r1, r2, #2
 800258e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	d802      	bhi.n	800259a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002598:	e7de      	b.n	8002558 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	f013 0f02 	tst.w	r3, #2
 800259e:	e7db      	b.n	8002558 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a0:	b2ea      	uxtb	r2, r5
 80025a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	42ab      	cmp	r3, r5
 80025ac:	f47f af7d 	bne.w	80024aa <HAL_RCC_ClockConfig+0xa>
 80025b0:	e78f      	b.n	80024d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b2:	4905      	ldr	r1, [pc, #20]	; (80025c8 <HAL_RCC_ClockConfig+0x128>)
 80025b4:	68e0      	ldr	r0, [r4, #12]
 80025b6:	688b      	ldr	r3, [r1, #8]
 80025b8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025bc:	4303      	orrs	r3, r0
 80025be:	608b      	str	r3, [r1, #8]
 80025c0:	e78a      	b.n	80024d8 <HAL_RCC_ClockConfig+0x38>
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	0800f91c 	.word	0x0800f91c
 80025d0:	20000028 	.word	0x20000028
 80025d4:	20000030 	.word	0x20000030

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025d8:	4b01      	ldr	r3, [pc, #4]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000028 	.word	0x20000028

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	4a03      	ldr	r2, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80025f2:	6810      	ldr	r0, [r2, #0]
}
 80025f4:	40d8      	lsrs	r0, r3
 80025f6:	4770      	bx	lr
 80025f8:	40023800 	.word	0x40023800
 80025fc:	0800f92c 	.word	0x0800f92c
 8002600:	20000028 	.word	0x20000028

08002604 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002604:	230f      	movs	r3, #15
 8002606:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_GetClockConfig+0x34>)
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f002 0203 	and.w	r2, r2, #3
 8002610:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002618:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002620:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800262a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_RCC_GetClockConfig+0x38>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	600b      	str	r3, [r1, #0]
}
 8002636:	4770      	bx	lr
 8002638:	40023800 	.word	0x40023800
 800263c:	40023c00 	.word	0x40023c00

08002640 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002640:	4770      	bx	lr
	...

08002644 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002648:	2b01      	cmp	r3, #1
 800264a:	d130      	bne.n	80026ae <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	2302      	movs	r3, #2
 800264e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002652:	6803      	ldr	r3, [r0, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265c:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_TIM_Base_Start_IT+0x70>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01a      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d017      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002668:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002674:	4293      	cmp	r3, r2
 8002676:	d00f      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800267c:	4293      	cmp	r3, r2
 800267e:	d00b      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002680:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002688:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800268c:	4293      	cmp	r3, r2
 800268e:	d003      	beq.n	8002698 <HAL_TIM_Base_Start_IT+0x54>
 8002690:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002694:	4293      	cmp	r3, r2
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	2a06      	cmp	r2, #6
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2000      	movs	r0, #0
}
 80026ac:	4770      	bx	lr
    return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40010000 	.word	0x40010000

080026b8 <HAL_TIM_OC_DelayElapsedCallback>:
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_IC_CaptureCallback>:
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_PWM_PulseFinishedCallback>:
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_TriggerCallback>:
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c0:	6803      	ldr	r3, [r0, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	0791      	lsls	r1, r2, #30
{
 80026c6:	b510      	push	{r4, lr}
 80026c8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ca:	d50e      	bpl.n	80026ea <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	0792      	lsls	r2, r2, #30
 80026d0:	d50b      	bpl.n	80026ea <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d2:	f06f 0202 	mvn.w	r2, #2
 80026d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d8:	2201      	movs	r2, #1
 80026da:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	079b      	lsls	r3, r3, #30
 80026e0:	d077      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	f7ff ffea 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	2300      	movs	r3, #0
 80026e8:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	0750      	lsls	r0, r2, #29
 80026f0:	d510      	bpl.n	8002714 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	0751      	lsls	r1, r2, #29
 80026f6:	d50d      	bpl.n	8002714 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f8:	f06f 0204 	mvn.w	r2, #4
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fe:	2202      	movs	r2, #2
 8002700:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002708:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270a:	d068      	beq.n	80027de <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800270c:	f7ff ffd5 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002710:	2300      	movs	r3, #0
 8002712:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	0712      	lsls	r2, r2, #28
 800271a:	d50f      	bpl.n	800273c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	0710      	lsls	r0, r2, #28
 8002720:	d50c      	bpl.n	800273c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002722:	f06f 0208 	mvn.w	r2, #8
 8002726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002728:	2204      	movs	r2, #4
 800272a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002730:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002732:	d05a      	beq.n	80027ea <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002734:	f7ff ffc1 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002738:	2300      	movs	r3, #0
 800273a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	06d2      	lsls	r2, r2, #27
 8002742:	d510      	bpl.n	8002766 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	06d0      	lsls	r0, r2, #27
 8002748:	d50d      	bpl.n	8002766 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274a:	f06f 0210 	mvn.w	r2, #16
 800274e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002750:	2208      	movs	r2, #8
 8002752:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	d04b      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	f7ff ffac 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002762:	2300      	movs	r3, #0
 8002764:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002766:	6823      	ldr	r3, [r4, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	07d1      	lsls	r1, r2, #31
 800276c:	d508      	bpl.n	8002780 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	07d2      	lsls	r2, r2, #31
 8002772:	d505      	bpl.n	8002780 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002774:	f06f 0201 	mvn.w	r2, #1
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277a:	4620      	mov	r0, r4
 800277c:	f7fe fc10 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	0610      	lsls	r0, r2, #24
 8002786:	d508      	bpl.n	800279a <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	0611      	lsls	r1, r2, #24
 800278c:	d505      	bpl.n	800279a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800278e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002794:	4620      	mov	r0, r4
 8002796:	f000 f8c8 	bl	800292a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	0652      	lsls	r2, r2, #25
 80027a0:	d508      	bpl.n	80027b4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	0650      	lsls	r0, r2, #25
 80027a6:	d505      	bpl.n	80027b4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff ff85 	bl	80026be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	0691      	lsls	r1, r2, #26
 80027ba:	d522      	bpl.n	8002802 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	0692      	lsls	r2, r2, #26
 80027c0:	d51f      	bpl.n	8002802 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80027ce:	f000 b8ab 	b.w	8002928 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	f7ff ff71 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff ff70 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
 80027dc:	e783      	b.n	80026e6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	f7ff ff6b 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff6a 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
 80027e8:	e792      	b.n	8002710 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	f7ff ff65 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff ff64 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
 80027f4:	e7a0      	b.n	8002738 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	f7ff ff5f 	bl	80026b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ff5e 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002800:	e7af      	b.n	8002762 <HAL_TIM_IRQHandler+0xa2>
}
 8002802:	bd10      	pop	{r4, pc}

08002804 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	4a30      	ldr	r2, [pc, #192]	; (80028c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002806:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002808:	4290      	cmp	r0, r2
 800280a:	d012      	beq.n	8002832 <TIM_Base_SetConfig+0x2e>
 800280c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002810:	d00f      	beq.n	8002832 <TIM_Base_SetConfig+0x2e>
 8002812:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002816:	4290      	cmp	r0, r2
 8002818:	d00b      	beq.n	8002832 <TIM_Base_SetConfig+0x2e>
 800281a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800281e:	4290      	cmp	r0, r2
 8002820:	d007      	beq.n	8002832 <TIM_Base_SetConfig+0x2e>
 8002822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002826:	4290      	cmp	r0, r2
 8002828:	d003      	beq.n	8002832 <TIM_Base_SetConfig+0x2e>
 800282a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800282e:	4290      	cmp	r0, r2
 8002830:	d119      	bne.n	8002866 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002832:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002838:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	4a23      	ldr	r2, [pc, #140]	; (80028c8 <TIM_Base_SetConfig+0xc4>)
 800283c:	4290      	cmp	r0, r2
 800283e:	d029      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002840:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002844:	d026      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002846:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800284a:	4290      	cmp	r0, r2
 800284c:	d022      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 800284e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002852:	4290      	cmp	r0, r2
 8002854:	d01e      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800285a:	4290      	cmp	r0, r2
 800285c:	d01a      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 800285e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002862:	4290      	cmp	r0, r2
 8002864:	d016      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002866:	4a19      	ldr	r2, [pc, #100]	; (80028cc <TIM_Base_SetConfig+0xc8>)
 8002868:	4290      	cmp	r0, r2
 800286a:	d013      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 800286c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002870:	4290      	cmp	r0, r2
 8002872:	d00f      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002878:	4290      	cmp	r0, r2
 800287a:	d00b      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 800287c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002880:	4290      	cmp	r0, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 8002884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002888:	4290      	cmp	r0, r2
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x90>
 800288c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002890:	4290      	cmp	r0, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002894:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	694a      	ldr	r2, [r1, #20]
 800289e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80028a4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a6:	688b      	ldr	r3, [r1, #8]
 80028a8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028aa:	680b      	ldr	r3, [r1, #0]
 80028ac:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <TIM_Base_SetConfig+0xc4>)
 80028b0:	4298      	cmp	r0, r3
 80028b2:	d003      	beq.n	80028bc <TIM_Base_SetConfig+0xb8>
 80028b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b8:	4298      	cmp	r0, r3
 80028ba:	d101      	bne.n	80028c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	690b      	ldr	r3, [r1, #16]
 80028be:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c0:	2301      	movs	r3, #1
 80028c2:	6143      	str	r3, [r0, #20]
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000
 80028cc:	40014000 	.word	0x40014000

080028d0 <HAL_TIM_Base_Init>:
{
 80028d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80028d2:	4604      	mov	r4, r0
 80028d4:	b330      	cbz	r0, 8002924 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028de:	b91b      	cbnz	r3, 80028e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028e4:	f7ff feac 	bl	8002640 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	1d21      	adds	r1, r4, #4
 80028f2:	f7ff ff87 	bl	8002804 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80028fc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002902:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002906:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800290a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002916:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800291a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800291e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002922:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002924:	2001      	movs	r0, #1
 8002926:	e7fc      	b.n	8002922 <HAL_TIM_Base_Init+0x52>

08002928 <HAL_TIMEx_CommutCallback>:
 8002928:	4770      	bx	lr

0800292a <HAL_TIMEx_BreakCallback>:
 800292a:	4770      	bx	lr

0800292c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800292c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002930:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002934:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002938:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002940:	4770      	bx	lr

08002942 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002942:	2300      	movs	r3, #0
 8002944:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002946:	4770      	bx	lr

08002948 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002948:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800294a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002954:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002956:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002958:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800295a:	3301      	adds	r3, #1
 800295c:	6003      	str	r3, [r0, #0]
}
 800295e:	4770      	bx	lr

08002960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002960:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002962:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002964:	1c63      	adds	r3, r4, #1
 8002966:	d10a      	bne.n	800297e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002968:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800296e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002970:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002972:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8002974:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8002976:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002978:	3301      	adds	r3, #1
 800297a:	6003      	str	r3, [r0, #0]
}
 800297c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800297e:	f100 0208 	add.w	r2, r0, #8
 8002982:	4613      	mov	r3, r2
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	6815      	ldr	r5, [r2, #0]
 8002988:	42a5      	cmp	r5, r4
 800298a:	d9fa      	bls.n	8002982 <vListInsert+0x22>
 800298c:	e7ed      	b.n	800296a <vListInsert+0xa>

0800298e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800298e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8002992:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002994:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002996:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800299c:	bf08      	it	eq
 800299e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029a0:	2200      	movs	r2, #0
 80029a2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	3a01      	subs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029aa:	6818      	ldr	r0, [r3, #0]
}
 80029ac:	4770      	bx	lr

080029ae <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029b2:	f001 fd07 	bl	80043c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029b6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80029b8:	f001 fd26 	bl	8004408 <vPortExitCritical>

	return xReturn;
}
 80029bc:	fab4 f084 	clz	r0, r4
 80029c0:	0940      	lsrs	r0, r0, #5
 80029c2:	bd10      	pop	{r4, pc}

080029c4 <prvCopyDataToQueue>:
{
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029ca:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80029cc:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ce:	b952      	cbnz	r2, 80029e6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029d0:	6807      	ldr	r7, [r0, #0]
 80029d2:	bb47      	cbnz	r7, 8002a26 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029d4:	6880      	ldr	r0, [r0, #8]
 80029d6:	f001 f95d 	bl	8003c94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029da:	60a7      	str	r7, [r4, #8]
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029dc:	4605      	mov	r5, r0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029de:	3601      	adds	r6, #1
 80029e0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80029e2:	4628      	mov	r0, r5
 80029e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80029e6:	b965      	cbnz	r5, 8002a02 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029e8:	6840      	ldr	r0, [r0, #4]
 80029ea:	f00b fa23 	bl	800de34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029f2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f4:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029f6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d3f0      	bcc.n	80029de <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	6063      	str	r3, [r4, #4]
 8002a00:	e7ed      	b.n	80029de <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a02:	68c0      	ldr	r0, [r0, #12]
 8002a04:	f00b fa16 	bl	800de34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	4251      	negs	r1, r2
 8002a0e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a10:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a12:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a14:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a16:	bf3e      	ittt	cc
 8002a18:	68a3      	ldrcc	r3, [r4, #8]
 8002a1a:	185b      	addcc	r3, r3, r1
 8002a1c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002a1e:	2d02      	cmp	r5, #2
 8002a20:	d101      	bne.n	8002a26 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a22:	b116      	cbz	r6, 8002a2a <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8002a24:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8002a26:	2500      	movs	r5, #0
 8002a28:	e7d9      	b.n	80029de <prvCopyDataToQueue+0x1a>
 8002a2a:	4635      	mov	r5, r6
 8002a2c:	e7d7      	b.n	80029de <prvCopyDataToQueue+0x1a>

08002a2e <prvCopyDataFromQueue>:
{
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002a34:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a36:	b16a      	cbz	r2, 8002a54 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a38:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a3a:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a3c:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a3e:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a40:	bf28      	it	cs
 8002a42:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a44:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a46:	bf28      	it	cs
 8002a48:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a4a:	68d9      	ldr	r1, [r3, #12]
}
 8002a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a50:	f00b b9f0 	b.w	800de34 <memcpy>
}
 8002a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <prvUnlockQueue>:
{
 8002a5a:	b570      	push	{r4, r5, r6, lr}
 8002a5c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002a5e:	f001 fcb1 	bl	80043c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002a62:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a66:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002a6a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	dc14      	bgt.n	8002a9a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002a70:	23ff      	movs	r3, #255	; 0xff
 8002a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002a76:	f001 fcc7 	bl	8004408 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002a7a:	f001 fca3 	bl	80043c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002a7e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a82:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002a86:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a88:	2d00      	cmp	r5, #0
 8002a8a:	dc12      	bgt.n	8002ab2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002a8c:	23ff      	movs	r3, #255	; 0xff
 8002a8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8002a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002a96:	f001 bcb7 	b.w	8004408 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0e7      	beq.n	8002a70 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f000 ff71 	bl	8003988 <xTaskRemoveFromEventList>
 8002aa6:	b108      	cbz	r0, 8002aac <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002aa8:	f000 ffec 	bl	8003a84 <vTaskMissedYield>
			--cTxLock;
 8002aac:	3d01      	subs	r5, #1
 8002aae:	b26d      	sxtb	r5, r5
 8002ab0:	e7dc      	b.n	8002a6c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab2:	6923      	ldr	r3, [r4, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0e9      	beq.n	8002a8c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab8:	4630      	mov	r0, r6
 8002aba:	f000 ff65 	bl	8003988 <xTaskRemoveFromEventList>
 8002abe:	b108      	cbz	r0, 8002ac4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002ac0:	f000 ffe0 	bl	8003a84 <vTaskMissedYield>
				--cRxLock;
 8002ac4:	3d01      	subs	r5, #1
 8002ac6:	b26d      	sxtb	r5, r5
 8002ac8:	e7de      	b.n	8002a88 <prvUnlockQueue+0x2e>
	...

08002acc <xQueueGenericReset>:
{
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	b940      	cbnz	r0, 8002ae6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002ae6:	f001 fc6d 	bl	80043c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aea:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8002aee:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002af0:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af2:	434b      	muls	r3, r1
 8002af4:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af6:	1a5b      	subs	r3, r3, r1
 8002af8:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002afa:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002afc:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002afe:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002b00:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b02:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002b04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002b0c:	b995      	cbnz	r5, 8002b34 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b0e:	6923      	ldr	r3, [r4, #16]
 8002b10:	b163      	cbz	r3, 8002b2c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b12:	f104 0010 	add.w	r0, r4, #16
 8002b16:	f000 ff37 	bl	8003988 <xTaskRemoveFromEventList>
 8002b1a:	b138      	cbz	r0, 8002b2c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <xQueueGenericReset+0x7c>)
 8002b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002b2c:	f001 fc6c 	bl	8004408 <vPortExitCritical>
}
 8002b30:	2001      	movs	r0, #1
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b34:	f104 0010 	add.w	r0, r4, #16
 8002b38:	f7ff fef8 	bl	800292c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b3c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002b40:	f7ff fef4 	bl	800292c <vListInitialise>
 8002b44:	e7f2      	b.n	8002b2c <xQueueGenericReset+0x60>
 8002b46:	bf00      	nop
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <xQueueGenericCreate>:
	{
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	460d      	mov	r5, r1
 8002b50:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b52:	4606      	mov	r6, r0
 8002b54:	b940      	cbnz	r0, 8002b68 <xQueueGenericCreate+0x1c>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	e7fe      	b.n	8002b66 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b68:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b6a:	3050      	adds	r0, #80	; 0x50
 8002b6c:	f001 fb0a 	bl	8004184 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002b70:	4604      	mov	r4, r0
 8002b72:	b158      	cbz	r0, 8002b8c <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b74:	b165      	cbz	r5, 8002b90 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b76:	f100 0350 	add.w	r3, r0, #80	; 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8002b7a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8002b7e:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b80:	2101      	movs	r1, #1
 8002b82:	4620      	mov	r0, r4
 8002b84:	f7ff ffa2 	bl	8002acc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002b88:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b90:	4603      	mov	r3, r0
 8002b92:	e7f2      	b.n	8002b7a <xQueueGenericCreate+0x2e>

08002b94 <xQueueCreateCountingSemaphore>:
	{
 8002b94:	b510      	push	{r4, lr}
 8002b96:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8002b98:	b940      	cbnz	r0, 8002bac <xQueueCreateCountingSemaphore+0x18>
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	e7fe      	b.n	8002baa <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002bac:	4288      	cmp	r0, r1
 8002bae:	d208      	bcs.n	8002bc2 <xQueueCreateCountingSemaphore+0x2e>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	f7ff ffc1 	bl	8002b4c <xQueueGenericCreate>
		if( xHandle != NULL )
 8002bca:	b100      	cbz	r0, 8002bce <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002bcc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8002bce:	bd10      	pop	{r4, pc}

08002bd0 <xQueueGenericSend>:
{
 8002bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd4:	4688      	mov	r8, r1
 8002bd6:	9201      	str	r2, [sp, #4]
 8002bd8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002bda:	4604      	mov	r4, r0
 8002bdc:	b940      	cbnz	r0, 8002bf0 <xQueueGenericSend+0x20>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	e7fe      	b.n	8002bee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bf0:	b951      	cbnz	r1, 8002c08 <xQueueGenericSend+0x38>
 8002bf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bf4:	b143      	cbz	r3, 8002c08 <xQueueGenericSend+0x38>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	e7fe      	b.n	8002c06 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c08:	2f02      	cmp	r7, #2
 8002c0a:	d10b      	bne.n	8002c24 <xQueueGenericSend+0x54>
 8002c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d008      	beq.n	8002c24 <xQueueGenericSend+0x54>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	e7fe      	b.n	8002c22 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c24:	f000 ffdc 	bl	8003be0 <xTaskGetSchedulerState>
 8002c28:	4606      	mov	r6, r0
 8002c2a:	b950      	cbnz	r0, 8002c42 <xQueueGenericSend+0x72>
 8002c2c:	9b01      	ldr	r3, [sp, #4]
 8002c2e:	b14b      	cbz	r3, 8002c44 <xQueueGenericSend+0x74>
 8002c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c34:	f383 8811 	msr	BASEPRI, r3
 8002c38:	f3bf 8f6f 	isb	sy
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericSend+0x70>
 8002c42:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 8002c44:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8002d30 <xQueueGenericSend+0x160>
		prvLockQueue( pxQueue );
 8002c48:	f04f 0900 	mov.w	r9, #0
 8002c4c:	e037      	b.n	8002cbe <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c4e:	9d01      	ldr	r5, [sp, #4]
 8002c50:	b91d      	cbnz	r5, 8002c5a <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8002c52:	f001 fbd9 	bl	8004408 <vPortExitCritical>
			return errQUEUE_FULL;
 8002c56:	2000      	movs	r0, #0
 8002c58:	e050      	b.n	8002cfc <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8002c5a:	b916      	cbnz	r6, 8002c62 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c5c:	a802      	add	r0, sp, #8
 8002c5e:	f000 fecf 	bl	8003a00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002c62:	f001 fbd1 	bl	8004408 <vPortExitCritical>
		vTaskSuspendAll();
 8002c66:	f000 fd25 	bl	80036b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c6a:	f001 fbab 	bl	80043c4 <vPortEnterCritical>
 8002c6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002c72:	2bff      	cmp	r3, #255	; 0xff
 8002c74:	bf08      	it	eq
 8002c76:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002c7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c7e:	2bff      	cmp	r3, #255	; 0xff
 8002c80:	bf08      	it	eq
 8002c82:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002c86:	f001 fbbf 	bl	8004408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c8a:	a901      	add	r1, sp, #4
 8002c8c:	a802      	add	r0, sp, #8
 8002c8e:	f000 fec1 	bl	8003a14 <xTaskCheckForTimeOut>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d146      	bne.n	8002d24 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c96:	f001 fb95 	bl	80043c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d12f      	bne.n	8002d02 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002ca2:	f001 fbb1 	bl	8004408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ca6:	9901      	ldr	r1, [sp, #4]
 8002ca8:	f104 0010 	add.w	r0, r4, #16
 8002cac:	f000 fe54 	bl	8003958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff fed2 	bl	8002a5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cb6:	f000 fd89 	bl	80037cc <xTaskResumeAll>
 8002cba:	b350      	cbz	r0, 8002d12 <xQueueGenericSend+0x142>
 8002cbc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002cbe:	f001 fb81 	bl	80043c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002cc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d301      	bcc.n	8002cce <xQueueGenericSend+0xfe>
 8002cca:	2f02      	cmp	r7, #2
 8002ccc:	d1bf      	bne.n	8002c4e <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cce:	463a      	mov	r2, r7
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7ff fe76 	bl	80029c4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cda:	b11b      	cbz	r3, 8002ce4 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cdc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ce0:	f000 fe52 	bl	8003988 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002ce4:	b138      	cbz	r0, 8002cf6 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <xQueueGenericSend+0x160>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002cf6:	f001 fb87 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 8002cfa:	2001      	movs	r0, #1
}
 8002cfc:	b004      	add	sp, #16
 8002cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8002d02:	f001 fb81 	bl	8004408 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002d06:	4620      	mov	r0, r4
 8002d08:	f7ff fea7 	bl	8002a5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d0c:	f000 fd5e 	bl	80037cc <xTaskResumeAll>
 8002d10:	e7d4      	b.n	8002cbc <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8002d12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d16:	f8ca 3000 	str.w	r3, [sl]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	e7cb      	b.n	8002cbc <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fe98 	bl	8002a5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d2a:	f000 fd4f 	bl	80037cc <xTaskResumeAll>
 8002d2e:	e792      	b.n	8002c56 <xQueueGenericSend+0x86>
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <xQueueCreateMutex>:
	{
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d38:	2050      	movs	r0, #80	; 0x50
 8002d3a:	f001 fa23 	bl	8004184 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002d3e:	4604      	mov	r4, r0
 8002d40:	b188      	cbz	r0, 8002d66 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8002d42:	2500      	movs	r5, #0
 8002d44:	2101      	movs	r1, #1
 8002d46:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d4a:	6000      	str	r0, [r0, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d4c:	f7ff febe 	bl	8002acc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002d50:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d54:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d56:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002d58:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	462a      	mov	r2, r5
 8002d5e:	4629      	mov	r1, r5
 8002d60:	4620      	mov	r0, r4
 8002d62:	f7ff ff35 	bl	8002bd0 <xQueueGenericSend>
	}
 8002d66:	4620      	mov	r0, r4
 8002d68:	bd70      	pop	{r4, r5, r6, pc}

08002d6a <xQueueGenericSendFromISR>:
{
 8002d6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d6e:	4689      	mov	r9, r1
 8002d70:	4690      	mov	r8, r2
 8002d72:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002d74:	4604      	mov	r4, r0
 8002d76:	b940      	cbnz	r0, 8002d8a <xQueueGenericSendFromISR+0x20>
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8a:	b951      	cbnz	r1, 8002da2 <xQueueGenericSendFromISR+0x38>
 8002d8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d8e:	b143      	cbz	r3, 8002da2 <xQueueGenericSendFromISR+0x38>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	e7fe      	b.n	8002da0 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002da2:	2f02      	cmp	r7, #2
 8002da4:	d10b      	bne.n	8002dbe <xQueueGenericSendFromISR+0x54>
 8002da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d008      	beq.n	8002dbe <xQueueGenericSendFromISR+0x54>
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dbe:	f001 fc19 	bl	80045f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc2:	f3ef 8611 	mrs	r6, BASEPRI
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dd6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002dd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d301      	bcc.n	8002de2 <xQueueGenericSendFromISR+0x78>
 8002dde:	2f02      	cmp	r7, #2
 8002de0:	d123      	bne.n	8002e2a <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002de2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8002de8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dea:	463a      	mov	r2, r7
 8002dec:	4649      	mov	r1, r9
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff fde8 	bl	80029c4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002df4:	1c6b      	adds	r3, r5, #1
 8002df6:	d113      	bne.n	8002e20 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dfa:	b90b      	cbnz	r3, 8002e00 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	e00b      	b.n	8002e18 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002e04:	f000 fdc0 	bl	8003988 <xTaskRemoveFromEventList>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d0f7      	beq.n	8002dfc <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8002e0c:	f1b8 0f00 	cmp.w	r8, #0
 8002e10:	d0f4      	beq.n	8002dfc <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e12:	2001      	movs	r0, #1
 8002e14:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e18:	f386 8811 	msr	BASEPRI, r6
}
 8002e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e20:	3501      	adds	r5, #1
 8002e22:	b26d      	sxtb	r5, r5
 8002e24:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002e28:	e7e8      	b.n	8002dfc <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e7f4      	b.n	8002e18 <xQueueGenericSendFromISR+0xae>

08002e2e <xQueueGiveFromISR>:
{
 8002e2e:	b570      	push	{r4, r5, r6, lr}
 8002e30:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002e32:	4604      	mov	r4, r0
 8002e34:	b940      	cbnz	r0, 8002e48 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	e7fe      	b.n	8002e46 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e4a:	b143      	cbz	r3, 8002e5e <xQueueGiveFromISR+0x30>
 8002e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e50:	f383 8811 	msr	BASEPRI, r3
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	e7fe      	b.n	8002e5c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e5e:	6803      	ldr	r3, [r0, #0]
 8002e60:	b953      	cbnz	r3, 8002e78 <xQueueGiveFromISR+0x4a>
 8002e62:	6883      	ldr	r3, [r0, #8]
 8002e64:	b143      	cbz	r3, 8002e78 <xQueueGiveFromISR+0x4a>
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	e7fe      	b.n	8002e76 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e78:	f001 fbbc 	bl	80045f4 <vPortValidateInterruptPriority>
	__asm volatile
 8002e7c:	f3ef 8611 	mrs	r6, BASEPRI
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d91c      	bls.n	8002ed2 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e9c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8002e9e:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ea0:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ea2:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8002ea4:	d110      	bne.n	8002ec8 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ea8:	b90b      	cbnz	r3, 8002eae <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8002eaa:	2001      	movs	r0, #1
 8002eac:	e009      	b.n	8002ec2 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002eb2:	f000 fd69 	bl	8003988 <xTaskRemoveFromEventList>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d0f7      	beq.n	8002eaa <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	d0f5      	beq.n	8002eaa <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002ec2:	f386 8811 	msr	BASEPRI, r6
}
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ec8:	3301      	adds	r3, #1
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ed0:	e7eb      	b.n	8002eaa <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e7f5      	b.n	8002ec2 <xQueueGiveFromISR+0x94>
	...

08002ed8 <xQueueReceive>:
{
 8002ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002edc:	b085      	sub	sp, #20
 8002ede:	460f      	mov	r7, r1
 8002ee0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	b940      	cbnz	r0, 8002ef8 <xQueueReceive+0x20>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ef8:	b951      	cbnz	r1, 8002f10 <xQueueReceive+0x38>
 8002efa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002efc:	b143      	cbz	r3, 8002f10 <xQueueReceive+0x38>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	e7fe      	b.n	8002f0e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f10:	f000 fe66 	bl	8003be0 <xTaskGetSchedulerState>
 8002f14:	4606      	mov	r6, r0
 8002f16:	b950      	cbnz	r0, 8002f2e <xQueueReceive+0x56>
 8002f18:	9b01      	ldr	r3, [sp, #4]
 8002f1a:	b14b      	cbz	r3, 8002f30 <xQueueReceive+0x58>
 8002f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	e7fe      	b.n	8002f2c <xQueueReceive+0x54>
 8002f2e:	2600      	movs	r6, #0
					portYIELD_WITHIN_API();
 8002f30:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8003014 <xQueueReceive+0x13c>
		prvLockQueue( pxQueue );
 8002f34:	f04f 0800 	mov.w	r8, #0
 8002f38:	e03b      	b.n	8002fb2 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f3a:	9d01      	ldr	r5, [sp, #4]
 8002f3c:	b91d      	cbnz	r5, 8002f46 <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8002f3e:	f001 fa63 	bl	8004408 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002f42:	2000      	movs	r0, #0
 8002f44:	e052      	b.n	8002fec <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8002f46:	b916      	cbnz	r6, 8002f4e <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f48:	a802      	add	r0, sp, #8
 8002f4a:	f000 fd59 	bl	8003a00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002f4e:	f001 fa5b 	bl	8004408 <vPortExitCritical>
		vTaskSuspendAll();
 8002f52:	f000 fbaf 	bl	80036b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f56:	f001 fa35 	bl	80043c4 <vPortEnterCritical>
 8002f5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	bf08      	it	eq
 8002f62:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002f66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	bf08      	it	eq
 8002f6e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002f72:	f001 fa49 	bl	8004408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f76:	a901      	add	r1, sp, #4
 8002f78:	a802      	add	r0, sp, #8
 8002f7a:	f000 fd4b 	bl	8003a14 <xTaskCheckForTimeOut>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d13d      	bne.n	8002ffe <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff fd13 	bl	80029ae <prvIsQueueEmpty>
 8002f88:	b398      	cbz	r0, 8002ff2 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f8a:	9901      	ldr	r1, [sp, #4]
 8002f8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f90:	f000 fce2 	bl	8003958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7ff fd60 	bl	8002a5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f9a:	f000 fc17 	bl	80037cc <xTaskResumeAll>
 8002f9e:	b938      	cbnz	r0, 8002fb0 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8002fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fa4:	f8c9 3000 	str.w	r3, [r9]
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002fb2:	f001 fa07 	bl	80043c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	d0be      	beq.n	8002f3a <xQueueReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fbc:	4639      	mov	r1, r7
 8002fbe:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fc0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fc2:	f7ff fd34 	bl	8002a2e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fc6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	b163      	cbz	r3, 8002fe6 <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fcc:	f104 0010 	add.w	r0, r4, #16
 8002fd0:	f000 fcda 	bl	8003988 <xTaskRemoveFromEventList>
 8002fd4:	b138      	cbz	r0, 8002fe6 <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <xQueueReceive+0x13c>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002fe6:	f001 fa0f 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 8002fea:	2001      	movs	r0, #1
}
 8002fec:	b005      	add	sp, #20
 8002fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fd31 	bl	8002a5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ff8:	f000 fbe8 	bl	80037cc <xTaskResumeAll>
 8002ffc:	e7d8      	b.n	8002fb0 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 8002ffe:	4620      	mov	r0, r4
 8003000:	f7ff fd2b 	bl	8002a5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003004:	f000 fbe2 	bl	80037cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fcd0 	bl	80029ae <prvIsQueueEmpty>
 800300e:	2800      	cmp	r0, #0
 8003010:	d0ce      	beq.n	8002fb0 <xQueueReceive+0xd8>
 8003012:	e796      	b.n	8002f42 <xQueueReceive+0x6a>
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <xQueueSemaphoreTake>:
{
 8003018:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800301c:	4604      	mov	r4, r0
{
 800301e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003020:	b940      	cbnz	r0, 8003034 <xQueueSemaphoreTake+0x1c>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	e7fe      	b.n	8003032 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003034:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003036:	b145      	cbz	r5, 800304a <xQueueSemaphoreTake+0x32>
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	e7fe      	b.n	8003048 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304a:	f000 fdc9 	bl	8003be0 <xTaskGetSchedulerState>
 800304e:	4606      	mov	r6, r0
 8003050:	b950      	cbnz	r0, 8003068 <xQueueSemaphoreTake+0x50>
 8003052:	9b01      	ldr	r3, [sp, #4]
 8003054:	b16b      	cbz	r3, 8003072 <xQueueSemaphoreTake+0x5a>
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	e7fe      	b.n	8003066 <xQueueSemaphoreTake+0x4e>
 8003068:	462e      	mov	r6, r5
					portYIELD_WITHIN_API();
 800306a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800319c <xQueueSemaphoreTake+0x184>
		prvLockQueue( pxQueue );
 800306e:	2700      	movs	r7, #0
 8003070:	e051      	b.n	8003116 <xQueueSemaphoreTake+0xfe>
 8003072:	4605      	mov	r5, r0
 8003074:	e7f9      	b.n	800306a <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003076:	9b01      	ldr	r3, [sp, #4]
 8003078:	b963      	cbnz	r3, 8003094 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800307a:	b145      	cbz	r5, 800308e <xQueueSemaphoreTake+0x76>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	e7fe      	b.n	800308c <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 800308e:	f001 f9bb 	bl	8004408 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003092:	e05e      	b.n	8003152 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8003094:	b916      	cbnz	r6, 800309c <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003096:	a802      	add	r0, sp, #8
 8003098:	f000 fcb2 	bl	8003a00 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800309c:	f001 f9b4 	bl	8004408 <vPortExitCritical>
		vTaskSuspendAll();
 80030a0:	f000 fb08 	bl	80036b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a4:	f001 f98e 	bl	80043c4 <vPortEnterCritical>
 80030a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	bf08      	it	eq
 80030b0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80030b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80030b8:	2bff      	cmp	r3, #255	; 0xff
 80030ba:	bf08      	it	eq
 80030bc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80030c0:	f001 f9a2 	bl	8004408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c4:	a901      	add	r1, sp, #4
 80030c6:	a802      	add	r0, sp, #8
 80030c8:	f000 fca4 	bl	8003a14 <xTaskCheckForTimeOut>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d14a      	bne.n	8003166 <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d0:	4620      	mov	r0, r4
 80030d2:	f7ff fc6c 	bl	80029ae <prvIsQueueEmpty>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d03f      	beq.n	800315a <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	b93b      	cbnz	r3, 80030ee <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 80030de:	f001 f971 	bl	80043c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030e2:	68a0      	ldr	r0, [r4, #8]
 80030e4:	f000 fd8c 	bl	8003c00 <xTaskPriorityInherit>
 80030e8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80030ea:	f001 f98d 	bl	8004408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ee:	9901      	ldr	r1, [sp, #4]
 80030f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030f4:	f000 fc30 	bl	8003958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff fcae 	bl	8002a5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030fe:	f000 fb65 	bl	80037cc <xTaskResumeAll>
 8003102:	b938      	cbnz	r0, 8003114 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8003104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003108:	f8c8 3000 	str.w	r3, [r8]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003116:	f001 f955 	bl	80043c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800311a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0aa      	beq.n	8003076 <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003120:	3b01      	subs	r3, #1
 8003122:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	b913      	cbnz	r3, 800312e <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003128:	f000 feb8 	bl	8003e9c <pvTaskIncrementMutexHeldCount>
 800312c:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800312e:	6923      	ldr	r3, [r4, #16]
 8003130:	b163      	cbz	r3, 800314c <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003132:	f104 0010 	add.w	r0, r4, #16
 8003136:	f000 fc27 	bl	8003988 <xTaskRemoveFromEventList>
 800313a:	b138      	cbz	r0, 800314c <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <xQueueSemaphoreTake+0x184>)
 800313e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800314c:	f001 f95c 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 8003150:	2501      	movs	r5, #1
}
 8003152:	4628      	mov	r0, r5
 8003154:	b004      	add	sp, #16
 8003156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff fc7d 	bl	8002a5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003160:	f000 fb34 	bl	80037cc <xTaskResumeAll>
 8003164:	e7d6      	b.n	8003114 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff fc77 	bl	8002a5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800316c:	f000 fb2e 	bl	80037cc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003170:	4620      	mov	r0, r4
 8003172:	f7ff fc1c 	bl	80029ae <prvIsQueueEmpty>
 8003176:	2800      	cmp	r0, #0
 8003178:	d0cc      	beq.n	8003114 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800317a:	2d00      	cmp	r5, #0
 800317c:	d0e9      	beq.n	8003152 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800317e:	f001 f921 	bl	80043c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003182:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003184:	b119      	cbz	r1, 800318e <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003186:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800318e:	68a0      	ldr	r0, [r4, #8]
 8003190:	f000 fdd0 	bl	8003d34 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8003194:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8003196:	f001 f937 	bl	8004408 <vPortExitCritical>
 800319a:	e7da      	b.n	8003152 <xQueueSemaphoreTake+0x13a>
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <xQueueReceiveFromISR>:
{
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a4:	4689      	mov	r9, r1
 80031a6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80031a8:	4605      	mov	r5, r0
 80031aa:	b940      	cbnz	r0, 80031be <xQueueReceiveFromISR+0x1e>
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	e7fe      	b.n	80031bc <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031be:	b951      	cbnz	r1, 80031d6 <xQueueReceiveFromISR+0x36>
 80031c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031c2:	b143      	cbz	r3, 80031d6 <xQueueReceiveFromISR+0x36>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	e7fe      	b.n	80031d4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031d6:	f001 fa0d 	bl	80045f4 <vPortValidateInterruptPriority>
	__asm volatile
 80031da:	f3ef 8711 	mrs	r7, BASEPRI
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ee:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031f0:	b31c      	cbz	r4, 800323a <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80031f2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031f6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80031f8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031fa:	4628      	mov	r0, r5
 80031fc:	f7ff fc17 	bl	8002a2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003200:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8003202:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003204:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8003206:	d113      	bne.n	8003230 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003208:	692b      	ldr	r3, [r5, #16]
 800320a:	b90b      	cbnz	r3, 8003210 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800320c:	2001      	movs	r0, #1
 800320e:	e00b      	b.n	8003228 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003210:	f105 0010 	add.w	r0, r5, #16
 8003214:	f000 fbb8 	bl	8003988 <xTaskRemoveFromEventList>
 8003218:	2800      	cmp	r0, #0
 800321a:	d0f7      	beq.n	800320c <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800321c:	f1b8 0f00 	cmp.w	r8, #0
 8003220:	d0f4      	beq.n	800320c <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003222:	2001      	movs	r0, #1
 8003224:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003228:	f387 8811 	msr	BASEPRI, r7
}
 800322c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003230:	3601      	adds	r6, #1
 8003232:	b276      	sxtb	r6, r6
 8003234:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003238:	e7e8      	b.n	800320c <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800323a:	4620      	mov	r0, r4
 800323c:	e7f4      	b.n	8003228 <xQueueReceiveFromISR+0x88>

0800323e <uxQueueMessagesWaiting>:
{
 800323e:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8003240:	4604      	mov	r4, r0
 8003242:	b940      	cbnz	r0, 8003256 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	e7fe      	b.n	8003254 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8003256:	f001 f8b5 	bl	80043c4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800325a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800325c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800325e:	f001 f8d3 	bl	8004408 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003262:	9801      	ldr	r0, [sp, #4]
 8003264:	b002      	add	sp, #8
 8003266:	bd10      	pop	{r4, pc}

08003268 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8003268:	b940      	cbnz	r0, 800327c <uxQueueMessagesWaitingFromISR+0x14>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 800327c:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800327e:	4770      	bx	lr

08003280 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003280:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003282:	4909      	ldr	r1, [pc, #36]	; (80032a8 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003284:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003286:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800328a:	4282      	cmp	r2, r0
 800328c:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8003290:	d106      	bne.n	80032a0 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003292:	4a06      	ldr	r2, [pc, #24]	; (80032ac <vQueueUnregisterQueue+0x2c>)
 8003294:	2100      	movs	r1, #0
 8003296:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800329a:	4422      	add	r2, r4
 800329c:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800329e:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032a0:	3301      	adds	r3, #1
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d1ef      	bne.n	8003286 <vQueueUnregisterQueue+0x6>
 80032a6:	e7fa      	b.n	800329e <vQueueUnregisterQueue+0x1e>
 80032a8:	2000e41c 	.word	0x2000e41c
 80032ac:	2000e418 	.word	0x2000e418

080032b0 <vQueueDelete>:
{
 80032b0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80032b2:	b940      	cbnz	r0, 80032c6 <vQueueDelete+0x16>
 80032b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	e7fe      	b.n	80032c4 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80032c6:	f7ff ffdb 	bl	8003280 <vQueueUnregisterQueue>
}
 80032ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 80032ce:	f000 bfd9 	b.w	8004284 <vPortFree>
	...

080032d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <prvResetNextTaskUnblockTime+0x1c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	b91a      	cbnz	r2, 80032e4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032e0:	605a      	str	r2, [r3, #4]
	}
}
 80032e2:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	6852      	ldr	r2, [r2, #4]
 80032ec:	e7f8      	b.n	80032e0 <prvResetNextTaskUnblockTime+0xc>
 80032ee:	bf00      	nop
 80032f0:	200000d4 	.word	0x200000d4

080032f4 <prvAddCurrentTaskToDelayedList.isra.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80032f4:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032f6:	4c12      	ldr	r4, [pc, #72]	; (8003340 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80032f8:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 80032fa:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032fc:	68e0      	ldr	r0, [r4, #12]
 80032fe:	3004      	adds	r0, #4
 8003300:	f7ff fb45 	bl	800298e <uxListRemove>
 8003304:	b938      	cbnz	r0, 8003316 <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003306:	68e2      	ldr	r2, [r4, #12]
 8003308:	6923      	ldr	r3, [r4, #16]
 800330a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800330c:	2201      	movs	r2, #1
 800330e:	408a      	lsls	r2, r1
 8003310:	ea23 0302 	bic.w	r3, r3, r2
 8003314:	6123      	str	r3, [r4, #16]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003316:	68e3      	ldr	r3, [r4, #12]
 8003318:	1975      	adds	r5, r6, r5
 800331a:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800331c:	d306      	bcc.n	800332c <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800331e:	6960      	ldr	r0, [r4, #20]
 8003320:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003326:	3104      	adds	r1, #4
 8003328:	f7ff bb1a 	b.w	8002960 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	68e1      	ldr	r1, [r4, #12]
 8003330:	3104      	adds	r1, #4
 8003332:	f7ff fb15 	bl	8002960 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003336:	6863      	ldr	r3, [r4, #4]
 8003338:	429d      	cmp	r5, r3
				xNextTaskUnblockTime = xTimeToWake;
 800333a:	bf38      	it	cc
 800333c:	6065      	strcc	r5, [r4, #4]
}
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	200000d4 	.word	0x200000d4

08003344 <prvIdleTask>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003344:	4c12      	ldr	r4, [pc, #72]	; (8003390 <prvIdleTask+0x4c>)
				taskYIELD();
 8003346:	4e13      	ldr	r6, [pc, #76]	; (8003394 <prvIdleTask+0x50>)
{
 8003348:	b580      	push	{r7, lr}
				taskYIELD();
 800334a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800334e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003350:	b943      	cbnz	r3, 8003364 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003354:	2b01      	cmp	r3, #1
 8003356:	d9fa      	bls.n	800334e <prvIdleTask+0xa>
				taskYIELD();
 8003358:	6037      	str	r7, [r6, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	e7f4      	b.n	800334e <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8003364:	f001 f82e 	bl	80043c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800336a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800336c:	1d28      	adds	r0, r5, #4
 800336e:	f7ff fb0e 	bl	800298e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003374:	3b01      	subs	r3, #1
 8003376:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8003378:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800337a:	3b01      	subs	r3, #1
 800337c:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 800337e:	f001 f843 	bl	8004408 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003382:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003384:	f000 ff7e 	bl	8004284 <vPortFree>
			vPortFree( pxTCB );
 8003388:	4628      	mov	r0, r5
 800338a:	f000 ff7b 	bl	8004284 <vPortFree>
	}
 800338e:	e7de      	b.n	800334e <prvIdleTask+0xa>
 8003390:	200000d4 	.word	0x200000d4
 8003394:	e000ed04 	.word	0xe000ed04

08003398 <xTaskCreate>:
	{
 8003398:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800339c:	0096      	lsls	r6, r2, #2
	{
 800339e:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a0:	4630      	mov	r0, r6
	{
 80033a2:	460c      	mov	r4, r1
 80033a4:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a6:	f000 feed 	bl	8004184 <pvPortMalloc>
			if( pxStack != NULL )
 80033aa:	4681      	mov	r9, r0
 80033ac:	b1a0      	cbz	r0, 80033d8 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033ae:	205c      	movs	r0, #92	; 0x5c
 80033b0:	f000 fee8 	bl	8004184 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80033b4:	4605      	mov	r5, r0
 80033b6:	b160      	cbz	r0, 80033d2 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 80033b8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033bc:	4632      	mov	r2, r6
 80033be:	21a5      	movs	r1, #165	; 0xa5
 80033c0:	4648      	mov	r0, r9
 80033c2:	f00a fd5f 	bl	800de84 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033c6:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 80033ca:	b944      	cbnz	r4, 80033de <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033cc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80033d0:	e014      	b.n	80033fc <xTaskCreate+0x64>
					vPortFree( pxStack );
 80033d2:	4648      	mov	r0, r9
 80033d4:	f000 ff56 	bl	8004284 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033d8:	f04f 36ff 	mov.w	r6, #4294967295
 80033dc:	e09a      	b.n	8003514 <xTaskCreate+0x17c>
 80033de:	1e63      	subs	r3, r4, #1
 80033e0:	f105 0234 	add.w	r2, r5, #52	; 0x34
 80033e4:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80033ea:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80033ee:	7819      	ldrb	r1, [r3, #0]
 80033f0:	b109      	cbz	r1, 80033f6 <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f2:	429c      	cmp	r4, r3
 80033f4:	d1f7      	bne.n	80033e6 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033f6:	2300      	movs	r3, #0
 80033f8:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80033fe:	2c06      	cmp	r4, #6
 8003400:	bf28      	it	cs
 8003402:	2406      	movcs	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003404:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003408:	f105 0904 	add.w	r9, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 800340c:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800340e:	64ec      	str	r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003410:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 8003412:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003416:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003418:	f7ff fa93 	bl	8002942 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800341c:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003420:	f105 0018 	add.w	r0, r5, #24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003424:	445e      	add	r6, fp
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003426:	f7ff fa8c 	bl	8002942 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800342a:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800342e:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003430:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003432:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003434:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003438:	4642      	mov	r2, r8
 800343a:	4639      	mov	r1, r7
 800343c:	f026 0007 	bic.w	r0, r6, #7
 8003440:	f000 ff96 	bl	8004370 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8003444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003446:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8003448:	b103      	cbz	r3, 800344c <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800344a:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 800344c:	4c38      	ldr	r4, [pc, #224]	; (8003530 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 800344e:	f000 ffb9 	bl	80043c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003454:	3301      	adds	r3, #1
 8003456:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8003458:	68e3      	ldr	r3, [r4, #12]
 800345a:	f104 0734 	add.w	r7, r4, #52	; 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d15b      	bne.n	800351a <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 8003462:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d12f      	bne.n	80034ca <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800346a:	4638      	mov	r0, r7
 800346c:	f7ff fa5e 	bl	800292c <vListInitialise>
 8003470:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003474:	f7ff fa5a 	bl	800292c <vListInitialise>
 8003478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800347c:	f7ff fa56 	bl	800292c <vListInitialise>
 8003480:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8003484:	f7ff fa52 	bl	800292c <vListInitialise>
 8003488:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800348c:	f7ff fa4e 	bl	800292c <vListInitialise>
 8003490:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003494:	f7ff fa4a 	bl	800292c <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003498:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800349c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80034a0:	f7ff fa44 	bl	800292c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034a4:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
	vListInitialise( &xDelayedTaskList1 );
 80034a8:	4640      	mov	r0, r8
 80034aa:	f7ff fa3f 	bl	800292c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff fa3c 	bl	800292c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034b4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80034b8:	f7ff fa38 	bl	800292c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80034bc:	f104 0018 	add.w	r0, r4, #24
 80034c0:	f7ff fa34 	bl	800292c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80034c4:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034c8:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 80034ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 80034ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80034d0:	6921      	ldr	r1, [r4, #16]
		uxTaskNumber++;
 80034d2:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 80034d4:	2601      	movs	r6, #1
		uxTaskNumber++;
 80034d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034da:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80034dc:	2014      	movs	r0, #20
 80034de:	fa06 f302 	lsl.w	r3, r6, r2
 80034e2:	430b      	orrs	r3, r1
 80034e4:	fb00 7002 	mla	r0, r0, r2, r7
 80034e8:	4649      	mov	r1, r9
 80034ea:	6123      	str	r3, [r4, #16]
 80034ec:	f7ff fa2c 	bl	8002948 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80034f0:	f000 ff8a 	bl	8004408 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80034f4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80034f8:	b163      	cbz	r3, 8003514 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034fa:	68e3      	ldr	r3, [r4, #12]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d207      	bcs.n	8003514 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <xTaskCreate+0x19c>)
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	f3bf 8f6f 	isb	sy
	}
 8003514:	4630      	mov	r0, r6
 8003516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 800351a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1d3      	bne.n	80034ca <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800352a:	bf28      	it	cs
 800352c:	60e5      	strcs	r5, [r4, #12]
 800352e:	e7cc      	b.n	80034ca <xTaskCreate+0x132>
 8003530:	200000d4 	.word	0x200000d4
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vTaskDelete>:
	{
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4605      	mov	r5, r0
 800353c:	4c29      	ldr	r4, [pc, #164]	; (80035e4 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 800353e:	f000 ff41 	bl	80043c4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003542:	b905      	cbnz	r5, 8003546 <vTaskDelete+0xe>
 8003544:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003546:	1d2e      	adds	r6, r5, #4
 8003548:	4630      	mov	r0, r6
 800354a:	f7ff fa20 	bl	800298e <uxListRemove>
 800354e:	b958      	cbnz	r0, 8003568 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003550:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003552:	2014      	movs	r0, #20
 8003554:	fb00 4001 	mla	r0, r0, r1, r4
 8003558:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800355a:	b92b      	cbnz	r3, 8003568 <vTaskDelete+0x30>
 800355c:	6923      	ldr	r3, [r4, #16]
 800355e:	2201      	movs	r2, #1
 8003560:	408a      	lsls	r2, r1
 8003562:	ea23 0302 	bic.w	r3, r3, r2
 8003566:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003568:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800356a:	b11b      	cbz	r3, 8003574 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800356c:	f105 0018 	add.w	r0, r5, #24
 8003570:	f7ff fa0d 	bl	800298e <uxListRemove>
			uxTaskNumber++;
 8003574:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003578:	3301      	adds	r3, #1
 800357a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 800357e:	68e3      	ldr	r3, [r4, #12]
 8003580:	42ab      	cmp	r3, r5
 8003582:	d11a      	bne.n	80035ba <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003584:	4818      	ldr	r0, [pc, #96]	; (80035e8 <vTaskDelete+0xb0>)
 8003586:	4631      	mov	r1, r6
 8003588:	f7ff f9de 	bl	8002948 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800358c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800358e:	3301      	adds	r3, #1
 8003590:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8003592:	f000 ff39 	bl	8004408 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003596:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800359a:	b313      	cbz	r3, 80035e2 <vTaskDelete+0xaa>
			if( pxTCB == pxCurrentTCB )
 800359c:	68e3      	ldr	r3, [r4, #12]
 800359e:	42ab      	cmp	r3, r5
 80035a0:	d11f      	bne.n	80035e2 <vTaskDelete+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
 80035a2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80035a6:	b1a3      	cbz	r3, 80035d2 <vTaskDelete+0x9a>
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	e7fe      	b.n	80035b8 <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 80035ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80035bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 80035be:	3b01      	subs	r3, #1
 80035c0:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80035c2:	f000 fe5f 	bl	8004284 <vPortFree>
			vPortFree( pxTCB );
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 fe5c 	bl	8004284 <vPortFree>
				prvResetNextTaskUnblockTime();
 80035cc:	f7ff fe82 	bl	80032d4 <prvResetNextTaskUnblockTime>
 80035d0:	e7df      	b.n	8003592 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <vTaskDelete+0xb4>)
 80035d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
	}
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	200000d4 	.word	0x200000d4
 80035e8:	200000ec 	.word	0x200000ec
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <eTaskGetState>:
	{
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 80035f2:	4605      	mov	r5, r0
 80035f4:	b940      	cbnz	r0, 8003608 <eTaskGetState+0x18>
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	e7fe      	b.n	8003606 <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003608:	4c0e      	ldr	r4, [pc, #56]	; (8003644 <eTaskGetState+0x54>)
 800360a:	68e3      	ldr	r3, [r4, #12]
 800360c:	4283      	cmp	r3, r0
 800360e:	d012      	beq.n	8003636 <eTaskGetState+0x46>
			taskENTER_CRITICAL();
 8003610:	f000 fed8 	bl	80043c4 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003614:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003616:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003618:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 800361a:	f000 fef5 	bl	8004408 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800361e:	42bd      	cmp	r5, r7
 8003620:	d00b      	beq.n	800363a <eTaskGetState+0x4a>
 8003622:	42b5      	cmp	r5, r6
 8003624:	d009      	beq.n	800363a <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003626:	3418      	adds	r4, #24
 8003628:	42a5      	cmp	r5, r4
 800362a:	d008      	beq.n	800363e <eTaskGetState+0x4e>
				eReturn = eReady;
 800362c:	2d00      	cmp	r5, #0
 800362e:	bf0c      	ite	eq
 8003630:	2004      	moveq	r0, #4
 8003632:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8003636:	2000      	movs	r0, #0
 8003638:	e7fc      	b.n	8003634 <eTaskGetState+0x44>
				eReturn = eBlocked;
 800363a:	2002      	movs	r0, #2
 800363c:	e7fa      	b.n	8003634 <eTaskGetState+0x44>
					eReturn = eDeleted;
 800363e:	2004      	movs	r0, #4
 8003640:	e7f8      	b.n	8003634 <eTaskGetState+0x44>
 8003642:	bf00      	nop
 8003644:	200000d4 	.word	0x200000d4

08003648 <vTaskStartScheduler>:
{
 8003648:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800364a:	4c17      	ldr	r4, [pc, #92]	; (80036a8 <vTaskStartScheduler+0x60>)
 800364c:	4917      	ldr	r1, [pc, #92]	; (80036ac <vTaskStartScheduler+0x64>)
 800364e:	4818      	ldr	r0, [pc, #96]	; (80036b0 <vTaskStartScheduler+0x68>)
 8003650:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8003654:	2500      	movs	r5, #0
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	9500      	str	r5, [sp, #0]
 800365a:	462b      	mov	r3, r5
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	f7ff fe9b 	bl	8003398 <xTaskCreate>
	if( xReturn == pdPASS )
 8003662:	2801      	cmp	r0, #1
 8003664:	d112      	bne.n	800368c <vTaskStartScheduler+0x44>
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 800367c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003680:	60a5      	str	r5, [r4, #8]
}
 8003682:	b003      	add	sp, #12
 8003684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003688:	f000 bf34 	b.w	80044f4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800368c:	3001      	adds	r0, #1
 800368e:	d108      	bne.n	80036a2 <vTaskStartScheduler+0x5a>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	e7fe      	b.n	80036a0 <vTaskStartScheduler+0x58>
}
 80036a2:	b003      	add	sp, #12
 80036a4:	bd30      	pop	{r4, r5, pc}
 80036a6:	bf00      	nop
 80036a8:	200000d4 	.word	0x200000d4
 80036ac:	0801a68e 	.word	0x0801a68e
 80036b0:	08003345 	.word	0x08003345

080036b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80036b4:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <vTaskSuspendAll+0x10>)
 80036b6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 80036ba:	3301      	adds	r3, #1
 80036bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	200000d4 	.word	0x200000d4

080036c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80036c8:	4b01      	ldr	r3, [pc, #4]	; (80036d0 <xTaskGetTickCount+0x8>)
 80036ca:	6898      	ldr	r0, [r3, #8]
}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	200000d4 	.word	0x200000d4

080036d4 <xTaskGetTickCountFromISR>:
{
 80036d4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036d6:	f000 ff8d 	bl	80045f4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80036da:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <xTaskGetTickCountFromISR+0xc>)
 80036dc:	6898      	ldr	r0, [r3, #8]
}
 80036de:	bd08      	pop	{r3, pc}
 80036e0:	200000d4 	.word	0x200000d4

080036e4 <xTaskIncrementTick>:
{
 80036e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <xTaskIncrementTick+0xe0>)
 80036ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80036ee:	461c      	mov	r4, r3
 80036f0:	2a00      	cmp	r2, #0
 80036f2:	d160      	bne.n	80037b6 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f4:	689f      	ldr	r7, [r3, #8]
 80036f6:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 80036f8:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036fa:	b9b7      	cbnz	r7, 800372a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	b143      	cbz	r3, 8003714 <xTaskIncrementTick+0x30>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	e7fe      	b.n	8003712 <xTaskIncrementTick+0x2e>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	6962      	ldr	r2, [r4, #20]
 8003718:	6022      	str	r2, [r4, #0]
 800371a:	6163      	str	r3, [r4, #20]
 800371c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003720:	3301      	adds	r3, #1
 8003722:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003726:	f7ff fdd5 	bl	80032d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	429f      	cmp	r7, r3
BaseType_t xSwitchRequired = pdFALSE;
 800372e:	f04f 0500 	mov.w	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003732:	d210      	bcs.n	8003756 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003734:	68e3      	ldr	r3, [r4, #12]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	2214      	movs	r2, #20
 800373a:	fb02 4303 	mla	r3, r2, r3, r4
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003740:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8003742:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 8003746:	bf28      	it	cs
 8003748:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf18      	it	ne
 800374e:	2501      	movne	r5, #1
}
 8003750:	4628      	mov	r0, r5
 8003752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003756:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80037c8 <xTaskIncrementTick+0xe4>
 800375a:	f04f 0a01 	mov.w	sl, #1
 800375e:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	b91b      	cbnz	r3, 8003770 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003768:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 800376c:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800376e:	e7e1      	b.n	8003734 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003776:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003778:	429f      	cmp	r7, r3
 800377a:	d3f7      	bcc.n	800376c <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800377c:	f106 0b04 	add.w	fp, r6, #4
 8003780:	4658      	mov	r0, fp
 8003782:	f7ff f904 	bl	800298e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003786:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003788:	b11b      	cbz	r3, 8003792 <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800378a:	f106 0018 	add.w	r0, r6, #24
 800378e:	f7ff f8fe 	bl	800298e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003792:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003794:	6922      	ldr	r2, [r4, #16]
 8003796:	fa0a f300 	lsl.w	r3, sl, r0
 800379a:	4313      	orrs	r3, r2
 800379c:	4659      	mov	r1, fp
 800379e:	fb09 8000 	mla	r0, r9, r0, r8
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	f7ff f8d0 	bl	8002948 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037a8:	68e3      	ldr	r3, [r4, #12]
 80037aa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf28      	it	cs
 80037b2:	2501      	movcs	r5, #1
 80037b4:	e7d5      	b.n	8003762 <xTaskIncrementTick+0x7e>
		++xPendedTicks;
 80037b6:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80037ba:	3201      	adds	r2, #1
 80037bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 80037c0:	2500      	movs	r5, #0
	return xSwitchRequired;
 80037c2:	e7c5      	b.n	8003750 <xTaskIncrementTick+0x6c>
 80037c4:	200000d4 	.word	0x200000d4
 80037c8:	20000108 	.word	0x20000108

080037cc <xTaskResumeAll>:
{
 80037cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80037d0:	4c33      	ldr	r4, [pc, #204]	; (80038a0 <xTaskResumeAll+0xd4>)
 80037d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80037d6:	b943      	cbnz	r3, 80037ea <xTaskResumeAll+0x1e>
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	e7fe      	b.n	80037e8 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 80037ea:	f000 fdeb 	bl	80043c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80037ee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f8:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 80037fc:	b135      	cbz	r5, 800380c <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 80037fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003800:	f000 fe02 	bl	8004408 <vPortExitCritical>
}
 8003804:	4620      	mov	r0, r4
 8003806:	b002      	add	sp, #8
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800380c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f5      	beq.n	80037fe <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8003812:	2601      	movs	r6, #1
 8003814:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003818:	f04f 0814 	mov.w	r8, #20
 800381c:	e01d      	b.n	800385a <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003822:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003824:	f105 0018 	add.w	r0, r5, #24
 8003828:	f7ff f8b1 	bl	800298e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800382c:	1d29      	adds	r1, r5, #4
 800382e:	4608      	mov	r0, r1
 8003830:	9101      	str	r1, [sp, #4]
 8003832:	f7ff f8ac 	bl	800298e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003836:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003838:	6922      	ldr	r2, [r4, #16]
 800383a:	9901      	ldr	r1, [sp, #4]
 800383c:	fa06 f300 	lsl.w	r3, r6, r0
 8003840:	4313      	orrs	r3, r2
 8003842:	fb08 7000 	mla	r0, r8, r0, r7
 8003846:	6123      	str	r3, [r4, #16]
 8003848:	f7ff f87e 	bl	8002948 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384c:	68e3      	ldr	r3, [r4, #12]
 800384e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	429a      	cmp	r2, r3
 8003854:	d301      	bcc.n	800385a <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 8003856:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1dd      	bne.n	800381e <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 8003862:	b10d      	cbz	r5, 8003868 <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 8003864:	f7ff fd36 	bl	80032d4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003868:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 800386c:	b14d      	cbz	r5, 8003882 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 800386e:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003870:	f7ff ff38 	bl	80036e4 <xTaskIncrementTick>
 8003874:	b108      	cbz	r0, 800387a <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 8003876:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 800387a:	3d01      	subs	r5, #1
 800387c:	d1f8      	bne.n	8003870 <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 800387e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 8003882:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0b9      	beq.n	80037fe <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <xTaskResumeAll+0xd8>)
 800388c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800389a:	2401      	movs	r4, #1
 800389c:	e7b0      	b.n	8003800 <xTaskResumeAll+0x34>
 800389e:	bf00      	nop
 80038a0:	200000d4 	.word	0x200000d4
 80038a4:	e000ed04 	.word	0xe000ed04

080038a8 <vTaskDelay>:
	{
 80038a8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038aa:	b940      	cbnz	r0, 80038be <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <vTaskDelay+0x44>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
	}
 80038bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <vTaskDelay+0x48>)
 80038c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80038c4:	b143      	cbz	r3, 80038d8 <vTaskDelay+0x30>
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	f383 8811 	msr	BASEPRI, r3
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	e7fe      	b.n	80038d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038d8:	f7ff feec 	bl	80036b4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038dc:	f7ff fd0a 	bl	80032f4 <prvAddCurrentTaskToDelayedList.isra.0>
			xAlreadyYielded = xTaskResumeAll();
 80038e0:	f7ff ff74 	bl	80037cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d0e1      	beq.n	80038ac <vTaskDelay+0x4>
 80038e8:	e7e8      	b.n	80038bc <vTaskDelay+0x14>
 80038ea:	bf00      	nop
 80038ec:	e000ed04 	.word	0xe000ed04
 80038f0:	200000d4 	.word	0x200000d4

080038f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038f4:	4b17      	ldr	r3, [pc, #92]	; (8003954 <vTaskSwitchContext+0x60>)
 80038f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4618      	mov	r0, r3
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038fe:	b11a      	cbz	r2, 8003908 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8003900:	2201      	movs	r2, #1
 8003902:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8003906:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003908:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390c:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800390e:	fab2 f282 	clz	r2, r2
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f1c2 021f 	rsb	r2, r2, #31
 8003918:	2114      	movs	r1, #20
 800391a:	4351      	muls	r1, r2
 800391c:	440b      	add	r3, r1
 800391e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003920:	b944      	cbnz	r4, 8003934 <vTaskSwitchContext+0x40>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	e7fe      	b.n	8003932 <vTaskSwitchContext+0x3e>
 8003934:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003936:	4401      	add	r1, r0
 8003938:	6864      	ldr	r4, [r4, #4]
 800393a:	639c      	str	r4, [r3, #56]	; 0x38
 800393c:	313c      	adds	r1, #60	; 0x3c
 800393e:	428c      	cmp	r4, r1
 8003940:	bf04      	itt	eq
 8003942:	6861      	ldreq	r1, [r4, #4]
 8003944:	6399      	streq	r1, [r3, #56]	; 0x38
 8003946:	2314      	movs	r3, #20
 8003948:	fb03 0202 	mla	r2, r3, r2, r0
 800394c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60c3      	str	r3, [r0, #12]
}
 8003952:	e7d8      	b.n	8003906 <vTaskSwitchContext+0x12>
 8003954:	200000d4 	.word	0x200000d4

08003958 <vTaskPlaceOnEventList>:
{
 8003958:	b510      	push	{r4, lr}
 800395a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800395c:	b940      	cbnz	r0, 8003970 <vTaskPlaceOnEventList+0x18>
 800395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003962:	f383 8811 	msr	BASEPRI, r3
 8003966:	f3bf 8f6f 	isb	sy
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	e7fe      	b.n	800396e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <vTaskPlaceOnEventList+0x2c>)
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	3118      	adds	r1, #24
 8003976:	f7fe fff3 	bl	8002960 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800397a:	4620      	mov	r0, r4
}
 800397c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003980:	f7ff bcb8 	b.w	80032f4 <prvAddCurrentTaskToDelayedList.isra.0>
 8003984:	200000d4 	.word	0x200000d4

08003988 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003988:	68c3      	ldr	r3, [r0, #12]
{
 800398a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800398e:	b945      	cbnz	r5, 80039a2 <xTaskRemoveFromEventList+0x1a>
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	e7fe      	b.n	80039a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039a2:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a6:	4c15      	ldr	r4, [pc, #84]	; (80039fc <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039a8:	9101      	str	r1, [sp, #4]
 80039aa:	4608      	mov	r0, r1
 80039ac:	f7fe ffef 	bl	800298e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80039b4:	9901      	ldr	r1, [sp, #4]
 80039b6:	b9eb      	cbnz	r3, 80039f4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039b8:	1d29      	adds	r1, r5, #4
 80039ba:	4608      	mov	r0, r1
 80039bc:	9101      	str	r1, [sp, #4]
 80039be:	f7fe ffe6 	bl	800298e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80039c4:	6920      	ldr	r0, [r4, #16]
 80039c6:	9901      	ldr	r1, [sp, #4]
 80039c8:	2301      	movs	r3, #1
 80039ca:	4093      	lsls	r3, r2
 80039cc:	4303      	orrs	r3, r0
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2014      	movs	r0, #20
 80039d2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80039d6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039da:	f7fe ffb5 	bl	8002948 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039de:	68e3      	ldr	r3, [r4, #12]
 80039e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80039e6:	bf8a      	itet	hi
 80039e8:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80039ea:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80039ec:	f8c4 0110 	strhi.w	r0, [r4, #272]	; 0x110
}
 80039f0:	b003      	add	sp, #12
 80039f2:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039f4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80039f8:	e7ef      	b.n	80039da <xTaskRemoveFromEventList+0x52>
 80039fa:	bf00      	nop
 80039fc:	200000d4 	.word	0x200000d4

08003a00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <vTaskInternalSetTimeOutState+0x10>)
 8003a02:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a06:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a08:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a0a:	6043      	str	r3, [r0, #4]
}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	200000d4 	.word	0x200000d4

08003a14 <xTaskCheckForTimeOut>:
{
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003a18:	4605      	mov	r5, r0
 8003a1a:	b940      	cbnz	r0, 8003a2e <xTaskCheckForTimeOut+0x1a>
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	e7fe      	b.n	8003a2c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003a2e:	b941      	cbnz	r1, 8003a42 <xTaskCheckForTimeOut+0x2e>
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	e7fe      	b.n	8003a40 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003a42:	f000 fcbf 	bl	80043c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a48:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8003a4a:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a4c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a50:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a52:	4298      	cmp	r0, r3
 8003a54:	d001      	beq.n	8003a5a <xTaskCheckForTimeOut+0x46>
 8003a56:	428a      	cmp	r2, r1
 8003a58:	d910      	bls.n	8003a7c <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a5a:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a5c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a5e:	4283      	cmp	r3, r0
 8003a60:	d90a      	bls.n	8003a78 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 8003a62:	1a5b      	subs	r3, r3, r1
 8003a64:	4413      	add	r3, r2
 8003a66:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f7ff ffc9 	bl	8003a00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003a70:	f000 fcca 	bl	8004408 <vPortExitCritical>
}
 8003a74:	4620      	mov	r0, r4
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003a7c:	2401      	movs	r4, #1
 8003a7e:	e7f7      	b.n	8003a70 <xTaskCheckForTimeOut+0x5c>
 8003a80:	200000d4 	.word	0x200000d4

08003a84 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <vTaskMissedYield+0xc>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	200000d4 	.word	0x200000d4

08003a94 <vTaskGetInfo>:
	{
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	460c      	mov	r4, r1
 8003a98:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8003a9a:	4605      	mov	r5, r0
 8003a9c:	b908      	cbnz	r0, 8003aa2 <vTaskGetInfo+0xe>
 8003a9e:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <vTaskGetInfo+0x60>)
 8003aa0:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8003aa2:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8003aa4:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003aa8:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8003aaa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003aac:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8003aae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003ab0:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8003ab2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003ab4:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8003ab6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8003ab8:	6162      	str	r2, [r4, #20]
		if( eState != eInvalid )
 8003aba:	2b05      	cmp	r3, #5
			pxTaskStatus->ulRunTimeCounter = 0;
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8003ac2:	d00e      	beq.n	8003ae2 <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 8003ac4:	490b      	ldr	r1, [pc, #44]	; (8003af4 <vTaskGetInfo+0x60>)
 8003ac6:	68c9      	ldr	r1, [r1, #12]
 8003ac8:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 8003aca:	bf0c      	ite	eq
 8003acc:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 8003ace:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8003ad0:	b176      	cbz	r6, 8003af0 <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8003ad2:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 8003ad4:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003ad6:	5cca      	ldrb	r2, [r1, r3]
 8003ad8:	2aa5      	cmp	r2, #165	; 0xa5
 8003ada:	d007      	beq.n	8003aec <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003adc:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003ade:	8423      	strh	r3, [r4, #32]
	}
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f7ff fd84 	bl	80035f0 <eTaskGetState>
 8003ae8:	7320      	strb	r0, [r4, #12]
 8003aea:	e7f1      	b.n	8003ad0 <vTaskGetInfo+0x3c>
			ulCount++;
 8003aec:	3301      	adds	r3, #1
 8003aee:	e7f2      	b.n	8003ad6 <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 8003af0:	8426      	strh	r6, [r4, #32]
	}
 8003af2:	e7f5      	b.n	8003ae0 <vTaskGetInfo+0x4c>
 8003af4:	200000d4 	.word	0x200000d4

08003af8 <prvListTasksWithinSingleList>:
	{
 8003af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003afc:	680d      	ldr	r5, [r1, #0]
	{
 8003afe:	4606      	mov	r6, r0
 8003b00:	460c      	mov	r4, r1
 8003b02:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003b04:	b325      	cbz	r5, 8003b50 <prvListTasksWithinSingleList+0x58>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b06:	684b      	ldr	r3, [r1, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	f101 0808 	add.w	r8, r1, #8
 8003b10:	4543      	cmp	r3, r8
 8003b12:	bf04      	itt	eq
 8003b14:	68cb      	ldreq	r3, [r1, #12]
 8003b16:	604b      	streq	r3, [r1, #4]
 8003b18:	684b      	ldr	r3, [r1, #4]
 8003b1a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	UBaseType_t uxTask = 0;
 8003b1e:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003b20:	f04f 0b24 	mov.w	fp, #36	; 0x24
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	4598      	cmp	r8, r3
 8003b2c:	bf04      	itt	eq
 8003b2e:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 8003b32:	6063      	streq	r3, [r4, #4]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003b3a:	fb0b 6105 	mla	r1, fp, r5, r6
 8003b3e:	463b      	mov	r3, r7
 8003b40:	2201      	movs	r2, #1
 8003b42:	4648      	mov	r0, r9
 8003b44:	f7ff ffa6 	bl	8003a94 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8003b48:	45ca      	cmp	sl, r9
				uxTask++;
 8003b4a:	f105 0501 	add.w	r5, r5, #1
			} while( pxNextTCB != pxFirstTCB );
 8003b4e:	d1e9      	bne.n	8003b24 <prvListTasksWithinSingleList+0x2c>
	}
 8003b50:	4628      	mov	r0, r5
 8003b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003b58 <uxTaskGetSystemState>:
	{
 8003b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003b5c:	4e1e      	ldr	r6, [pc, #120]	; (8003bd8 <uxTaskGetSystemState+0x80>)
	{
 8003b5e:	4605      	mov	r5, r0
 8003b60:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8003b62:	f7ff fda7 	bl	80036b4 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003b66:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003b68:	428b      	cmp	r3, r1
 8003b6a:	d832      	bhi.n	8003bd2 <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003b6c:	f04f 0807 	mov.w	r8, #7
 8003b70:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003b72:	f04f 0b14 	mov.w	fp, #20
 8003b76:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 8003b7a:	f04f 0924 	mov.w	r9, #36	; 0x24
					uxQueue--;
 8003b7e:	f108 38ff 	add.w	r8, r8, #4294967295
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003b82:	fb09 5004 	mla	r0, r9, r4, r5
 8003b86:	2201      	movs	r2, #1
 8003b88:	fb0b a108 	mla	r1, fp, r8, sl
 8003b8c:	f7ff ffb4 	bl	8003af8 <prvListTasksWithinSingleList>
 8003b90:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b92:	f1b8 0f00 	cmp.w	r8, #0
 8003b96:	d1f2      	bne.n	8003b7e <uxTaskGetSystemState+0x26>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003b98:	6831      	ldr	r1, [r6, #0]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	fb09 5004 	mla	r0, r9, r4, r5
 8003ba0:	f7ff ffaa 	bl	8003af8 <prvListTasksWithinSingleList>
 8003ba4:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003ba6:	6971      	ldr	r1, [r6, #20]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	fb09 5004 	mla	r0, r9, r4, r5
 8003bae:	f7ff ffa3 	bl	8003af8 <prvListTasksWithinSingleList>
 8003bb2:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003bb4:	fb09 5004 	mla	r0, r9, r4, r5
 8003bb8:	4908      	ldr	r1, [pc, #32]	; (8003bdc <uxTaskGetSystemState+0x84>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	f7ff ff9c 	bl	8003af8 <prvListTasksWithinSingleList>
 8003bc0:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8003bc2:	b10f      	cbz	r7, 8003bc8 <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 8003bc4:	f8c7 8000 	str.w	r8, [r7]
		( void ) xTaskResumeAll();
 8003bc8:	f7ff fe00 	bl	80037cc <xTaskResumeAll>
	}
 8003bcc:	4620      	mov	r0, r4
 8003bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003bd2:	2400      	movs	r4, #0
 8003bd4:	e7f8      	b.n	8003bc8 <uxTaskGetSystemState+0x70>
 8003bd6:	bf00      	nop
 8003bd8:	200000d4 	.word	0x200000d4
 8003bdc:	200000ec 	.word	0x200000ec

08003be0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <xTaskGetSchedulerState+0x1c>)
 8003be2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003be6:	b132      	cbz	r2, 8003bf6 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003bec:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bee:	bf0c      	ite	eq
 8003bf0:	2002      	moveq	r0, #2
 8003bf2:	2000      	movne	r0, #0
 8003bf4:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bf6:	2001      	movs	r0, #1
	}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200000d4 	.word	0x200000d4

08003c00 <xTaskPriorityInherit>:
	{
 8003c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003c02:	4604      	mov	r4, r0
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d031      	beq.n	8003c6c <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <xTaskPriorityInherit+0x8c>)
 8003c0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c0c:	68d1      	ldr	r1, [r2, #12]
 8003c0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003c10:	428b      	cmp	r3, r1
 8003c12:	4615      	mov	r5, r2
 8003c14:	d232      	bcs.n	8003c7c <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c16:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c18:	4e1d      	ldr	r6, [pc, #116]	; (8003c90 <xTaskPriorityInherit+0x90>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c1a:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1c:	bfa1      	itttt	ge
 8003c1e:	68ea      	ldrge	r2, [r5, #12]
 8003c20:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003c22:	f1c2 0207 	rsbge	r2, r2, #7
 8003c26:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c28:	2214      	movs	r2, #20
 8003c2a:	fb02 6303 	mla	r3, r2, r3, r6
 8003c2e:	6942      	ldr	r2, [r0, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d11d      	bne.n	8003c70 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c34:	1d01      	adds	r1, r0, #4
 8003c36:	4608      	mov	r0, r1
 8003c38:	9101      	str	r1, [sp, #4]
 8003c3a:	f7fe fea8 	bl	800298e <uxListRemove>
 8003c3e:	9901      	ldr	r1, [sp, #4]
 8003c40:	b930      	cbnz	r0, 8003c50 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c44:	692b      	ldr	r3, [r5, #16]
 8003c46:	2201      	movs	r2, #1
 8003c48:	4082      	lsls	r2, r0
 8003c4a:	ea23 0302 	bic.w	r3, r3, r2
 8003c4e:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c50:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c52:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c58:	2401      	movs	r4, #1
 8003c5a:	fa04 f203 	lsl.w	r2, r4, r3
 8003c5e:	4302      	orrs	r2, r0
 8003c60:	2014      	movs	r0, #20
 8003c62:	fb00 6003 	mla	r0, r0, r3, r6
 8003c66:	612a      	str	r2, [r5, #16]
 8003c68:	f7fe fe6e 	bl	8002948 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8003c6c:	4620      	mov	r0, r4
		return xReturn;
 8003c6e:	e003      	b.n	8003c78 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c70:	68eb      	ldr	r3, [r5, #12]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8003c76:	2001      	movs	r0, #1
	}
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c7c:	68d3      	ldr	r3, [r2, #12]
 8003c7e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003c80:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003c82:	42a0      	cmp	r0, r4
 8003c84:	bf2c      	ite	cs
 8003c86:	2000      	movcs	r0, #0
 8003c88:	2001      	movcc	r0, #1
 8003c8a:	e7f5      	b.n	8003c78 <xTaskPriorityInherit+0x78>
 8003c8c:	200000d4 	.word	0x200000d4
 8003c90:	20000108 	.word	0x20000108

08003c94 <xTaskPriorityDisinherit>:
	{
 8003c94:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003c96:	4604      	mov	r4, r0
 8003c98:	b910      	cbnz	r0, 8003ca0 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 8003c9a:	2000      	movs	r0, #0
	}
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003ca0:	4d22      	ldr	r5, [pc, #136]	; (8003d2c <xTaskPriorityDisinherit+0x98>)
 8003ca2:	68eb      	ldr	r3, [r5, #12]
 8003ca4:	4283      	cmp	r3, r0
 8003ca6:	d008      	beq.n	8003cba <xTaskPriorityDisinherit+0x26>
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	e7fe      	b.n	8003cb8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	b943      	cbnz	r3, 8003cd0 <xTaskPriorityDisinherit+0x3c>
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	e7fe      	b.n	8003cce <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003cd2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003cd4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cd6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003cd8:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cda:	d0de      	beq.n	8003c9a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1dc      	bne.n	8003c9a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ce0:	1d01      	adds	r1, r0, #4
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	9101      	str	r1, [sp, #4]
 8003ce6:	f7fe fe52 	bl	800298e <uxListRemove>
 8003cea:	9901      	ldr	r1, [sp, #4]
 8003cec:	b958      	cbnz	r0, 8003d06 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cf0:	2014      	movs	r0, #20
 8003cf2:	fb00 5006 	mla	r0, r0, r6, r5
 8003cf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003cf8:	b92b      	cbnz	r3, 8003d06 <xTaskPriorityDisinherit+0x72>
 8003cfa:	692b      	ldr	r3, [r5, #16]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	40b2      	lsls	r2, r6
 8003d00:	ea23 0302 	bic.w	r3, r3, r2
 8003d04:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8003d08:	6928      	ldr	r0, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0c:	f1c3 0207 	rsb	r2, r3, #7
 8003d10:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d12:	2401      	movs	r4, #1
 8003d14:	fa04 f203 	lsl.w	r2, r4, r3
 8003d18:	4302      	orrs	r2, r0
 8003d1a:	612a      	str	r2, [r5, #16]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <xTaskPriorityDisinherit+0x9c>)
 8003d1e:	2014      	movs	r0, #20
 8003d20:	fb00 2003 	mla	r0, r0, r3, r2
 8003d24:	f7fe fe10 	bl	8002948 <vListInsertEnd>
					xReturn = pdTRUE;
 8003d28:	4620      	mov	r0, r4
		return xReturn;
 8003d2a:	e7b7      	b.n	8003c9c <xTaskPriorityDisinherit+0x8>
 8003d2c:	200000d4 	.word	0x200000d4
 8003d30:	20000108 	.word	0x20000108

08003d34 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8003d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003d36:	4604      	mov	r4, r0
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d04a      	beq.n	8003dd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d3c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003d3e:	b942      	cbnz	r2, 8003d52 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	e7fe      	b.n	8003d50 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003d52:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003d54:	4299      	cmp	r1, r3
 8003d56:	bf38      	it	cc
 8003d58:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003d5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	d038      	beq.n	8003dd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003d60:	2a01      	cmp	r2, #1
 8003d62:	d136      	bne.n	8003dd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					configASSERT( pxTCB != pxCurrentTCB );
 8003d64:	4d1c      	ldr	r5, [pc, #112]	; (8003dd8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003d66:	68ea      	ldr	r2, [r5, #12]
 8003d68:	4282      	cmp	r2, r0
 8003d6a:	d108      	bne.n	8003d7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	e7fe      	b.n	8003d7c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d7e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d80:	4e16      	ldr	r6, [pc, #88]	; (8003ddc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					pxTCB->uxPriority = uxPriorityToUse;
 8003d82:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d84:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d86:	f04f 0214 	mov.w	r2, #20
 8003d8a:	fb02 6303 	mla	r3, r2, r3, r6
 8003d8e:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d90:	bfa4      	itt	ge
 8003d92:	f1c1 0107 	rsbge	r1, r1, #7
 8003d96:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d11a      	bne.n	8003dd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d9c:	1d01      	adds	r1, r0, #4
 8003d9e:	4608      	mov	r0, r1
 8003da0:	9101      	str	r1, [sp, #4]
 8003da2:	f7fe fdf4 	bl	800298e <uxListRemove>
 8003da6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003da8:	9901      	ldr	r1, [sp, #4]
 8003daa:	b928      	cbnz	r0, 8003db8 <vTaskPriorityDisinheritAfterTimeout+0x84>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003dac:	692b      	ldr	r3, [r5, #16]
 8003dae:	2001      	movs	r0, #1
 8003db0:	4090      	lsls	r0, r2
 8003db2:	ea23 0300 	bic.w	r3, r3, r0
 8003db6:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8003db8:	6928      	ldr	r0, [r5, #16]
 8003dba:	2301      	movs	r3, #1
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	4303      	orrs	r3, r0
 8003dc0:	2014      	movs	r0, #20
 8003dc2:	fb00 6002 	mla	r0, r0, r2, r6
 8003dc6:	612b      	str	r3, [r5, #16]
	}
 8003dc8:	b002      	add	sp, #8
 8003dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8003dce:	f7fe bdbb 	b.w	8002948 <vListInsertEnd>
	}
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000d4 	.word	0x200000d4
 8003ddc:	20000108 	.word	0x20000108

08003de0 <vTaskList>:
	{
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <vTaskList+0xb0>)
		*pcWriteBuffer = ( char ) 0x00;
 8003de6:	2500      	movs	r5, #0
		uxArraySize = uxCurrentNumberOfTasks;
 8003de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		*pcWriteBuffer = ( char ) 0x00;
 8003dea:	7005      	strb	r5, [r0, #0]
	{
 8003dec:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003dee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	{
 8003df0:	b085      	sub	sp, #20
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003df2:	2724      	movs	r7, #36	; 0x24
 8003df4:	4378      	muls	r0, r7
		uxArraySize = uxCurrentNumberOfTasks;
 8003df6:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8003df8:	f000 f9c4 	bl	8004184 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	d042      	beq.n	8003e88 <vTaskList+0xa8>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8003e02:	462a      	mov	r2, r5
 8003e04:	9903      	ldr	r1, [sp, #12]
 8003e06:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003e98 <vTaskList+0xb8>
 8003e0a:	f7ff fea5 	bl	8003b58 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 8003e0e:	4635      	mov	r5, r6
 8003e10:	fb07 6700 	mla	r7, r7, r0, r6
			pcBuffer[ x ] = ' ';
 8003e14:	f04f 0a20 	mov.w	sl, #32
			for( x = 0; x < uxArraySize; x++ )
 8003e18:	42af      	cmp	r7, r5
 8003e1a:	d105      	bne.n	8003e28 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 8003e1c:	4630      	mov	r0, r6
	}
 8003e1e:	b005      	add	sp, #20
 8003e20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 8003e24:	f000 ba2e 	b.w	8004284 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8003e28:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 8003e2a:	6869      	ldr	r1, [r5, #4]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bf94      	ite	ls
 8003e32:	f819 b003 	ldrbls.w	fp, [r9, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8003e36:	f04f 0b00 	movhi.w	fp, #0
		strcpy( pcBuffer, pcTaskName );
 8003e3a:	f00a f8b2 	bl	800dfa2 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7fc f9d0 	bl	80001e4 <strlen>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b0e      	cmp	r3, #14
 8003e48:	d91a      	bls.n	8003e80 <vTaskList+0xa0>
 8003e4a:	280f      	cmp	r0, #15
 8003e4c:	f1c0 030f 	rsb	r3, r0, #15
 8003e50:	bf88      	it	hi
 8003e52:	2300      	movhi	r3, #0
 8003e54:	4403      	add	r3, r0
		pcBuffer[ x ] = ( char ) 0x00;
 8003e56:	2200      	movs	r2, #0
 8003e58:	54e2      	strb	r2, [r4, r3]
 8003e5a:	eb04 0803 	add.w	r8, r4, r3
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8003e5e:	68ab      	ldr	r3, [r5, #8]
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	8c2b      	ldrh	r3, [r5, #32]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	692b      	ldr	r3, [r5, #16]
 8003e68:	490a      	ldr	r1, [pc, #40]	; (8003e94 <vTaskList+0xb4>)
 8003e6a:	465a      	mov	r2, fp
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	f00a f869 	bl	800df44 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8003e72:	4640      	mov	r0, r8
 8003e74:	f7fc f9b6 	bl	80001e4 <strlen>
 8003e78:	3524      	adds	r5, #36	; 0x24
 8003e7a:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 8003e7e:	e7cb      	b.n	8003e18 <vTaskList+0x38>
			pcBuffer[ x ] = ' ';
 8003e80:	f804 a003 	strb.w	sl, [r4, r3]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8003e84:	3301      	adds	r3, #1
 8003e86:	e7de      	b.n	8003e46 <vTaskList+0x66>
	}
 8003e88:	b005      	add	sp, #20
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	200000d4 	.word	0x200000d4
 8003e94:	0801a693 	.word	0x0801a693
 8003e98:	0800f934 	.word	0x0800f934

08003e9c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <pvTaskIncrementMutexHeldCount+0x14>)
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	b11a      	cbz	r2, 8003eaa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003ea2:	68d9      	ldr	r1, [r3, #12]
 8003ea4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003ea6:	3201      	adds	r2, #1
 8003ea8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8003eaa:	68d8      	ldr	r0, [r3, #12]
	}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200000d4 	.word	0x200000d4

08003eb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003eb4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003eb6:	f7ff fbc7 	bl	8003648 <vTaskStartScheduler>
  
  return osOK;
}
 8003eba:	2000      	movs	r0, #0
 8003ebc:	bd08      	pop	{r3, pc}

08003ebe <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ebe:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8003ec2:	b10b      	cbz	r3, 8003ec8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8003ec4:	f7ff bc06 	b.w	80036d4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8003ec8:	f7ff bbfe 	b.w	80036c8 <xTaskGetTickCount>

08003ecc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ecc:	b530      	push	{r4, r5, lr}
 8003ece:	4604      	mov	r4, r0
 8003ed0:	b085      	sub	sp, #20

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed2:	8a22      	ldrh	r2, [r4, #16]
 8003ed4:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8003ed8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003eda:	bf14      	ite	ne
 8003edc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ede:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee0:	ad03      	add	r5, sp, #12
{
 8003ee2:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee4:	e9d0 1000 	ldrd	r1, r0, [r0]
 8003ee8:	e9cd 4500 	strd	r4, r5, [sp]
 8003eec:	f7ff fa54 	bl	8003398 <xTaskCreate>
 8003ef0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003ef2:	bf0c      	ite	eq
 8003ef4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8003ef6:	2000      	movne	r0, #0
}
 8003ef8:	b005      	add	sp, #20
 8003efa:	bd30      	pop	{r4, r5, pc}

08003efc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003efc:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003efe:	f7ff fb1b 	bl	8003538 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8003f02:	2000      	movs	r0, #0
 8003f04:	bd08      	pop	{r3, pc}

08003f06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f06:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f08:	2801      	cmp	r0, #1
 8003f0a:	bf38      	it	cc
 8003f0c:	2001      	movcc	r0, #1
 8003f0e:	f7ff fccb 	bl	80038a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f12:	2000      	movs	r0, #0
 8003f14:	bd08      	pop	{r3, pc}

08003f16 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003f16:	2001      	movs	r0, #1
 8003f18:	f7fe bf0c 	b.w	8002d34 <xQueueCreateMutex>

08003f1c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003f1c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003f1e:	2400      	movs	r4, #0
 8003f20:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8003f22:	b1e0      	cbz	r0, 8003f5e <osMutexWait+0x42>
 8003f24:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003f28:	b19b      	cbz	r3, 8003f52 <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003f2a:	aa01      	add	r2, sp, #4
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	f7ff f937 	bl	80031a0 <xQueueReceiveFromISR>
 8003f32:	2801      	cmp	r0, #1
 8003f34:	d111      	bne.n	8003f5a <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	b913      	cbnz	r3, 8003f40 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8003f3a:	2000      	movs	r0, #0
}
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <osMutexWait+0x48>)
 8003f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	e7f3      	b.n	8003f3a <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003f52:	f7ff f861 	bl	8003018 <xQueueSemaphoreTake>
 8003f56:	2801      	cmp	r0, #1
 8003f58:	d0ef      	beq.n	8003f3a <osMutexWait+0x1e>
    return osErrorOS;
 8003f5a:	20ff      	movs	r0, #255	; 0xff
 8003f5c:	e7ee      	b.n	8003f3c <osMutexWait+0x20>
    return osErrorParameter;
 8003f5e:	2080      	movs	r0, #128	; 0x80
 8003f60:	e7ec      	b.n	8003f3c <osMutexWait+0x20>
 8003f62:	bf00      	nop
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003f68:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8003f6a:	2400      	movs	r4, #0
 8003f6c:	9401      	str	r4, [sp, #4]
 8003f6e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8003f72:	b193      	cbz	r3, 8003f9a <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003f74:	a901      	add	r1, sp, #4
 8003f76:	f7fe ff5a 	bl	8002e2e <xQueueGiveFromISR>
 8003f7a:	2801      	cmp	r0, #1
 8003f7c:	d113      	bne.n	8003fa6 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f7e:	9b01      	ldr	r3, [sp, #4]
 8003f80:	b913      	cbnz	r3, 8003f88 <osMutexRelease+0x20>
  osStatus result = osOK;
 8003f82:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8003f84:	b002      	add	sp, #8
 8003f86:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <osMutexRelease+0x44>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	e7f3      	b.n	8003f82 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fe fe17 	bl	8002bd0 <xQueueGenericSend>
 8003fa2:	2801      	cmp	r0, #1
 8003fa4:	d0ed      	beq.n	8003f82 <osMutexRelease+0x1a>
    result = osErrorOS;
 8003fa6:	20ff      	movs	r0, #255	; 0xff
 8003fa8:	e7ec      	b.n	8003f84 <osMutexRelease+0x1c>
 8003faa:	bf00      	nop
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8003fb6:	b91c      	cbnz	r4, 8003fc0 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8003fb8:	f7ff f97a 	bl	80032b0 <vQueueDelete>

  return osOK;
}
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8003fc0:	2482      	movs	r4, #130	; 0x82
 8003fc2:	e7fb      	b.n	8003fbc <osMutexDelete+0xc>

08003fc4 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003fc4:	2901      	cmp	r1, #1
{ 
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	4608      	mov	r0, r1
  if (count == 1) {
 8003fca:	d10c      	bne.n	8003fe6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8003fcc:	2203      	movs	r2, #3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f7fe fdbc 	bl	8002b4c <xQueueGenericCreate>
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	b120      	cbz	r0, 8003fe2 <osSemaphoreCreate+0x1e>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7fe fdf7 	bl	8002bd0 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8003fea:	f7fe bdd3 	b.w	8002b94 <xQueueCreateCountingSemaphore>
	...

08003ff0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003ff0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003ff2:	2400      	movs	r4, #0
 8003ff4:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8003ff6:	b1e0      	cbz	r0, 8004032 <osSemaphoreWait+0x42>
 8003ff8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8003ffc:	b19b      	cbz	r3, 8004026 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003ffe:	aa01      	add	r2, sp, #4
 8004000:	4621      	mov	r1, r4
 8004002:	f7ff f8cd 	bl	80031a0 <xQueueReceiveFromISR>
 8004006:	2801      	cmp	r0, #1
 8004008:	d111      	bne.n	800402e <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800400a:	9b01      	ldr	r3, [sp, #4]
 800400c:	b913      	cbnz	r3, 8004014 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800400e:	2000      	movs	r0, #0
}
 8004010:	b002      	add	sp, #8
 8004012:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004014:	4b08      	ldr	r3, [pc, #32]	; (8004038 <osSemaphoreWait+0x48>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	e7f3      	b.n	800400e <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004026:	f7fe fff7 	bl	8003018 <xQueueSemaphoreTake>
 800402a:	2801      	cmp	r0, #1
 800402c:	d0ef      	beq.n	800400e <osSemaphoreWait+0x1e>
    return osErrorOS;
 800402e:	20ff      	movs	r0, #255	; 0xff
 8004030:	e7ee      	b.n	8004010 <osSemaphoreWait+0x20>
    return osErrorParameter;
 8004032:	2080      	movs	r0, #128	; 0x80
 8004034:	e7ec      	b.n	8004010 <osSemaphoreWait+0x20>
 8004036:	bf00      	nop
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <osSemaphoreRelease>:
 800403c:	f7ff bf94 	b.w	8003f68 <osMutexRelease>

08004040 <osSemaphoreDelete>:
 8004040:	f7ff bfb6 	b.w	8003fb0 <osMutexDelete>

08004044 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004044:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004048:	2200      	movs	r2, #0
 800404a:	f7fe bd7f 	b.w	8002b4c <xQueueGenericCreate>
	...

08004050 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004052:	2400      	movs	r4, #0
{
 8004054:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004056:	9403      	str	r4, [sp, #12]
 8004058:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800405c:	b1a3      	cbz	r3, 8004088 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800405e:	4623      	mov	r3, r4
 8004060:	aa03      	add	r2, sp, #12
 8004062:	a901      	add	r1, sp, #4
 8004064:	f7fe fe81 	bl	8002d6a <xQueueGenericSendFromISR>
 8004068:	2801      	cmp	r0, #1
 800406a:	d115      	bne.n	8004098 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	b913      	cbnz	r3, 8004076 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004070:	2000      	movs	r0, #0
}
 8004072:	b004      	add	sp, #16
 8004074:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <osMessagePut+0x4c>)
 8004078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	e7f3      	b.n	8004070 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004088:	2a01      	cmp	r2, #1
 800408a:	bf38      	it	cc
 800408c:	2201      	movcc	r2, #1
 800408e:	a901      	add	r1, sp, #4
 8004090:	f7fe fd9e 	bl	8002bd0 <xQueueGenericSend>
 8004094:	2801      	cmp	r0, #1
 8004096:	d0eb      	beq.n	8004070 <osMessagePut+0x20>
      return osErrorOS;
 8004098:	20ff      	movs	r0, #255	; 0xff
 800409a:	e7ea      	b.n	8004072 <osMessagePut+0x22>
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80040a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80040a2:	2300      	movs	r3, #0
{
 80040a4:	4604      	mov	r4, r0
 80040a6:	4616      	mov	r6, r2
 80040a8:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80040aa:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80040ac:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80040ae:	ad01      	add	r5, sp, #4
 80040b0:	b911      	cbnz	r1, 80040b8 <osMessageGet+0x18>
    event.status = osErrorParameter;
 80040b2:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	e016      	b.n	80040e6 <osMessageGet+0x46>
  taskWoken = pdFALSE;
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80040be:	b1cb      	cbz	r3, 80040f4 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80040c0:	466a      	mov	r2, sp
 80040c2:	a902      	add	r1, sp, #8
 80040c4:	f7ff f86c 	bl	80031a0 <xQueueReceiveFromISR>
      event.status = osOK;
 80040c8:	2801      	cmp	r0, #1
 80040ca:	bf0c      	ite	eq
 80040cc:	2310      	moveq	r3, #16
 80040ce:	2300      	movne	r3, #0
 80040d0:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	b13b      	cbz	r3, 80040e6 <osMessageGet+0x46>
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <osMessageGet+0x6c>)
 80040d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80040e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80040ee:	4620      	mov	r0, r4
 80040f0:	b004      	add	sp, #16
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80040f4:	a902      	add	r1, sp, #8
 80040f6:	f7fe feef 	bl	8002ed8 <xQueueReceive>
 80040fa:	2801      	cmp	r0, #1
 80040fc:	d101      	bne.n	8004102 <osMessageGet+0x62>
      event.status = osEventMessage;
 80040fe:	2310      	movs	r3, #16
 8004100:	e7d8      	b.n	80040b4 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004102:	2e00      	cmp	r6, #0
 8004104:	bf18      	it	ne
 8004106:	2640      	movne	r6, #64	; 0x40
 8004108:	9601      	str	r6, [sp, #4]
 800410a:	e7ec      	b.n	80040e6 <osMessageGet+0x46>
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004110:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004112:	f7ff fd65 	bl	8003be0 <xTaskGetSchedulerState>
 8004116:	2801      	cmp	r0, #1
 8004118:	d003      	beq.n	8004122 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800411a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800411e:	f000 b9b9 	b.w	8004494 <xPortSysTickHandler>
}
 8004122:	bd08      	pop	{r3, pc}

08004124 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8004124:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 8004126:	f7ff fe5b 	bl	8003de0 <vTaskList>
#endif
  return osOK;
}
 800412a:	2000      	movs	r0, #0
 800412c:	bd08      	pop	{r3, pc}

0800412e <osMessageWaiting>:
 800412e:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8004132:	b10b      	cbz	r3, 8004138 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004134:	f7ff b898 	b.w	8003268 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004138:	f7ff b881 	b.w	800323e <uxQueueMessagesWaiting>

0800413c <osMessageDelete>:
 800413c:	f7ff bf38 	b.w	8003fb0 <osMutexDelete>

08004140 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <prvInsertBlockIntoFreeList+0x40>)
{
 8004142:	b530      	push	{r4, r5, lr}
 8004144:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004146:	461a      	mov	r2, r3
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4283      	cmp	r3, r0
 800414c:	d3fb      	bcc.n	8004146 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414e:	6854      	ldr	r4, [r2, #4]
 8004150:	1911      	adds	r1, r2, r4
 8004152:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004154:	bf01      	itttt	eq
 8004156:	6841      	ldreq	r1, [r0, #4]
 8004158:	4610      	moveq	r0, r2
 800415a:	1909      	addeq	r1, r1, r4
 800415c:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800415e:	6844      	ldr	r4, [r0, #4]
 8004160:	1901      	adds	r1, r0, r4
 8004162:	428b      	cmp	r3, r1
 8004164:	d106      	bne.n	8004174 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004166:	68a9      	ldr	r1, [r5, #8]
 8004168:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800416a:	bf1f      	itttt	ne
 800416c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800416e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004170:	1909      	addne	r1, r1, r4
 8004172:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004174:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004176:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004178:	bf18      	it	ne
 800417a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417c:	bd30      	pop	{r4, r5, pc}
 800417e:	bf00      	nop
 8004180:	200001ec 	.word	0x200001ec

08004184 <pvPortMalloc>:
{
 8004184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8004188:	4d3b      	ldr	r5, [pc, #236]	; (8004278 <pvPortMalloc+0xf4>)
{
 800418a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800418c:	f7ff fa92 	bl	80036b4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004190:	68ab      	ldr	r3, [r5, #8]
 8004192:	b9bb      	cbnz	r3, 80041c4 <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 8004194:	4a39      	ldr	r2, [pc, #228]	; (800427c <pvPortMalloc+0xf8>)
	uxAddress -= xHeapStructSize;
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <pvPortMalloc+0xfc>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004198:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800419a:	bf18      	it	ne
 800419c:	3207      	addne	r2, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800419e:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041a2:	bf18      	it	ne
 80041a4:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 80041a8:	2100      	movs	r1, #0
 80041aa:	6069      	str	r1, [r5, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041ac:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80041ae:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041b2:	1a99      	subs	r1, r3, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041b4:	e9c5 1103 	strd	r1, r1, [r5, #12]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041b8:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 80041bc:	60ab      	str	r3, [r5, #8]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041c2:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041c4:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80041c8:	ea18 0f04 	tst.w	r8, r4
 80041cc:	d14e      	bne.n	800426c <pvPortMalloc+0xe8>
			if( xWantedSize > 0 )
 80041ce:	2c00      	cmp	r4, #0
 80041d0:	d03f      	beq.n	8004252 <pvPortMalloc+0xce>
				xWantedSize += xHeapStructSize;
 80041d2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d6:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041d8:	bf1c      	itt	ne
 80041da:	f023 0307 	bicne.w	r3, r3, #7
 80041de:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d043      	beq.n	800426c <pvPortMalloc+0xe8>
 80041e4:	692f      	ldr	r7, [r5, #16]
 80041e6:	429f      	cmp	r7, r3
 80041e8:	d340      	bcc.n	800426c <pvPortMalloc+0xe8>
				pxBlock = xStart.pxNextFreeBlock;
 80041ea:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80041ec:	4822      	ldr	r0, [pc, #136]	; (8004278 <pvPortMalloc+0xf4>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ee:	6872      	ldr	r2, [r6, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d201      	bcs.n	80041f8 <pvPortMalloc+0x74>
 80041f4:	6831      	ldr	r1, [r6, #0]
 80041f6:	b9a1      	cbnz	r1, 8004222 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80041f8:	68a9      	ldr	r1, [r5, #8]
 80041fa:	42b1      	cmp	r1, r6
 80041fc:	d036      	beq.n	800426c <pvPortMalloc+0xe8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041fe:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004200:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004202:	6804      	ldr	r4, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004204:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004206:	2a10      	cmp	r2, #16
 8004208:	d912      	bls.n	8004230 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800420a:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800420c:	0741      	lsls	r1, r0, #29
 800420e:	d00b      	beq.n	8004228 <pvPortMalloc+0xa4>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	e7fe      	b.n	8004220 <pvPortMalloc+0x9c>
 8004222:	4630      	mov	r0, r6
 8004224:	460e      	mov	r6, r1
 8004226:	e7e2      	b.n	80041ee <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004228:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800422a:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800422c:	f7ff ff88 	bl	8004140 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004230:	6873      	ldr	r3, [r6, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004232:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004234:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004236:	ea48 0303 	orr.w	r3, r8, r3
 800423a:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 8004240:	69ab      	ldr	r3, [r5, #24]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004242:	612f      	str	r7, [r5, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004244:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8004246:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800424a:	bf38      	it	cc
 800424c:	60ef      	strcc	r7, [r5, #12]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800424e:	3408      	adds	r4, #8
					xNumberOfSuccessfulAllocations++;
 8004250:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 8004252:	f7ff fabb 	bl	80037cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004256:	0763      	lsls	r3, r4, #29
 8004258:	d00a      	beq.n	8004270 <pvPortMalloc+0xec>
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	e7fe      	b.n	800426a <pvPortMalloc+0xe6>
void *pvReturn = NULL;
 800426c:	2400      	movs	r4, #0
 800426e:	e7f0      	b.n	8004252 <pvPortMalloc+0xce>
}
 8004270:	4620      	mov	r0, r4
 8004272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004276:	bf00      	nop
 8004278:	200001ec 	.word	0x200001ec
 800427c:	2000020c 	.word	0x2000020c
 8004280:	20006604 	.word	0x20006604

08004284 <vPortFree>:
{
 8004284:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8004286:	4604      	mov	r4, r0
 8004288:	b380      	cbz	r0, 80042ec <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800428a:	4d19      	ldr	r5, [pc, #100]	; (80042f0 <vPortFree+0x6c>)
 800428c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004290:	696a      	ldr	r2, [r5, #20]
 8004292:	4213      	tst	r3, r2
 8004294:	d108      	bne.n	80042a8 <vPortFree+0x24>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	e7fe      	b.n	80042a6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80042ac:	b141      	cbz	r1, 80042c0 <vPortFree+0x3c>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	e7fe      	b.n	80042be <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042c0:	ea23 0302 	bic.w	r3, r3, r2
 80042c4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80042c8:	f7ff f9f4 	bl	80036b4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042cc:	692a      	ldr	r2, [r5, #16]
 80042ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042d2:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042d6:	4413      	add	r3, r2
 80042d8:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042da:	f7ff ff31 	bl	8004140 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80042de:	69eb      	ldr	r3, [r5, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61eb      	str	r3, [r5, #28]
}
 80042e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80042e8:	f7ff ba70 	b.w	80037cc <xTaskResumeAll>
}
 80042ec:	bd38      	pop	{r3, r4, r5, pc}
 80042ee:	bf00      	nop
 80042f0:	200001ec 	.word	0x200001ec

080042f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <prvPortStartFirstTask+0x24>)
 80042f6:	6800      	ldr	r0, [r0, #0]
 80042f8:	6800      	ldr	r0, [r0, #0]
 80042fa:	f380 8808 	msr	MSP, r0
 80042fe:	f04f 0000 	mov.w	r0, #0
 8004302:	f380 8814 	msr	CONTROL, r0
 8004306:	b662      	cpsie	i
 8004308:	b661      	cpsie	f
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	df00      	svc	0
 8004314:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004316:	0000      	.short	0x0000
 8004318:	e000ed08 	.word	0xe000ed08

0800431c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800431c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800432c <vPortEnableVFP+0x10>
 8004320:	6801      	ldr	r1, [r0, #0]
 8004322:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004326:	6001      	str	r1, [r0, #0]
 8004328:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800432a:	0000      	.short	0x0000
 800432c:	e000ed88 	.word	0xe000ed88

08004330 <prvTaskExitError>:
{
 8004330:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <prvTaskExitError+0x3c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	d008      	beq.n	8004350 <prvTaskExitError+0x20>
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	e7fe      	b.n	800434e <prvTaskExitError+0x1e>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004360:	9b01      	ldr	r3, [sp, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0fc      	beq.n	8004360 <prvTaskExitError+0x30>
}
 8004366:	b002      	add	sp, #8
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000034 	.word	0x20000034

08004370 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004374:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <pxPortInitialiseStack+0x28>)
 800437a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800437e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004382:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004386:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800438a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800438e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004392:	3844      	subs	r0, #68	; 0x44
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	08004331 	.word	0x08004331
 800439c:	00000000 	.word	0x00000000

080043a0 <SVC_Handler>:
	__asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	4770      	bx	lr
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst2>:
 80043c0:	200000e0 	.word	0x200000e0

080043c4 <vPortEnterCritical>:
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <vPortEnterCritical+0x3c>)
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80043da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80043dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80043de:	d10d      	bne.n	80043fc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <vPortEnterCritical+0x40>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043e8:	d008      	beq.n	80043fc <vPortEnterCritical+0x38>
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	e7fe      	b.n	80043fa <vPortEnterCritical+0x36>
}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000034 	.word	0x20000034
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004408:	4a08      	ldr	r2, [pc, #32]	; (800442c <vPortExitCritical+0x24>)
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b943      	cbnz	r3, 8004420 <vPortExitCritical+0x18>
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	e7fe      	b.n	800441e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004420:	3b01      	subs	r3, #1
 8004422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004424:	b90b      	cbnz	r3, 800442a <vPortExitCritical+0x22>
	__asm volatile
 8004426:	f383 8811 	msr	BASEPRI, r3
}
 800442a:	4770      	bx	lr
 800442c:	20000034 	.word	0x20000034

08004430 <PendSV_Handler>:
	__asm volatile
 8004430:	f3ef 8009 	mrs	r0, PSP
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4b15      	ldr	r3, [pc, #84]	; (8004490 <pxCurrentTCBConst>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	f01e 0f10 	tst.w	lr, #16
 8004440:	bf08      	it	eq
 8004442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444a:	6010      	str	r0, [r2, #0]
 800444c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004454:	f380 8811 	msr	BASEPRI, r0
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f7ff fa48 	bl	80038f4 <vTaskSwitchContext>
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f380 8811 	msr	BASEPRI, r0
 800446c:	bc09      	pop	{r0, r3}
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	6808      	ldr	r0, [r1, #0]
 8004472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004476:	f01e 0f10 	tst.w	lr, #16
 800447a:	bf08      	it	eq
 800447c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004480:	f380 8809 	msr	PSP, r0
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst>:
 8004490:	200000e0 	.word	0x200000e0

08004494 <xPortSysTickHandler>:
{
 8004494:	b508      	push	{r3, lr}
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80044a6:	f7ff f91d 	bl	80036e4 <xTaskIncrementTick>
 80044aa:	b118      	cbz	r0, 80044b4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <xPortSysTickHandler+0x28>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80044b4:	2300      	movs	r3, #0
 80044b6:	f383 8811 	msr	BASEPRI, r3
}
 80044ba:	bd08      	pop	{r3, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044c0:	4a08      	ldr	r2, [pc, #32]	; (80044e4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044c2:	4909      	ldr	r1, [pc, #36]	; (80044e8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ca:	4b08      	ldr	r3, [pc, #32]	; (80044ec <vPortSetupTimerInterrupt+0x2c>)
 80044cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044d6:	4906      	ldr	r1, [pc, #24]	; (80044f0 <vPortSetupTimerInterrupt+0x30>)
 80044d8:	3b01      	subs	r3, #1
 80044da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044dc:	2307      	movs	r3, #7
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e010 	.word	0xe000e010
 80044e8:	e000e018 	.word	0xe000e018
 80044ec:	20000028 	.word	0x20000028
 80044f0:	e000e014 	.word	0xe000e014

080044f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044f4:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <xPortStartScheduler+0xe0>)
 80044f6:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <xPortStartScheduler+0xe4>)
{
 80044f8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	4291      	cmp	r1, r2
 80044fe:	d108      	bne.n	8004512 <xPortStartScheduler+0x1e>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	e7fe      	b.n	8004510 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b31      	ldr	r3, [pc, #196]	; (80045dc <xPortStartScheduler+0xe8>)
 8004516:	429a      	cmp	r2, r3
 8004518:	d108      	bne.n	800452c <xPortStartScheduler+0x38>
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	e7fe      	b.n	800452a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800452c:	4b2c      	ldr	r3, [pc, #176]	; (80045e0 <xPortStartScheduler+0xec>)
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004538:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800453a:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004542:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004546:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800454a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800454c:	2307      	movs	r3, #7
 800454e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004550:	2100      	movs	r1, #0
 8004552:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004556:	0600      	lsls	r0, r0, #24
 8004558:	f103 34ff 	add.w	r4, r3, #4294967295
 800455c:	d40c      	bmi.n	8004578 <xPortStartScheduler+0x84>
 800455e:	b111      	cbz	r1, 8004566 <xPortStartScheduler+0x72>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004560:	2b03      	cmp	r3, #3
 8004562:	6053      	str	r3, [r2, #4]
 8004564:	d011      	beq.n	800458a <xPortStartScheduler+0x96>
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	e7fe      	b.n	8004576 <xPortStartScheduler+0x82>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004578:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f88d 3003 	strb.w	r3, [sp, #3]
 8004584:	2101      	movs	r1, #1
 8004586:	4623      	mov	r3, r4
 8004588:	e7e3      	b.n	8004552 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800458a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800458e:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004590:	9b01      	ldr	r3, [sp, #4]
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <xPortStartScheduler+0xec>)
 8004594:	b2db      	uxtb	r3, r3
 8004596:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <xPortStartScheduler+0xf4>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80045a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80045a8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80045aa:	f7ff ff89 	bl	80044c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <xPortStartScheduler+0xf8>)
 80045b0:	2400      	movs	r4, #0
 80045b2:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80045b4:	f7ff feb2 	bl	800431c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b8:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <xPortStartScheduler+0xfc>)
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045c0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80045c2:	f7ff fe97 	bl	80042f4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80045c6:	f7ff f995 	bl	80038f4 <vTaskSwitchContext>
	prvTaskExitError();
 80045ca:	f7ff feb1 	bl	8004330 <prvTaskExitError>
}
 80045ce:	4620      	mov	r0, r4
 80045d0:	b002      	add	sp, #8
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	410fc271 	.word	0x410fc271
 80045dc:	410fc270 	.word	0x410fc270
 80045e0:	e000e400 	.word	0xe000e400
 80045e4:	2000660c 	.word	0x2000660c
 80045e8:	e000ed20 	.word	0xe000ed20
 80045ec:	20000034 	.word	0x20000034
 80045f0:	e000ef34 	.word	0xe000ef34

080045f4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045f4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <vPortValidateInterruptPriority+0x48>)
 80045fc:	d90d      	bls.n	800461a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045fe:	4910      	ldr	r1, [pc, #64]	; (8004640 <vPortValidateInterruptPriority+0x4c>)
 8004600:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004602:	7811      	ldrb	r1, [r2, #0]
 8004604:	4299      	cmp	r1, r3
 8004606:	d908      	bls.n	800461a <vPortValidateInterruptPriority+0x26>
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	e7fe      	b.n	8004618 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <vPortValidateInterruptPriority+0x50>)
 800461c:	6852      	ldr	r2, [r2, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004624:	4293      	cmp	r3, r2
 8004626:	d908      	bls.n	800463a <vPortValidateInterruptPriority+0x46>
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	e7fe      	b.n	8004638 <vPortValidateInterruptPriority+0x44>
	}
 800463a:	4770      	bx	lr
 800463c:	2000660c 	.word	0x2000660c
 8004640:	e000e3f0 	.word	0xe000e3f0
 8004644:	e000ed0c 	.word	0xe000ed0c

08004648 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004648:	680a      	ldr	r2, [r1, #0]
{
 800464a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800464c:	320c      	adds	r2, #12
{
 800464e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004650:	f002 f950 	bl	80068f4 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004654:	b908      	cbnz	r0, 800465a <netconn_apimsg+0x12>
    return apimsg->err;
 8004656:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 800465a:	bd10      	pop	{r4, pc}

0800465c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800465c:	b500      	push	{lr}
 800465e:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004660:	b958      	cbnz	r0, 800467a <netconn_close_shutdown+0x1e>
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <netconn_close_shutdown+0x34>)
 8004664:	490b      	ldr	r1, [pc, #44]	; (8004694 <netconn_close_shutdown+0x38>)
 8004666:	480c      	ldr	r0, [pc, #48]	; (8004698 <netconn_close_shutdown+0x3c>)
 8004668:	f240 4247 	movw	r2, #1095	; 0x447
 800466c:	f009 fc12 	bl	800de94 <iprintf>
 8004670:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004674:	b009      	add	sp, #36	; 0x24
 8004676:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800467a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800467c:	f88d 1008 	strb.w	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004680:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004682:	4669      	mov	r1, sp
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004686:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800468a:	f7ff ffdd 	bl	8004648 <netconn_apimsg>
  return err;
 800468e:	e7f1      	b.n	8004674 <netconn_close_shutdown+0x18>
 8004690:	0801a6a2 	.word	0x0801a6a2
 8004694:	0801a71e 	.word	0x0801a71e
 8004698:	0801a4e1 	.word	0x0801a4e1
 800469c:	08005c11 	.word	0x08005c11

080046a0 <netconn_new_with_proto_and_callback>:
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	460d      	mov	r5, r1
 80046a4:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 80046a6:	4611      	mov	r1, r2
 80046a8:	f000 ff90 	bl	80055cc <netconn_alloc>
  if (conn != NULL) {
 80046ac:	4604      	mov	r4, r0
 80046ae:	2800      	cmp	r0, #0
 80046b0:	d03e      	beq.n	8004730 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 80046b2:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80046b4:	4669      	mov	r1, sp
 80046b6:	4820      	ldr	r0, [pc, #128]	; (8004738 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80046b8:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80046bc:	f7ff ffc4 	bl	8004648 <netconn_apimsg>
    if (err != ERR_OK) {
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d035      	beq.n	8004730 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	b12b      	cbz	r3, 80046d4 <netconn_new_with_proto_and_callback+0x34>
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <netconn_new_with_proto_and_callback+0x9c>)
 80046ca:	491d      	ldr	r1, [pc, #116]	; (8004740 <netconn_new_with_proto_and_callback+0xa0>)
 80046cc:	481d      	ldr	r0, [pc, #116]	; (8004744 <netconn_new_with_proto_and_callback+0xa4>)
 80046ce:	22a3      	movs	r2, #163	; 0xa3
 80046d0:	f009 fbe0 	bl	800de94 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80046d4:	f104 0510 	add.w	r5, r4, #16
 80046d8:	4628      	mov	r0, r5
 80046da:	f009 fac4 	bl	800dc66 <sys_mbox_valid>
 80046de:	b928      	cbnz	r0, 80046ec <netconn_new_with_proto_and_callback+0x4c>
 80046e0:	4b16      	ldr	r3, [pc, #88]	; (800473c <netconn_new_with_proto_and_callback+0x9c>)
 80046e2:	4919      	ldr	r1, [pc, #100]	; (8004748 <netconn_new_with_proto_and_callback+0xa8>)
 80046e4:	4817      	ldr	r0, [pc, #92]	; (8004744 <netconn_new_with_proto_and_callback+0xa4>)
 80046e6:	22a4      	movs	r2, #164	; 0xa4
 80046e8:	f009 fbd4 	bl	800de94 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80046ec:	f104 0014 	add.w	r0, r4, #20
 80046f0:	f009 fab9 	bl	800dc66 <sys_mbox_valid>
 80046f4:	b128      	cbz	r0, 8004702 <netconn_new_with_proto_and_callback+0x62>
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <netconn_new_with_proto_and_callback+0x9c>)
 80046f8:	4914      	ldr	r1, [pc, #80]	; (800474c <netconn_new_with_proto_and_callback+0xac>)
 80046fa:	4812      	ldr	r0, [pc, #72]	; (8004744 <netconn_new_with_proto_and_callback+0xa4>)
 80046fc:	22a6      	movs	r2, #166	; 0xa6
 80046fe:	f009 fbc9 	bl	800de94 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004702:	f104 060c 	add.w	r6, r4, #12
 8004706:	4630      	mov	r0, r6
 8004708:	f009 faed 	bl	800dce6 <sys_sem_valid>
 800470c:	b928      	cbnz	r0, 800471a <netconn_new_with_proto_and_callback+0x7a>
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <netconn_new_with_proto_and_callback+0x9c>)
 8004710:	490f      	ldr	r1, [pc, #60]	; (8004750 <netconn_new_with_proto_and_callback+0xb0>)
 8004712:	480c      	ldr	r0, [pc, #48]	; (8004744 <netconn_new_with_proto_and_callback+0xa4>)
 8004714:	22a9      	movs	r2, #169	; 0xa9
 8004716:	f009 fbbd 	bl	800de94 <iprintf>
      sys_sem_free(&conn->op_completed);
 800471a:	4630      	mov	r0, r6
 800471c:	f009 fae0 	bl	800dce0 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004720:	4628      	mov	r0, r5
 8004722:	f009 fa59 	bl	800dbd8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004726:	4621      	mov	r1, r4
 8004728:	2007      	movs	r0, #7
 800472a:	f004 ff1d 	bl	8009568 <memp_free>
      return NULL;
 800472e:	2400      	movs	r4, #0
}
 8004730:	4620      	mov	r0, r4
 8004732:	b008      	add	sp, #32
 8004734:	bd70      	pop	{r4, r5, r6, pc}
 8004736:	bf00      	nop
 8004738:	0800556d 	.word	0x0800556d
 800473c:	0801a6a2 	.word	0x0801a6a2
 8004740:	0801a73a 	.word	0x0801a73a
 8004744:	0801a4e1 	.word	0x0801a4e1
 8004748:	0801a75b 	.word	0x0801a75b
 800474c:	0801a770 	.word	0x0801a770
 8004750:	0801a791 	.word	0x0801a791

08004754 <netconn_prepare_delete>:
{
 8004754:	b500      	push	{lr}
 8004756:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004758:	b138      	cbz	r0, 800476a <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 800475a:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800475c:	2329      	movs	r3, #41	; 0x29
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800475e:	4804      	ldr	r0, [pc, #16]	; (8004770 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004760:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004764:	4669      	mov	r1, sp
 8004766:	f7ff ff6f 	bl	8004648 <netconn_apimsg>
}
 800476a:	b009      	add	sp, #36	; 0x24
 800476c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004770:	08005865 	.word	0x08005865

08004774 <netconn_delete>:
{
 8004774:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004776:	4605      	mov	r5, r0
 8004778:	b140      	cbz	r0, 800478c <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 800477a:	f7ff ffeb 	bl	8004754 <netconn_prepare_delete>
  if (err == ERR_OK) {
 800477e:	4604      	mov	r4, r0
 8004780:	b910      	cbnz	r0, 8004788 <netconn_delete+0x14>
    netconn_free(conn);
 8004782:	4628      	mov	r0, r5
 8004784:	f000 ff68 	bl	8005658 <netconn_free>
}
 8004788:	4620      	mov	r0, r4
 800478a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800478c:	4604      	mov	r4, r0
 800478e:	e7fb      	b.n	8004788 <netconn_delete+0x14>

08004790 <netconn_getaddr>:
{
 8004790:	b500      	push	{lr}
 8004792:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8004794:	b958      	cbnz	r0, 80047ae <netconn_getaddr+0x1e>
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <netconn_getaddr+0x4c>)
 8004798:	4911      	ldr	r1, [pc, #68]	; (80047e0 <netconn_getaddr+0x50>)
 800479a:	f44f 7289 	mov.w	r2, #274	; 0x112
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800479e:	4811      	ldr	r0, [pc, #68]	; (80047e4 <netconn_getaddr+0x54>)
 80047a0:	f009 fb78 	bl	800de94 <iprintf>
 80047a4:	f06f 000f 	mvn.w	r0, #15
}
 80047a8:	b009      	add	sp, #36	; 0x24
 80047aa:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80047ae:	b921      	cbnz	r1, 80047ba <netconn_getaddr+0x2a>
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <netconn_getaddr+0x4c>)
 80047b2:	490d      	ldr	r1, [pc, #52]	; (80047e8 <netconn_getaddr+0x58>)
 80047b4:	f240 1213 	movw	r2, #275	; 0x113
 80047b8:	e7f1      	b.n	800479e <netconn_getaddr+0xe>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80047ba:	b922      	cbnz	r2, 80047c6 <netconn_getaddr+0x36>
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <netconn_getaddr+0x4c>)
 80047be:	490b      	ldr	r1, [pc, #44]	; (80047ec <netconn_getaddr+0x5c>)
 80047c0:	f44f 728a 	mov.w	r2, #276	; 0x114
 80047c4:	e7eb      	b.n	800479e <netconn_getaddr+0xe>
  msg.msg.ad.port = port;
 80047c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
  API_MSG_VAR_REF(msg).conn = conn;
 80047ca:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80047cc:	4669      	mov	r1, sp
 80047ce:	4808      	ldr	r0, [pc, #32]	; (80047f0 <netconn_getaddr+0x60>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 80047d0:	f88d 3010 	strb.w	r3, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 80047d4:	f7ff ff38 	bl	8004648 <netconn_apimsg>
  return err;
 80047d8:	e7e6      	b.n	80047a8 <netconn_getaddr+0x18>
 80047da:	bf00      	nop
 80047dc:	0801a6a2 	.word	0x0801a6a2
 80047e0:	0801a7aa 	.word	0x0801a7aa
 80047e4:	0801a4e1 	.word	0x0801a4e1
 80047e8:	0801a7c8 	.word	0x0801a7c8
 80047ec:	0801a7e6 	.word	0x0801a7e6
 80047f0:	08005b9d 	.word	0x08005b9d

080047f4 <netconn_bind>:
{
 80047f4:	b500      	push	{lr}
 80047f6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80047f8:	b958      	cbnz	r0, 8004812 <netconn_bind+0x1e>
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <netconn_bind+0x38>)
 80047fc:	490c      	ldr	r1, [pc, #48]	; (8004830 <netconn_bind+0x3c>)
 80047fe:	480d      	ldr	r0, [pc, #52]	; (8004834 <netconn_bind+0x40>)
 8004800:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004804:	f009 fb46 	bl	800de94 <iprintf>
 8004808:	f06f 000f 	mvn.w	r0, #15
}
 800480c:	b009      	add	sp, #36	; 0x24
 800480e:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8004814:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8004816:	2900      	cmp	r1, #0
 8004818:	bf08      	it	eq
 800481a:	4619      	moveq	r1, r3
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800481c:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800481e:	4807      	ldr	r0, [pc, #28]	; (800483c <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004820:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004824:	4669      	mov	r1, sp
 8004826:	f7ff ff0f 	bl	8004648 <netconn_apimsg>
  return err;
 800482a:	e7ef      	b.n	800480c <netconn_bind+0x18>
 800482c:	0801a6a2 	.word	0x0801a6a2
 8004830:	0801a804 	.word	0x0801a804
 8004834:	0801a4e1 	.word	0x0801a4e1
 8004838:	0800f99c 	.word	0x0800f99c
 800483c:	08005971 	.word	0x08005971

08004840 <netconn_listen_with_backlog>:
{
 8004840:	b500      	push	{lr}
 8004842:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004844:	b958      	cbnz	r0, 800485e <netconn_listen_with_backlog+0x1e>
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <netconn_listen_with_backlog+0x2c>)
 8004848:	4909      	ldr	r1, [pc, #36]	; (8004870 <netconn_listen_with_backlog+0x30>)
 800484a:	480a      	ldr	r0, [pc, #40]	; (8004874 <netconn_listen_with_backlog+0x34>)
 800484c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8004850:	f009 fb20 	bl	800de94 <iprintf>
 8004854:	f06f 000f 	mvn.w	r0, #15
}
 8004858:	b009      	add	sp, #36	; 0x24
 800485a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800485e:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004860:	4669      	mov	r1, sp
 8004862:	4805      	ldr	r0, [pc, #20]	; (8004878 <netconn_listen_with_backlog+0x38>)
 8004864:	f7ff fef0 	bl	8004648 <netconn_apimsg>
  return err;
 8004868:	e7f6      	b.n	8004858 <netconn_listen_with_backlog+0x18>
 800486a:	bf00      	nop
 800486c:	0801a6a2 	.word	0x0801a6a2
 8004870:	0801a87c 	.word	0x0801a87c
 8004874:	0801a4e1 	.word	0x0801a4e1
 8004878:	080059a5 	.word	0x080059a5

0800487c <netconn_tcp_recvd>:
{
 800487c:	b500      	push	{lr}
 800487e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004880:	b120      	cbz	r0, 800488c <netconn_tcp_recvd+0x10>
 8004882:	7803      	ldrb	r3, [r0, #0]
 8004884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004888:	2b10      	cmp	r3, #16
 800488a:	d00b      	beq.n	80048a4 <netconn_tcp_recvd+0x28>
 800488c:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <netconn_tcp_recvd+0x38>)
 800488e:	490a      	ldr	r1, [pc, #40]	; (80048b8 <netconn_tcp_recvd+0x3c>)
 8004890:	480a      	ldr	r0, [pc, #40]	; (80048bc <netconn_tcp_recvd+0x40>)
 8004892:	f240 22b5 	movw	r2, #693	; 0x2b5
 8004896:	f009 fafd 	bl	800de94 <iprintf>
 800489a:	f06f 000f 	mvn.w	r0, #15
}
 800489e:	b009      	add	sp, #36	; 0x24
 80048a0:	f85d fb04 	ldr.w	pc, [sp], #4
  msg->conn = conn;
 80048a4:	9000      	str	r0, [sp, #0]
  msg->msg.r.len = len;
 80048a6:	9102      	str	r1, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80048a8:	4805      	ldr	r0, [pc, #20]	; (80048c0 <netconn_tcp_recvd+0x44>)
 80048aa:	4669      	mov	r1, sp
 80048ac:	f7ff fecc 	bl	8004648 <netconn_apimsg>
  return err;
 80048b0:	e7f5      	b.n	800489e <netconn_tcp_recvd+0x22>
 80048b2:	bf00      	nop
 80048b4:	0801a6a2 	.word	0x0801a6a2
 80048b8:	0801a899 	.word	0x0801a899
 80048bc:	0801a4e1 	.word	0x0801a4e1
 80048c0:	08005a99 	.word	0x08005a99

080048c4 <netconn_send>:
{
 80048c4:	b500      	push	{lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80048c8:	b958      	cbnz	r0, 80048e2 <netconn_send+0x1e>
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <netconn_send+0x2c>)
 80048cc:	4909      	ldr	r1, [pc, #36]	; (80048f4 <netconn_send+0x30>)
 80048ce:	480a      	ldr	r0, [pc, #40]	; (80048f8 <netconn_send+0x34>)
 80048d0:	f240 32b2 	movw	r2, #946	; 0x3b2
 80048d4:	f009 fade 	bl	800de94 <iprintf>
 80048d8:	f06f 000f 	mvn.w	r0, #15
}
 80048dc:	b009      	add	sp, #36	; 0x24
 80048de:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80048e2:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80048e4:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80048e6:	4805      	ldr	r0, [pc, #20]	; (80048fc <netconn_send+0x38>)
 80048e8:	4669      	mov	r1, sp
 80048ea:	f7ff fead 	bl	8004648 <netconn_apimsg>
  return err;
 80048ee:	e7f5      	b.n	80048dc <netconn_send+0x18>
 80048f0:	0801a6a2 	.word	0x0801a6a2
 80048f4:	0801a8bd 	.word	0x0801a8bd
 80048f8:	0801a4e1 	.word	0x0801a4e1
 80048fc:	08005a5d 	.word	0x08005a5d

08004900 <netconn_write_vectors_partly>:
{
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	469e      	mov	lr, r3
 8004906:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004908:	b958      	cbnz	r0, 8004922 <netconn_write_vectors_partly+0x22>
 800490a:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <netconn_write_vectors_partly+0xc0>)
 800490c:	492d      	ldr	r1, [pc, #180]	; (80049c4 <netconn_write_vectors_partly+0xc4>)
 800490e:	482e      	ldr	r0, [pc, #184]	; (80049c8 <netconn_write_vectors_partly+0xc8>)
 8004910:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004914:	f009 fabe 	bl	800de94 <iprintf>
 8004918:	f06f 040f 	mvn.w	r4, #15
}
 800491c:	4620      	mov	r0, r4
 800491e:	b009      	add	sp, #36	; 0x24
 8004920:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8004922:	7804      	ldrb	r4, [r0, #0]
 8004924:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8004928:	2c10      	cmp	r4, #16
 800492a:	d009      	beq.n	8004940 <netconn_write_vectors_partly+0x40>
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <netconn_write_vectors_partly+0xc0>)
 800492e:	4927      	ldr	r1, [pc, #156]	; (80049cc <netconn_write_vectors_partly+0xcc>)
 8004930:	4825      	ldr	r0, [pc, #148]	; (80049c8 <netconn_write_vectors_partly+0xc8>)
 8004932:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004936:	f009 faad 	bl	800de94 <iprintf>
    return ERR_VAL;
 800493a:	f06f 0405 	mvn.w	r4, #5
 800493e:	e7ed      	b.n	800491c <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8004940:	7f05      	ldrb	r5, [r0, #28]
 8004942:	f003 0404 	and.w	r4, r3, #4
 8004946:	f005 0502 	and.w	r5, r5, #2
 800494a:	4325      	orrs	r5, r4
 800494c:	d002      	beq.n	8004954 <netconn_write_vectors_partly+0x54>
 800494e:	2f00      	cmp	r7, #0
 8004950:	d0f3      	beq.n	800493a <netconn_write_vectors_partly+0x3a>
 8004952:	2501      	movs	r5, #1
 8004954:	2400      	movs	r4, #0
 8004956:	4626      	mov	r6, r4
    size += vectors[i].len;
 8004958:	f101 0c04 	add.w	ip, r1, #4
 800495c:	e004      	b.n	8004968 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 800495e:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 8004962:	199e      	adds	r6, r3, r6
 8004964:	d2e9      	bcs.n	800493a <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 8004966:	3401      	adds	r4, #1
 8004968:	42a2      	cmp	r2, r4
 800496a:	dcf8      	bgt.n	800495e <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 800496c:	2e00      	cmp	r6, #0
 800496e:	d101      	bne.n	8004974 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8004970:	2400      	movs	r4, #0
 8004972:	e7d3      	b.n	800491c <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 8004974:	da03      	bge.n	800497e <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 8004976:	2f00      	cmp	r7, #0
 8004978:	d0df      	beq.n	800493a <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 800497a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).conn = conn;
 800497e:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8004980:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8004982:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004986:	4812      	ldr	r0, [pc, #72]	; (80049d0 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8004988:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800498c:	2200      	movs	r2, #0
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800498e:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8004990:	e9cd 6205 	strd	r6, r2, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8004994:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8004996:	f7ff fe57 	bl	8004648 <netconn_apimsg>
  if (err == ERR_OK) {
 800499a:	4604      	mov	r4, r0
 800499c:	2800      	cmp	r0, #0
 800499e:	d1bd      	bne.n	800491c <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 80049a0:	b10f      	cbz	r7, 80049a6 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80049a2:	9b06      	ldr	r3, [sp, #24]
 80049a4:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	d1e2      	bne.n	8004970 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	42b3      	cmp	r3, r6
 80049ae:	d0df      	beq.n	8004970 <netconn_write_vectors_partly+0x70>
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <netconn_write_vectors_partly+0xc0>)
 80049b2:	4908      	ldr	r1, [pc, #32]	; (80049d4 <netconn_write_vectors_partly+0xd4>)
 80049b4:	4804      	ldr	r0, [pc, #16]	; (80049c8 <netconn_write_vectors_partly+0xc8>)
 80049b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80049ba:	f009 fa6b 	bl	800de94 <iprintf>
 80049be:	e7ad      	b.n	800491c <netconn_write_vectors_partly+0x1c>
 80049c0:	0801a6a2 	.word	0x0801a6a2
 80049c4:	0801a8d8 	.word	0x0801a8d8
 80049c8:	0801a4e1 	.word	0x0801a4e1
 80049cc:	0801a8f4 	.word	0x0801a8f4
 80049d0:	08005ad1 	.word	0x08005ad1
 80049d4:	0801a916 	.word	0x0801a916

080049d8 <netconn_write_partly>:
{
 80049d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80049da:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80049de:	9a06      	ldr	r2, [sp, #24]
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	a902      	add	r1, sp, #8
 80049e4:	2201      	movs	r2, #1
 80049e6:	f7ff ff8b 	bl	8004900 <netconn_write_vectors_partly>
}
 80049ea:	b005      	add	sp, #20
 80049ec:	f85d fb04 	ldr.w	pc, [sp], #4

080049f0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80049f0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80049f2:	4604      	mov	r4, r0
 80049f4:	b148      	cbz	r0, 8004a0a <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80049f6:	f009 f9b1 	bl	800dd5c <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80049fa:	2300      	movs	r3, #0
  err = conn->pending_err;
 80049fc:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8004a00:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8004a02:	f009 f9b7 	bl	800dd74 <sys_arch_unprotect>
  return err;
}
 8004a06:	4628      	mov	r0, r5
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	e7fb      	b.n	8004a06 <netconn_err+0x16>
	...

08004a10 <netconn_accept>:
{
 8004a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a12:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8004a14:	460e      	mov	r6, r1
 8004a16:	b959      	cbnz	r1, 8004a30 <netconn_accept+0x20>
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <netconn_accept+0xa0>)
 8004a1a:	4926      	ldr	r1, [pc, #152]	; (8004ab4 <netconn_accept+0xa4>)
 8004a1c:	f240 12e1 	movw	r2, #481	; 0x1e1
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004a20:	4825      	ldr	r0, [pc, #148]	; (8004ab8 <netconn_accept+0xa8>)
 8004a22:	f009 fa37 	bl	800de94 <iprintf>
 8004a26:	f06f 040f 	mvn.w	r4, #15
}
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	b003      	add	sp, #12
 8004a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004a34:	b920      	cbnz	r0, 8004a40 <netconn_accept+0x30>
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <netconn_accept+0xa0>)
 8004a38:	4920      	ldr	r1, [pc, #128]	; (8004abc <netconn_accept+0xac>)
 8004a3a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8004a3e:	e7ef      	b.n	8004a20 <netconn_accept+0x10>
  err = netconn_err(conn);
 8004a40:	f7ff ffd6 	bl	80049f0 <netconn_err>
 8004a44:	4604      	mov	r4, r0
 8004a46:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d1ed      	bne.n	8004a2a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004a4e:	f105 0714 	add.w	r7, r5, #20
 8004a52:	4638      	mov	r0, r7
 8004a54:	f009 f907 	bl	800dc66 <sys_mbox_valid>
 8004a58:	b910      	cbnz	r0, 8004a60 <netconn_accept+0x50>
    return ERR_CLSD;
 8004a5a:	f06f 040e 	mvn.w	r4, #14
 8004a5e:	e7e4      	b.n	8004a2a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8004a60:	7f2b      	ldrb	r3, [r5, #28]
 8004a62:	07da      	lsls	r2, r3, #31
 8004a64:	d4f9      	bmi.n	8004a5a <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8004a66:	079b      	lsls	r3, r3, #30
 8004a68:	d508      	bpl.n	8004a7c <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8004a6a:	a901      	add	r1, sp, #4
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f009 f8e9 	bl	800dc44 <sys_arch_mbox_tryfetch>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d107      	bne.n	8004a86 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8004a76:	f06f 0406 	mvn.w	r4, #6
 8004a7a:	e7d6      	b.n	8004a2a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	a901      	add	r1, sp, #4
 8004a80:	4638      	mov	r0, r7
 8004a82:	f009 f8bd 	bl	800dc00 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a88:	b11b      	cbz	r3, 8004a92 <netconn_accept+0x82>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8004a92:	9801      	ldr	r0, [sp, #4]
 8004a94:	f10d 0103 	add.w	r1, sp, #3
 8004a98:	f000 fd40 	bl	800551c <lwip_netconn_is_err_msg>
 8004a9c:	b110      	cbz	r0, 8004aa4 <netconn_accept+0x94>
    return err;
 8004a9e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8004aa2:	e7c2      	b.n	8004a2a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8004aa4:	9b01      	ldr	r3, [sp, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0d7      	beq.n	8004a5a <netconn_accept+0x4a>
  *new_conn = newconn;
 8004aaa:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8004aac:	e7bd      	b.n	8004a2a <netconn_accept+0x1a>
 8004aae:	bf00      	nop
 8004ab0:	0801a6a2 	.word	0x0801a6a2
 8004ab4:	0801a939 	.word	0x0801a939
 8004ab8:	0801a4e1 	.word	0x0801a4e1
 8004abc:	0801a959 	.word	0x0801a959

08004ac0 <netconn_recv_data>:
{
 8004ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  void *buf = NULL;
 8004ac2:	2300      	movs	r3, #0
{
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	4616      	mov	r6, r2
  void *buf = NULL;
 8004ac8:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8004aca:	460d      	mov	r5, r1
 8004acc:	b951      	cbnz	r1, 8004ae4 <netconn_recv_data+0x24>
 8004ace:	4b32      	ldr	r3, [pc, #200]	; (8004b98 <netconn_recv_data+0xd8>)
 8004ad0:	4932      	ldr	r1, [pc, #200]	; (8004b9c <netconn_recv_data+0xdc>)
 8004ad2:	f44f 7212 	mov.w	r2, #584	; 0x248
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004ad6:	4832      	ldr	r0, [pc, #200]	; (8004ba0 <netconn_recv_data+0xe0>)
 8004ad8:	f009 f9dc 	bl	800de94 <iprintf>
 8004adc:	f06f 000f 	mvn.w	r0, #15
}
 8004ae0:	b003      	add	sp, #12
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8004ae4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8004ae6:	b920      	cbnz	r0, 8004af2 <netconn_recv_data+0x32>
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <netconn_recv_data+0xd8>)
 8004aea:	492e      	ldr	r1, [pc, #184]	; (8004ba4 <netconn_recv_data+0xe4>)
 8004aec:	f240 224a 	movw	r2, #586	; 0x24a
 8004af0:	e7f1      	b.n	8004ad6 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004af2:	f100 0710 	add.w	r7, r0, #16
 8004af6:	4638      	mov	r0, r7
 8004af8:	f009 f8b5 	bl	800dc66 <sys_mbox_valid>
 8004afc:	b938      	cbnz	r0, 8004b0e <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ff76 	bl	80049f0 <netconn_err>
    if (err != ERR_OK) {
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d1eb      	bne.n	8004ae0 <netconn_recv_data+0x20>
    return ERR_CONN;
 8004b08:	f06f 000a 	mvn.w	r0, #10
 8004b0c:	e7e8      	b.n	8004ae0 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004b0e:	7f23      	ldrb	r3, [r4, #28]
 8004b10:	f006 0604 	and.w	r6, r6, #4
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	4333      	orrs	r3, r6
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004b1a:	a901      	add	r1, sp, #4
 8004b1c:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8004b1e:	d102      	bne.n	8004b26 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8004b20:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8004b24:	b172      	cbz	r2, 8004b44 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8004b26:	f009 f88d 	bl	800dc44 <sys_arch_mbox_tryfetch>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d10c      	bne.n	8004b48 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7ff ff5e 	bl	80049f0 <netconn_err>
      if (err != ERR_OK) {
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1d3      	bne.n	8004ae0 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8004b38:	7f23      	ldrb	r3, [r4, #28]
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d4e4      	bmi.n	8004b08 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8004b3e:	f06f 0006 	mvn.w	r0, #6
 8004b42:	e7cd      	b.n	8004ae0 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8004b44:	f009 f85c 	bl	800dc00 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8004b48:	7823      	ldrb	r3, [r4, #0]
 8004b4a:	9801      	ldr	r0, [sp, #4]
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d116      	bne.n	8004b82 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8004b54:	f10d 0103 	add.w	r1, sp, #3
 8004b58:	f000 fce0 	bl	800551c <lwip_netconn_is_err_msg>
 8004b5c:	b130      	cbz	r0, 8004b6c <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 8004b5e:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8004b62:	f110 0f0f 	cmn.w	r0, #15
 8004b66:	bf08      	it	eq
 8004b68:	2000      	moveq	r0, #0
 8004b6a:	e7b9      	b.n	8004ae0 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8004b6c:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8004b6e:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8004b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b72:	b113      	cbz	r3, 8004b7a <netconn_recv_data+0xba>
 8004b74:	2101      	movs	r1, #1
 8004b76:	4620      	mov	r0, r4
 8004b78:	4798      	blx	r3
  *new_buf = buf;
 8004b7a:	9b01      	ldr	r3, [sp, #4]
 8004b7c:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e7ae      	b.n	8004ae0 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8004b82:	b930      	cbnz	r0, 8004b92 <netconn_recv_data+0xd2>
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <netconn_recv_data+0xd8>)
 8004b86:	4908      	ldr	r1, [pc, #32]	; (8004ba8 <netconn_recv_data+0xe8>)
 8004b88:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <netconn_recv_data+0xe0>)
 8004b8a:	f240 2291 	movw	r2, #657	; 0x291
 8004b8e:	f009 f981 	bl	800de94 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	e7ea      	b.n	8004b6e <netconn_recv_data+0xae>
 8004b98:	0801a6a2 	.word	0x0801a6a2
 8004b9c:	0801a976 	.word	0x0801a976
 8004ba0:	0801a4e1 	.word	0x0801a4e1
 8004ba4:	0801a994 	.word	0x0801a994
 8004ba8:	0801a9af 	.word	0x0801a9af

08004bac <netconn_recv_udp_raw_netbuf_flags>:
{
 8004bac:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8004bae:	b140      	cbz	r0, 8004bc2 <netconn_recv_udp_raw_netbuf_flags+0x16>
 8004bb0:	7803      	ldrb	r3, [r0, #0]
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d003      	beq.n	8004bc2 <netconn_recv_udp_raw_netbuf_flags+0x16>
}
 8004bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004bbe:	f7ff bf7f 	b.w	8004ac0 <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 8004bc4:	4905      	ldr	r1, [pc, #20]	; (8004bdc <netconn_recv_udp_raw_netbuf_flags+0x30>)
 8004bc6:	4806      	ldr	r0, [pc, #24]	; (8004be0 <netconn_recv_udp_raw_netbuf_flags+0x34>)
 8004bc8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8004bcc:	f009 f962 	bl	800de94 <iprintf>
}
 8004bd0:	f06f 000f 	mvn.w	r0, #15
 8004bd4:	bd08      	pop	{r3, pc}
 8004bd6:	bf00      	nop
 8004bd8:	0801a6a2 	.word	0x0801a6a2
 8004bdc:	0801a9bb 	.word	0x0801a9bb
 8004be0:	0801a4e1 	.word	0x0801a4e1

08004be4 <netconn_recv_data_tcp>:
{
 8004be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be6:	4604      	mov	r4, r0
 8004be8:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004bea:	3010      	adds	r0, #16
{
 8004bec:	460f      	mov	r7, r1
 8004bee:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8004bf0:	f009 f839 	bl	800dc66 <sys_mbox_valid>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d04c      	beq.n	8004c92 <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8004bf8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8004bfc:	7f23      	ldrb	r3, [r4, #28]
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	da13      	bge.n	8004c2a <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8004c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c06:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8004c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c0a:	b11b      	cbz	r3, 8004c14 <netconn_recv_data_tcp+0x30>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4620      	mov	r0, r4
 8004c12:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d134      	bne.n	8004c84 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fee8 	bl	80049f0 <netconn_err>
        return ERR_RST;
 8004c20:	1e05      	subs	r5, r0, #0
 8004c22:	bf08      	it	eq
 8004c24:	f06f 050d 	mvneq.w	r5, #13
 8004c28:	e020      	b.n	8004c6c <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f7ff ff46 	bl	8004ac0 <netconn_recv_data>
  if (err != ERR_OK) {
 8004c34:	4605      	mov	r5, r0
 8004c36:	b9c8      	cbnz	r0, 8004c6c <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8004c38:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8004c3a:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8004c3c:	d40d      	bmi.n	8004c5a <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
 8004c3e:	b1c7      	cbz	r7, 8004c72 <netconn_recv_data_tcp+0x8e>
 8004c40:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004c42:	7823      	ldrb	r3, [r4, #0]
 8004c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d014      	beq.n	8004c76 <netconn_recv_data_tcp+0x92>
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <netconn_recv_data_tcp+0xb4>)
 8004c4e:	4913      	ldr	r1, [pc, #76]	; (8004c9c <netconn_recv_data_tcp+0xb8>)
 8004c50:	4813      	ldr	r0, [pc, #76]	; (8004ca0 <netconn_recv_data_tcp+0xbc>)
 8004c52:	f240 22a7 	movw	r2, #679	; 0x2a7
 8004c56:	f009 f91d 	bl	800de94 <iprintf>
  if (buf == NULL) {
 8004c5a:	b93f      	cbnz	r7, 8004c6c <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
 8004c5c:	06f3      	lsls	r3, r6, #27
 8004c5e:	d5d3      	bpl.n	8004c08 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8004c60:	7f23      	ldrb	r3, [r4, #28]
 8004c62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c66:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8004c68:	f06f 0506 	mvn.w	r5, #6
}
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	b009      	add	sp, #36	; 0x24
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8004c72:	2201      	movs	r2, #1
 8004c74:	e7e5      	b.n	8004c42 <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8004c76:	4669      	mov	r1, sp
 8004c78:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
 8004c7a:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 8004c7c:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8004c7e:	f7ff fce3 	bl	8004648 <netconn_apimsg>
 8004c82:	e7ea      	b.n	8004c5a <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8004c84:	2101      	movs	r1, #1
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff fce8 	bl	800465c <netconn_close_shutdown>
      return ERR_CLSD;
 8004c8c:	f06f 050e 	mvn.w	r5, #14
 8004c90:	e7ec      	b.n	8004c6c <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
 8004c92:	f06f 050a 	mvn.w	r5, #10
 8004c96:	e7e9      	b.n	8004c6c <netconn_recv_data_tcp+0x88>
 8004c98:	0801a6a2 	.word	0x0801a6a2
 8004c9c:	0801a899 	.word	0x0801a899
 8004ca0:	0801a4e1 	.word	0x0801a4e1
 8004ca4:	08005a99 	.word	0x08005a99

08004ca8 <netconn_recv_tcp_pbuf_flags>:
{
 8004ca8:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004caa:	b140      	cbz	r0, 8004cbe <netconn_recv_tcp_pbuf_flags+0x16>
 8004cac:	7803      	ldrb	r3, [r0, #0]
 8004cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d103      	bne.n	8004cbe <netconn_recv_tcp_pbuf_flags+0x16>
}
 8004cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8004cba:	f7ff bf93 	b.w	8004be4 <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <netconn_recv_tcp_pbuf_flags+0x2c>)
 8004cc0:	4905      	ldr	r1, [pc, #20]	; (8004cd8 <netconn_recv_tcp_pbuf_flags+0x30>)
 8004cc2:	4806      	ldr	r0, [pc, #24]	; (8004cdc <netconn_recv_tcp_pbuf_flags+0x34>)
 8004cc4:	f240 3225 	movw	r2, #805	; 0x325
 8004cc8:	f009 f8e4 	bl	800de94 <iprintf>
}
 8004ccc:	f06f 000f 	mvn.w	r0, #15
 8004cd0:	bd08      	pop	{r3, pc}
 8004cd2:	bf00      	nop
 8004cd4:	0801a6a2 	.word	0x0801a6a2
 8004cd8:	0801a899 	.word	0x0801a899
 8004cdc:	0801a4e1 	.word	0x0801a4e1

08004ce0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8004ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8004cea:	4617      	mov	r7, r2
 8004cec:	461d      	mov	r5, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004cee:	460c      	mov	r4, r1
 8004cf0:	b929      	cbnz	r1, 8004cfe <recv_udp+0x1e>
 8004cf2:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <recv_udp+0xa8>)
 8004cf4:	4925      	ldr	r1, [pc, #148]	; (8004d8c <recv_udp+0xac>)
 8004cf6:	4826      	ldr	r0, [pc, #152]	; (8004d90 <recv_udp+0xb0>)
 8004cf8:	22e5      	movs	r2, #229	; 0xe5
 8004cfa:	f009 f8cb 	bl	800de94 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004cfe:	b99e      	cbnz	r6, 8004d28 <recv_udp+0x48>
 8004d00:	4b21      	ldr	r3, [pc, #132]	; (8004d88 <recv_udp+0xa8>)
 8004d02:	4924      	ldr	r1, [pc, #144]	; (8004d94 <recv_udp+0xb4>)
 8004d04:	4822      	ldr	r0, [pc, #136]	; (8004d90 <recv_udp+0xb0>)
 8004d06:	22e6      	movs	r2, #230	; 0xe6
 8004d08:	f009 f8c4 	bl	800de94 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8004d0c:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8004d14:	f004 be56 	b.w	80099c4 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004d18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d031      	beq.n	8004d82 <recv_udp+0xa2>
 8004d1e:	4630      	mov	r0, r6
}
 8004d20:	b003      	add	sp, #12
 8004d22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004d26:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004d28:	6873      	ldr	r3, [r6, #4]
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	d005      	beq.n	8004d3a <recv_udp+0x5a>
 8004d2e:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <recv_udp+0xa8>)
 8004d30:	4919      	ldr	r1, [pc, #100]	; (8004d98 <recv_udp+0xb8>)
 8004d32:	4817      	ldr	r0, [pc, #92]	; (8004d90 <recv_udp+0xb0>)
 8004d34:	22ee      	movs	r2, #238	; 0xee
 8004d36:	f009 f8ad 	bl	800de94 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8004d3a:	f106 0910 	add.w	r9, r6, #16
 8004d3e:	4648      	mov	r0, r9
 8004d40:	f008 ff91 	bl	800dc66 <sys_mbox_valid>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d0e1      	beq.n	8004d0c <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8004d48:	2006      	movs	r0, #6
 8004d4a:	f004 fbf1 	bl	8009530 <memp_malloc>
  if (buf == NULL) {
 8004d4e:	4604      	mov	r4, r0
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d0db      	beq.n	8004d0c <recv_udp+0x2c>
    buf->ptr = p;
 8004d54:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8004d58:	b105      	cbz	r5, 8004d5c <recv_udp+0x7c>
 8004d5a:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 8004d5c:	893a      	ldrh	r2, [r7, #8]
    ip_addr_set(&buf->addr, addr);
 8004d5e:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004d60:	4621      	mov	r1, r4
    buf->port = port;
 8004d62:	f8a4 800c 	strh.w	r8, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004d66:	4648      	mov	r0, r9
  len = p->tot_len;
 8004d68:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004d6a:	f008 ff3f 	bl	800dbec <sys_mbox_trypost>
 8004d6e:	9a01      	ldr	r2, [sp, #4]
 8004d70:	4601      	mov	r1, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d0d0      	beq.n	8004d18 <recv_udp+0x38>
    netbuf_delete(buf);
 8004d76:	4620      	mov	r0, r4
}
 8004d78:	b003      	add	sp, #12
 8004d7a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 8004d7e:	f000 bfb3 	b.w	8005ce8 <netbuf_delete>
}
 8004d82:	b003      	add	sp, #12
 8004d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d88:	0801a9e5 	.word	0x0801a9e5
 8004d8c:	0801aa61 	.word	0x0801aa61
 8004d90:	0801a4e1 	.word	0x0801a4e1
 8004d94:	0801aa83 	.word	0x0801aa83
 8004d98:	0801aaa2 	.word	0x0801aaa2

08004d9c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8004d9c:	b507      	push	{r0, r1, r2, lr}
 8004d9e:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8004da0:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8004da2:	9001      	str	r0, [sp, #4]
 8004da4:	f005 fa72 	bl	800a28c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8004da8:	9801      	ldr	r0, [sp, #4]
 8004daa:	4909      	ldr	r1, [pc, #36]	; (8004dd0 <setup_tcp+0x34>)
 8004dac:	f005 fa72 	bl	800a294 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8004db0:	9801      	ldr	r0, [sp, #4]
 8004db2:	4908      	ldr	r1, [pc, #32]	; (8004dd4 <setup_tcp+0x38>)
 8004db4:	f005 fa86 	bl	800a2c4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8004db8:	9801      	ldr	r0, [sp, #4]
 8004dba:	4907      	ldr	r1, [pc, #28]	; (8004dd8 <setup_tcp+0x3c>)
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f005 fab5 	bl	800a32c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8004dc2:	4906      	ldr	r1, [pc, #24]	; (8004ddc <setup_tcp+0x40>)
 8004dc4:	9801      	ldr	r0, [sp, #4]
}
 8004dc6:	b003      	add	sp, #12
 8004dc8:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8004dcc:	f005 ba90 	b.w	800a2f0 <tcp_err>
 8004dd0:	08005299 	.word	0x08005299
 8004dd4:	080054ad 	.word	0x080054ad
 8004dd8:	0800521d 	.word	0x0800521d
 8004ddc:	08005369 	.word	0x08005369

08004de0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004de6:	4604      	mov	r4, r0
 8004de8:	b930      	cbnz	r0, 8004df8 <lwip_netconn_do_writemore+0x18>
 8004dea:	4b89      	ldr	r3, [pc, #548]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004dec:	4989      	ldr	r1, [pc, #548]	; (8005014 <lwip_netconn_do_writemore+0x234>)
 8004dee:	488a      	ldr	r0, [pc, #552]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004df0:	f240 6273 	movw	r2, #1651	; 0x673
 8004df4:	f009 f84e 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8004df8:	7863      	ldrb	r3, [r4, #1]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d006      	beq.n	8004e0c <lwip_netconn_do_writemore+0x2c>
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004e00:	4986      	ldr	r1, [pc, #536]	; (800501c <lwip_netconn_do_writemore+0x23c>)
 8004e02:	4885      	ldr	r0, [pc, #532]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004e04:	f240 6274 	movw	r2, #1652	; 0x674
 8004e08:	f009 f844 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004e0c:	6a23      	ldr	r3, [r4, #32]
 8004e0e:	b933      	cbnz	r3, 8004e1e <lwip_netconn_do_writemore+0x3e>
 8004e10:	4b7f      	ldr	r3, [pc, #508]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004e12:	4983      	ldr	r1, [pc, #524]	; (8005020 <lwip_netconn_do_writemore+0x240>)
 8004e14:	4880      	ldr	r0, [pc, #512]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004e16:	f240 6275 	movw	r2, #1653	; 0x675
 8004e1a:	f009 f83b 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	b933      	cbnz	r3, 8004e30 <lwip_netconn_do_writemore+0x50>
 8004e22:	4b7b      	ldr	r3, [pc, #492]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004e24:	497f      	ldr	r1, [pc, #508]	; (8005024 <lwip_netconn_do_writemore+0x244>)
 8004e26:	487c      	ldr	r0, [pc, #496]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004e28:	f240 6276 	movw	r2, #1654	; 0x676
 8004e2c:	f009 f832 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8004e30:	6a23      	ldr	r3, [r4, #32]
 8004e32:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d306      	bcc.n	8004e48 <lwip_netconn_do_writemore+0x68>
 8004e3a:	4b75      	ldr	r3, [pc, #468]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004e3c:	497a      	ldr	r1, [pc, #488]	; (8005028 <lwip_netconn_do_writemore+0x248>)
 8004e3e:	4876      	ldr	r0, [pc, #472]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004e40:	f240 6277 	movw	r2, #1655	; 0x677
 8004e44:	f009 f826 	bl	800de94 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8004e48:	6a23      	ldr	r3, [r4, #32]
 8004e4a:	899b      	ldrh	r3, [r3, #12]
 8004e4c:	b933      	cbnz	r3, 8004e5c <lwip_netconn_do_writemore+0x7c>
 8004e4e:	4b70      	ldr	r3, [pc, #448]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004e50:	4976      	ldr	r1, [pc, #472]	; (800502c <lwip_netconn_do_writemore+0x24c>)
 8004e52:	4871      	ldr	r0, [pc, #452]	; (8005018 <lwip_netconn_do_writemore+0x238>)
 8004e54:	f240 6279 	movw	r2, #1657	; 0x679
 8004e58:	f009 f81c 	bl	800de94 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8004e5c:	6a23      	ldr	r3, [r4, #32]
 8004e5e:	7f26      	ldrb	r6, [r4, #28]
 8004e60:	f893 801c 	ldrb.w	r8, [r3, #28]
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004e64:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005018 <lwip_netconn_do_writemore+0x238>
 8004e68:	f006 0602 	and.w	r6, r6, #2
 8004e6c:	f008 0304 	and.w	r3, r8, #4
 8004e70:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004e72:	6a21      	ldr	r1, [r4, #32]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004e74:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004e76:	688a      	ldr	r2, [r1, #8]
 8004e78:	690b      	ldr	r3, [r1, #16]
 8004e7a:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8004e7c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8004e80:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8004e84:	6850      	ldr	r0, [r2, #4]
 8004e86:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8004e8a:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8004e8e:	bf2a      	itet	cs
 8004e90:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8004e94:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004e98:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8004e9c:	42aa      	cmp	r2, r5
 8004e9e:	d979      	bls.n	8004f94 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	d038      	beq.n	8004f16 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	d138      	bne.n	8004f1a <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004ea8:	698b      	ldr	r3, [r1, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bf0c      	ite	eq
 8004eae:	f06f 0a06 	mvneq.w	sl, #6
 8004eb2:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004eb6:	6a23      	ldr	r3, [r4, #32]
 8004eb8:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d276      	bcs.n	8004fae <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec2:	b11b      	cbz	r3, 8004ecc <lwip_netconn_do_writemore+0xec>
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	4620      	mov	r0, r4
 8004eca:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004ecc:	7f23      	ldrb	r3, [r4, #28]
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8004ed4:	f1ba 0f00 	cmp.w	sl, #0
 8004ed8:	d17e      	bne.n	8004fd8 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8004eda:	6a23      	ldr	r3, [r4, #32]
 8004edc:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d077      	beq.n	8004fd4 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8004ee4:	3e00      	subs	r6, #0
 8004ee6:	bf18      	it	ne
 8004ee8:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004eea:	6860      	ldr	r0, [r4, #4]
 8004eec:	f007 ff62 	bl	800cdb4 <tcp_output>
      if (out_err == ERR_RTE) {
 8004ef0:	3004      	adds	r0, #4
 8004ef2:	f040 8084 	bne.w	8004ffe <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8004ef6:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004efa:	6a23      	ldr	r3, [r4, #32]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8004efc:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004efe:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8004f00:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8004f04:	6225      	str	r5, [r4, #32]
    conn->state = NETCONN_NONE;
 8004f06:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8004f08:	2f00      	cmp	r7, #0
 8004f0a:	d07e      	beq.n	800500a <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8004f0c:	300c      	adds	r0, #12
 8004f0e:	f008 fee4 	bl	800dcda <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8004f12:	4628      	mov	r0, r5
 8004f14:	e06b      	b.n	8004fee <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8004f16:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8004f1a:	442b      	add	r3, r5
 8004f1c:	4298      	cmp	r0, r3
 8004f1e:	d206      	bcs.n	8004f2e <lwip_netconn_do_writemore+0x14e>
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <lwip_netconn_do_writemore+0x230>)
 8004f22:	4943      	ldr	r1, [pc, #268]	; (8005030 <lwip_netconn_do_writemore+0x250>)
 8004f24:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8004f28:	4658      	mov	r0, fp
 8004f2a:	f008 ffb3 	bl	800de94 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8004f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f32:	429d      	cmp	r5, r3
 8004f34:	d102      	bne.n	8004f3c <lwip_netconn_do_writemore+0x15c>
 8004f36:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8004f3a:	d207      	bcs.n	8004f4c <lwip_netconn_do_writemore+0x16c>
 8004f3c:	fa1f f989 	uxth.w	r9, r9
 8004f40:	45a9      	cmp	r9, r5
 8004f42:	d129      	bne.n	8004f98 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8004f44:	6a23      	ldr	r3, [r4, #32]
 8004f46:	899b      	ldrh	r3, [r3, #12]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d925      	bls.n	8004f98 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004f4c:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8004f50:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004f54:	4651      	mov	r1, sl
 8004f56:	6860      	ldr	r0, [r4, #4]
 8004f58:	4643      	mov	r3, r8
 8004f5a:	462a      	mov	r2, r5
 8004f5c:	f007 f9c8 	bl	800c2f0 <tcp_write>
      if (err == ERR_OK) {
 8004f60:	4682      	mov	sl, r0
 8004f62:	b9e0      	cbnz	r0, 8004f9e <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8004f64:	6a23      	ldr	r3, [r4, #32]
 8004f66:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004f68:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8004f6a:	442a      	add	r2, r5
 8004f6c:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004f72:	684a      	ldr	r2, [r1, #4]
        conn->current_msg->msg.w.vector_off += len;
 8004f74:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8004f76:	4295      	cmp	r5, r2
 8004f78:	d107      	bne.n	8004f8a <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 8004f7a:	899a      	ldrh	r2, [r3, #12]
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8004f82:	b112      	cbz	r2, 8004f8a <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 8004f84:	3108      	adds	r1, #8
 8004f86:	6099      	str	r1, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8004f88:	6118      	str	r0, [r3, #16]
    } while (write_more && err == ERR_OK);
 8004f8a:	f1b9 0f00 	cmp.w	r9, #0
 8004f8e:	f47f af70 	bne.w	8004e72 <lwip_netconn_do_writemore+0x92>
 8004f92:	e00a      	b.n	8004faa <lwip_netconn_do_writemore+0x1ca>
 8004f94:	4615      	mov	r5, r2
 8004f96:	e7c0      	b.n	8004f1a <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8004f98:	f04f 0900 	mov.w	r9, #0
 8004f9c:	e7da      	b.n	8004f54 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d8a9      	bhi.n	8004efa <lwip_netconn_do_writemore+0x11a>
err_mem:
 8004fa6:	f04f 3aff 	mov.w	sl, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d183      	bne.n	8004eb6 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8004fb4:	f640 3269 	movw	r2, #2921	; 0xb69
 8004fb8:	4291      	cmp	r1, r2
 8004fba:	d903      	bls.n	8004fc4 <lwip_netconn_do_writemore+0x1e4>
 8004fbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d987      	bls.n	8004ed4 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8004fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d084      	beq.n	8004ed4 <lwip_netconn_do_writemore+0xf4>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2103      	movs	r1, #3
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4798      	blx	r3
 8004fd2:	e77f      	b.n	8004ed4 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 8004fd4:	2601      	movs	r6, #1
 8004fd6:	e788      	b.n	8004eea <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8004fd8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004fdc:	d18d      	bne.n	8004efa <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004fde:	6860      	ldr	r0, [r4, #4]
 8004fe0:	f007 fee8 	bl	800cdb4 <tcp_output>
      if (out_err == ERR_RTE) {
 8004fe4:	3004      	adds	r0, #4
 8004fe6:	d086      	beq.n	8004ef6 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8004fe8:	b91e      	cbnz	r6, 8004ff2 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8004ff2:	6a23      	ldr	r3, [r4, #32]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	b12b      	cbz	r3, 8005004 <lwip_netconn_do_writemore+0x224>
 8004ff8:	f04f 0a00 	mov.w	sl, #0
 8004ffc:	e77d      	b.n	8004efa <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	d1fa      	bne.n	8004ff8 <lwip_netconn_do_writemore+0x218>
 8005002:	e7f2      	b.n	8004fea <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005004:	f06f 0a06 	mvn.w	sl, #6
 8005008:	e777      	b.n	8004efa <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 800500a:	4638      	mov	r0, r7
 800500c:	e7ef      	b.n	8004fee <lwip_netconn_do_writemore+0x20e>
 800500e:	bf00      	nop
 8005010:	0801a9e5 	.word	0x0801a9e5
 8005014:	0801b232 	.word	0x0801b232
 8005018:	0801a4e1 	.word	0x0801a4e1
 800501c:	0801ab39 	.word	0x0801ab39
 8005020:	0801ab56 	.word	0x0801ab56
 8005024:	0801ab70 	.word	0x0801ab70
 8005028:	0801ab86 	.word	0x0801ab86
 800502c:	0801abc5 	.word	0x0801abc5
 8005030:	0801abed 	.word	0x0801abed

08005034 <lwip_netconn_do_close_internal>:
{
 8005034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800503a:	4604      	mov	r4, r0
 800503c:	b930      	cbnz	r0, 800504c <lwip_netconn_do_close_internal+0x18>
 800503e:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 8005040:	496c      	ldr	r1, [pc, #432]	; (80051f4 <lwip_netconn_do_close_internal+0x1c0>)
 8005042:	486d      	ldr	r0, [pc, #436]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 8005044:	f240 32a2 	movw	r2, #930	; 0x3a2
 8005048:	f008 ff24 	bl	800de94 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800504c:	7823      	ldrb	r3, [r4, #0]
 800504e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005052:	2b10      	cmp	r3, #16
 8005054:	d006      	beq.n	8005064 <lwip_netconn_do_close_internal+0x30>
 8005056:	4b66      	ldr	r3, [pc, #408]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 8005058:	4968      	ldr	r1, [pc, #416]	; (80051fc <lwip_netconn_do_close_internal+0x1c8>)
 800505a:	4867      	ldr	r0, [pc, #412]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 800505c:	f240 32a3 	movw	r2, #931	; 0x3a3
 8005060:	f008 ff18 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005064:	7863      	ldrb	r3, [r4, #1]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d006      	beq.n	8005078 <lwip_netconn_do_close_internal+0x44>
 800506a:	4b61      	ldr	r3, [pc, #388]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 800506c:	4964      	ldr	r1, [pc, #400]	; (8005200 <lwip_netconn_do_close_internal+0x1cc>)
 800506e:	4862      	ldr	r0, [pc, #392]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 8005070:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8005074:	f008 ff0e 	bl	800de94 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	b933      	cbnz	r3, 800508a <lwip_netconn_do_close_internal+0x56>
 800507c:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 800507e:	4961      	ldr	r1, [pc, #388]	; (8005204 <lwip_netconn_do_close_internal+0x1d0>)
 8005080:	485d      	ldr	r0, [pc, #372]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 8005082:	f240 32a5 	movw	r2, #933	; 0x3a5
 8005086:	f008 ff05 	bl	800de94 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800508a:	6a23      	ldr	r3, [r4, #32]
 800508c:	b933      	cbnz	r3, 800509c <lwip_netconn_do_close_internal+0x68>
 800508e:	4b58      	ldr	r3, [pc, #352]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 8005090:	495d      	ldr	r1, [pc, #372]	; (8005208 <lwip_netconn_do_close_internal+0x1d4>)
 8005092:	4859      	ldr	r0, [pc, #356]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 8005094:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005098:	f008 fefc 	bl	800de94 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 800509c:	6a23      	ldr	r3, [r4, #32]
  tpcb = conn->pcb.tcp;
 800509e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80050a0:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80050a2:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80050a4:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80050a8:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80050ac:	d00f      	beq.n	80050ce <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 80050ae:	f1ba 0f00 	cmp.w	sl, #0
 80050b2:	d005      	beq.n	80050c0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80050b4:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80050b6:	1f5a      	subs	r2, r3, #5
 80050b8:	2a01      	cmp	r2, #1
 80050ba:	d908      	bls.n	80050ce <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d006      	beq.n	80050ce <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80050c0:	f1b8 0f00 	cmp.w	r8, #0
 80050c4:	d016      	beq.n	80050f4 <lwip_netconn_do_close_internal+0xc0>
 80050c6:	8b6f      	ldrh	r7, [r5, #26]
 80050c8:	f017 0710 	ands.w	r7, r7, #16
 80050cc:	d004      	beq.n	80050d8 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 80050ce:	2100      	movs	r1, #0
 80050d0:	4628      	mov	r0, r5
 80050d2:	f005 f8db 	bl	800a28c <tcp_arg>
 80050d6:	2701      	movs	r7, #1
  if (tpcb->state == LISTEN) {
 80050d8:	7d2b      	ldrb	r3, [r5, #20]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10c      	bne.n	80050f8 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 80050de:	2100      	movs	r1, #0
 80050e0:	4628      	mov	r0, r5
 80050e2:	f005 f91d 	bl	800a320 <tcp_accept>
  if (shut_close) {
 80050e6:	bb27      	cbnz	r7, 8005132 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80050e8:	4642      	mov	r2, r8
 80050ea:	4651      	mov	r1, sl
 80050ec:	4628      	mov	r0, r5
 80050ee:	f005 fd61 	bl	800abb4 <tcp_shutdown>
 80050f2:	e021      	b.n	8005138 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 80050f4:	4647      	mov	r7, r8
 80050f6:	e7ef      	b.n	80050d8 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 80050f8:	f1ba 0f00 	cmp.w	sl, #0
 80050fc:	d007      	beq.n	800510e <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 80050fe:	2100      	movs	r1, #0
 8005100:	4628      	mov	r0, r5
 8005102:	f005 f8c7 	bl	800a294 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8005106:	2100      	movs	r1, #0
 8005108:	4628      	mov	r0, r5
 800510a:	f005 f909 	bl	800a320 <tcp_accept>
    if (shut_tx) {
 800510e:	f1b8 0f00 	cmp.w	r8, #0
 8005112:	d003      	beq.n	800511c <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8005114:	2100      	movs	r1, #0
 8005116:	4628      	mov	r0, r5
 8005118:	f005 f8d4 	bl	800a2c4 <tcp_sent>
    if (shut_close) {
 800511c:	2f00      	cmp	r7, #0
 800511e:	d0e3      	beq.n	80050e8 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8005120:	2200      	movs	r2, #0
 8005122:	4611      	mov	r1, r2
 8005124:	4628      	mov	r0, r5
 8005126:	f005 f901 	bl	800a32c <tcp_poll>
      tcp_err(tpcb, NULL);
 800512a:	2100      	movs	r1, #0
 800512c:	4628      	mov	r0, r5
 800512e:	f005 f8df 	bl	800a2f0 <tcp_err>
      err = tcp_close(tpcb);
 8005132:	4628      	mov	r0, r5
 8005134:	f005 fc64 	bl	800aa00 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005138:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800513a:	b160      	cbz	r0, 8005156 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d10a      	bne.n	8005156 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005140:	6a23      	ldr	r3, [r4, #32]
 8005142:	f893 b009 	ldrb.w	fp, [r3, #9]
 8005146:	f1bb 0f00 	cmp.w	fp, #0
 800514a:	d130      	bne.n	80051ae <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 800514c:	b11f      	cbz	r7, 8005156 <lwip_netconn_do_close_internal+0x122>
          tcp_abort(tpcb);
 800514e:	4628      	mov	r0, r5
 8005150:	f005 fde6 	bl	800ad20 <tcp_abort>
          err = ERR_OK;
 8005154:	465e      	mov	r6, fp
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005156:	6a23      	ldr	r3, [r4, #32]
 8005158:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800515a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8005160:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8005162:	b9ce      	cbnz	r6, 8005198 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8005164:	b137      	cbz	r7, 8005174 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005166:	6a63      	ldr	r3, [r4, #36]	; 0x24
        conn->pcb.tcp = NULL;
 8005168:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800516a:	b11b      	cbz	r3, 8005174 <lwip_netconn_do_close_internal+0x140>
 800516c:	4632      	mov	r2, r6
 800516e:	2104      	movs	r1, #4
 8005170:	4620      	mov	r0, r4
 8005172:	4798      	blx	r3
      if (shut_rx) {
 8005174:	f1ba 0f00 	cmp.w	sl, #0
 8005178:	d005      	beq.n	8005186 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800517a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800517c:	b11b      	cbz	r3, 8005186 <lwip_netconn_do_close_internal+0x152>
 800517e:	2200      	movs	r2, #0
 8005180:	4611      	mov	r1, r2
 8005182:	4620      	mov	r0, r4
 8005184:	4798      	blx	r3
      if (shut_tx) {
 8005186:	f1b8 0f00 	cmp.w	r8, #0
 800518a:	d005      	beq.n	8005198 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800518c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800518e:	b11b      	cbz	r3, 8005198 <lwip_netconn_do_close_internal+0x164>
 8005190:	2200      	movs	r2, #0
 8005192:	2102      	movs	r1, #2
 8005194:	4620      	mov	r0, r4
 8005196:	4798      	blx	r3
    if (delayed)
 8005198:	f1b9 0f00 	cmp.w	r9, #0
 800519c:	d026      	beq.n	80051ec <lwip_netconn_do_close_internal+0x1b8>
      sys_sem_signal(op_completed_sem);
 800519e:	f105 000c 	add.w	r0, r5, #12
 80051a2:	f008 fd9a 	bl	800dcda <sys_sem_signal>
    return ERR_OK;
 80051a6:	2600      	movs	r6, #0
}
 80051a8:	4630      	mov	r0, r6
 80051aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80051ae:	7d2b      	ldrb	r3, [r5, #20]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <lwip_netconn_do_close_internal+0x18e>
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <lwip_netconn_do_close_internal+0x1bc>)
 80051b6:	4915      	ldr	r1, [pc, #84]	; (800520c <lwip_netconn_do_close_internal+0x1d8>)
 80051b8:	480f      	ldr	r0, [pc, #60]	; (80051f8 <lwip_netconn_do_close_internal+0x1c4>)
 80051ba:	f240 4241 	movw	r2, #1089	; 0x441
 80051be:	f008 fe69 	bl	800de94 <iprintf>
    if (shut_tx) {
 80051c2:	f1b8 0f00 	cmp.w	r8, #0
 80051c6:	d003      	beq.n	80051d0 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <lwip_netconn_do_close_internal+0x1dc>)
 80051ca:	4628      	mov	r0, r5
 80051cc:	f005 f87a 	bl	800a2c4 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80051d0:	2201      	movs	r2, #1
 80051d2:	4628      	mov	r0, r5
 80051d4:	490f      	ldr	r1, [pc, #60]	; (8005214 <lwip_netconn_do_close_internal+0x1e0>)
 80051d6:	f005 f8a9 	bl	800a32c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80051da:	4628      	mov	r0, r5
 80051dc:	490e      	ldr	r1, [pc, #56]	; (8005218 <lwip_netconn_do_close_internal+0x1e4>)
 80051de:	f005 f887 	bl	800a2f0 <tcp_err>
    tcp_arg(tpcb, conn);
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f005 f851 	bl	800a28c <tcp_arg>
  return err;
 80051ea:	e7dd      	b.n	80051a8 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 80051ec:	464e      	mov	r6, r9
 80051ee:	e7db      	b.n	80051a8 <lwip_netconn_do_close_internal+0x174>
 80051f0:	0801a9e5 	.word	0x0801a9e5
 80051f4:	0801a8cb 	.word	0x0801a8cb
 80051f8:	0801a4e1 	.word	0x0801a4e1
 80051fc:	0801ac18 	.word	0x0801ac18
 8005200:	0801ac36 	.word	0x0801ac36
 8005204:	0801ac5a 	.word	0x0801ac5a
 8005208:	0801ab56 	.word	0x0801ab56
 800520c:	0801ac6d 	.word	0x0801ac6d
 8005210:	080054ad 	.word	0x080054ad
 8005214:	0800521d 	.word	0x0800521d
 8005218:	08005369 	.word	0x08005369

0800521c <poll_tcp>:
{
 800521c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800521e:	4604      	mov	r4, r0
 8005220:	b930      	cbnz	r0, 8005230 <poll_tcp+0x14>
 8005222:	4b1a      	ldr	r3, [pc, #104]	; (800528c <poll_tcp+0x70>)
 8005224:	491a      	ldr	r1, [pc, #104]	; (8005290 <poll_tcp+0x74>)
 8005226:	481b      	ldr	r0, [pc, #108]	; (8005294 <poll_tcp+0x78>)
 8005228:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800522c:	f008 fe32 	bl	800de94 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8005230:	7861      	ldrb	r1, [r4, #1]
 8005232:	2901      	cmp	r1, #1
 8005234:	d11c      	bne.n	8005270 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005236:	4620      	mov	r0, r4
 8005238:	f7ff fdd2 	bl	8004de0 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800523c:	7f23      	ldrb	r3, [r4, #28]
 800523e:	06da      	lsls	r2, r3, #27
 8005240:	d514      	bpl.n	800526c <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005242:	6862      	ldr	r2, [r4, #4]
 8005244:	b192      	cbz	r2, 800526c <poll_tcp+0x50>
 8005246:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800524a:	f640 3169 	movw	r1, #2921	; 0xb69
 800524e:	4288      	cmp	r0, r1
 8005250:	d90c      	bls.n	800526c <poll_tcp+0x50>
 8005252:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8005256:	2a04      	cmp	r2, #4
 8005258:	d808      	bhi.n	800526c <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800525a:	f023 0310 	bic.w	r3, r3, #16
 800525e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005262:	b11b      	cbz	r3, 800526c <poll_tcp+0x50>
 8005264:	2200      	movs	r2, #0
 8005266:	2102      	movs	r1, #2
 8005268:	4620      	mov	r0, r4
 800526a:	4798      	blx	r3
}
 800526c:	2000      	movs	r0, #0
 800526e:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8005270:	2904      	cmp	r1, #4
 8005272:	d1e3      	bne.n	800523c <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005274:	6a22      	ldr	r2, [r4, #32]
 8005276:	b11a      	cbz	r2, 8005280 <poll_tcp+0x64>
 8005278:	7a53      	ldrb	r3, [r2, #9]
 800527a:	b10b      	cbz	r3, 8005280 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 800527c:	3b01      	subs	r3, #1
 800527e:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005280:	2101      	movs	r1, #1
 8005282:	4620      	mov	r0, r4
 8005284:	f7ff fed6 	bl	8005034 <lwip_netconn_do_close_internal>
 8005288:	e7d8      	b.n	800523c <poll_tcp+0x20>
 800528a:	bf00      	nop
 800528c:	0801a9e5 	.word	0x0801a9e5
 8005290:	0801b232 	.word	0x0801b232
 8005294:	0801a4e1 	.word	0x0801a4e1

08005298 <recv_tcp>:
{
 8005298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	4606      	mov	r6, r0
 800529e:	4615      	mov	r5, r2
 80052a0:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80052a2:	460f      	mov	r7, r1
 80052a4:	b931      	cbnz	r1, 80052b4 <recv_tcp+0x1c>
 80052a6:	4b29      	ldr	r3, [pc, #164]	; (800534c <recv_tcp+0xb4>)
 80052a8:	4929      	ldr	r1, [pc, #164]	; (8005350 <recv_tcp+0xb8>)
 80052aa:	482a      	ldr	r0, [pc, #168]	; (8005354 <recv_tcp+0xbc>)
 80052ac:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052b0:	f008 fdf0 	bl	800de94 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80052b4:	bb4e      	cbnz	r6, 800530a <recv_tcp+0x72>
 80052b6:	4b25      	ldr	r3, [pc, #148]	; (800534c <recv_tcp+0xb4>)
 80052b8:	4927      	ldr	r1, [pc, #156]	; (8005358 <recv_tcp+0xc0>)
 80052ba:	4826      	ldr	r0, [pc, #152]	; (8005354 <recv_tcp+0xbc>)
 80052bc:	f240 122d 	movw	r2, #301	; 0x12d
 80052c0:	f008 fde8 	bl	800de94 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80052c4:	bb14      	cbnz	r4, 800530c <recv_tcp+0x74>
    return ERR_VAL;
 80052c6:	f06f 0405 	mvn.w	r4, #5
}
 80052ca:	4620      	mov	r0, r4
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 80052d0:	4638      	mov	r0, r7
 80052d2:	8929      	ldrh	r1, [r5, #8]
 80052d4:	f004 ff86 	bl	800a1e4 <tcp_recved>
      pbuf_free(p);
 80052d8:	4628      	mov	r0, r5
 80052da:	f004 fb73 	bl	80099c4 <pbuf_free>
 80052de:	e7f4      	b.n	80052ca <recv_tcp+0x32>
  if (p != NULL) {
 80052e0:	b16d      	cbz	r5, 80052fe <recv_tcp+0x66>
    len = p->tot_len;
 80052e2:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80052e4:	4629      	mov	r1, r5
 80052e6:	4640      	mov	r0, r8
 80052e8:	f008 fc80 	bl	800dbec <sys_mbox_trypost>
 80052ec:	4604      	mov	r4, r0
 80052ee:	b948      	cbnz	r0, 8005304 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80052f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80052f2:	b343      	cbz	r3, 8005346 <recv_tcp+0xae>
 80052f4:	4601      	mov	r1, r0
 80052f6:	463a      	mov	r2, r7
 80052f8:	4630      	mov	r0, r6
 80052fa:	4798      	blx	r3
 80052fc:	e7e5      	b.n	80052ca <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80052fe:	4d17      	ldr	r5, [pc, #92]	; (800535c <recv_tcp+0xc4>)
    len = 0;
 8005300:	2700      	movs	r7, #0
 8005302:	e7ef      	b.n	80052e4 <recv_tcp+0x4c>
    return ERR_MEM;
 8005304:	f04f 34ff 	mov.w	r4, #4294967295
 8005308:	e7df      	b.n	80052ca <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800530a:	b144      	cbz	r4, 800531e <recv_tcp+0x86>
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <recv_tcp+0xb4>)
 800530e:	4914      	ldr	r1, [pc, #80]	; (8005360 <recv_tcp+0xc8>)
 8005310:	4810      	ldr	r0, [pc, #64]	; (8005354 <recv_tcp+0xbc>)
 8005312:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005316:	f008 fdbd 	bl	800de94 <iprintf>
  if (conn == NULL) {
 800531a:	2e00      	cmp	r6, #0
 800531c:	d0d3      	beq.n	80052c6 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800531e:	6873      	ldr	r3, [r6, #4]
 8005320:	42bb      	cmp	r3, r7
 8005322:	d006      	beq.n	8005332 <recv_tcp+0x9a>
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <recv_tcp+0xb4>)
 8005326:	490f      	ldr	r1, [pc, #60]	; (8005364 <recv_tcp+0xcc>)
 8005328:	480a      	ldr	r0, [pc, #40]	; (8005354 <recv_tcp+0xbc>)
 800532a:	f240 1235 	movw	r2, #309	; 0x135
 800532e:	f008 fdb1 	bl	800de94 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005332:	f106 0810 	add.w	r8, r6, #16
 8005336:	4640      	mov	r0, r8
 8005338:	f008 fc95 	bl	800dc66 <sys_mbox_valid>
 800533c:	4604      	mov	r4, r0
 800533e:	2800      	cmp	r0, #0
 8005340:	d1ce      	bne.n	80052e0 <recv_tcp+0x48>
    if (p != NULL) {
 8005342:	2d00      	cmp	r5, #0
 8005344:	d1c4      	bne.n	80052d0 <recv_tcp+0x38>
    return ERR_OK;
 8005346:	2400      	movs	r4, #0
 8005348:	e7bf      	b.n	80052ca <recv_tcp+0x32>
 800534a:	bf00      	nop
 800534c:	0801a9e5 	.word	0x0801a9e5
 8005350:	0801ac90 	.word	0x0801ac90
 8005354:	0801a4e1 	.word	0x0801a4e1
 8005358:	0801acb2 	.word	0x0801acb2
 800535c:	0800f93c 	.word	0x0800f93c
 8005360:	0801acd1 	.word	0x0801acd1
 8005364:	0801ace9 	.word	0x0801ace9

08005368 <err_tcp>:
{
 8005368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800536e:	4604      	mov	r4, r0
 8005370:	b930      	cbnz	r0, 8005380 <err_tcp+0x18>
 8005372:	4b46      	ldr	r3, [pc, #280]	; (800548c <err_tcp+0x124>)
 8005374:	4946      	ldr	r1, [pc, #280]	; (8005490 <err_tcp+0x128>)
 8005376:	4847      	ldr	r0, [pc, #284]	; (8005494 <err_tcp+0x12c>)
 8005378:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800537c:	f008 fd8a 	bl	800de94 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8005380:	f008 fcec 	bl	800dd5c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005384:	7f23      	ldrb	r3, [r4, #28]
  old_state = conn->state;
 8005386:	7867      	ldrb	r7, [r4, #1]
  conn->pending_err = err;
 8005388:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800538a:	f043 0301 	orr.w	r3, r3, #1
  conn->pcb.tcp = NULL;
 800538e:	2600      	movs	r6, #0
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005390:	7723      	strb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 8005392:	6066      	str	r6, [r4, #4]
  conn->state = NETCONN_NONE;
 8005394:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8005396:	f008 fced 	bl	800dd74 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800539a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800539c:	b11b      	cbz	r3, 80053a6 <err_tcp+0x3e>
 800539e:	4632      	mov	r2, r6
 80053a0:	2104      	movs	r1, #4
 80053a2:	4620      	mov	r0, r4
 80053a4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80053a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053a8:	b11b      	cbz	r3, 80053b2 <err_tcp+0x4a>
 80053aa:	2200      	movs	r2, #0
 80053ac:	4611      	mov	r1, r2
 80053ae:	4620      	mov	r0, r4
 80053b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80053b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053b4:	b11b      	cbz	r3, 80053be <err_tcp+0x56>
 80053b6:	2200      	movs	r2, #0
 80053b8:	2102      	movs	r1, #2
 80053ba:	4620      	mov	r0, r4
 80053bc:	4798      	blx	r3
  switch (err) {
 80053be:	f105 030f 	add.w	r3, r5, #15
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d848      	bhi.n	800545a <err_tcp+0xf2>
 80053c8:	4a33      	ldr	r2, [pc, #204]	; (8005498 <err_tcp+0x130>)
 80053ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80053ce:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80053d0:	f104 0810 	add.w	r8, r4, #16
 80053d4:	4640      	mov	r0, r8
 80053d6:	f008 fc46 	bl	800dc66 <sys_mbox_valid>
 80053da:	b118      	cbz	r0, 80053e4 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80053dc:	4631      	mov	r1, r6
 80053de:	4640      	mov	r0, r8
 80053e0:	f008 fc04 	bl	800dbec <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80053e4:	f104 0814 	add.w	r8, r4, #20
 80053e8:	4640      	mov	r0, r8
 80053ea:	f008 fc3c 	bl	800dc66 <sys_mbox_valid>
 80053ee:	b118      	cbz	r0, 80053f8 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80053f0:	4631      	mov	r1, r6
 80053f2:	4640      	mov	r0, r8
 80053f4:	f008 fbfa 	bl	800dbec <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80053f8:	2f01      	cmp	r7, #1
 80053fa:	d002      	beq.n	8005402 <err_tcp+0x9a>
 80053fc:	1efb      	subs	r3, r7, #3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d836      	bhi.n	8005470 <err_tcp+0x108>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005402:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005404:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005408:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 800540a:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 800540c:	d43b      	bmi.n	8005486 <err_tcp+0x11e>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800540e:	6a23      	ldr	r3, [r4, #32]
 8005410:	b933      	cbnz	r3, 8005420 <err_tcp+0xb8>
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <err_tcp+0x124>)
 8005414:	4921      	ldr	r1, [pc, #132]	; (800549c <err_tcp+0x134>)
 8005416:	481f      	ldr	r0, [pc, #124]	; (8005494 <err_tcp+0x12c>)
 8005418:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800541c:	f008 fd3a 	bl	800de94 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8005420:	6a23      	ldr	r3, [r4, #32]
 8005422:	2f04      	cmp	r7, #4
        conn->current_msg->err = err;
 8005424:	bf18      	it	ne
 8005426:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005428:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 800542a:	bf08      	it	eq
 800542c:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800542e:	f105 050c 	add.w	r5, r5, #12
        conn->current_msg->err = ERR_OK;
 8005432:	bf08      	it	eq
 8005434:	711a      	strbeq	r2, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005436:	4628      	mov	r0, r5
 8005438:	f008 fc55 	bl	800dce6 <sys_sem_valid>
 800543c:	b930      	cbnz	r0, 800544c <err_tcp+0xe4>
 800543e:	4b13      	ldr	r3, [pc, #76]	; (800548c <err_tcp+0x124>)
 8005440:	4917      	ldr	r1, [pc, #92]	; (80054a0 <err_tcp+0x138>)
 8005442:	4814      	ldr	r0, [pc, #80]	; (8005494 <err_tcp+0x12c>)
 8005444:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005448:	f008 fd24 	bl	800de94 <iprintf>
      conn->current_msg = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 8005450:	4628      	mov	r0, r5
}
 8005452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8005456:	f008 bc40 	b.w	800dcda <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800545a:	b13d      	cbz	r5, 800546c <err_tcp+0x104>
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <err_tcp+0x124>)
 800545e:	4911      	ldr	r1, [pc, #68]	; (80054a4 <err_tcp+0x13c>)
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <err_tcp+0x12c>)
 8005462:	227d      	movs	r2, #125	; 0x7d
 8005464:	f008 fd16 	bl	800de94 <iprintf>
 8005468:	2600      	movs	r6, #0
 800546a:	e7b1      	b.n	80053d0 <err_tcp+0x68>
      return NULL;
 800546c:	462e      	mov	r6, r5
 800546e:	e7af      	b.n	80053d0 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005470:	6a23      	ldr	r3, [r4, #32]
 8005472:	b143      	cbz	r3, 8005486 <err_tcp+0x11e>
}
 8005474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005478:	4b04      	ldr	r3, [pc, #16]	; (800548c <err_tcp+0x124>)
 800547a:	490b      	ldr	r1, [pc, #44]	; (80054a8 <err_tcp+0x140>)
 800547c:	4805      	ldr	r0, [pc, #20]	; (8005494 <err_tcp+0x12c>)
 800547e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005482:	f008 bd07 	b.w	800de94 <iprintf>
}
 8005486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548a:	bf00      	nop
 800548c:	0801a9e5 	.word	0x0801a9e5
 8005490:	0801b232 	.word	0x0801b232
 8005494:	0801a4e1 	.word	0x0801a4e1
 8005498:	0800f93c 	.word	0x0800f93c
 800549c:	0801ab56 	.word	0x0801ab56
 80054a0:	0801ad17 	.word	0x0801ad17
 80054a4:	0801ad07 	.word	0x0801ad07
 80054a8:	0801ad30 	.word	0x0801ad30

080054ac <sent_tcp>:
{
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80054b0:	4604      	mov	r4, r0
 80054b2:	b970      	cbnz	r0, 80054d2 <sent_tcp+0x26>
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <sent_tcp+0x64>)
 80054b6:	4917      	ldr	r1, [pc, #92]	; (8005514 <sent_tcp+0x68>)
 80054b8:	4817      	ldr	r0, [pc, #92]	; (8005518 <sent_tcp+0x6c>)
 80054ba:	f240 1293 	movw	r2, #403	; 0x193
 80054be:	f008 fce9 	bl	800de94 <iprintf>
}
 80054c2:	2000      	movs	r0, #0
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80054c6:	2904      	cmp	r1, #4
 80054c8:	d108      	bne.n	80054dc <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80054ca:	2101      	movs	r1, #1
 80054cc:	f7ff fdb2 	bl	8005034 <lwip_netconn_do_close_internal>
 80054d0:	e004      	b.n	80054dc <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 80054d2:	7841      	ldrb	r1, [r0, #1]
 80054d4:	2901      	cmp	r1, #1
 80054d6:	d1f6      	bne.n	80054c6 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80054d8:	f7ff fc82 	bl	8004de0 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80054dc:	6863      	ldr	r3, [r4, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d0ef      	beq.n	80054c2 <sent_tcp+0x16>
 80054e2:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 80054e6:	f640 3269 	movw	r2, #2921	; 0xb69
 80054ea:	4291      	cmp	r1, r2
 80054ec:	d9e9      	bls.n	80054c2 <sent_tcp+0x16>
 80054ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d8e5      	bhi.n	80054c2 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80054f6:	7f23      	ldrb	r3, [r4, #28]
 80054f8:	f023 0310 	bic.w	r3, r3, #16
 80054fc:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80054fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0de      	beq.n	80054c2 <sent_tcp+0x16>
 8005504:	462a      	mov	r2, r5
 8005506:	2102      	movs	r1, #2
 8005508:	4620      	mov	r0, r4
 800550a:	4798      	blx	r3
  return ERR_OK;
 800550c:	e7d9      	b.n	80054c2 <sent_tcp+0x16>
 800550e:	bf00      	nop
 8005510:	0801a9e5 	.word	0x0801a9e5
 8005514:	0801b232 	.word	0x0801b232
 8005518:	0801a4e1 	.word	0x0801a4e1

0800551c <lwip_netconn_is_err_msg>:
{
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8005520:	460c      	mov	r4, r1
 8005522:	b929      	cbnz	r1, 8005530 <lwip_netconn_is_err_msg+0x14>
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <lwip_netconn_is_err_msg+0x40>)
 8005526:	490e      	ldr	r1, [pc, #56]	; (8005560 <lwip_netconn_is_err_msg+0x44>)
 8005528:	480e      	ldr	r0, [pc, #56]	; (8005564 <lwip_netconn_is_err_msg+0x48>)
 800552a:	2285      	movs	r2, #133	; 0x85
 800552c:	f008 fcb2 	bl	800de94 <iprintf>
  if (msg == &netconn_aborted) {
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <lwip_netconn_is_err_msg+0x4c>)
 8005532:	f103 0210 	add.w	r2, r3, #16
 8005536:	4295      	cmp	r5, r2
 8005538:	d103      	bne.n	8005542 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 800553a:	23f3      	movs	r3, #243	; 0xf3
    *err = ERR_CLSD;
 800553c:	7023      	strb	r3, [r4, #0]
    return 1;
 800553e:	2001      	movs	r0, #1
}
 8005540:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8005542:	f103 0211 	add.w	r2, r3, #17
 8005546:	4295      	cmp	r5, r2
 8005548:	d101      	bne.n	800554e <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 800554a:	23f2      	movs	r3, #242	; 0xf2
 800554c:	e7f6      	b.n	800553c <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 800554e:	429d      	cmp	r5, r3
 8005550:	d101      	bne.n	8005556 <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8005552:	23f1      	movs	r3, #241	; 0xf1
 8005554:	e7f2      	b.n	800553c <lwip_netconn_is_err_msg+0x20>
  return 0;
 8005556:	2000      	movs	r0, #0
 8005558:	e7f2      	b.n	8005540 <lwip_netconn_is_err_msg+0x24>
 800555a:	bf00      	nop
 800555c:	0801a9e5 	.word	0x0801a9e5
 8005560:	0801ad4a 	.word	0x0801ad4a
 8005564:	0801a4e1 	.word	0x0801a4e1
 8005568:	0800f93c 	.word	0x0800f93c

0800556c <lwip_netconn_do_newconn>:
{
 800556c:	b538      	push	{r3, r4, r5, lr}
  if (msg->conn->pcb.tcp == NULL) {
 800556e:	6805      	ldr	r5, [r0, #0]
  msg->err = ERR_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	7103      	strb	r3, [r0, #4]
{
 8005574:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8005576:	6868      	ldr	r0, [r5, #4]
 8005578:	bb28      	cbnz	r0, 80055c6 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800557a:	782b      	ldrb	r3, [r5, #0]
 800557c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005580:	2b10      	cmp	r3, #16
 8005582:	d014      	beq.n	80055ae <lwip_netconn_do_newconn+0x42>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d11c      	bne.n	80055c2 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005588:	f008 fa76 	bl	800da78 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 800558c:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800558e:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8005590:	6850      	ldr	r0, [r2, #4]
 8005592:	b150      	cbz	r0, 80055aa <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005594:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005596:	490c      	ldr	r1, [pc, #48]	; (80055c8 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005598:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800559a:	bf04      	itt	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80055a0:	f008 fa24 	bl	800d9ec <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	b96b      	cbnz	r3, 80055c6 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 80055aa:	23ff      	movs	r3, #255	; 0xff
 80055ac:	e00a      	b.n	80055c4 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80055ae:	f005 fca7 	bl	800af00 <tcp_new_ip_type>
 80055b2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	6843      	ldr	r3, [r0, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d0f6      	beq.n	80055aa <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 80055bc:	f7ff fbee 	bl	8004d9c <setup_tcp>
 80055c0:	e7f0      	b.n	80055a4 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 80055c2:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 80055c4:	7123      	strb	r3, [r4, #4]
}
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	08004ce1 	.word	0x08004ce1

080055cc <netconn_alloc>:
{
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80055d0:	2007      	movs	r0, #7
{
 80055d2:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80055d4:	f003 ffac 	bl	8009530 <memp_malloc>
  if (conn == NULL) {
 80055d8:	4604      	mov	r4, r0
 80055da:	b3a0      	cbz	r0, 8005646 <netconn_alloc+0x7a>
  conn->type = t;
 80055dc:	7005      	strb	r5, [r0, #0]
 80055de:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 80055e2:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 80055e4:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 80055e6:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80055e8:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 80055ea:	d00e      	beq.n	800560a <netconn_alloc+0x3e>
 80055ec:	2d20      	cmp	r5, #32
 80055ee:	d00c      	beq.n	800560a <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <netconn_alloc+0x80>)
 80055f2:	4917      	ldr	r1, [pc, #92]	; (8005650 <netconn_alloc+0x84>)
 80055f4:	4817      	ldr	r0, [pc, #92]	; (8005654 <netconn_alloc+0x88>)
 80055f6:	f240 22e5 	movw	r2, #741	; 0x2e5
 80055fa:	f008 fc4b 	bl	800de94 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80055fe:	4621      	mov	r1, r4
 8005600:	2007      	movs	r0, #7
 8005602:	f003 ffb1 	bl	8009568 <memp_free>
  return NULL;
 8005606:	2400      	movs	r4, #0
 8005608:	e01d      	b.n	8005646 <netconn_alloc+0x7a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800560a:	f104 0710 	add.w	r7, r4, #16
 800560e:	2106      	movs	r1, #6
 8005610:	4638      	mov	r0, r7
 8005612:	f008 fad1 	bl	800dbb8 <sys_mbox_new>
 8005616:	4601      	mov	r1, r0
 8005618:	2800      	cmp	r0, #0
 800561a:	d1f0      	bne.n	80055fe <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800561c:	f104 000c 	add.w	r0, r4, #12
 8005620:	f008 fb29 	bl	800dc76 <sys_sem_new>
 8005624:	4605      	mov	r5, r0
 8005626:	b118      	cbz	r0, 8005630 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8005628:	4638      	mov	r0, r7
 800562a:	f008 fad5 	bl	800dbd8 <sys_mbox_free>
    goto free_and_return;
 800562e:	e7e6      	b.n	80055fe <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005630:	f104 0014 	add.w	r0, r4, #20
 8005634:	f008 fb1c 	bl	800dc70 <sys_mbox_set_invalid>
  conn->current_msg  = NULL;
 8005638:	e9c4 5608 	strd	r5, r6, [r4, #32]
  conn->socket       = -1;
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 8005640:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 8005642:	61a3      	str	r3, [r4, #24]
  conn->flags = init_flags;
 8005644:	7725      	strb	r5, [r4, #28]
}
 8005646:	4620      	mov	r0, r4
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564a:	bf00      	nop
 800564c:	0801a9e5 	.word	0x0801a9e5
 8005650:	0801ad56 	.word	0x0801ad56
 8005654:	0801a4e1 	.word	0x0801a4e1

08005658 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005658:	6843      	ldr	r3, [r0, #4]
{
 800565a:	b513      	push	{r0, r1, r4, lr}
 800565c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800565e:	b133      	cbz	r3, 800566e <netconn_free+0x16>
 8005660:	4b16      	ldr	r3, [pc, #88]	; (80056bc <netconn_free+0x64>)
 8005662:	4917      	ldr	r1, [pc, #92]	; (80056c0 <netconn_free+0x68>)
 8005664:	4817      	ldr	r0, [pc, #92]	; (80056c4 <netconn_free+0x6c>)
 8005666:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800566a:	f008 fc13 	bl	800de94 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800566e:	f104 0010 	add.w	r0, r4, #16
 8005672:	f008 faf8 	bl	800dc66 <sys_mbox_valid>
 8005676:	b130      	cbz	r0, 8005686 <netconn_free+0x2e>
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <netconn_free+0x64>)
 800567a:	4913      	ldr	r1, [pc, #76]	; (80056c8 <netconn_free+0x70>)
 800567c:	4811      	ldr	r0, [pc, #68]	; (80056c4 <netconn_free+0x6c>)
 800567e:	f240 3223 	movw	r2, #803	; 0x323
 8005682:	f008 fc07 	bl	800de94 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005686:	f104 0014 	add.w	r0, r4, #20
 800568a:	f008 faec 	bl	800dc66 <sys_mbox_valid>
 800568e:	b130      	cbz	r0, 800569e <netconn_free+0x46>
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <netconn_free+0x64>)
 8005692:	490e      	ldr	r1, [pc, #56]	; (80056cc <netconn_free+0x74>)
 8005694:	480b      	ldr	r0, [pc, #44]	; (80056c4 <netconn_free+0x6c>)
 8005696:	f240 3226 	movw	r2, #806	; 0x326
 800569a:	f008 fbfb 	bl	800de94 <iprintf>
  sys_sem_free(&conn->op_completed);
 800569e:	f104 000c 	add.w	r0, r4, #12
 80056a2:	9001      	str	r0, [sp, #4]
 80056a4:	f008 fb1c 	bl	800dce0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80056a8:	9801      	ldr	r0, [sp, #4]
 80056aa:	f008 fb21 	bl	800dcf0 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80056ae:	4621      	mov	r1, r4
 80056b0:	2007      	movs	r0, #7
}
 80056b2:	b002      	add	sp, #8
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 80056b8:	f003 bf56 	b.w	8009568 <memp_free>
 80056bc:	0801a9e5 	.word	0x0801a9e5
 80056c0:	0801ad7c 	.word	0x0801ad7c
 80056c4:	0801a4e1 	.word	0x0801a4e1
 80056c8:	0801adaa 	.word	0x0801adaa
 80056cc:	0801ade4 	.word	0x0801ade4

080056d0 <netconn_drain>:
{
 80056d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 80056d2:	f100 0510 	add.w	r5, r0, #16
{
 80056d6:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80056d8:	4628      	mov	r0, r5
 80056da:	f008 fac4 	bl	800dc66 <sys_mbox_valid>
 80056de:	b158      	cbz	r0, 80056f8 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80056e0:	a901      	add	r1, sp, #4
 80056e2:	4628      	mov	r0, r5
 80056e4:	f008 faae 	bl	800dc44 <sys_arch_mbox_tryfetch>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d118      	bne.n	800571e <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 80056ec:	4628      	mov	r0, r5
 80056ee:	f008 fa73 	bl	800dbd8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80056f2:	4628      	mov	r0, r5
 80056f4:	f008 fabc 	bl	800dc70 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80056f8:	3414      	adds	r4, #20
 80056fa:	4620      	mov	r0, r4
 80056fc:	f008 fab3 	bl	800dc66 <sys_mbox_valid>
 8005700:	b158      	cbz	r0, 800571a <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8005702:	a901      	add	r1, sp, #4
 8005704:	4620      	mov	r0, r4
 8005706:	f008 fa9d 	bl	800dc44 <sys_arch_mbox_tryfetch>
 800570a:	3001      	adds	r0, #1
 800570c:	d11a      	bne.n	8005744 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 800570e:	4620      	mov	r0, r4
 8005710:	f008 fa62 	bl	800dbd8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8005714:	4620      	mov	r0, r4
 8005716:	f008 faab 	bl	800dc70 <sys_mbox_set_invalid>
}
 800571a:	b002      	add	sp, #8
 800571c:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800571e:	7823      	ldrb	r3, [r4, #0]
 8005720:	9801      	ldr	r0, [sp, #4]
 8005722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005726:	2b10      	cmp	r3, #16
 8005728:	d109      	bne.n	800573e <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800572a:	f10d 0103 	add.w	r1, sp, #3
 800572e:	f7ff fef5 	bl	800551c <lwip_netconn_is_err_msg>
 8005732:	2800      	cmp	r0, #0
 8005734:	d1d4      	bne.n	80056e0 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8005736:	9801      	ldr	r0, [sp, #4]
 8005738:	f004 f944 	bl	80099c4 <pbuf_free>
 800573c:	e7d0      	b.n	80056e0 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 800573e:	f000 fad3 	bl	8005ce8 <netbuf_delete>
 8005742:	e7cd      	b.n	80056e0 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005744:	9801      	ldr	r0, [sp, #4]
 8005746:	f10d 0103 	add.w	r1, sp, #3
 800574a:	f7ff fee7 	bl	800551c <lwip_netconn_is_err_msg>
 800574e:	4606      	mov	r6, r0
 8005750:	2800      	cmp	r0, #0
 8005752:	d1d6      	bne.n	8005702 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8005754:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff ffba 	bl	80056d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800575c:	6868      	ldr	r0, [r5, #4]
 800575e:	b110      	cbz	r0, 8005766 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8005760:	f005 fade 	bl	800ad20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005764:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff ff76 	bl	8005658 <netconn_free>
 800576c:	e7c9      	b.n	8005702 <netconn_drain+0x32>
	...

08005770 <accept_function>:
{
 8005770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005772:	460f      	mov	r7, r1
 8005774:	4616      	mov	r6, r2
  if (conn == NULL) {
 8005776:	4605      	mov	r5, r0
 8005778:	b920      	cbnz	r0, 8005784 <accept_function+0x14>
    return ERR_VAL;
 800577a:	f06f 0405 	mvn.w	r4, #5
}
 800577e:	4620      	mov	r0, r4
 8005780:	b003      	add	sp, #12
 8005782:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005784:	f100 0414 	add.w	r4, r0, #20
 8005788:	4620      	mov	r0, r4
 800578a:	f008 fa6c 	bl	800dc66 <sys_mbox_valid>
 800578e:	2800      	cmp	r0, #0
 8005790:	d0f3      	beq.n	800577a <accept_function+0xa>
  if (newpcb == NULL) {
 8005792:	b96f      	cbnz	r7, 80057b0 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005794:	492f      	ldr	r1, [pc, #188]	; (8005854 <accept_function+0xe4>)
 8005796:	4620      	mov	r0, r4
 8005798:	f008 fa28 	bl	800dbec <sys_mbox_trypost>
 800579c:	4602      	mov	r2, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d1eb      	bne.n	800577a <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80057a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0e8      	beq.n	800577a <accept_function+0xa>
 80057a8:	4601      	mov	r1, r0
 80057aa:	4628      	mov	r0, r5
 80057ac:	4798      	blx	r3
 80057ae:	e7e4      	b.n	800577a <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80057b0:	b136      	cbz	r6, 80057c0 <accept_function+0x50>
 80057b2:	4b29      	ldr	r3, [pc, #164]	; (8005858 <accept_function+0xe8>)
 80057b4:	4929      	ldr	r1, [pc, #164]	; (800585c <accept_function+0xec>)
 80057b6:	482a      	ldr	r0, [pc, #168]	; (8005860 <accept_function+0xf0>)
 80057b8:	f240 222a 	movw	r2, #554	; 0x22a
 80057bc:	f008 fb6a 	bl	800de94 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 80057c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80057c2:	7828      	ldrb	r0, [r5, #0]
 80057c4:	f7ff ff02 	bl	80055cc <netconn_alloc>
  if (newconn == NULL) {
 80057c8:	4606      	mov	r6, r0
 80057ca:	b968      	cbnz	r0, 80057e8 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80057cc:	4921      	ldr	r1, [pc, #132]	; (8005854 <accept_function+0xe4>)
 80057ce:	4620      	mov	r0, r4
 80057d0:	f008 fa0c 	bl	800dbec <sys_mbox_trypost>
 80057d4:	4602      	mov	r2, r0
 80057d6:	b920      	cbnz	r0, 80057e2 <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80057d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057da:	b113      	cbz	r3, 80057e2 <accept_function+0x72>
 80057dc:	4601      	mov	r1, r0
 80057de:	4628      	mov	r0, r5
 80057e0:	4798      	blx	r3
    return ERR_MEM;
 80057e2:	f04f 34ff 	mov.w	r4, #4294967295
 80057e6:	e7ca      	b.n	800577e <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 80057e8:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 80057ea:	f7ff fad7 	bl	8004d9c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80057ee:	4620      	mov	r0, r4
 80057f0:	4631      	mov	r1, r6
 80057f2:	f008 f9fb 	bl	800dbec <sys_mbox_trypost>
 80057f6:	4604      	mov	r4, r0
 80057f8:	b318      	cbz	r0, 8005842 <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80057fa:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 80057fc:	9001      	str	r0, [sp, #4]
 80057fe:	2100      	movs	r1, #0
 8005800:	f004 fd44 	bl	800a28c <tcp_arg>
    tcp_recv(pcb, NULL);
 8005804:	9801      	ldr	r0, [sp, #4]
 8005806:	2100      	movs	r1, #0
 8005808:	f004 fd44 	bl	800a294 <tcp_recv>
    tcp_sent(pcb, NULL);
 800580c:	9801      	ldr	r0, [sp, #4]
 800580e:	2100      	movs	r1, #0
 8005810:	f004 fd58 	bl	800a2c4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	4611      	mov	r1, r2
 8005818:	9801      	ldr	r0, [sp, #4]
 800581a:	f004 fd87 	bl	800a32c <tcp_poll>
    tcp_err(pcb, NULL);
 800581e:	2100      	movs	r1, #0
 8005820:	9801      	ldr	r0, [sp, #4]
 8005822:	f004 fd65 	bl	800a2f0 <tcp_err>
    newconn->pcb.tcp = NULL;
 8005826:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8005828:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 800582c:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800582e:	9001      	str	r0, [sp, #4]
 8005830:	f008 f9d2 	bl	800dbd8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8005834:	9801      	ldr	r0, [sp, #4]
 8005836:	f008 fa1b 	bl	800dc70 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800583a:	4630      	mov	r0, r6
 800583c:	f7ff ff0c 	bl	8005658 <netconn_free>
    return ERR_MEM;
 8005840:	e7cf      	b.n	80057e2 <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d09a      	beq.n	800577e <accept_function+0xe>
 8005848:	4602      	mov	r2, r0
 800584a:	4601      	mov	r1, r0
 800584c:	4628      	mov	r0, r5
 800584e:	4798      	blx	r3
 8005850:	e795      	b.n	800577e <accept_function+0xe>
 8005852:	bf00      	nop
 8005854:	0800f94c 	.word	0x0800f94c
 8005858:	0801a9e5 	.word	0x0801a9e5
 800585c:	0801ae20 	.word	0x0801ae20
 8005860:	0801a4e1 	.word	0x0801a4e1

08005864 <lwip_netconn_do_delconn>:
{
 8005864:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	785d      	ldrb	r5, [r3, #1]
{
 800586a:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800586c:	b16d      	cbz	r5, 800588a <lwip_netconn_do_delconn+0x26>
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005874:	2b10      	cmp	r3, #16
 8005876:	d006      	beq.n	8005886 <lwip_netconn_do_delconn+0x22>
 8005878:	4b37      	ldr	r3, [pc, #220]	; (8005958 <lwip_netconn_do_delconn+0xf4>)
 800587a:	4938      	ldr	r1, [pc, #224]	; (800595c <lwip_netconn_do_delconn+0xf8>)
 800587c:	4838      	ldr	r0, [pc, #224]	; (8005960 <lwip_netconn_do_delconn+0xfc>)
 800587e:	f240 425e 	movw	r2, #1118	; 0x45e
 8005882:	f008 fb07 	bl	800de94 <iprintf>
  if (((state != NETCONN_NONE) &&
 8005886:	2d02      	cmp	r5, #2
 8005888:	d121      	bne.n	80058ce <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 800588a:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 800588c:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800588e:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8005890:	f7ff ff1e 	bl	80056d0 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005894:	6822      	ldr	r2, [r4, #0]
 8005896:	6850      	ldr	r0, [r2, #4]
 8005898:	b160      	cbz	r0, 80058b4 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800589a:	7813      	ldrb	r3, [r2, #0]
 800589c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d022      	beq.n	80058ea <lwip_netconn_do_delconn+0x86>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d102      	bne.n	80058ae <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 80058a8:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 80058aa:	f008 f8b1 	bl	800da10 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	2200      	movs	r2, #0
 80058b2:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80058b8:	b113      	cbz	r3, 80058c0 <lwip_netconn_do_delconn+0x5c>
 80058ba:	2200      	movs	r2, #0
 80058bc:	4611      	mov	r1, r2
 80058be:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80058c4:	b15b      	cbz	r3, 80058de <lwip_netconn_do_delconn+0x7a>
 80058c6:	2200      	movs	r2, #0
 80058c8:	2102      	movs	r1, #2
 80058ca:	4798      	blx	r3
 80058cc:	e007      	b.n	80058de <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 80058ce:	2d03      	cmp	r5, #3
 80058d0:	d103      	bne.n	80058da <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	7f1b      	ldrb	r3, [r3, #28]
 80058d6:	075b      	lsls	r3, r3, #29
 80058d8:	d4d7      	bmi.n	800588a <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 80058da:	23fb      	movs	r3, #251	; 0xfb
 80058dc:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80058de:	6820      	ldr	r0, [r4, #0]
}
 80058e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80058e4:	300c      	adds	r0, #12
 80058e6:	f008 b9fe 	b.w	800dce6 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80058ea:	6a13      	ldr	r3, [r2, #32]
 80058ec:	b133      	cbz	r3, 80058fc <lwip_netconn_do_delconn+0x98>
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <lwip_netconn_do_delconn+0xf4>)
 80058f0:	491c      	ldr	r1, [pc, #112]	; (8005964 <lwip_netconn_do_delconn+0x100>)
 80058f2:	481b      	ldr	r0, [pc, #108]	; (8005960 <lwip_netconn_do_delconn+0xfc>)
 80058f4:	f240 4294 	movw	r2, #1172	; 0x494
 80058f8:	f008 facc 	bl	800de94 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	2304      	movs	r3, #4
 8005900:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8005902:	2303      	movs	r3, #3
 8005904:	7223      	strb	r3, [r4, #8]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005906:	2100      	movs	r1, #0
          msg->conn->current_msg = msg;
 8005908:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800590a:	f7ff fb93 	bl	8005034 <lwip_netconn_do_close_internal>
 800590e:	b308      	cbz	r0, 8005954 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d006      	beq.n	8005926 <lwip_netconn_do_delconn+0xc2>
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <lwip_netconn_do_delconn+0xf4>)
 800591a:	4913      	ldr	r1, [pc, #76]	; (8005968 <lwip_netconn_do_delconn+0x104>)
 800591c:	4810      	ldr	r0, [pc, #64]	; (8005960 <lwip_netconn_do_delconn+0xfc>)
 800591e:	f240 429a 	movw	r2, #1178	; 0x49a
 8005922:	f008 fab7 	bl	800de94 <iprintf>
            UNLOCK_TCPIP_CORE();
 8005926:	4811      	ldr	r0, [pc, #68]	; (800596c <lwip_netconn_do_delconn+0x108>)
 8005928:	f008 fa05 	bl	800dd36 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	2100      	movs	r1, #0
 8005930:	300c      	adds	r0, #12
 8005932:	f008 f9b7 	bl	800dca4 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8005936:	480d      	ldr	r0, [pc, #52]	; (800596c <lwip_netconn_do_delconn+0x108>)
 8005938:	f008 f9f8 	bl	800dd2c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800593c:	6823      	ldr	r3, [r4, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	b143      	cbz	r3, 8005954 <lwip_netconn_do_delconn+0xf0>
}
 8005942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <lwip_netconn_do_delconn+0xf4>)
 8005948:	4907      	ldr	r1, [pc, #28]	; (8005968 <lwip_netconn_do_delconn+0x104>)
 800594a:	4805      	ldr	r0, [pc, #20]	; (8005960 <lwip_netconn_do_delconn+0xfc>)
 800594c:	f240 429e 	movw	r2, #1182	; 0x49e
 8005950:	f008 baa0 	b.w	800de94 <iprintf>
}
 8005954:	bd70      	pop	{r4, r5, r6, pc}
 8005956:	bf00      	nop
 8005958:	0801a9e5 	.word	0x0801a9e5
 800595c:	0801ae47 	.word	0x0801ae47
 8005960:	0801a4e1 	.word	0x0801a4e1
 8005964:	0801ae5b 	.word	0x0801ae5b
 8005968:	0801ae76 	.word	0x0801ae76
 800596c:	2000e458 	.word	0x2000e458

08005970 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8005970:	6803      	ldr	r3, [r0, #0]
{
 8005972:	b510      	push	{r4, lr}
 8005974:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005976:	6858      	ldr	r0, [r3, #4]
 8005978:	b188      	cbz	r0, 800599e <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005980:	2b10      	cmp	r3, #16
 8005982:	d007      	beq.n	8005994 <lwip_netconn_do_bind+0x24>
 8005984:	2b20      	cmp	r3, #32
 8005986:	d10a      	bne.n	800599e <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005988:	89a2      	ldrh	r2, [r4, #12]
 800598a:	68a1      	ldr	r1, [r4, #8]
 800598c:	f007 fe54 	bl	800d638 <udp_bind>
  msg->err = err;
 8005990:	7120      	strb	r0, [r4, #4]
}
 8005992:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005994:	89a2      	ldrh	r2, [r4, #12]
 8005996:	68a1      	ldr	r1, [r4, #8]
 8005998:	f004 fb32 	bl	800a000 <tcp_bind>
        break;
 800599c:	e7f8      	b.n	8005990 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800599e:	f06f 0005 	mvn.w	r0, #5
 80059a2:	e7f5      	b.n	8005990 <lwip_netconn_do_bind+0x20>

080059a4 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 80059a4:	6803      	ldr	r3, [r0, #0]
{
 80059a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a8:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80059aa:	6858      	ldr	r0, [r3, #4]
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d04f      	beq.n	8005a50 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80059b6:	2a10      	cmp	r2, #16
 80059b8:	d14c      	bne.n	8005a54 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d143      	bne.n	8005a48 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80059c0:	7d03      	ldrb	r3, [r0, #20]
 80059c2:	b11b      	cbz	r3, 80059cc <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 80059c4:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 80059c6:	f88d 3007 	strb.w	r3, [sp, #7]
 80059ca:	e031      	b.n	8005a30 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80059cc:	f10d 0207 	add.w	r2, sp, #7
 80059d0:	21ff      	movs	r1, #255	; 0xff
 80059d2:	f004 fb6b 	bl	800a0ac <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 80059d6:	4605      	mov	r5, r0
 80059d8:	b350      	cbz	r0, 8005a30 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	3010      	adds	r0, #16
 80059de:	f008 f942 	bl	800dc66 <sys_mbox_valid>
 80059e2:	b138      	cbz	r0, 80059f4 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	3010      	adds	r0, #16
 80059e8:	f008 f8f6 	bl	800dbd8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	3010      	adds	r0, #16
 80059f0:	f008 f93e 	bl	800dc70 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80059f4:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 80059f6:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80059f8:	3014      	adds	r0, #20
            err = ERR_OK;
 80059fa:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80059fe:	f008 f932 	bl	800dc66 <sys_mbox_valid>
 8005a02:	b930      	cbnz	r0, 8005a12 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	2106      	movs	r1, #6
 8005a08:	3014      	adds	r0, #20
 8005a0a:	f008 f8d5 	bl	800dbb8 <sys_mbox_new>
 8005a0e:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8005a12:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005a16:	b983      	cbnz	r3, 8005a3a <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8005a18:	6821      	ldr	r1, [r4, #0]
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8005a1e:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005a20:	4628      	mov	r0, r5
 8005a22:	f004 fc33 	bl	800a28c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	490b      	ldr	r1, [pc, #44]	; (8005a58 <lwip_netconn_do_listen+0xb4>)
 8005a2a:	6858      	ldr	r0, [r3, #4]
 8005a2c:	f004 fc78 	bl	800a320 <tcp_accept>
  msg->err = err;
 8005a30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a34:	7123      	strb	r3, [r4, #4]
}
 8005a36:	b003      	add	sp, #12
 8005a38:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f004 ffe0 	bl	800aa00 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8005a40:	6823      	ldr	r3, [r4, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	e7f3      	b.n	8005a30 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d101      	bne.n	8005a50 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e7ba      	b.n	80059c6 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8005a50:	23f5      	movs	r3, #245	; 0xf5
 8005a52:	e7b8      	b.n	80059c6 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8005a54:	23f0      	movs	r3, #240	; 0xf0
 8005a56:	e7b6      	b.n	80059c6 <lwip_netconn_do_listen+0x22>
 8005a58:	08005771 	.word	0x08005771

08005a5c <lwip_netconn_do_send>:
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f7fe ffc5 	bl	80049f0 <netconn_err>
  if (err == ERR_OK) {
 8005a66:	b968      	cbnz	r0, 8005a84 <lwip_netconn_do_send+0x28>
    if (msg->conn->pcb.tcp != NULL) {
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	6858      	ldr	r0, [r3, #4]
 8005a6c:	b188      	cbz	r0, 8005a92 <lwip_netconn_do_send+0x36>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d10c      	bne.n	8005a92 <lwip_netconn_do_send+0x36>
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8005a78:	68a2      	ldr	r2, [r4, #8]
 8005a7a:	6893      	ldr	r3, [r2, #8]
 8005a7c:	6811      	ldr	r1, [r2, #0]
 8005a7e:	b91b      	cbnz	r3, 8005a88 <lwip_netconn_do_send+0x2c>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8005a80:	f007 ff56 	bl	800d930 <udp_send>
  msg->err = err;
 8005a84:	7120      	strb	r0, [r4, #4]
}
 8005a86:	bd10      	pop	{r4, pc}
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8005a88:	8993      	ldrh	r3, [r2, #12]
 8005a8a:	3208      	adds	r2, #8
 8005a8c:	f007 ff14 	bl	800d8b8 <udp_sendto>
 8005a90:	e7f8      	b.n	8005a84 <lwip_netconn_do_send+0x28>
      err = ERR_CONN;
 8005a92:	f06f 000a 	mvn.w	r0, #10
 8005a96:	e7f5      	b.n	8005a84 <lwip_netconn_do_send+0x28>

08005a98 <lwip_netconn_do_recv>:
{
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8005a9e:	6803      	ldr	r3, [r0, #0]
 8005aa0:	685a      	ldr	r2, [r3, #4]
{
 8005aa2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8005aa4:	b192      	cbz	r2, 8005acc <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d10d      	bne.n	8005acc <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8005ab0:	6885      	ldr	r5, [r0, #8]
 8005ab2:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8005ab6:	42bd      	cmp	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	462e      	mov	r6, r5
 8005abc:	bf28      	it	cs
 8005abe:	463e      	movcs	r6, r7
 8005ac0:	6858      	ldr	r0, [r3, #4]
 8005ac2:	b2b1      	uxth	r1, r6
 8005ac4:	f004 fb8e 	bl	800a1e4 <tcp_recved>
      } while (remaining != 0);
 8005ac8:	1bad      	subs	r5, r5, r6
 8005aca:	d1f4      	bne.n	8005ab6 <lwip_netconn_do_recv+0x1e>
}
 8005acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ad0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8005ad4:	6800      	ldr	r0, [r0, #0]
 8005ad6:	f7fe ff8b 	bl	80049f0 <netconn_err>
  if (err == ERR_OK) {
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d14a      	bne.n	8005b74 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005ae6:	2a10      	cmp	r2, #16
 8005ae8:	d142      	bne.n	8005b70 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8005aea:	785a      	ldrb	r2, [r3, #1]
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	d143      	bne.n	8005b78 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	d043      	beq.n	8005b7e <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 8005af6:	2201      	movs	r2, #1
 8005af8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	b133      	cbz	r3, 8005b0c <lwip_netconn_do_write+0x3c>
 8005afe:	4b21      	ldr	r3, [pc, #132]	; (8005b84 <lwip_netconn_do_write+0xb4>)
 8005b00:	4921      	ldr	r1, [pc, #132]	; (8005b88 <lwip_netconn_do_write+0xb8>)
 8005b02:	4822      	ldr	r0, [pc, #136]	; (8005b8c <lwip_netconn_do_write+0xbc>)
 8005b04:	f240 7223 	movw	r2, #1827	; 0x723
 8005b08:	f008 f9c4 	bl	800de94 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8005b0c:	6963      	ldr	r3, [r4, #20]
 8005b0e:	b933      	cbnz	r3, 8005b1e <lwip_netconn_do_write+0x4e>
 8005b10:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <lwip_netconn_do_write+0xb4>)
 8005b12:	491f      	ldr	r1, [pc, #124]	; (8005b90 <lwip_netconn_do_write+0xc0>)
 8005b14:	481d      	ldr	r0, [pc, #116]	; (8005b8c <lwip_netconn_do_write+0xbc>)
 8005b16:	f240 7224 	movw	r2, #1828	; 0x724
 8005b1a:	f008 f9bb 	bl	800de94 <iprintf>
        msg->conn->current_msg = msg;
 8005b1e:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005b20:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8005b22:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8005b24:	f7ff f95c 	bl	8004de0 <lwip_netconn_do_writemore>
 8005b28:	b328      	cbz	r0, 8005b76 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d006      	beq.n	8005b40 <lwip_netconn_do_write+0x70>
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <lwip_netconn_do_write+0xb4>)
 8005b34:	4917      	ldr	r1, [pc, #92]	; (8005b94 <lwip_netconn_do_write+0xc4>)
 8005b36:	4815      	ldr	r0, [pc, #84]	; (8005b8c <lwip_netconn_do_write+0xbc>)
 8005b38:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8005b3c:	f008 f9aa 	bl	800de94 <iprintf>
          UNLOCK_TCPIP_CORE();
 8005b40:	4815      	ldr	r0, [pc, #84]	; (8005b98 <lwip_netconn_do_write+0xc8>)
 8005b42:	f008 f8f8 	bl	800dd36 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005b46:	6820      	ldr	r0, [r4, #0]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	300c      	adds	r0, #12
 8005b4c:	f008 f8aa 	bl	800dca4 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005b50:	4811      	ldr	r0, [pc, #68]	; (8005b98 <lwip_netconn_do_write+0xc8>)
 8005b52:	f008 f8eb 	bl	800dd2c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10b      	bne.n	8005b76 <lwip_netconn_do_write+0xa6>
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8005b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8005b62:	4b08      	ldr	r3, [pc, #32]	; (8005b84 <lwip_netconn_do_write+0xb4>)
 8005b64:	490b      	ldr	r1, [pc, #44]	; (8005b94 <lwip_netconn_do_write+0xc4>)
 8005b66:	4809      	ldr	r0, [pc, #36]	; (8005b8c <lwip_netconn_do_write+0xbc>)
 8005b68:	f240 722c 	movw	r2, #1836	; 0x72c
 8005b6c:	f008 b992 	b.w	800de94 <iprintf>
      err = ERR_VAL;
 8005b70:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8005b74:	7120      	strb	r0, [r4, #4]
}
 8005b76:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8005b78:	f06f 0004 	mvn.w	r0, #4
 8005b7c:	e7fa      	b.n	8005b74 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8005b7e:	f06f 000a 	mvn.w	r0, #10
 8005b82:	e7f7      	b.n	8005b74 <lwip_netconn_do_write+0xa4>
 8005b84:	0801a9e5 	.word	0x0801a9e5
 8005b88:	0801ae5b 	.word	0x0801ae5b
 8005b8c:	0801a4e1 	.word	0x0801a4e1
 8005b90:	0801ae92 	.word	0x0801ae92
 8005b94:	0801ae76 	.word	0x0801ae76
 8005b98:	2000e458 	.word	0x2000e458

08005b9c <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 8005b9c:	6802      	ldr	r2, [r0, #0]
 8005b9e:	6853      	ldr	r3, [r2, #4]
{
 8005ba0:	b430      	push	{r4, r5}
  if (msg->conn->pcb.ip != NULL) {
 8005ba2:	b1bb      	cbz	r3, 8005bd4 <lwip_netconn_do_getaddr+0x38>
    if (msg->msg.ad.local) {
 8005ba4:	7c01      	ldrb	r1, [r0, #16]
 8005ba6:	6884      	ldr	r4, [r0, #8]
 8005ba8:	b179      	cbz	r1, 8005bca <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005baa:	681d      	ldr	r5, [r3, #0]
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005bac:	6025      	str	r5, [r4, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8005bae:	2400      	movs	r4, #0
 8005bb0:	7104      	strb	r4, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005bb8:	2a10      	cmp	r2, #16
 8005bba:	d012      	beq.n	8005be2 <lwip_netconn_do_getaddr+0x46>
 8005bbc:	2a20      	cmp	r2, #32
 8005bbe:	d119      	bne.n	8005bf4 <lwip_netconn_do_getaddr+0x58>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8005bc0:	b129      	cbz	r1, 8005bce <lwip_netconn_do_getaddr+0x32>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8005bc2:	68c2      	ldr	r2, [r0, #12]
 8005bc4:	8a5b      	ldrh	r3, [r3, #18]
        if ((msg->msg.ad.local == 0) &&
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8005bc6:	8013      	strh	r3, [r2, #0]
 8005bc8:	e006      	b.n	8005bd8 <lwip_netconn_do_getaddr+0x3c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005bca:	685d      	ldr	r5, [r3, #4]
 8005bcc:	e7ee      	b.n	8005bac <lwip_netconn_do_getaddr+0x10>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8005bce:	7c1a      	ldrb	r2, [r3, #16]
 8005bd0:	0752      	lsls	r2, r2, #29
 8005bd2:	d403      	bmi.n	8005bdc <lwip_netconn_do_getaddr+0x40>
            msg->err = ERR_CONN;
 8005bd4:	23f5      	movs	r3, #245	; 0xf5
 8005bd6:	7103      	strb	r3, [r0, #4]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8005bd8:	bc30      	pop	{r4, r5}
 8005bda:	4770      	bx	lr
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8005bdc:	68c2      	ldr	r2, [r0, #12]
 8005bde:	8a9b      	ldrh	r3, [r3, #20]
 8005be0:	e7f1      	b.n	8005bc6 <lwip_netconn_do_getaddr+0x2a>
        if ((msg->msg.ad.local == 0) &&
 8005be2:	b921      	cbnz	r1, 8005bee <lwip_netconn_do_getaddr+0x52>
 8005be4:	7d1a      	ldrb	r2, [r3, #20]
 8005be6:	2a01      	cmp	r2, #1
 8005be8:	d9f4      	bls.n	8005bd4 <lwip_netconn_do_getaddr+0x38>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8005bea:	8b1b      	ldrh	r3, [r3, #24]
 8005bec:	e000      	b.n	8005bf0 <lwip_netconn_do_getaddr+0x54>
 8005bee:	8adb      	ldrh	r3, [r3, #22]
 8005bf0:	68c2      	ldr	r2, [r0, #12]
 8005bf2:	e7e8      	b.n	8005bc6 <lwip_netconn_do_getaddr+0x2a>
}
 8005bf4:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 8005bf6:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <lwip_netconn_do_getaddr+0x68>)
 8005bf8:	4903      	ldr	r1, [pc, #12]	; (8005c08 <lwip_netconn_do_getaddr+0x6c>)
 8005bfa:	4804      	ldr	r0, [pc, #16]	; (8005c0c <lwip_netconn_do_getaddr+0x70>)
 8005bfc:	f240 727d 	movw	r2, #1917	; 0x77d
 8005c00:	f008 b948 	b.w	800de94 <iprintf>
 8005c04:	0801a9e5 	.word	0x0801a9e5
 8005c08:	0801aea6 	.word	0x0801aea6
 8005c0c:	0801a4e1 	.word	0x0801a4e1

08005c10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8005c10:	b510      	push	{r4, lr}
 8005c12:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8005c14:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8005c16:	6843      	ldr	r3, [r0, #4]
 8005c18:	b163      	cbz	r3, 8005c34 <lwip_netconn_do_close+0x24>
 8005c1a:	7803      	ldrb	r3, [r0, #0]
 8005c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d107      	bne.n	8005c34 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005c24:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8005c26:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8005c28:	2a03      	cmp	r2, #3
 8005c2a:	d001      	beq.n	8005c30 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d001      	beq.n	8005c34 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d102      	bne.n	8005c3a <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8005c34:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8005c36:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8005c38:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8005c3e:	23fb      	movs	r3, #251	; 0xfb
 8005c40:	e7f9      	b.n	8005c36 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8005c42:	07d3      	lsls	r3, r2, #31
 8005c44:	d501      	bpl.n	8005c4a <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8005c46:	f7ff fd43 	bl	80056d0 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	b133      	cbz	r3, 8005c5e <lwip_netconn_do_close+0x4e>
 8005c50:	4b19      	ldr	r3, [pc, #100]	; (8005cb8 <lwip_netconn_do_close+0xa8>)
 8005c52:	491a      	ldr	r1, [pc, #104]	; (8005cbc <lwip_netconn_do_close+0xac>)
 8005c54:	481a      	ldr	r0, [pc, #104]	; (8005cc0 <lwip_netconn_do_close+0xb0>)
 8005c56:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005c5a:	f008 f91b 	bl	800de94 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8005c5e:	6820      	ldr	r0, [r4, #0]
 8005c60:	2304      	movs	r3, #4
 8005c62:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8005c64:	6204      	str	r4, [r0, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8005c66:	2100      	movs	r1, #0
 8005c68:	f7ff f9e4 	bl	8005034 <lwip_netconn_do_close_internal>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d0e3      	beq.n	8005c38 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d006      	beq.n	8005c86 <lwip_netconn_do_close+0x76>
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <lwip_netconn_do_close+0xa8>)
 8005c7a:	4912      	ldr	r1, [pc, #72]	; (8005cc4 <lwip_netconn_do_close+0xb4>)
 8005c7c:	4810      	ldr	r0, [pc, #64]	; (8005cc0 <lwip_netconn_do_close+0xb0>)
 8005c7e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8005c82:	f008 f907 	bl	800de94 <iprintf>
        UNLOCK_TCPIP_CORE();
 8005c86:	4810      	ldr	r0, [pc, #64]	; (8005cc8 <lwip_netconn_do_close+0xb8>)
 8005c88:	f008 f855 	bl	800dd36 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	2100      	movs	r1, #0
 8005c90:	300c      	adds	r0, #12
 8005c92:	f008 f807 	bl	800dca4 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8005c96:	480c      	ldr	r0, [pc, #48]	; (8005cc8 <lwip_netconn_do_close+0xb8>)
 8005c98:	f008 f848 	bl	800dd2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	785b      	ldrb	r3, [r3, #1]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c9      	beq.n	8005c38 <lwip_netconn_do_close+0x28>
}
 8005ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <lwip_netconn_do_close+0xa8>)
 8005caa:	4906      	ldr	r1, [pc, #24]	; (8005cc4 <lwip_netconn_do_close+0xb4>)
 8005cac:	4804      	ldr	r0, [pc, #16]	; (8005cc0 <lwip_netconn_do_close+0xb0>)
 8005cae:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8005cb2:	f008 b8ef 	b.w	800de94 <iprintf>
 8005cb6:	bf00      	nop
 8005cb8:	0801a9e5 	.word	0x0801a9e5
 8005cbc:	0801ae5b 	.word	0x0801ae5b
 8005cc0:	0801a4e1 	.word	0x0801a4e1
 8005cc4:	0801ae76 	.word	0x0801ae76
 8005cc8:	2000e458 	.word	0x2000e458

08005ccc <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8005ccc:	f100 0310 	add.w	r3, r0, #16
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b10      	cmp	r3, #16
    return EIO;
  }
  return err_to_errno_table[-err];
 8005cd4:	bf9d      	ittte	ls
 8005cd6:	4240      	negls	r0, r0
 8005cd8:	4b02      	ldrls	r3, [pc, #8]	; (8005ce4 <err_to_errno+0x18>)
 8005cda:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    return EIO;
 8005cde:	2005      	movhi	r0, #5
}
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	0800f950 	.word	0x0800f950

08005ce8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8005ce8:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8005cea:	4604      	mov	r4, r0
 8005cec:	b160      	cbz	r0, 8005d08 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8005cee:	6800      	ldr	r0, [r0, #0]
 8005cf0:	b120      	cbz	r0, 8005cfc <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8005cf2:	f003 fe67 	bl	80099c4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	2006      	movs	r0, #6
  }
}
 8005d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8005d04:	f003 bc30 	b.w	8009568 <memp_free>
}
 8005d08:	bd10      	pop	{r4, pc}
	...

08005d0c <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8005d0c:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b938      	cbnz	r0, 8005d22 <netbuf_free+0x16>
  buf->p = buf->ptr = NULL;
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8005d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <netbuf_free+0x28>)
 8005d18:	4907      	ldr	r1, [pc, #28]	; (8005d38 <netbuf_free+0x2c>)
 8005d1a:	4808      	ldr	r0, [pc, #32]	; (8005d3c <netbuf_free+0x30>)
 8005d1c:	2281      	movs	r2, #129	; 0x81
 8005d1e:	f008 b8b9 	b.w	800de94 <iprintf>
  if (buf->p != NULL) {
 8005d22:	6800      	ldr	r0, [r0, #0]
 8005d24:	b108      	cbz	r0, 8005d2a <netbuf_free+0x1e>
    pbuf_free(buf->p);
 8005d26:	f003 fe4d 	bl	80099c4 <pbuf_free>
  buf->p = buf->ptr = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e9c4 3300 	strd	r3, r3, [r4]
}
 8005d30:	bd10      	pop	{r4, pc}
 8005d32:	bf00      	nop
 8005d34:	0801aebb 	.word	0x0801aebb
 8005d38:	0801af74 	.word	0x0801af74
 8005d3c:	0801a4e1 	.word	0x0801a4e1

08005d40 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005d46:	4604      	mov	r4, r0
 8005d48:	b940      	cbnz	r0, 8005d5c <netbuf_ref+0x1c>
 8005d4a:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <netbuf_ref+0x48>)
 8005d4c:	490f      	ldr	r1, [pc, #60]	; (8005d8c <netbuf_ref+0x4c>)
 8005d4e:	4810      	ldr	r0, [pc, #64]	; (8005d90 <netbuf_ref+0x50>)
 8005d50:	2299      	movs	r2, #153	; 0x99
 8005d52:	f008 f89f 	bl	800de94 <iprintf>
 8005d56:	f06f 000f 	mvn.w	r0, #15
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
 8005d5a:	bd70      	pop	{r4, r5, r6, pc}
  if (buf->p != NULL) {
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	b108      	cbz	r0, 8005d64 <netbuf_ref+0x24>
    pbuf_free(buf->p);
 8005d60:	f003 fe30 	bl	80099c4 <pbuf_free>
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8005d64:	2241      	movs	r2, #65	; 0x41
 8005d66:	2100      	movs	r1, #0
 8005d68:	2036      	movs	r0, #54	; 0x36
 8005d6a:	f003 fe93 	bl	8009a94 <pbuf_alloc>
 8005d6e:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8005d70:	b918      	cbnz	r0, 8005d7a <netbuf_ref+0x3a>
    buf->ptr = NULL;
 8005d72:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	e7ef      	b.n	8005d5a <netbuf_ref+0x1a>
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8005d7a:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 8005d7c:	8105      	strh	r5, [r0, #8]
 8005d7e:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 8005d80:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7e9      	b.n	8005d5a <netbuf_ref+0x1a>
 8005d86:	bf00      	nop
 8005d88:	0801aebb 	.word	0x0801aebb
 8005d8c:	0801af8d 	.word	0x0801af8d
 8005d90:	0801a4e1 	.word	0x0801a4e1

08005d94 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8005d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8005d98:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005e10 <alloc_socket+0x7c>
{
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	460e      	mov	r6, r1
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005da0:	2500      	movs	r5, #0
 8005da2:	46c3      	mov	fp, r8
    if (!sockets[i].conn) {
 8005da4:	012c      	lsls	r4, r5, #4
    SYS_ARCH_PROTECT(lev);
 8005da6:	f007 ffd9 	bl	800dd5c <sys_arch_protect>
    if (!sockets[i].conn) {
 8005daa:	f854 a008 	ldr.w	sl, [r4, r8]
 8005dae:	f1ba 0f00 	cmp.w	sl, #0
 8005db2:	d11f      	bne.n	8005df4 <alloc_socket+0x60>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8005db4:	eb08 0904 	add.w	r9, r8, r4
 8005db8:	f848 7004 	str.w	r7, [r8, r4]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8005dbc:	f007 ffda 	bl	800dd74 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8005dc0:	f899 300e 	ldrb.w	r3, [r9, #14]
      sockets[i].lastdata.pbuf = NULL;
 8005dc4:	f8c9 a004 	str.w	sl, [r9, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8005dc8:	b133      	cbz	r3, 8005dd8 <alloc_socket+0x44>
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <alloc_socket+0x70>)
 8005dcc:	490e      	ldr	r1, [pc, #56]	; (8005e08 <alloc_socket+0x74>)
 8005dce:	480f      	ldr	r0, [pc, #60]	; (8005e0c <alloc_socket+0x78>)
 8005dd0:	f240 220e 	movw	r2, #526	; 0x20e
 8005dd4:	f008 f85e 	bl	800de94 <iprintf>
      sockets[i].rcvevent   = 0;
 8005dd8:	445c      	add	r4, fp
 8005dda:	2200      	movs	r2, #0
 8005ddc:	8122      	strh	r2, [r4, #8]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8005dde:	783b      	ldrb	r3, [r7, #0]
      sockets[i].errevent   = 0;
 8005de0:	81a2      	strh	r2, [r4, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8005de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	bf18      	it	ne
 8005dea:	2601      	movne	r6, #1
 8005dec:	8166      	strh	r6, [r4, #10]
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
  }
  return -1;
}
 8005dee:	4628      	mov	r0, r5
 8005df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005df4:	3501      	adds	r5, #1
    SYS_ARCH_UNPROTECT(lev);
 8005df6:	f007 ffbd 	bl	800dd74 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005dfa:	2d04      	cmp	r5, #4
 8005dfc:	d1d2      	bne.n	8005da4 <alloc_socket+0x10>
  return -1;
 8005dfe:	f04f 35ff 	mov.w	r5, #4294967295
 8005e02:	e7f4      	b.n	8005dee <alloc_socket+0x5a>
 8005e04:	0801b05d 	.word	0x0801b05d
 8005e08:	0801b0d9 	.word	0x0801b0d9
 8005e0c:	0801a4e1 	.word	0x0801a4e1
 8005e10:	20006614 	.word	0x20006614

08005e14 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b085      	sub	sp, #20
  u8_t apiflags = NETCONN_NOAUTORCVD;
  ssize_t recvd = 0;
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8005e1a:	2a00      	cmp	r2, #0
{
 8005e1c:	9101      	str	r1, [sp, #4]
 8005e1e:	4699      	mov	r9, r3
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8005e20:	bfac      	ite	ge
 8005e22:	4614      	movge	r4, r2
 8005e24:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000

  LWIP_ASSERT("no socket given", sock != NULL);
 8005e28:	4606      	mov	r6, r0
 8005e2a:	b930      	cbnz	r0, 8005e3a <lwip_recv_tcp+0x26>
 8005e2c:	4b47      	ldr	r3, [pc, #284]	; (8005f4c <lwip_recv_tcp+0x138>)
 8005e2e:	4948      	ldr	r1, [pc, #288]	; (8005f50 <lwip_recv_tcp+0x13c>)
 8005e30:	4848      	ldr	r0, [pc, #288]	; (8005f54 <lwip_recv_tcp+0x140>)
 8005e32:	f240 329e 	movw	r2, #926	; 0x39e
 8005e36:	f008 f82d 	bl	800de94 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8005e3a:	6833      	ldr	r3, [r6, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d006      	beq.n	8005e54 <lwip_recv_tcp+0x40>
 8005e46:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <lwip_recv_tcp+0x138>)
 8005e48:	4943      	ldr	r1, [pc, #268]	; (8005f58 <lwip_recv_tcp+0x144>)
 8005e4a:	4842      	ldr	r0, [pc, #264]	; (8005f54 <lwip_recv_tcp+0x140>)
 8005e4c:	f240 329f 	movw	r2, #927	; 0x39f
 8005e50:	f008 f820 	bl	800de94 <iprintf>

  if (flags & MSG_DONTWAIT) {
    apiflags |= NETCONN_DONTBLOCK;
 8005e54:	f019 0f08 	tst.w	r9, #8
          return 0;
        } else {
          return -1;
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8005e58:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8005f4c <lwip_recv_tcp+0x138>
 8005e5c:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8005f54 <lwip_recv_tcp+0x140>
    apiflags |= NETCONN_DONTBLOCK;
 8005e60:	bf0c      	ite	eq
 8005e62:	2208      	moveq	r2, #8
 8005e64:	220c      	movne	r2, #12
 8005e66:	2500      	movs	r5, #0
    if (sock->lastdata.pbuf) {
 8005e68:	6873      	ldr	r3, [r6, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d03d      	beq.n	8005eea <lwip_recv_tcp+0xd6>
      p = sock->lastdata.pbuf;
 8005e6e:	9303      	str	r3, [sp, #12]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8005e70:	9803      	ldr	r0, [sp, #12]
      copylen = (u16_t)(SSIZE_MAX - recvd);
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8005e72:	9901      	ldr	r1, [sp, #4]
    if (recv_left > p->tot_len) {
 8005e74:	8907      	ldrh	r7, [r0, #8]
 8005e76:	42a7      	cmp	r7, r4
      copylen = (u16_t)recv_left;
 8005e78:	bfa8      	it	ge
 8005e7a:	b2a7      	uxthge	r7, r4
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	463a      	mov	r2, r7
 8005e80:	4429      	add	r1, r5
 8005e82:	f003 ffdd 	bl	8009e40 <pbuf_copy_partial>

    recvd += copylen;

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8005e86:	42a7      	cmp	r7, r4
    if (recvd + copylen < recvd) {
 8005e88:	eb07 0805 	add.w	r8, r7, r5
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8005e8c:	dd06      	ble.n	8005e9c <lwip_recv_tcp+0x88>
 8005e8e:	4933      	ldr	r1, [pc, #204]	; (8005f5c <lwip_recv_tcp+0x148>)
 8005e90:	4653      	mov	r3, sl
 8005e92:	f240 32dd 	movw	r2, #989	; 0x3dd
 8005e96:	4658      	mov	r0, fp
 8005e98:	f007 fffc 	bl	800de94 <iprintf>
    recv_left -= copylen;

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8005e9c:	f019 0f01 	tst.w	r9, #1
 8005ea0:	d14f      	bne.n	8005f42 <lwip_recv_tcp+0x12e>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	891b      	ldrh	r3, [r3, #8]
 8005ea6:	42bb      	cmp	r3, r7
 8005ea8:	d206      	bcs.n	8005eb8 <lwip_recv_tcp+0xa4>
 8005eaa:	492d      	ldr	r1, [pc, #180]	; (8005f60 <lwip_recv_tcp+0x14c>)
 8005eac:	4653      	mov	r3, sl
 8005eae:	f240 32e3 	movw	r2, #995	; 0x3e3
 8005eb2:	4658      	mov	r0, fp
 8005eb4:	f007 ffee 	bl	800de94 <iprintf>
      if (p->tot_len - copylen > 0) {
 8005eb8:	9803      	ldr	r0, [sp, #12]
 8005eba:	8903      	ldrh	r3, [r0, #8]
 8005ebc:	1bdb      	subs	r3, r3, r7
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dd38      	ble.n	8005f34 <lwip_recv_tcp+0x120>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f003 feba 	bl	8009c3c <pbuf_free_header>
 8005ec8:	6070      	str	r0, [r6, #4]
    recv_left -= copylen;
 8005eca:	1be4      	subs	r4, r4, r7
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8005ecc:	2c00      	cmp	r4, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8005ece:	f04f 021c 	mov.w	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8005ed2:	dc08      	bgt.n	8005ee6 <lwip_recv_tcp+0xd2>
lwip_recv_tcp_done:
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8005ed4:	f1b8 0f00 	cmp.w	r8, #0
 8005ed8:	d036      	beq.n	8005f48 <lwip_recv_tcp+0x134>
 8005eda:	4645      	mov	r5, r8
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8005edc:	6830      	ldr	r0, [r6, #0]
 8005ede:	4629      	mov	r1, r5
 8005ee0:	f7fe fccc 	bl	800487c <netconn_tcp_recvd>
 8005ee4:	e00b      	b.n	8005efe <lwip_recv_tcp+0xea>
    if (recvd + copylen < recvd) {
 8005ee6:	4645      	mov	r5, r8
 8005ee8:	e7be      	b.n	8005e68 <lwip_recv_tcp+0x54>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8005eea:	6830      	ldr	r0, [r6, #0]
 8005eec:	a903      	add	r1, sp, #12
 8005eee:	f7fe fedb 	bl	8004ca8 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	b190      	cbz	r0, 8005f1c <lwip_recv_tcp+0x108>
        if (recvd > 0) {
 8005ef6:	b135      	cbz	r5, 8005f06 <lwip_recv_tcp+0xf2>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8005ef8:	f019 0f01 	tst.w	r9, #1
 8005efc:	d0ee      	beq.n	8005edc <lwip_recv_tcp+0xc8>
  }
  sock_set_errno(sock, 0);
  return recvd;
}
 8005efe:	4628      	mov	r0, r5
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
 8005f06:	f7ff fee1 	bl	8005ccc <err_to_errno>
 8005f0a:	b108      	cbz	r0, 8005f10 <lwip_recv_tcp+0xfc>
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <lwip_recv_tcp+0x150>)
 8005f0e:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 8005f10:	f117 050f 	adds.w	r5, r7, #15
 8005f14:	bf18      	it	ne
 8005f16:	2501      	movne	r5, #1
 8005f18:	426d      	negs	r5, r5
 8005f1a:	e7f0      	b.n	8005efe <lwip_recv_tcp+0xea>
      LWIP_ASSERT("p != NULL", p != NULL);
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	b933      	cbnz	r3, 8005f2e <lwip_recv_tcp+0x11a>
 8005f20:	4911      	ldr	r1, [pc, #68]	; (8005f68 <lwip_recv_tcp+0x154>)
 8005f22:	4653      	mov	r3, sl
 8005f24:	f240 32c5 	movw	r2, #965	; 0x3c5
 8005f28:	4658      	mov	r0, fp
 8005f2a:	f007 ffb3 	bl	800de94 <iprintf>
      sock->lastdata.pbuf = p;
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	6073      	str	r3, [r6, #4]
 8005f32:	e79d      	b.n	8005e70 <lwip_recv_tcp+0x5c>
        sock->lastdata.pbuf = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	6073      	str	r3, [r6, #4]
        pbuf_free(p);
 8005f38:	f003 fd44 	bl	80099c4 <pbuf_free>
 8005f3c:	e7c5      	b.n	8005eca <lwip_recv_tcp+0xb6>
    if (recvd + copylen < recvd) {
 8005f3e:	4645      	mov	r5, r8
 8005f40:	e7dd      	b.n	8005efe <lwip_recv_tcp+0xea>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8005f42:	f1b8 0f00 	cmp.w	r8, #0
 8005f46:	d1fa      	bne.n	8005f3e <lwip_recv_tcp+0x12a>
 8005f48:	2500      	movs	r5, #0
 8005f4a:	e7d8      	b.n	8005efe <lwip_recv_tcp+0xea>
 8005f4c:	0801b05d 	.word	0x0801b05d
 8005f50:	0801b14d 	.word	0x0801b14d
 8005f54:	0801a4e1 	.word	0x0801a4e1
 8005f58:	0801b15d 	.word	0x0801b15d
 8005f5c:	0801b17f 	.word	0x0801b17f
 8005f60:	0801b1a4 	.word	0x0801b1a4
 8005f64:	20014a24 	.word	0x20014a24
 8005f68:	0801c4d2 	.word	0x0801c4d2

08005f6c <lwip_sock_make_addr.isra.0>:
#endif

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	460f      	mov	r7, r1
 8005f70:	b085      	sub	sp, #20
 8005f72:	4616      	mov	r6, r2
 8005f74:	461d      	mov	r5, r3
  int truncated = 0;
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 8005f76:	4604      	mov	r4, r0
 8005f78:	b930      	cbnz	r0, 8005f88 <lwip_sock_make_addr.isra.0+0x1c>
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <lwip_sock_make_addr.isra.0+0x7c>)
 8005f7c:	491b      	ldr	r1, [pc, #108]	; (8005fec <lwip_sock_make_addr.isra.0+0x80>)
 8005f7e:	481c      	ldr	r0, [pc, #112]	; (8005ff0 <lwip_sock_make_addr.isra.0+0x84>)
 8005f80:	f240 4207 	movw	r2, #1031	; 0x407
 8005f84:	f007 ff86 	bl	800de94 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 8005f88:	b936      	cbnz	r6, 8005f98 <lwip_sock_make_addr.isra.0+0x2c>
 8005f8a:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <lwip_sock_make_addr.isra.0+0x7c>)
 8005f8c:	4919      	ldr	r1, [pc, #100]	; (8005ff4 <lwip_sock_make_addr.isra.0+0x88>)
 8005f8e:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <lwip_sock_make_addr.isra.0+0x84>)
 8005f90:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8005f94:	f007 ff7e 	bl	800de94 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8005f98:	b935      	cbnz	r5, 8005fa8 <lwip_sock_make_addr.isra.0+0x3c>
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <lwip_sock_make_addr.isra.0+0x7c>)
 8005f9c:	4916      	ldr	r1, [pc, #88]	; (8005ff8 <lwip_sock_make_addr.isra.0+0x8c>)
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <lwip_sock_make_addr.isra.0+0x84>)
 8005fa0:	f240 4209 	movw	r2, #1033	; 0x409
 8005fa4:	f007 ff76 	bl	800de94 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8005fa8:	f44f 7304 	mov.w	r3, #528	; 0x210
 8005fac:	4638      	mov	r0, r7
 8005fae:	f8ad 3000 	strh.w	r3, [sp]
 8005fb2:	f002 ffa1 	bl	8008ef8 <lwip_htons>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	9301      	str	r3, [sp, #4]
  if (*fromlen < saddr.sa.sa_len) {
 8005fba:	682b      	ldr	r3, [r5, #0]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8005fbc:	f8ad 0002 	strh.w	r0, [sp, #2]
 8005fc0:	2400      	movs	r4, #0
  if (*fromlen < saddr.sa.sa_len) {
 8005fc2:	2b0f      	cmp	r3, #15
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8005fc4:	e9cd 4402 	strd	r4, r4, [sp, #8]
  if (*fromlen < saddr.sa.sa_len) {
 8005fc8:	d90b      	bls.n	8005fe2 <lwip_sock_make_addr.isra.0+0x76>
    truncated = 1;
  } else if (*fromlen > saddr.sa.sa_len) {
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d001      	beq.n	8005fd2 <lwip_sock_make_addr.isra.0+0x66>
    *fromlen = saddr.sa.sa_len;
 8005fce:	2310      	movs	r3, #16
 8005fd0:	602b      	str	r3, [r5, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8005fd2:	682a      	ldr	r2, [r5, #0]
 8005fd4:	4669      	mov	r1, sp
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f007 ff2c 	bl	800de34 <memcpy>
  return truncated;
}
 8005fdc:	4620      	mov	r0, r4
 8005fde:	b005      	add	sp, #20
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    truncated = 1;
 8005fe2:	2401      	movs	r4, #1
 8005fe4:	e7f5      	b.n	8005fd2 <lwip_sock_make_addr.isra.0+0x66>
 8005fe6:	bf00      	nop
 8005fe8:	0801b05d 	.word	0x0801b05d
 8005fec:	0801b1ca 	.word	0x0801b1ca
 8005ff0:	0801a4e1 	.word	0x0801a4e1
 8005ff4:	0801b1db 	.word	0x0801b1db
 8005ff8:	0801b1e8 	.word	0x0801b1e8

08005ffc <free_socket>:
{
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	460e      	mov	r6, r1
  SYS_ARCH_PROTECT(lev);
 8006002:	f007 feab 	bl	800dd5c <sys_arch_protect>
  *lastdata = sock->lastdata;
 8006006:	6865      	ldr	r5, [r4, #4]
  *conn = sock->conn;
 8006008:	6827      	ldr	r7, [r4, #0]
  sock->lastdata.pbuf = NULL;
 800600a:	2300      	movs	r3, #0
 800600c:	6063      	str	r3, [r4, #4]
  sock->conn = NULL;
 800600e:	6023      	str	r3, [r4, #0]
  SYS_ARCH_UNPROTECT(lev);
 8006010:	f007 feb0 	bl	800dd74 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 8006014:	b11d      	cbz	r5, 800601e <free_socket+0x22>
      pbuf_free(lastdata->pbuf);
 8006016:	4628      	mov	r0, r5
    if (is_tcp) {
 8006018:	b13e      	cbz	r6, 800602a <free_socket+0x2e>
      pbuf_free(lastdata->pbuf);
 800601a:	f003 fcd3 	bl	80099c4 <pbuf_free>
  if (conn != NULL) {
 800601e:	b13f      	cbz	r7, 8006030 <free_socket+0x34>
    netconn_delete(conn);
 8006020:	4638      	mov	r0, r7
}
 8006022:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    netconn_delete(conn);
 8006026:	f7fe bba5 	b.w	8004774 <netconn_delete>
      netbuf_delete(lastdata->netbuf);
 800602a:	f7ff fe5d 	bl	8005ce8 <netbuf_delete>
 800602e:	e7f6      	b.n	800601e <free_socket+0x22>
}
 8006030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006034 <lwip_recvfrom_udp_raw.isra.0>:

/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 8006034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006038:	4698      	mov	r8, r3
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800603a:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 800603c:	4607      	mov	r7, r0
 800603e:	460e      	mov	r6, r1
 8006040:	4614      	mov	r4, r2
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8006042:	b973      	cbnz	r3, 8006062 <lwip_recvfrom_udp_raw.isra.0+0x2e>
 8006044:	68d3      	ldr	r3, [r2, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	dd0b      	ble.n	8006062 <lwip_recvfrom_udp_raw.isra.0+0x2e>
 800604a:	4b32      	ldr	r3, [pc, #200]	; (8006114 <lwip_recvfrom_udp_raw.isra.0+0xe0>)
 800604c:	4932      	ldr	r1, [pc, #200]	; (8006118 <lwip_recvfrom_udp_raw.isra.0+0xe4>)
 800604e:	4833      	ldr	r0, [pc, #204]	; (800611c <lwip_recvfrom_udp_raw.isra.0+0xe8>)
 8006050:	f240 4249 	movw	r2, #1097	; 0x449
 8006054:	f007 ff1e 	bl	800de94 <iprintf>
 8006058:	f06f 000f 	mvn.w	r0, #15
  }
  if (datagram_len) {
    *datagram_len = buflen;
  }
  return ERR_OK;
}
 800605c:	b003      	add	sp, #12
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  buf = sock->lastdata.netbuf;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	9301      	str	r3, [sp, #4]
    apiflags = 0;
 8006066:	f016 0f08 	tst.w	r6, #8
 800606a:	bf14      	ite	ne
 800606c:	2204      	movne	r2, #4
 800606e:	2200      	moveq	r2, #0
  if (buf == NULL) {
 8006070:	b983      	cbnz	r3, 8006094 <lwip_recvfrom_udp_raw.isra.0+0x60>
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8006072:	6838      	ldr	r0, [r7, #0]
 8006074:	a901      	add	r1, sp, #4
 8006076:	f7fe fd99 	bl	8004bac <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 800607a:	2800      	cmp	r0, #0
 800607c:	d1ee      	bne.n	800605c <lwip_recvfrom_udp_raw.isra.0+0x28>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	b933      	cbnz	r3, 8006090 <lwip_recvfrom_udp_raw.isra.0+0x5c>
 8006082:	4b24      	ldr	r3, [pc, #144]	; (8006114 <lwip_recvfrom_udp_raw.isra.0+0xe0>)
 8006084:	4926      	ldr	r1, [pc, #152]	; (8006120 <lwip_recvfrom_udp_raw.isra.0+0xec>)
 8006086:	4825      	ldr	r0, [pc, #148]	; (800611c <lwip_recvfrom_udp_raw.isra.0+0xe8>)
 8006088:	f240 425e 	movw	r2, #1118	; 0x45e
 800608c:	f007 ff02 	bl	800de94 <iprintf>
    sock->lastdata.netbuf = buf;
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	607b      	str	r3, [r7, #4]
  buflen = buf->p->tot_len;
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8006098:	f04f 0900 	mov.w	r9, #0
  buflen = buf->p->tot_len;
 800609c:	f8b3 a008 	ldrh.w	sl, [r3, #8]
  copied = 0;
 80060a0:	46cb      	mov	fp, r9
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	4599      	cmp	r9, r3
 80060a6:	da01      	bge.n	80060ac <lwip_recvfrom_udp_raw.isra.0+0x78>
 80060a8:	45da      	cmp	sl, fp
 80060aa:	d819      	bhi.n	80060e0 <lwip_recvfrom_udp_raw.isra.0+0xac>
  if (msg->msg_name && msg->msg_namelen)
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	b13a      	cbz	r2, 80060c0 <lwip_recvfrom_udp_raw.isra.0+0x8c>
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	b12b      	cbz	r3, 80060c0 <lwip_recvfrom_udp_raw.isra.0+0x8c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80060b4:	9801      	ldr	r0, [sp, #4]
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	8981      	ldrh	r1, [r0, #12]
 80060ba:	3008      	adds	r0, #8
 80060bc:	f7ff ff56 	bl	8005f6c <lwip_sock_make_addr.isra.0>
  if (msg->msg_control) {
 80060c0:	6922      	ldr	r2, [r4, #16]
  msg->msg_flags = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61a3      	str	r3, [r4, #24]
  if (msg->msg_control) {
 80060c6:	b102      	cbz	r2, 80060ca <lwip_recvfrom_udp_raw.isra.0+0x96>
      msg->msg_controllen = 0;
 80060c8:	6163      	str	r3, [r4, #20]
  if ((flags & MSG_PEEK) == 0) {
 80060ca:	f016 0601 	ands.w	r6, r6, #1
 80060ce:	d103      	bne.n	80060d8 <lwip_recvfrom_udp_raw.isra.0+0xa4>
    netbuf_delete(buf);
 80060d0:	9801      	ldr	r0, [sp, #4]
    sock->lastdata.netbuf = NULL;
 80060d2:	607e      	str	r6, [r7, #4]
    netbuf_delete(buf);
 80060d4:	f7ff fe08 	bl	8005ce8 <netbuf_delete>
    *datagram_len = buflen;
 80060d8:	f8a8 a000 	strh.w	sl, [r8]
  return ERR_OK;
 80060dc:	2000      	movs	r0, #0
 80060de:	e7bd      	b.n	800605c <lwip_recvfrom_udp_raw.isra.0+0x28>
    if (msg->msg_iov[i].iov_len > len_left) {
 80060e0:	68a1      	ldr	r1, [r4, #8]
 80060e2:	eb01 03c9 	add.w	r3, r1, r9, lsl #3
 80060e6:	ea4f 00c9 	mov.w	r0, r9, lsl #3
 80060ea:	685b      	ldr	r3, [r3, #4]
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 80060ec:	5809      	ldr	r1, [r1, r0]
 80060ee:	9801      	ldr	r0, [sp, #4]
    u16_t len_left = (u16_t)(buflen - copied);
 80060f0:	ebaa 050b 	sub.w	r5, sl, fp
 80060f4:	b2ad      	uxth	r5, r5
    if (msg->msg_iov[i].iov_len > len_left) {
 80060f6:	42ab      	cmp	r3, r5
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 80060f8:	bf98      	it	ls
 80060fa:	b29d      	uxthls	r5, r3
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 80060fc:	462a      	mov	r2, r5
 80060fe:	465b      	mov	r3, fp
 8006100:	6800      	ldr	r0, [r0, #0]
    copied = (u16_t)(copied + copylen);
 8006102:	445d      	add	r5, fp
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8006104:	f003 fe9c 	bl	8009e40 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 8006108:	fa1f fb85 	uxth.w	fp, r5
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800610c:	f109 0901 	add.w	r9, r9, #1
 8006110:	e7c7      	b.n	80060a2 <lwip_recvfrom_udp_raw.isra.0+0x6e>
 8006112:	bf00      	nop
 8006114:	0801b05d 	.word	0x0801b05d
 8006118:	0801b1f8 	.word	0x0801b1f8
 800611c:	0801a4e1 	.word	0x0801a4e1
 8006120:	0801a9af 	.word	0x0801a9af

08006124 <get_socket>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8006124:	2803      	cmp	r0, #3
 8006126:	d805      	bhi.n	8006134 <get_socket+0x10>
    if (sock->conn) {
 8006128:	4b05      	ldr	r3, [pc, #20]	; (8006140 <get_socket+0x1c>)
 800612a:	0102      	lsls	r2, r0, #4
 800612c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8006130:	589b      	ldr	r3, [r3, r2]
 8006132:	b91b      	cbnz	r3, 800613c <get_socket+0x18>
    set_errno(EBADF);
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <get_socket+0x20>)
 8006136:	2209      	movs	r2, #9
 8006138:	601a      	str	r2, [r3, #0]
    return NULL;
 800613a:	2000      	movs	r0, #0
}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20006614 	.word	0x20006614
 8006144:	20014a24 	.word	0x20014a24

08006148 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8006148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	460f      	mov	r7, r1
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800614e:	4604      	mov	r4, r0
 8006150:	2800      	cmp	r0, #0
 8006152:	d042      	beq.n	80061da <event_callback+0x92>
    s = conn->socket;
 8006154:	6985      	ldr	r5, [r0, #24]
    if (s < 0) {
 8006156:	2d00      	cmp	r5, #0
 8006158:	da0f      	bge.n	800617a <event_callback+0x32>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800615a:	f007 fdff 	bl	800dd5c <sys_arch_protect>
      if (conn->socket < 0) {
 800615e:	69a5      	ldr	r5, [r4, #24]
 8006160:	2d00      	cmp	r5, #0
      SYS_ARCH_PROTECT(lev);
 8006162:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 8006164:	da07      	bge.n	8006176 <event_callback+0x2e>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8006166:	b90f      	cbnz	r7, 800616c <event_callback+0x24>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8006168:	3d01      	subs	r5, #1
 800616a:	61a5      	str	r5, [r4, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800616c:	4618      	mov	r0, r3
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
 800616e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    SYS_ARCH_UNPROTECT(lev);
 8006172:	f007 bdff 	b.w	800dd74 <sys_arch_unprotect>
      SYS_ARCH_UNPROTECT(lev);
 8006176:	f007 fdfd 	bl	800dd74 <sys_arch_unprotect>
    sock = get_socket(s);
 800617a:	4628      	mov	r0, r5
 800617c:	f7ff ffd2 	bl	8006124 <get_socket>
    if (!sock) {
 8006180:	4604      	mov	r4, r0
 8006182:	b350      	cbz	r0, 80061da <event_callback+0x92>
  SYS_ARCH_PROTECT(lev);
 8006184:	f007 fdea 	bl	800dd5c <sys_arch_protect>
 8006188:	4606      	mov	r6, r0
  switch (evt) {
 800618a:	2f04      	cmp	r7, #4
 800618c:	d839      	bhi.n	8006202 <event_callback+0xba>
 800618e:	e8df f007 	tbb	[pc, r7]
 8006192:	2603      	.short	0x2603
 8006194:	322b      	.short	0x322b
 8006196:	35          	.byte	0x35
 8006197:	00          	.byte	0x00
      sock->rcvevent++;
 8006198:	8923      	ldrh	r3, [r4, #8]
 800619a:	3301      	adds	r3, #1
 800619c:	b21b      	sxth	r3, r3
      if (sock->rcvevent > 1) {
 800619e:	2b01      	cmp	r3, #1
      sock->rcvevent++;
 80061a0:	8123      	strh	r3, [r4, #8]
      if (sock->rcvevent > 1) {
 80061a2:	bfcc      	ite	gt
 80061a4:	2300      	movgt	r3, #0
 80061a6:	2301      	movle	r3, #1
  if (sock->select_waiting && check_waiters) {
 80061a8:	7ba2      	ldrb	r2, [r4, #14]
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	d074      	beq.n	8006298 <event_callback+0x150>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d072      	beq.n	8006298 <event_callback+0x150>
    SYS_ARCH_UNPROTECT(lev);
 80061b2:	4630      	mov	r0, r6
    has_recvevent = sock->rcvevent > 0;
 80061b4:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
    has_sendevent = sock->sendevent != 0;
 80061b8:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    has_errevent = sock->errevent != 0;
 80061bc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    SYS_ARCH_UNPROTECT(lev);
 80061c0:	f007 fdd8 	bl	800dd74 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80061c4:	4b35      	ldr	r3, [pc, #212]	; (800629c <event_callback+0x154>)
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80061c6:	f005 061f 	and.w	r6, r5, #31
 80061ca:	f04f 0901 	mov.w	r9, #1
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80061ce:	6c1c      	ldr	r4, [r3, #64]	; 0x40
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80061d0:	ea4f 1b55 	mov.w	fp, r5, lsr #5
 80061d4:	fa09 f606 	lsl.w	r6, r9, r6
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80061d8:	b9e4      	cbnz	r4, 8006214 <event_callback+0xcc>
}
 80061da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      sock->rcvevent--;
 80061de:	8923      	ldrh	r3, [r4, #8]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	8123      	strh	r3, [r4, #8]
      check_waiters = 0;
 80061e4:	2300      	movs	r3, #0
      break;
 80061e6:	e7df      	b.n	80061a8 <event_callback+0x60>
      if (sock->sendevent) {
 80061e8:	8963      	ldrh	r3, [r4, #10]
      sock->sendevent = 1;
 80061ea:	2201      	movs	r2, #1
      if (sock->sendevent) {
 80061ec:	fab3 f383 	clz	r3, r3
 80061f0:	095b      	lsrs	r3, r3, #5
      sock->sendevent = 1;
 80061f2:	8162      	strh	r2, [r4, #10]
      break;
 80061f4:	e7d8      	b.n	80061a8 <event_callback+0x60>
      sock->sendevent = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	8163      	strh	r3, [r4, #10]
      break;
 80061fa:	e7d5      	b.n	80061a8 <event_callback+0x60>
      sock->errevent = 1;
 80061fc:	2301      	movs	r3, #1
 80061fe:	81a3      	strh	r3, [r4, #12]
      break;
 8006200:	e7d2      	b.n	80061a8 <event_callback+0x60>
      LWIP_ASSERT("unknown event", 0);
 8006202:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <event_callback+0x158>)
 8006204:	4927      	ldr	r1, [pc, #156]	; (80062a4 <event_callback+0x15c>)
 8006206:	4828      	ldr	r0, [pc, #160]	; (80062a8 <event_callback+0x160>)
 8006208:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800620c:	f007 fe42 	bl	800de94 <iprintf>
  check_waiters = 1;
 8006210:	2301      	movs	r3, #1
      break;
 8006212:	e7c9      	b.n	80061a8 <event_callback+0x60>
    if (scb->sem_signalled == 0) {
 8006214:	69e3      	ldr	r3, [r4, #28]
 8006216:	b933      	cbnz	r3, 8006226 <event_callback+0xde>
      if (scb->poll_fds != NULL) {
 8006218:	6960      	ldr	r0, [r4, #20]
 800621a:	b1d8      	cbz	r0, 8006254 <event_callback+0x10c>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800621c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006220:	4601      	mov	r1, r0
 8006222:	4563      	cmp	r3, ip
 8006224:	d101      	bne.n	800622a <event_callback+0xe2>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8006226:	6824      	ldr	r4, [r4, #0]
 8006228:	e7d6      	b.n	80061d8 <event_callback+0x90>
    if (pollfd->fd == fd) {
 800622a:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800622e:	4295      	cmp	r5, r2
 8006230:	d10d      	bne.n	800624e <event_callback+0x106>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8006232:	2f00      	cmp	r7, #0
 8006234:	dd02      	ble.n	800623c <event_callback+0xf4>
 8006236:	888a      	ldrh	r2, [r1, #4]
 8006238:	07d2      	lsls	r2, r2, #31
 800623a:	d426      	bmi.n	800628a <event_callback+0x142>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800623c:	f1b8 0f00 	cmp.w	r8, #0
 8006240:	d002      	beq.n	8006248 <event_callback+0x100>
 8006242:	888a      	ldrh	r2, [r1, #4]
 8006244:	0792      	lsls	r2, r2, #30
 8006246:	d420      	bmi.n	800628a <event_callback+0x142>
      if (has_errevent) {
 8006248:	f1ba 0f00 	cmp.w	sl, #0
 800624c:	d11d      	bne.n	800628a <event_callback+0x142>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800624e:	3301      	adds	r3, #1
 8006250:	3108      	adds	r1, #8
 8006252:	e7e6      	b.n	8006222 <event_callback+0xda>
        if (has_recvevent) {
 8006254:	2f00      	cmp	r7, #0
 8006256:	dd05      	ble.n	8006264 <event_callback+0x11c>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8006258:	68a3      	ldr	r3, [r4, #8]
 800625a:	b11b      	cbz	r3, 8006264 <event_callback+0x11c>
 800625c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006260:	421e      	tst	r6, r3
 8006262:	d112      	bne.n	800628a <event_callback+0x142>
            do_signal = 1;
          }
        }
        if (has_sendevent) {
 8006264:	f1b8 0f00 	cmp.w	r8, #0
 8006268:	d005      	beq.n	8006276 <event_callback+0x12e>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	b11b      	cbz	r3, 8006276 <event_callback+0x12e>
 800626e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006272:	421e      	tst	r6, r3
 8006274:	d109      	bne.n	800628a <event_callback+0x142>
            do_signal = 1;
          }
        }
        if (has_errevent) {
 8006276:	f1ba 0f00 	cmp.w	sl, #0
 800627a:	d0d4      	beq.n	8006226 <event_callback+0xde>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0d1      	beq.n	8006226 <event_callback+0xde>
 8006282:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8006286:	421e      	tst	r6, r3
 8006288:	d0cd      	beq.n	8006226 <event_callback+0xde>
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
        scb->sem_signalled = 1;
 800628a:	f8c4 901c 	str.w	r9, [r4, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800628e:	f104 0020 	add.w	r0, r4, #32
 8006292:	f007 fd22 	bl	800dcda <sys_sem_signal>
 8006296:	e7c6      	b.n	8006226 <event_callback+0xde>
    SYS_ARCH_UNPROTECT(lev);
 8006298:	4630      	mov	r0, r6
 800629a:	e768      	b.n	800616e <event_callback+0x26>
 800629c:	20006614 	.word	0x20006614
 80062a0:	0801b05d 	.word	0x0801b05d
 80062a4:	0801b221 	.word	0x0801b221
 80062a8:	0801a4e1 	.word	0x0801a4e1

080062ac <lwip_accept>:
{
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b089      	sub	sp, #36	; 0x24
  u16_t port = 0;
 80062b0:	2300      	movs	r3, #0
{
 80062b2:	460f      	mov	r7, r1
 80062b4:	4616      	mov	r6, r2
  u16_t port = 0;
 80062b6:	f8ad 3006 	strh.w	r3, [sp, #6]
  sock = get_socket(s);
 80062ba:	f7ff ff33 	bl	8006124 <get_socket>
  if (!sock) {
 80062be:	4604      	mov	r4, r0
 80062c0:	b920      	cbnz	r0, 80062cc <lwip_accept+0x20>
    return -1;
 80062c2:	f04f 34ff 	mov.w	r4, #4294967295
}
 80062c6:	4620      	mov	r0, r4
 80062c8:	b009      	add	sp, #36	; 0x24
 80062ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  err = netconn_accept(sock->conn, &newconn);
 80062cc:	6800      	ldr	r0, [r0, #0]
 80062ce:	a902      	add	r1, sp, #8
 80062d0:	f7fe fb9e 	bl	8004a10 <netconn_accept>
  if (err != ERR_OK) {
 80062d4:	4603      	mov	r3, r0
 80062d6:	b170      	cbz	r0, 80062f6 <lwip_accept+0x4a>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	7812      	ldrb	r2, [r2, #0]
 80062dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80062e0:	2a10      	cmp	r2, #16
 80062e2:	d003      	beq.n	80062ec <lwip_accept+0x40>
      sock_set_errno(sock, EOPNOTSUPP);
 80062e4:	4b3d      	ldr	r3, [pc, #244]	; (80063dc <lwip_accept+0x130>)
 80062e6:	225f      	movs	r2, #95	; 0x5f
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e7ea      	b.n	80062c2 <lwip_accept+0x16>
    } else if (err == ERR_CLSD) {
 80062ec:	330f      	adds	r3, #15
 80062ee:	d14d      	bne.n	800638c <lwip_accept+0xe0>
      sock_set_errno(sock, EINVAL);
 80062f0:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <lwip_accept+0x130>)
 80062f2:	2216      	movs	r2, #22
 80062f4:	e7f8      	b.n	80062e8 <lwip_accept+0x3c>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	b933      	cbnz	r3, 8006308 <lwip_accept+0x5c>
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <lwip_accept+0x134>)
 80062fc:	4939      	ldr	r1, [pc, #228]	; (80063e4 <lwip_accept+0x138>)
 80062fe:	483a      	ldr	r0, [pc, #232]	; (80063e8 <lwip_accept+0x13c>)
 8006300:	f240 228b 	movw	r2, #651	; 0x28b
 8006304:	f007 fdc6 	bl	800de94 <iprintf>
  newsock = alloc_socket(newconn, 1);
 8006308:	9802      	ldr	r0, [sp, #8]
 800630a:	2101      	movs	r1, #1
 800630c:	f7ff fd42 	bl	8005d94 <alloc_socket>
  if (newsock == -1) {
 8006310:	1c43      	adds	r3, r0, #1
  newsock = alloc_socket(newconn, 1);
 8006312:	4604      	mov	r4, r0
  if (newsock == -1) {
 8006314:	d106      	bne.n	8006324 <lwip_accept+0x78>
    netconn_delete(newconn);
 8006316:	9802      	ldr	r0, [sp, #8]
 8006318:	f7fe fa2c 	bl	8004774 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800631c:	4b2f      	ldr	r3, [pc, #188]	; (80063dc <lwip_accept+0x130>)
 800631e:	2217      	movs	r2, #23
 8006320:	601a      	str	r2, [r3, #0]
    return -1;
 8006322:	e7d0      	b.n	80062c6 <lwip_accept+0x1a>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8006324:	2803      	cmp	r0, #3
 8006326:	d906      	bls.n	8006336 <lwip_accept+0x8a>
 8006328:	4b2d      	ldr	r3, [pc, #180]	; (80063e0 <lwip_accept+0x134>)
 800632a:	4930      	ldr	r1, [pc, #192]	; (80063ec <lwip_accept+0x140>)
 800632c:	482e      	ldr	r0, [pc, #184]	; (80063e8 <lwip_accept+0x13c>)
 800632e:	f44f 7225 	mov.w	r2, #660	; 0x294
 8006332:	f007 fdaf 	bl	800de94 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8006336:	f007 fd11 	bl	800dd5c <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
 800633a:	9b02      	ldr	r3, [sp, #8]
 800633c:	699d      	ldr	r5, [r3, #24]
  newconn->socket = newsock;
 800633e:	619c      	str	r4, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8006340:	f007 fd18 	bl	800dd74 <sys_arch_unprotect>
  if (newconn->callback) {
 8006344:	9b02      	ldr	r3, [sp, #8]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	b14b      	cbz	r3, 800635e <lwip_accept+0xb2>
  recvevent = (s16_t)(-1 - newconn->socket);
 800634a:	43ed      	mvns	r5, r5
    LOCK_TCPIP_CORE();
 800634c:	4828      	ldr	r0, [pc, #160]	; (80063f0 <lwip_accept+0x144>)
  recvevent = (s16_t)(-1 - newconn->socket);
 800634e:	b22d      	sxth	r5, r5
    LOCK_TCPIP_CORE();
 8006350:	f007 fcec 	bl	800dd2c <sys_mutex_lock>
    while (recvevent > 0) {
 8006354:	2d00      	cmp	r5, #0
 8006356:	dc20      	bgt.n	800639a <lwip_accept+0xee>
    UNLOCK_TCPIP_CORE();
 8006358:	4825      	ldr	r0, [pc, #148]	; (80063f0 <lwip_accept+0x144>)
 800635a:	f007 fcec 	bl	800dd36 <sys_mutex_unlock>
  if ((addr != NULL) && (addrlen != NULL)) {
 800635e:	2f00      	cmp	r7, #0
 8006360:	d0b1      	beq.n	80062c6 <lwip_accept+0x1a>
 8006362:	2e00      	cmp	r6, #0
 8006364:	d0af      	beq.n	80062c6 <lwip_accept+0x1a>
    err = netconn_peer(newconn, &naddr, &port);
 8006366:	9802      	ldr	r0, [sp, #8]
 8006368:	2300      	movs	r3, #0
 800636a:	f10d 0206 	add.w	r2, sp, #6
 800636e:	a903      	add	r1, sp, #12
 8006370:	f7fe fa0e 	bl	8004790 <netconn_getaddr>
    if (err != ERR_OK) {
 8006374:	4605      	mov	r5, r0
 8006376:	b1b8      	cbz	r0, 80063a8 <lwip_accept+0xfc>
      netconn_delete(newconn);
 8006378:	9802      	ldr	r0, [sp, #8]
 800637a:	f7fe f9fb 	bl	8004774 <netconn_delete>
      free_socket(nsock, 1);
 800637e:	481d      	ldr	r0, [pc, #116]	; (80063f4 <lwip_accept+0x148>)
 8006380:	2101      	movs	r1, #1
 8006382:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8006386:	f7ff fe39 	bl	8005ffc <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800638a:	4628      	mov	r0, r5
 800638c:	f7ff fc9e 	bl	8005ccc <err_to_errno>
 8006390:	2800      	cmp	r0, #0
 8006392:	d096      	beq.n	80062c2 <lwip_accept+0x16>
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <lwip_accept+0x130>)
 8006396:	6018      	str	r0, [r3, #0]
      return -1;
 8006398:	e793      	b.n	80062c2 <lwip_accept+0x16>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800639a:	9802      	ldr	r0, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063a0:	4611      	mov	r1, r2
      recvevent--;
 80063a2:	3d01      	subs	r5, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80063a4:	4798      	blx	r3
 80063a6:	e7d5      	b.n	8006354 <lwip_accept+0xa8>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 80063a8:	f44f 7304 	mov.w	r3, #528	; 0x210
 80063ac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80063b0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80063b4:	f002 fda0 	bl	8008ef8 <lwip_htons>
 80063b8:	9b03      	ldr	r3, [sp, #12]
 80063ba:	f8ad 0012 	strh.w	r0, [sp, #18]
 80063be:	e9cd 3505 	strd	r3, r5, [sp, #20]
    if (*addrlen > tempaddr.sa.sa_len) {
 80063c2:	6833      	ldr	r3, [r6, #0]
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 80063c4:	9507      	str	r5, [sp, #28]
    if (*addrlen > tempaddr.sa.sa_len) {
 80063c6:	2b10      	cmp	r3, #16
      *addrlen = tempaddr.sa.sa_len;
 80063c8:	bf84      	itt	hi
 80063ca:	2310      	movhi	r3, #16
 80063cc:	6033      	strhi	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 80063ce:	6832      	ldr	r2, [r6, #0]
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f007 fd2e 	bl	800de34 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
 80063d8:	e775      	b.n	80062c6 <lwip_accept+0x1a>
 80063da:	bf00      	nop
 80063dc:	20014a24 	.word	0x20014a24
 80063e0:	0801b05d 	.word	0x0801b05d
 80063e4:	0801b22f 	.word	0x0801b22f
 80063e8:	0801a4e1 	.word	0x0801a4e1
 80063ec:	0801b23f 	.word	0x0801b23f
 80063f0:	2000e458 	.word	0x2000e458
 80063f4:	20006614 	.word	0x20006614

080063f8 <lwip_bind>:
{
 80063f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fa:	4615      	mov	r5, r2
  sock = get_socket(s);
 80063fc:	f7ff fe92 	bl	8006124 <get_socket>
  if (!sock) {
 8006400:	4604      	mov	r4, r0
 8006402:	b910      	cbnz	r0, 800640a <lwip_bind+0x12>
    return -1;
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e022      	b.n	8006450 <lwip_bind+0x58>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800640a:	2d10      	cmp	r5, #16
 800640c:	d104      	bne.n	8006418 <lwip_bind+0x20>
 800640e:	784b      	ldrb	r3, [r1, #1]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d101      	bne.n	8006418 <lwip_bind+0x20>
 8006414:	078b      	lsls	r3, r1, #30
 8006416:	d00f      	beq.n	8006438 <lwip_bind+0x40>
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <lwip_bind+0x5c>)
 800641a:	490f      	ldr	r1, [pc, #60]	; (8006458 <lwip_bind+0x60>)
 800641c:	480f      	ldr	r0, [pc, #60]	; (800645c <lwip_bind+0x64>)
 800641e:	f240 22e2 	movw	r2, #738	; 0x2e2
 8006422:	f007 fd37 	bl	800de94 <iprintf>
 8006426:	f06f 000f 	mvn.w	r0, #15
    sock_set_errno(sock, err_to_errno(err));
 800642a:	f7ff fc4f 	bl	8005ccc <err_to_errno>
 800642e:	2800      	cmp	r0, #0
 8006430:	d0e8      	beq.n	8006404 <lwip_bind+0xc>
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <lwip_bind+0x68>)
 8006434:	6018      	str	r0, [r3, #0]
 8006436:	e7e5      	b.n	8006404 <lwip_bind+0xc>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8006438:	684b      	ldr	r3, [r1, #4]
 800643a:	8848      	ldrh	r0, [r1, #2]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	f002 fd5b 	bl	8008ef8 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8006442:	a901      	add	r1, sp, #4
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8006444:	4602      	mov	r2, r0
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	f7fe f9d4 	bl	80047f4 <netconn_bind>
  if (err != ERR_OK) {
 800644c:	2800      	cmp	r0, #0
 800644e:	d1ec      	bne.n	800642a <lwip_bind+0x32>
}
 8006450:	b003      	add	sp, #12
 8006452:	bd30      	pop	{r4, r5, pc}
 8006454:	0801b05d 	.word	0x0801b05d
 8006458:	0801b254 	.word	0x0801b254
 800645c:	0801a4e1 	.word	0x0801a4e1
 8006460:	20014a24 	.word	0x20014a24

08006464 <lwip_close>:
{
 8006464:	b570      	push	{r4, r5, r6, lr}
  sock = get_socket(s);
 8006466:	f7ff fe5d 	bl	8006124 <get_socket>
  if (!sock) {
 800646a:	4606      	mov	r6, r0
 800646c:	b910      	cbnz	r0, 8006474 <lwip_close+0x10>
    return -1;
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006472:	bd70      	pop	{r4, r5, r6, pc}
  if (sock->conn != NULL) {
 8006474:	6805      	ldr	r5, [r0, #0]
 8006476:	b195      	cbz	r5, 800649e <lwip_close+0x3a>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8006478:	782c      	ldrb	r4, [r5, #0]
 800647a:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800647e:	f1a4 0310 	sub.w	r3, r4, #16
 8006482:	425c      	negs	r4, r3
 8006484:	415c      	adcs	r4, r3
  err = netconn_prepare_delete(sock->conn);
 8006486:	6830      	ldr	r0, [r6, #0]
 8006488:	f7fe f964 	bl	8004754 <netconn_prepare_delete>
  if (err != ERR_OK) {
 800648c:	4605      	mov	r5, r0
 800648e:	b190      	cbz	r0, 80064b6 <lwip_close+0x52>
    sock_set_errno(sock, err_to_errno(err));
 8006490:	f7ff fc1c 	bl	8005ccc <err_to_errno>
 8006494:	2800      	cmp	r0, #0
 8006496:	d0ea      	beq.n	800646e <lwip_close+0xa>
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <lwip_close+0x60>)
 800649a:	6018      	str	r0, [r3, #0]
 800649c:	e7e7      	b.n	800646e <lwip_close+0xa>
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800649e:	6844      	ldr	r4, [r0, #4]
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	d0f0      	beq.n	8006486 <lwip_close+0x22>
 80064a4:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <lwip_close+0x64>)
 80064a6:	4909      	ldr	r1, [pc, #36]	; (80064cc <lwip_close+0x68>)
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <lwip_close+0x6c>)
 80064aa:	f44f 7245 	mov.w	r2, #788	; 0x314
 80064ae:	f007 fcf1 	bl	800de94 <iprintf>
  int is_tcp = 0;
 80064b2:	462c      	mov	r4, r5
 80064b4:	e7e7      	b.n	8006486 <lwip_close+0x22>
  free_socket(sock, is_tcp);
 80064b6:	4630      	mov	r0, r6
 80064b8:	4621      	mov	r1, r4
 80064ba:	f7ff fd9f 	bl	8005ffc <free_socket>
  return 0;
 80064be:	4628      	mov	r0, r5
 80064c0:	e7d7      	b.n	8006472 <lwip_close+0xe>
 80064c2:	bf00      	nop
 80064c4:	20014a24 	.word	0x20014a24
 80064c8:	0801b05d 	.word	0x0801b05d
 80064cc:	0801b26f 	.word	0x0801b26f
 80064d0:	0801a4e1 	.word	0x0801a4e1

080064d4 <lwip_listen>:
{
 80064d4:	b510      	push	{r4, lr}
  sock = get_socket(s);
 80064d6:	f7ff fe25 	bl	8006124 <get_socket>
  if (!sock) {
 80064da:	4604      	mov	r4, r0
 80064dc:	b910      	cbnz	r0, 80064e4 <lwip_listen+0x10>
    return -1;
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80064e2:	bd10      	pop	{r4, pc}
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 80064e4:	f381 0108 	usat	r1, #8, r1
 80064e8:	6800      	ldr	r0, [r0, #0]
 80064ea:	b2c9      	uxtb	r1, r1
 80064ec:	f7fe f9a8 	bl	8004840 <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d0f6      	beq.n	80064e2 <lwip_listen+0xe>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d003      	beq.n	8006508 <lwip_listen+0x34>
      sock_set_errno(sock, EOPNOTSUPP);
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <lwip_listen+0x44>)
 8006502:	225f      	movs	r2, #95	; 0x5f
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e7ea      	b.n	80064de <lwip_listen+0xa>
      sock_set_errno(sock, err_to_errno(err));
 8006508:	f7ff fbe0 	bl	8005ccc <err_to_errno>
 800650c:	2800      	cmp	r0, #0
 800650e:	d0e6      	beq.n	80064de <lwip_listen+0xa>
 8006510:	4b01      	ldr	r3, [pc, #4]	; (8006518 <lwip_listen+0x44>)
 8006512:	6018      	str	r0, [r3, #0]
 8006514:	e7e3      	b.n	80064de <lwip_listen+0xa>
 8006516:	bf00      	nop
 8006518:	20014a24 	.word	0x20014a24

0800651c <lwip_recvfrom>:
{
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	b08a      	sub	sp, #40	; 0x28
 8006522:	e9dd 8510 	ldrd	r8, r5, [sp, #64]	; 0x40
 8006526:	460c      	mov	r4, r1
 8006528:	4617      	mov	r7, r2
 800652a:	4619      	mov	r1, r3
  sock = get_socket(s);
 800652c:	f7ff fdfa 	bl	8006124 <get_socket>
  if (!sock) {
 8006530:	4606      	mov	r6, r0
 8006532:	2800      	cmp	r0, #0
 8006534:	d03d      	beq.n	80065b2 <lwip_recvfrom+0x96>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800653e:	2b10      	cmp	r3, #16
 8006540:	d11a      	bne.n	8006578 <lwip_recvfrom+0x5c>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8006542:	460b      	mov	r3, r1
 8006544:	463a      	mov	r2, r7
 8006546:	4621      	mov	r1, r4
 8006548:	f7ff fc64 	bl	8005e14 <lwip_recv_tcp>
 800654c:	4604      	mov	r4, r0
  if (from && fromlen)
 800654e:	f1b8 0f00 	cmp.w	r8, #0
 8006552:	d00d      	beq.n	8006570 <lwip_recvfrom+0x54>
 8006554:	b165      	cbz	r5, 8006570 <lwip_recvfrom+0x54>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8006556:	2300      	movs	r3, #0
 8006558:	aa01      	add	r2, sp, #4
 800655a:	a903      	add	r1, sp, #12
 800655c:	6830      	ldr	r0, [r6, #0]
 800655e:	f7fe f917 	bl	8004790 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8006562:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006566:	462b      	mov	r3, r5
 8006568:	4642      	mov	r2, r8
 800656a:	a803      	add	r0, sp, #12
 800656c:	f7ff fcfe 	bl	8005f6c <lwip_sock_make_addr.isra.0>
}
 8006570:	4620      	mov	r0, r4
 8006572:	b00a      	add	sp, #40	; 0x28
 8006574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    u16_t datagram_len = 0;
 8006578:	2300      	movs	r3, #0
    msg.msg_controllen = 0;
 800657a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    u16_t datagram_len = 0;
 800657e:	f8ad 3002 	strh.w	r3, [sp, #2]
    msg.msg_flags = 0;
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
    msg.msg_iov = &vec;
 8006584:	ab01      	add	r3, sp, #4
 8006586:	9305      	str	r3, [sp, #20]
    msg.msg_iovlen = 1;
 8006588:	2301      	movs	r3, #1
    vec.iov_len = len;
 800658a:	e9cd 4701 	strd	r4, r7, [sp, #4]
    msg.msg_iovlen = 1;
 800658e:	9306      	str	r3, [sp, #24]
    msg.msg_name = from;
 8006590:	f8cd 800c 	str.w	r8, [sp, #12]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8006594:	b185      	cbz	r5, 80065b8 <lwip_recvfrom+0x9c>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	9304      	str	r3, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800659a:	aa03      	add	r2, sp, #12
 800659c:	f10d 0302 	add.w	r3, sp, #2
 80065a0:	4630      	mov	r0, r6
 80065a2:	f7ff fd47 	bl	8006034 <lwip_recvfrom_udp_raw.isra.0>
    if (err != ERR_OK) {
 80065a6:	b148      	cbz	r0, 80065bc <lwip_recvfrom+0xa0>
      sock_set_errno(sock, err_to_errno(err));
 80065a8:	f7ff fb90 	bl	8005ccc <err_to_errno>
 80065ac:	b108      	cbz	r0, 80065b2 <lwip_recvfrom+0x96>
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <lwip_recvfrom+0xb4>)
 80065b0:	6018      	str	r0, [r3, #0]
    return -1;
 80065b2:	f04f 34ff 	mov.w	r4, #4294967295
 80065b6:	e7db      	b.n	8006570 <lwip_recvfrom+0x54>
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80065b8:	462b      	mov	r3, r5
 80065ba:	e7ed      	b.n	8006598 <lwip_recvfrom+0x7c>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80065bc:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 80065c0:	42bc      	cmp	r4, r7
 80065c2:	bf28      	it	cs
 80065c4:	463c      	movcs	r4, r7
    if (fromlen) {
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	d0d2      	beq.n	8006570 <lwip_recvfrom+0x54>
      *fromlen = msg.msg_namelen;
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	602b      	str	r3, [r5, #0]
  return ret;
 80065ce:	e7cf      	b.n	8006570 <lwip_recvfrom+0x54>
 80065d0:	20014a24 	.word	0x20014a24

080065d4 <lwip_read>:
{
 80065d4:	b507      	push	{r0, r1, r2, lr}
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 80065d6:	2300      	movs	r3, #0
 80065d8:	e9cd 3300 	strd	r3, r3, [sp]
 80065dc:	f7ff ff9e 	bl	800651c <lwip_recvfrom>
}
 80065e0:	b003      	add	sp, #12
 80065e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080065e8 <lwip_sendto>:
{
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	e9dd 480c 	ldrd	r4, r8, [sp, #48]	; 0x30
 80065f2:	9101      	str	r1, [sp, #4]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4607      	mov	r7, r0
 80065f8:	4615      	mov	r5, r2
  sock = get_socket(s);
 80065fa:	f7ff fd93 	bl	8006124 <get_socket>
  if (!sock) {
 80065fe:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006602:	4606      	mov	r6, r0
 8006604:	b910      	cbnz	r0, 800660c <lwip_sendto+0x24>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006606:	f04f 30ff 	mov.w	r0, #4294967295
 800660a:	e009      	b.n	8006620 <lwip_sendto+0x38>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800660c:	6802      	ldr	r2, [r0, #0]
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006614:	2a10      	cmp	r2, #16
 8006616:	d106      	bne.n	8006626 <lwip_sendto+0x3e>
    return lwip_send(s, data, size, flags);
 8006618:	462a      	mov	r2, r5
 800661a:	4638      	mov	r0, r7
 800661c:	f000 f858 	bl	80066d0 <lwip_send>
}
 8006620:	b006      	add	sp, #24
 8006622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8006626:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800662a:	d303      	bcc.n	8006634 <lwip_sendto+0x4c>
    sock_set_errno(sock, EMSGSIZE);
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <lwip_sendto+0xd8>)
 800662e:	225a      	movs	r2, #90	; 0x5a
 8006630:	601a      	str	r2, [r3, #0]
    return -1;
 8006632:	e7e8      	b.n	8006606 <lwip_sendto+0x1e>
  short_size = (u16_t)size;
 8006634:	b2aa      	uxth	r2, r5
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006636:	bb5c      	cbnz	r4, 8006690 <lwip_sendto+0xa8>
 8006638:	f1b8 0f00 	cmp.w	r8, #0
 800663c:	d130      	bne.n	80066a0 <lwip_sendto+0xb8>
  buf.p = buf.ptr = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (to) {
 8006644:	b314      	cbz	r4, 800668c <lwip_sendto+0xa4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	8860      	ldrh	r0, [r4, #2]
 800664a:	9304      	str	r3, [sp, #16]
 800664c:	e9cd 2100 	strd	r2, r1, [sp]
 8006650:	f002 fc52 	bl	8008ef8 <lwip_htons>
 8006654:	e9dd 2100 	ldrd	r2, r1, [sp]
 8006658:	4604      	mov	r4, r0
  err = netbuf_ref(&buf, data, short_size);
 800665a:	a802      	add	r0, sp, #8
  netbuf_fromport(&buf) = remote_port;
 800665c:	f8ad 4014 	strh.w	r4, [sp, #20]
  err = netbuf_ref(&buf, data, short_size);
 8006660:	f7ff fb6e 	bl	8005d40 <netbuf_ref>
  if (err == ERR_OK) {
 8006664:	4604      	mov	r4, r0
 8006666:	b920      	cbnz	r0, 8006672 <lwip_sendto+0x8a>
    err = netconn_send(sock->conn, &buf);
 8006668:	6830      	ldr	r0, [r6, #0]
 800666a:	a902      	add	r1, sp, #8
 800666c:	f7fe f92a 	bl	80048c4 <netconn_send>
 8006670:	4604      	mov	r4, r0
  netbuf_free(&buf);
 8006672:	a802      	add	r0, sp, #8
 8006674:	f7ff fb4a 	bl	8005d0c <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff fb27 	bl	8005ccc <err_to_errno>
 800667e:	b108      	cbz	r0, 8006684 <lwip_sendto+0x9c>
 8006680:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <lwip_sendto+0xd8>)
 8006682:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8006684:	2c00      	cmp	r4, #0
 8006686:	d1be      	bne.n	8006606 <lwip_sendto+0x1e>
 8006688:	4628      	mov	r0, r5
 800668a:	e7c9      	b.n	8006620 <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800668c:	9404      	str	r4, [sp, #16]
 800668e:	e7e4      	b.n	800665a <lwip_sendto+0x72>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8006690:	f1b8 0f10 	cmp.w	r8, #16
 8006694:	d104      	bne.n	80066a0 <lwip_sendto+0xb8>
 8006696:	7863      	ldrb	r3, [r4, #1]
 8006698:	2b02      	cmp	r3, #2
 800669a:	d101      	bne.n	80066a0 <lwip_sendto+0xb8>
 800669c:	07a3      	lsls	r3, r4, #30
 800669e:	d0ce      	beq.n	800663e <lwip_sendto+0x56>
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <lwip_sendto+0xdc>)
 80066a2:	4909      	ldr	r1, [pc, #36]	; (80066c8 <lwip_sendto+0xe0>)
 80066a4:	4809      	ldr	r0, [pc, #36]	; (80066cc <lwip_sendto+0xe4>)
 80066a6:	f240 6252 	movw	r2, #1618	; 0x652
 80066aa:	f007 fbf3 	bl	800de94 <iprintf>
 80066ae:	f06f 000f 	mvn.w	r0, #15
 80066b2:	f7ff fb0b 	bl	8005ccc <err_to_errno>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d0a5      	beq.n	8006606 <lwip_sendto+0x1e>
 80066ba:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <lwip_sendto+0xd8>)
 80066bc:	6018      	str	r0, [r3, #0]
 80066be:	e7a2      	b.n	8006606 <lwip_sendto+0x1e>
 80066c0:	20014a24 	.word	0x20014a24
 80066c4:	0801b05d 	.word	0x0801b05d
 80066c8:	0801b38e 	.word	0x0801b38e
 80066cc:	0801a4e1 	.word	0x0801a4e1

080066d0 <lwip_send>:
{
 80066d0:	b530      	push	{r4, r5, lr}
 80066d2:	b087      	sub	sp, #28
 80066d4:	4605      	mov	r5, r0
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	461c      	mov	r4, r3
  sock = get_socket(s);
 80066da:	f7ff fd23 	bl	8006124 <get_socket>
  if (!sock) {
 80066de:	9a03      	ldr	r2, [sp, #12]
 80066e0:	b918      	cbnz	r0, 80066ea <lwip_send+0x1a>
    return -1;
 80066e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80066e6:	b007      	add	sp, #28
 80066e8:	bd30      	pop	{r4, r5, pc}
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	7803      	ldrb	r3, [r0, #0]
 80066ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d007      	beq.n	8006706 <lwip_send+0x36>
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80066f6:	2300      	movs	r3, #0
 80066f8:	e9cd 3300 	strd	r3, r3, [sp]
 80066fc:	4628      	mov	r0, r5
 80066fe:	4623      	mov	r3, r4
 8006700:	f7ff ff72 	bl	80065e8 <lwip_sendto>
 8006704:	e7ef      	b.n	80066e6 <lwip_send+0x16>
  write_flags = (u8_t)(NETCONN_COPY |
 8006706:	f014 0f10 	tst.w	r4, #16
  written = 0;
 800670a:	f04f 0500 	mov.w	r5, #0
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800670e:	ea4f 0464 	mov.w	r4, r4, asr #1
  write_flags = (u8_t)(NETCONN_COPY |
 8006712:	bf14      	ite	ne
 8006714:	2303      	movne	r3, #3
 8006716:	2301      	moveq	r3, #1
  written = 0;
 8006718:	9505      	str	r5, [sp, #20]
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800671a:	f004 0404 	and.w	r4, r4, #4
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800671e:	ad05      	add	r5, sp, #20
 8006720:	4323      	orrs	r3, r4
 8006722:	9500      	str	r5, [sp, #0]
 8006724:	f7fe f958 	bl	80049d8 <netconn_write_partly>
 8006728:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 800672a:	f7ff facf 	bl	8005ccc <err_to_errno>
 800672e:	b108      	cbz	r0, 8006734 <lwip_send+0x64>
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <lwip_send+0x6c>)
 8006732:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 8006734:	2c00      	cmp	r4, #0
 8006736:	d1d4      	bne.n	80066e2 <lwip_send+0x12>
 8006738:	9805      	ldr	r0, [sp, #20]
 800673a:	e7d4      	b.n	80066e6 <lwip_send+0x16>
 800673c:	20014a24 	.word	0x20014a24

08006740 <lwip_socket>:
  switch (type) {
 8006740:	2902      	cmp	r1, #2
{
 8006742:	b538      	push	{r3, r4, r5, lr}
 8006744:	4613      	mov	r3, r2
  switch (type) {
 8006746:	d011      	beq.n	800676c <lwip_socket+0x2c>
 8006748:	2903      	cmp	r1, #3
 800674a:	d005      	beq.n	8006758 <lwip_socket+0x18>
 800674c:	2901      	cmp	r1, #1
 800674e:	d115      	bne.n	800677c <lwip_socket+0x3c>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <lwip_socket+0x68>)
 8006752:	2100      	movs	r1, #0
 8006754:	2010      	movs	r0, #16
 8006756:	e002      	b.n	800675e <lwip_socket+0x1e>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <lwip_socket+0x68>)
 800675a:	b2d9      	uxtb	r1, r3
 800675c:	2040      	movs	r0, #64	; 0x40
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800675e:	f7fd ff9f 	bl	80046a0 <netconn_new_with_proto_and_callback>
 8006762:	4604      	mov	r4, r0
  if (!conn) {
 8006764:	b988      	cbnz	r0, 800678a <lwip_socket+0x4a>
    set_errno(ENOBUFS);
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <lwip_socket+0x6c>)
 8006768:	2269      	movs	r2, #105	; 0x69
 800676a:	e009      	b.n	8006780 <lwip_socket+0x40>
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800676c:	2a88      	cmp	r2, #136	; 0x88
 800676e:	f04f 0100 	mov.w	r1, #0
 8006772:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <lwip_socket+0x68>)
 8006774:	bf0c      	ite	eq
 8006776:	2021      	moveq	r0, #33	; 0x21
 8006778:	2020      	movne	r0, #32
 800677a:	e7f0      	b.n	800675e <lwip_socket+0x1e>
      set_errno(EINVAL);
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <lwip_socket+0x6c>)
 800677e:	2216      	movs	r2, #22
    set_errno(ENOBUFS);
 8006780:	601a      	str	r2, [r3, #0]
    return -1;
 8006782:	f04f 35ff 	mov.w	r5, #4294967295
}
 8006786:	4628      	mov	r0, r5
 8006788:	bd38      	pop	{r3, r4, r5, pc}
  i = alloc_socket(conn, 0);
 800678a:	2100      	movs	r1, #0
 800678c:	f7ff fb02 	bl	8005d94 <alloc_socket>
  if (i == -1) {
 8006790:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
 8006792:	4605      	mov	r5, r0
  if (i == -1) {
 8006794:	d106      	bne.n	80067a4 <lwip_socket+0x64>
    netconn_delete(conn);
 8006796:	4620      	mov	r0, r4
 8006798:	f7fd ffec 	bl	8004774 <netconn_delete>
    set_errno(ENFILE);
 800679c:	4b03      	ldr	r3, [pc, #12]	; (80067ac <lwip_socket+0x6c>)
 800679e:	2217      	movs	r2, #23
 80067a0:	601a      	str	r2, [r3, #0]
    return -1;
 80067a2:	e7f0      	b.n	8006786 <lwip_socket+0x46>
  conn->socket = i;
 80067a4:	61a0      	str	r0, [r4, #24]
  return i;
 80067a6:	e7ee      	b.n	8006786 <lwip_socket+0x46>
 80067a8:	08006149 	.word	0x08006149
 80067ac:	20014a24 	.word	0x20014a24

080067b0 <lwip_write>:
  return lwip_send(s, data, size, 0);
 80067b0:	2300      	movs	r3, #0
 80067b2:	f7ff bf8d 	b.w	80066d0 <lwip_send>
	...

080067b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80067b8:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80067ba:	482b      	ldr	r0, [pc, #172]	; (8006868 <tcpip_thread+0xb0>)
 80067bc:	f007 fab6 	bl	800dd2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80067c0:	4a2a      	ldr	r2, [pc, #168]	; (800686c <tcpip_thread+0xb4>)
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	b10b      	cbz	r3, 80067ca <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80067c6:	6850      	ldr	r0, [r2, #4]
 80067c8:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80067ca:	4d27      	ldr	r5, [pc, #156]	; (8006868 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80067cc:	4f28      	ldr	r7, [pc, #160]	; (8006870 <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80067ce:	4e29      	ldr	r6, [pc, #164]	; (8006874 <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 80067d0:	f006 fe3c 	bl	800d44c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80067d4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80067d6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80067d8:	d113      	bne.n	8006802 <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 80067da:	4628      	mov	r0, r5
 80067dc:	f007 faab 	bl	800dd36 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80067e0:	2200      	movs	r2, #0
 80067e2:	a901      	add	r1, sp, #4
 80067e4:	4638      	mov	r0, r7
 80067e6:	f007 fa0b 	bl	800dc00 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80067ea:	4628      	mov	r0, r5
 80067ec:	f007 fa9e 	bl	800dd2c <sys_mutex_lock>
    if (msg == NULL) {
 80067f0:	9c01      	ldr	r4, [sp, #4]
 80067f2:	b9cc      	cbnz	r4, 8006828 <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80067f4:	4633      	mov	r3, r6
 80067f6:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80067f8:	491f      	ldr	r1, [pc, #124]	; (8006878 <tcpip_thread+0xc0>)
 80067fa:	4820      	ldr	r0, [pc, #128]	; (800687c <tcpip_thread+0xc4>)
 80067fc:	f007 fb4a 	bl	800de94 <iprintf>
      break;
 8006800:	e7e6      	b.n	80067d0 <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 8006802:	b910      	cbnz	r0, 800680a <tcpip_thread+0x52>
    sys_check_timeouts();
 8006804:	f006 fe06 	bl	800d414 <sys_check_timeouts>
    goto again;
 8006808:	e7e2      	b.n	80067d0 <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 800680a:	4628      	mov	r0, r5
 800680c:	f007 fa93 	bl	800dd36 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006810:	4622      	mov	r2, r4
 8006812:	a901      	add	r1, sp, #4
 8006814:	4638      	mov	r0, r7
 8006816:	f007 f9f3 	bl	800dc00 <sys_arch_mbox_fetch>
 800681a:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800681c:	4628      	mov	r0, r5
 800681e:	f007 fa85 	bl	800dd2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006822:	3401      	adds	r4, #1
 8006824:	d0ee      	beq.n	8006804 <tcpip_thread+0x4c>
 8006826:	e7e3      	b.n	80067f0 <tcpip_thread+0x38>
  switch (msg->type) {
 8006828:	7823      	ldrb	r3, [r4, #0]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d00f      	beq.n	800684e <tcpip_thread+0x96>
 800682e:	2b02      	cmp	r3, #2
 8006830:	d013      	beq.n	800685a <tcpip_thread+0xa2>
 8006832:	b9b3      	cbnz	r3, 8006862 <tcpip_thread+0xaa>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006834:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006838:	6860      	ldr	r0, [r4, #4]
 800683a:	4798      	blx	r3
 800683c:	b110      	cbz	r0, 8006844 <tcpip_thread+0x8c>
        pbuf_free(msg->msg.inp.p);
 800683e:	6860      	ldr	r0, [r4, #4]
 8006840:	f003 f8c0 	bl	80099c4 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006844:	4621      	mov	r1, r4
 8006846:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006848:	f002 fe8e 	bl	8009568 <memp_free>
      break;
 800684c:	e7c0      	b.n	80067d0 <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800684e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006852:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006854:	4621      	mov	r1, r4
 8006856:	2008      	movs	r0, #8
 8006858:	e7f6      	b.n	8006848 <tcpip_thread+0x90>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800685a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800685e:	4798      	blx	r3
      break;
 8006860:	e7b6      	b.n	80067d0 <tcpip_thread+0x18>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006862:	4633      	mov	r3, r6
 8006864:	22cf      	movs	r2, #207	; 0xcf
 8006866:	e7c7      	b.n	80067f8 <tcpip_thread+0x40>
 8006868:	2000e458 	.word	0x2000e458
 800686c:	20006658 	.word	0x20006658
 8006870:	20006660 	.word	0x20006660
 8006874:	0801b3ec 	.word	0x0801b3ec
 8006878:	0801b466 	.word	0x0801b466
 800687c:	0801a4e1 	.word	0x0801a4e1

08006880 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006884:	4810      	ldr	r0, [pc, #64]	; (80068c8 <tcpip_inpkt+0x48>)
{
 8006886:	460e      	mov	r6, r1
 8006888:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800688a:	f007 f9ec 	bl	800dc66 <sys_mbox_valid>
 800688e:	b928      	cbnz	r0, 800689c <tcpip_inpkt+0x1c>
 8006890:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <tcpip_inpkt+0x4c>)
 8006892:	490f      	ldr	r1, [pc, #60]	; (80068d0 <tcpip_inpkt+0x50>)
 8006894:	480f      	ldr	r0, [pc, #60]	; (80068d4 <tcpip_inpkt+0x54>)
 8006896:	22fc      	movs	r2, #252	; 0xfc
 8006898:	f007 fafc 	bl	800de94 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800689c:	2009      	movs	r0, #9
 800689e:	f002 fe47 	bl	8009530 <memp_malloc>
  if (msg == NULL) {
 80068a2:	4604      	mov	r4, r0
 80068a4:	b168      	cbz	r0, 80068c2 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80068a6:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
 80068a8:	e9c0 7601 	strd	r7, r6, [r0, #4]
  msg->type = TCPIP_MSG_INPKT;
 80068ac:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 80068ae:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80068b0:	4601      	mov	r1, r0
 80068b2:	4805      	ldr	r0, [pc, #20]	; (80068c8 <tcpip_inpkt+0x48>)
 80068b4:	f007 f99a 	bl	800dbec <sys_mbox_trypost>
 80068b8:	b128      	cbz	r0, 80068c6 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80068ba:	4621      	mov	r1, r4
 80068bc:	2009      	movs	r0, #9
 80068be:	f002 fe53 	bl	8009568 <memp_free>
    return ERR_MEM;
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80068c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c8:	20006660 	.word	0x20006660
 80068cc:	0801b3ec 	.word	0x0801b3ec
 80068d0:	0801b484 	.word	0x0801b484
 80068d4:	0801a4e1 	.word	0x0801a4e1

080068d8 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80068d8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80068dc:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80068e0:	bf14      	ite	ne
 80068e2:	4a02      	ldrne	r2, [pc, #8]	; (80068ec <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80068e4:	4a02      	ldreq	r2, [pc, #8]	; (80068f0 <tcpip_input+0x18>)
 80068e6:	f7ff bfcb 	b.w	8006880 <tcpip_inpkt>
 80068ea:	bf00      	nop
 80068ec:	0800daa9 	.word	0x0800daa9
 80068f0:	08008479 	.word	0x08008479

080068f4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80068f4:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80068f6:	4e06      	ldr	r6, [pc, #24]	; (8006910 <tcpip_send_msg_wait_sem+0x1c>)
{
 80068f8:	460d      	mov	r5, r1
 80068fa:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80068fc:	4630      	mov	r0, r6
 80068fe:	f007 fa15 	bl	800dd2c <sys_mutex_lock>
  fn(apimsg);
 8006902:	4628      	mov	r0, r5
 8006904:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8006906:	4630      	mov	r0, r6
 8006908:	f007 fa15 	bl	800dd36 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800690c:	2000      	movs	r0, #0
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	2000e458 	.word	0x2000e458

08006914 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006916:	4605      	mov	r5, r0
 8006918:	460c      	mov	r4, r1
  lwip_init();
 800691a:	f002 fb41 	bl	8008fa0 <lwip_init>

  tcpip_init_done = initfunc;
 800691e:	4812      	ldr	r0, [pc, #72]	; (8006968 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006920:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8006922:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006926:	3008      	adds	r0, #8
 8006928:	f007 f946 	bl	800dbb8 <sys_mbox_new>
 800692c:	b130      	cbz	r0, 800693c <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <tcpip_init+0x58>)
 8006930:	490f      	ldr	r1, [pc, #60]	; (8006970 <tcpip_init+0x5c>)
 8006932:	4810      	ldr	r0, [pc, #64]	; (8006974 <tcpip_init+0x60>)
 8006934:	f240 2261 	movw	r2, #609	; 0x261
 8006938:	f007 faac 	bl	800de94 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800693c:	480e      	ldr	r0, [pc, #56]	; (8006978 <tcpip_init+0x64>)
 800693e:	f007 f9e7 	bl	800dd10 <sys_mutex_new>
 8006942:	b130      	cbz	r0, 8006952 <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <tcpip_init+0x58>)
 8006946:	490d      	ldr	r1, [pc, #52]	; (800697c <tcpip_init+0x68>)
 8006948:	480a      	ldr	r0, [pc, #40]	; (8006974 <tcpip_init+0x60>)
 800694a:	f240 2265 	movw	r2, #613	; 0x265
 800694e:	f007 faa1 	bl	800de94 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006952:	2302      	movs	r3, #2
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	490a      	ldr	r1, [pc, #40]	; (8006980 <tcpip_init+0x6c>)
 8006958:	480a      	ldr	r0, [pc, #40]	; (8006984 <tcpip_init+0x70>)
 800695a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800695e:	2200      	movs	r2, #0
 8006960:	f007 f9ec 	bl	800dd3c <sys_thread_new>
}
 8006964:	b003      	add	sp, #12
 8006966:	bd30      	pop	{r4, r5, pc}
 8006968:	20006658 	.word	0x20006658
 800696c:	0801b3ec 	.word	0x0801b3ec
 8006970:	0801b491 	.word	0x0801b491
 8006974:	0801a4e1 	.word	0x0801a4e1
 8006978:	2000e458 	.word	0x2000e458
 800697c:	0801b4b4 	.word	0x0801b4b4
 8006980:	080067b9 	.word	0x080067b9
 8006984:	0801b4d5 	.word	0x0801b4d5

08006988 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8006988:	7943      	ldrb	r3, [r0, #5]
 800698a:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 800698c:	bf1f      	itttt	ne
 800698e:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8006990:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8006992:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8006994:	8103      	strhne	r3, [r0, #8]
  }
}
 8006996:	4770      	bx	lr

08006998 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800699a:	1c87      	adds	r7, r0, #2
 800699c:	2f44      	cmp	r7, #68	; 0x44
{
 800699e:	4604      	mov	r4, r0
 80069a0:	460d      	mov	r5, r1
 80069a2:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80069a4:	d906      	bls.n	80069b4 <dhcp_option_short+0x1c>
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <dhcp_option_short+0x2c>)
 80069a8:	4907      	ldr	r1, [pc, #28]	; (80069c8 <dhcp_option_short+0x30>)
 80069aa:	4808      	ldr	r0, [pc, #32]	; (80069cc <dhcp_option_short+0x34>)
 80069ac:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80069b0:	f007 fa70 	bl	800de94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80069b4:	0a33      	lsrs	r3, r6, #8
 80069b6:	552b      	strb	r3, [r5, r4]
 80069b8:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80069ba:	b2a4      	uxth	r4, r4
  return options_out_len;
}
 80069bc:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80069be:	552e      	strb	r6, [r5, r4]
}
 80069c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c2:	bf00      	nop
 80069c4:	0801b4dc 	.word	0x0801b4dc
 80069c8:	0801b55b 	.word	0x0801b55b
 80069cc:	0801a4e1 	.word	0x0801a4e1

080069d0 <dhcp_option>:
{
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80069d4:	3302      	adds	r3, #2
 80069d6:	4403      	add	r3, r0
 80069d8:	2b44      	cmp	r3, #68	; 0x44
{
 80069da:	4604      	mov	r4, r0
 80069dc:	460d      	mov	r5, r1
 80069de:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80069e0:	d906      	bls.n	80069f0 <dhcp_option+0x20>
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <dhcp_option+0x30>)
 80069e4:	4907      	ldr	r1, [pc, #28]	; (8006a04 <dhcp_option+0x34>)
 80069e6:	4808      	ldr	r0, [pc, #32]	; (8006a08 <dhcp_option+0x38>)
 80069e8:	f240 529a 	movw	r2, #1434	; 0x59a
 80069ec:	f007 fa52 	bl	800de94 <iprintf>
  options[options_out_len++] = option_type;
 80069f0:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 80069f6:	552f      	strb	r7, [r5, r4]
}
 80069f8:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 80069fa:	54ee      	strb	r6, [r5, r3]
}
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fe:	bf00      	nop
 8006a00:	0801b4dc 	.word	0x0801b4dc
 8006a04:	0801b596 	.word	0x0801b596
 8006a08:	0801a4e1 	.word	0x0801a4e1

08006a0c <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8006a0c:	2843      	cmp	r0, #67	; 0x43
{
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8006a16:	d906      	bls.n	8006a26 <dhcp_option_byte+0x1a>
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <dhcp_option_byte+0x24>)
 8006a1a:	4906      	ldr	r1, [pc, #24]	; (8006a34 <dhcp_option_byte+0x28>)
 8006a1c:	4806      	ldr	r0, [pc, #24]	; (8006a38 <dhcp_option_byte+0x2c>)
 8006a1e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8006a22:	f007 fa37 	bl	800de94 <iprintf>
  options[options_out_len++] = value;
 8006a26:	1c60      	adds	r0, r4, #1
 8006a28:	552e      	strb	r6, [r5, r4]
}
 8006a2a:	b280      	uxth	r0, r0
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	bf00      	nop
 8006a30:	0801b4dc 	.word	0x0801b4dc
 8006a34:	0801b5d8 	.word	0x0801b5d8
 8006a38:	0801a4e1 	.word	0x0801a4e1

08006a3c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8006a3e:	1d07      	adds	r7, r0, #4
 8006a40:	2f44      	cmp	r7, #68	; 0x44
{
 8006a42:	4604      	mov	r4, r0
 8006a44:	460d      	mov	r5, r1
 8006a46:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8006a48:	d906      	bls.n	8006a58 <dhcp_option_long+0x1c>
 8006a4a:	4b0b      	ldr	r3, [pc, #44]	; (8006a78 <dhcp_option_long+0x3c>)
 8006a4c:	490b      	ldr	r1, [pc, #44]	; (8006a7c <dhcp_option_long+0x40>)
 8006a4e:	480c      	ldr	r0, [pc, #48]	; (8006a80 <dhcp_option_long+0x44>)
 8006a50:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8006a54:	f007 fa1e 	bl	800de94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8006a58:	0e33      	lsrs	r3, r6, #24
 8006a5a:	552b      	strb	r3, [r5, r4]
 8006a5c:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	0c32      	lsrs	r2, r6, #16
 8006a62:	54ea      	strb	r2, [r5, r3]
 8006a64:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8006a66:	3403      	adds	r4, #3
 8006a68:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006a6a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8006a6c:	0a32      	lsrs	r2, r6, #8
 8006a6e:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 8006a70:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8006a72:	552e      	strb	r6, [r5, r4]
}
 8006a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a76:	bf00      	nop
 8006a78:	0801b4dc 	.word	0x0801b4dc
 8006a7c:	0801b60d 	.word	0x0801b60d
 8006a80:	0801a4e1 	.word	0x0801a4e1

08006a84 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8006a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a88:	460e      	mov	r6, r1
 8006a8a:	4690      	mov	r8, r2
 8006a8c:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8006a8e:	4605      	mov	r5, r0
 8006a90:	b958      	cbnz	r0, 8006aaa <dhcp_create_msg+0x26>
 8006a92:	4b40      	ldr	r3, [pc, #256]	; (8006b94 <dhcp_create_msg+0x110>)
 8006a94:	4940      	ldr	r1, [pc, #256]	; (8006b98 <dhcp_create_msg+0x114>)
 8006a96:	4841      	ldr	r0, [pc, #260]	; (8006b9c <dhcp_create_msg+0x118>)
 8006a98:	f240 7269 	movw	r2, #1897	; 0x769
 8006a9c:	f007 f9fa 	bl	800de94 <iprintf>
 8006aa0:	462f      	mov	r7, r5
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	b003      	add	sp, #12
 8006aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8006aaa:	b941      	cbnz	r1, 8006abe <dhcp_create_msg+0x3a>
 8006aac:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <dhcp_create_msg+0x110>)
 8006aae:	493c      	ldr	r1, [pc, #240]	; (8006ba0 <dhcp_create_msg+0x11c>)
 8006ab0:	483a      	ldr	r0, [pc, #232]	; (8006b9c <dhcp_create_msg+0x118>)
 8006ab2:	f240 726a 	movw	r2, #1898	; 0x76a
 8006ab6:	f007 f9ed 	bl	800de94 <iprintf>
 8006aba:	4637      	mov	r7, r6
 8006abc:	e7f1      	b.n	8006aa2 <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8006abe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006ac2:	f44f 719a 	mov.w	r1, #308	; 0x134
 8006ac6:	2036      	movs	r0, #54	; 0x36
 8006ac8:	f002 ffe4 	bl	8009a94 <pbuf_alloc>
  if (p_out == NULL) {
 8006acc:	4607      	mov	r7, r0
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0e7      	beq.n	8006aa2 <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8006ad2:	8943      	ldrh	r3, [r0, #10]
 8006ad4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8006ad8:	d206      	bcs.n	8006ae8 <dhcp_create_msg+0x64>
 8006ada:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <dhcp_create_msg+0x110>)
 8006adc:	4931      	ldr	r1, [pc, #196]	; (8006ba4 <dhcp_create_msg+0x120>)
 8006ade:	482f      	ldr	r0, [pc, #188]	; (8006b9c <dhcp_create_msg+0x118>)
 8006ae0:	f240 7271 	movw	r2, #1905	; 0x771
 8006ae4:	f007 f9d6 	bl	800de94 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8006ae8:	f1b8 0f03 	cmp.w	r8, #3
 8006aec:	d102      	bne.n	8006af4 <dhcp_create_msg+0x70>
 8006aee:	7973      	ldrb	r3, [r6, #5]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d107      	bne.n	8006b04 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8006af4:	79b3      	ldrb	r3, [r6, #6]
 8006af6:	4c2c      	ldr	r4, [pc, #176]	; (8006ba8 <dhcp_create_msg+0x124>)
 8006af8:	b913      	cbnz	r3, 8006b00 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 8006afa:	f007 f9e3 	bl	800dec4 <rand>
 8006afe:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8006b04:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8006b06:	f44f 729a 	mov.w	r2, #308	; 0x134
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f007 f9b9 	bl	800de84 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8006b12:	2301      	movs	r3, #1
 8006b14:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8006b16:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8006b18:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006b1c:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8006b1e:	6830      	ldr	r0, [r6, #0]
 8006b20:	f002 f9ed 	bl	8008efe <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8006b24:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8006b28:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8006b2a:	d00a      	beq.n	8006b42 <dhcp_create_msg+0xbe>
 8006b2c:	f1a8 0307 	sub.w	r3, r8, #7
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d906      	bls.n	8006b42 <dhcp_create_msg+0xbe>
 8006b34:	f1b8 0f03 	cmp.w	r8, #3
 8006b38:	d105      	bne.n	8006b46 <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8006b3a:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d801      	bhi.n	8006b46 <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8006b42:	686b      	ldr	r3, [r5, #4]
 8006b44:	60e3      	str	r3, [r4, #12]
 8006b46:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8006b4a:	f104 021c 	add.w	r2, r4, #28
 8006b4e:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8006b50:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006b54:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	d1f9      	bne.n	8006b50 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8006b5c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006b60:	2363      	movs	r3, #99	; 0x63
 8006b62:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8006b66:	2253      	movs	r2, #83	; 0x53
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8006b68:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8006b6c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8006b70:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 8006b74:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8006b78:	2235      	movs	r2, #53	; 0x35
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	9101      	str	r1, [sp, #4]
 8006b80:	f7ff ff26 	bl	80069d0 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	4642      	mov	r2, r8
 8006b88:	f7ff ff40 	bl	8006a0c <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8006b8c:	f8a9 0000 	strh.w	r0, [r9]
 8006b90:	e787      	b.n	8006aa2 <dhcp_create_msg+0x1e>
 8006b92:	bf00      	nop
 8006b94:	0801b4dc 	.word	0x0801b4dc
 8006b98:	0801b647 	.word	0x0801b647
 8006b9c:	0801a4e1 	.word	0x0801a4e1
 8006ba0:	0801b666 	.word	0x0801b666
 8006ba4:	0801b684 	.word	0x0801b684
 8006ba8:	20006664 	.word	0x20006664

08006bac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8006bac:	4603      	mov	r3, r0
 8006bae:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 8006bb0:	1c5c      	adds	r4, r3, #1
 8006bb2:	25ff      	movs	r5, #255	; 0xff
{
 8006bb4:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 8006bb6:	b2a2      	uxth	r2, r4
 8006bb8:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8006bba:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8006bbe:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8006bc0:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8006bc2:	2c43      	cmp	r4, #67	; 0x43
 8006bc4:	d90a      	bls.n	8006bdc <dhcp_option_trailer+0x30>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8006bc6:	2a44      	cmp	r2, #68	; 0x44
 8006bc8:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 8006bcc:	bf88      	it	hi
 8006bce:	2100      	movhi	r1, #0
 8006bd0:	33f1      	adds	r3, #241	; 0xf1
 8006bd2:	4419      	add	r1, r3
}
 8006bd4:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8006bd6:	b289      	uxth	r1, r1
 8006bd8:	f002 bfd8 	b.w	8009b8c <pbuf_realloc>
    options[options_out_len++] = 0;
 8006bdc:	3401      	adds	r4, #1
 8006bde:	f801 5b01 	strb.w	r5, [r1], #1
 8006be2:	b2a4      	uxth	r4, r4
 8006be4:	e7ed      	b.n	8006bc2 <dhcp_option_trailer+0x16>
	...

08006be8 <dhcp_reboot>:
{
 8006be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006bec:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006bee:	b086      	sub	sp, #24
 8006bf0:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8006bf2:	2103      	movs	r1, #3
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7ff fec7 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006bfa:	f10d 0316 	add.w	r3, sp, #22
 8006bfe:	2203      	movs	r2, #3
 8006c00:	4621      	mov	r1, r4
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ff3e 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 8006c08:	4605      	mov	r5, r0
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d067      	beq.n	8006cde <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006c0e:	6841      	ldr	r1, [r0, #4]
 8006c10:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006c14:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8006cec <dhcp_reboot+0x104>
 8006c18:	31f0      	adds	r1, #240	; 0xf0
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	2239      	movs	r2, #57	; 0x39
 8006c1e:	9103      	str	r1, [sp, #12]
 8006c20:	f7ff fed6 	bl	80069d0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006c24:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006c26:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006c2a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006c2e:	f7ff feb3 	bl	8006998 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006c32:	2304      	movs	r3, #4
 8006c34:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8006c36:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006c3a:	2232      	movs	r2, #50	; 0x32
 8006c3c:	f7ff fec8 	bl	80069d0 <dhcp_option>
 8006c40:	4607      	mov	r7, r0
 8006c42:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006c46:	69e0      	ldr	r0, [r4, #28]
 8006c48:	f002 f959 	bl	8008efe <lwip_htonl>
 8006c4c:	9903      	ldr	r1, [sp, #12]
 8006c4e:	4602      	mov	r2, r0
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7ff fef3 	bl	8006a3c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006c56:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006c58:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	2237      	movs	r2, #55	; 0x37
 8006c60:	f7ff feb6 	bl	80069d0 <dhcp_option>
 8006c64:	9903      	ldr	r1, [sp, #12]
 8006c66:	f8ad 0016 	strh.w	r0, [sp, #22]
 8006c6a:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006c6c:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006c70:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006c74:	9103      	str	r1, [sp, #12]
 8006c76:	f7ff fec9 	bl	8006a0c <dhcp_option_byte>
 8006c7a:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006c7c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006c80:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006c82:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006c86:	d1f1      	bne.n	8006c6c <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006c88:	462a      	mov	r2, r5
 8006c8a:	f7ff ff8f 	bl	8006bac <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8006c8e:	4815      	ldr	r0, [pc, #84]	; (8006ce4 <dhcp_reboot+0xfc>)
 8006c90:	9600      	str	r6, [sp, #0]
 8006c92:	4a15      	ldr	r2, [pc, #84]	; (8006ce8 <dhcp_reboot+0x100>)
 8006c94:	6840      	ldr	r0, [r0, #4]
 8006c96:	2343      	movs	r3, #67	; 0x43
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f006 fdcd 	bl	800d838 <udp_sendto_if>
 8006c9e:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	f002 fe8f 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 8006ca6:	79a3      	ldrb	r3, [r4, #6]
 8006ca8:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006caa:	bf1c      	itt	ne
 8006cac:	3301      	addne	r3, #1
 8006cae:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8006cb0:	79a3      	ldrb	r3, [r4, #6]
 8006cb2:	2b09      	cmp	r3, #9
 8006cb4:	bf9f      	itttt	ls
 8006cb6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006cba:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8006cbe:	00db      	lslls	r3, r3, #3
 8006cc0:	b29b      	uxthls	r3, r3
 8006cc2:	bf88      	it	hi
 8006cc4:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006cc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8006ccc:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006cce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd6:	8123      	strh	r3, [r4, #8]
}
 8006cd8:	b006      	add	sp, #24
 8006cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8006cde:	f04f 36ff 	mov.w	r6, #4294967295
 8006ce2:	e7e0      	b.n	8006ca6 <dhcp_reboot+0xbe>
 8006ce4:	20006664 	.word	0x20006664
 8006ce8:	0800f998 	.word	0x0800f998
 8006cec:	0800f994 	.word	0x0800f994

08006cf0 <dhcp_select>:
{
 8006cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8006cf4:	4607      	mov	r7, r0
{
 8006cf6:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8006cf8:	b960      	cbnz	r0, 8006d14 <dhcp_select+0x24>
 8006cfa:	4b52      	ldr	r3, [pc, #328]	; (8006e44 <dhcp_select+0x154>)
 8006cfc:	4952      	ldr	r1, [pc, #328]	; (8006e48 <dhcp_select+0x158>)
 8006cfe:	4853      	ldr	r0, [pc, #332]	; (8006e4c <dhcp_select+0x15c>)
 8006d00:	f240 1277 	movw	r2, #375	; 0x177
 8006d04:	f007 f8c6 	bl	800de94 <iprintf>
 8006d08:	f06f 050f 	mvn.w	r5, #15
}
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	b005      	add	sp, #20
 8006d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8006d14:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8006d16:	b94c      	cbnz	r4, 8006d2c <dhcp_select+0x3c>
 8006d18:	4b4a      	ldr	r3, [pc, #296]	; (8006e44 <dhcp_select+0x154>)
 8006d1a:	494d      	ldr	r1, [pc, #308]	; (8006e50 <dhcp_select+0x160>)
 8006d1c:	484b      	ldr	r0, [pc, #300]	; (8006e4c <dhcp_select+0x15c>)
 8006d1e:	f240 1279 	movw	r2, #377	; 0x179
 8006d22:	f007 f8b7 	bl	800de94 <iprintf>
 8006d26:	f06f 0505 	mvn.w	r5, #5
 8006d2a:	e7ef      	b.n	8006d0c <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff fe2a 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8006d34:	f10d 030e 	add.w	r3, sp, #14
 8006d38:	2203      	movs	r2, #3
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f7ff fea1 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 8006d42:	4606      	mov	r6, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d07a      	beq.n	8006e3e <dhcp_select+0x14e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006d48:	6845      	ldr	r5, [r0, #4]
 8006d4a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006d4e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8006e60 <dhcp_select+0x170>
 8006d52:	35f0      	adds	r5, #240	; 0xf0
 8006d54:	2302      	movs	r3, #2
 8006d56:	2239      	movs	r2, #57	; 0x39
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7ff fe39 	bl	80069d0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006d5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006d60:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7ff fe17 	bl	8006998 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	2232      	movs	r2, #50	; 0x32
 8006d6e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006d70:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8006d74:	f7ff fe2c 	bl	80069d0 <dhcp_option>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006d7e:	69e0      	ldr	r0, [r4, #28]
 8006d80:	f002 f8bd 	bl	8008efe <lwip_htonl>
 8006d84:	4629      	mov	r1, r5
 8006d86:	4602      	mov	r2, r0
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f7ff fe57 	bl	8006a3c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006d8e:	2304      	movs	r3, #4
 8006d90:	2236      	movs	r2, #54	; 0x36
 8006d92:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8006d94:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8006d98:	f7ff fe1a 	bl	80069d0 <dhcp_option>
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006da2:	69a0      	ldr	r0, [r4, #24]
 8006da4:	f002 f8ab 	bl	8008efe <lwip_htonl>
 8006da8:	4629      	mov	r1, r5
 8006daa:	4602      	mov	r2, r0
 8006dac:	4640      	mov	r0, r8
 8006dae:	f7ff fe45 	bl	8006a3c <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006db2:	2303      	movs	r3, #3
 8006db4:	2237      	movs	r2, #55	; 0x37
 8006db6:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8006db8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006dbc:	f7ff fe08 	bl	80069d0 <dhcp_option>
 8006dc0:	f04f 0803 	mov.w	r8, #3
 8006dc4:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006dc8:	f819 2b01 	ldrb.w	r2, [r9], #1
 8006dcc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	f7ff fe1b 	bl	8006a0c <dhcp_option_byte>
 8006dd6:	f108 38ff 	add.w	r8, r8, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006dda:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006dde:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006de2:	d1f1      	bne.n	8006dc8 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006de4:	4629      	mov	r1, r5
 8006de6:	4632      	mov	r2, r6
 8006de8:	f7ff fee0 	bl	8006bac <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006dec:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <dhcp_select+0x164>)
 8006dee:	481a      	ldr	r0, [pc, #104]	; (8006e58 <dhcp_select+0x168>)
 8006df0:	4a1a      	ldr	r2, [pc, #104]	; (8006e5c <dhcp_select+0x16c>)
 8006df2:	e9cd 7300 	strd	r7, r3, [sp]
 8006df6:	4631      	mov	r1, r6
 8006df8:	6840      	ldr	r0, [r0, #4]
 8006dfa:	2343      	movs	r3, #67	; 0x43
 8006dfc:	f006 fc84 	bl	800d708 <udp_sendto_if_src>
 8006e00:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8006e02:	4630      	mov	r0, r6
 8006e04:	f002 fdde 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 8006e08:	79a3      	ldrb	r3, [r4, #6]
 8006e0a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006e0c:	bf1c      	itt	ne
 8006e0e:	3301      	addne	r3, #1
 8006e10:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006e12:	79a2      	ldrb	r2, [r4, #6]
 8006e14:	2a05      	cmp	r2, #5
 8006e16:	bf9f      	itttt	ls
 8006e18:	2301      	movls	r3, #1
 8006e1a:	4093      	lslls	r3, r2
 8006e1c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006e20:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8006e24:	bf9a      	itte	ls
 8006e26:	00db      	lslls	r3, r3, #3
 8006e28:	b29b      	uxthls	r3, r3
 8006e2a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006e2e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006e32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3a:	8123      	strh	r3, [r4, #8]
  return result;
 8006e3c:	e766      	b.n	8006d0c <dhcp_select+0x1c>
    result = ERR_MEM;
 8006e3e:	f04f 35ff 	mov.w	r5, #4294967295
 8006e42:	e7e1      	b.n	8006e08 <dhcp_select+0x118>
 8006e44:	0801b4dc 	.word	0x0801b4dc
 8006e48:	0801b6c4 	.word	0x0801b6c4
 8006e4c:	0801a4e1 	.word	0x0801a4e1
 8006e50:	0801b6df 	.word	0x0801b6df
 8006e54:	0800f99c 	.word	0x0800f99c
 8006e58:	20006664 	.word	0x20006664
 8006e5c:	0800f998 	.word	0x0800f998
 8006e60:	0800f994 	.word	0x0800f994

08006e64 <dhcp_discover>:
{
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006e68:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006e6a:	2300      	movs	r3, #0
{
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8006e70:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8006e72:	2106      	movs	r1, #6
 8006e74:	4620      	mov	r0, r4
 8006e76:	f7ff fd87 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8006e7a:	f10d 0316 	add.w	r3, sp, #22
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4621      	mov	r1, r4
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7ff fdfe 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 8006e88:	4605      	mov	r5, r0
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d039      	beq.n	8006f02 <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006e8e:	6841      	ldr	r1, [r0, #4]
 8006e90:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006e94:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006f4c <dhcp_discover+0xe8>
 8006e98:	31f0      	adds	r1, #240	; 0xf0
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	2239      	movs	r2, #57	; 0x39
 8006e9e:	9103      	str	r1, [sp, #12]
 8006ea0:	f7ff fd96 	bl	80069d0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006ea4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8006ea6:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8006ea8:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006eac:	f7ff fd74 	bl	8006998 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006eb0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8006eb2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	2237      	movs	r2, #55	; 0x37
 8006eba:	f7ff fd89 	bl	80069d0 <dhcp_option>
 8006ebe:	9903      	ldr	r1, [sp, #12]
 8006ec0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8006ec4:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006ec6:	f818 2b01 	ldrb.w	r2, [r8], #1
 8006eca:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8006ece:	9103      	str	r1, [sp, #12]
 8006ed0:	f7ff fd9c 	bl	8006a0c <dhcp_option_byte>
 8006ed4:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006ed6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8006eda:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8006edc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8006ee0:	d1f1      	bne.n	8006ec6 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	f7ff fe62 	bl	8006bac <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <dhcp_discover+0xdc>)
 8006eea:	4816      	ldr	r0, [pc, #88]	; (8006f44 <dhcp_discover+0xe0>)
 8006eec:	4a16      	ldr	r2, [pc, #88]	; (8006f48 <dhcp_discover+0xe4>)
 8006eee:	e9cd 6300 	strd	r6, r3, [sp]
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	6840      	ldr	r0, [r0, #4]
 8006ef6:	2343      	movs	r3, #67	; 0x43
 8006ef8:	f006 fc06 	bl	800d708 <udp_sendto_if_src>
    pbuf_free(p_out);
 8006efc:	4628      	mov	r0, r5
 8006efe:	f002 fd61 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 8006f02:	79a3      	ldrb	r3, [r4, #6]
 8006f04:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006f06:	bf1c      	itt	ne
 8006f08:	3301      	addne	r3, #1
 8006f0a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8006f0c:	79a2      	ldrb	r2, [r4, #6]
 8006f0e:	2a05      	cmp	r2, #5
 8006f10:	bf9f      	itttt	ls
 8006f12:	2301      	movls	r3, #1
 8006f14:	4093      	lslls	r3, r2
 8006f16:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8006f1a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8006f1e:	bf9a      	itte	ls
 8006f20:	00db      	lslls	r3, r3, #3
 8006f22:	b29b      	uxthls	r3, r3
 8006f24:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006f28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8006f2c:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006f2e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8006f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f36:	8123      	strh	r3, [r4, #8]
}
 8006f38:	b006      	add	sp, #24
 8006f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f3e:	bf00      	nop
 8006f40:	0800f99c 	.word	0x0800f99c
 8006f44:	20006664 	.word	0x20006664
 8006f48:	0800f998 	.word	0x0800f998
 8006f4c:	0800f994 	.word	0x0800f994

08006f50 <dhcp_check>:
{
 8006f50:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8006f52:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8006f54:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8006f56:	2108      	movs	r1, #8
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fd15 	bl	8006988 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f104 011c 	add.w	r1, r4, #28
 8006f64:	4628      	mov	r0, r5
 8006f66:	f001 f821 	bl	8007fac <etharp_query>
  if (dhcp->tries < 255) {
 8006f6a:	79a3      	ldrb	r3, [r4, #6]
 8006f6c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8006f6e:	bf1c      	itt	ne
 8006f70:	3301      	addne	r3, #1
 8006f72:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8006f74:	2301      	movs	r3, #1
 8006f76:	8123      	strh	r3, [r4, #8]
}
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
	...

08006f7c <dhcp_bind>:
{
 8006f7c:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8006f7e:	4605      	mov	r5, r0
 8006f80:	b940      	cbnz	r0, 8006f94 <dhcp_bind+0x18>
 8006f82:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <dhcp_bind+0xfc>)
 8006f84:	493d      	ldr	r1, [pc, #244]	; (800707c <dhcp_bind+0x100>)
 8006f86:	f240 4215 	movw	r2, #1045	; 0x415
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006f8a:	483d      	ldr	r0, [pc, #244]	; (8007080 <dhcp_bind+0x104>)
 8006f8c:	f006 ff82 	bl	800de94 <iprintf>
}
 8006f90:	b002      	add	sp, #8
 8006f92:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 8006f94:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8006f96:	b920      	cbnz	r0, 8006fa2 <dhcp_bind+0x26>
 8006f98:	4b37      	ldr	r3, [pc, #220]	; (8007078 <dhcp_bind+0xfc>)
 8006f9a:	493a      	ldr	r1, [pc, #232]	; (8007084 <dhcp_bind+0x108>)
 8006f9c:	f240 4217 	movw	r2, #1047	; 0x417
 8006fa0:	e7f3      	b.n	8006f8a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8006fa6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	d00c      	beq.n	8006fc6 <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006fac:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006fae:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8006fb2:	bf2e      	itee	cs
 8006fb4:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006fb8:	223c      	movcc	r2, #60	; 0x3c
 8006fba:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 8006fbe:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d042      	beq.n	800704a <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
 8006fc4:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8006fc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006fc8:	1c59      	adds	r1, r3, #1
 8006fca:	d00e      	beq.n	8006fea <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006fcc:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006fce:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8006fd2:	bf2e      	itee	cs
 8006fd4:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006fd8:	223c      	movcc	r2, #60	; 0x3c
 8006fda:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8006fde:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d035      	beq.n	8007050 <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 8006fe4:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8006fe6:	8943      	ldrh	r3, [r0, #10]
 8006fe8:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8006fea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006fec:	1c5a      	adds	r2, r3, #1
 8006fee:	d00d      	beq.n	800700c <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006ff0:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8006ff2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8006ff6:	bf2e      	itee	cs
 8006ff8:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8006ffc:	223c      	movcc	r2, #60	; 0x3c
 8006ffe:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8007002:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8007004:	b33b      	cbz	r3, 8007056 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 8007006:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8007008:	8983      	ldrh	r3, [r0, #12]
 800700a:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800700c:	8983      	ldrh	r3, [r0, #12]
 800700e:	8942      	ldrh	r2, [r0, #10]
 8007010:	429a      	cmp	r2, r3
 8007012:	d302      	bcc.n	800701a <dhcp_bind+0x9e>
 8007014:	b10b      	cbz	r3, 800701a <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 800701a:	79c3      	ldrb	r3, [r0, #7]
 800701c:	b1f3      	cbz	r3, 800705c <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800701e:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8007020:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8007022:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007024:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8007026:	b92b      	cbnz	r3, 8007034 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8007028:	69c3      	ldr	r3, [r0, #28]
 800702a:	9a00      	ldr	r2, [sp, #0]
 800702c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800702e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007032:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8007034:	210a      	movs	r1, #10
 8007036:	f7ff fca7 	bl	8006988 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800703a:	ab01      	add	r3, sp, #4
 800703c:	f100 011c 	add.w	r1, r0, #28
 8007040:	466a      	mov	r2, sp
 8007042:	4628      	mov	r0, r5
 8007044:	f002 fb00 	bl	8009648 <netif_set_addr>
 8007048:	e7a2      	b.n	8006f90 <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 800704a:	2301      	movs	r3, #1
 800704c:	8283      	strh	r3, [r0, #20]
 800704e:	e7ba      	b.n	8006fc6 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 8007050:	2301      	movs	r3, #1
 8007052:	8143      	strh	r3, [r0, #10]
 8007054:	e7c7      	b.n	8006fe6 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 8007056:	2301      	movs	r3, #1
 8007058:	8183      	strh	r3, [r0, #12]
 800705a:	e7d5      	b.n	8007008 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 800705c:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8007060:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 8007062:	2a00      	cmp	r2, #0
 8007064:	db01      	blt.n	800706a <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8007066:	23ff      	movs	r3, #255	; 0xff
 8007068:	e7da      	b.n	8007020 <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 800706a:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800706c:	bf8c      	ite	hi
 800706e:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8007072:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8007076:	e7d3      	b.n	8007020 <dhcp_bind+0xa4>
 8007078:	0801b4dc 	.word	0x0801b4dc
 800707c:	0801b6f9 	.word	0x0801b6f9
 8007080:	0801a4e1 	.word	0x0801a4e1
 8007084:	0801b712 	.word	0x0801b712

08007088 <dhcp_inc_pcb_refcount>:
{
 8007088:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800708a:	4c14      	ldr	r4, [pc, #80]	; (80070dc <dhcp_inc_pcb_refcount+0x54>)
 800708c:	7a23      	ldrb	r3, [r4, #8]
 800708e:	b9eb      	cbnz	r3, 80070cc <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	b12b      	cbz	r3, 80070a0 <dhcp_inc_pcb_refcount+0x18>
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <dhcp_inc_pcb_refcount+0x58>)
 8007096:	4913      	ldr	r1, [pc, #76]	; (80070e4 <dhcp_inc_pcb_refcount+0x5c>)
 8007098:	4813      	ldr	r0, [pc, #76]	; (80070e8 <dhcp_inc_pcb_refcount+0x60>)
 800709a:	22e5      	movs	r2, #229	; 0xe5
 800709c:	f006 fefa 	bl	800de94 <iprintf>
    dhcp_pcb = udp_new();
 80070a0:	f006 fcdc 	bl	800da5c <udp_new>
 80070a4:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 80070a6:	b1b0      	cbz	r0, 80070d6 <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80070a8:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80070aa:	4910      	ldr	r1, [pc, #64]	; (80070ec <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80070ac:	f042 0220 	orr.w	r2, r2, #32
 80070b0:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80070b2:	2244      	movs	r2, #68	; 0x44
 80070b4:	f006 fac0 	bl	800d638 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80070b8:	490c      	ldr	r1, [pc, #48]	; (80070ec <dhcp_inc_pcb_refcount+0x64>)
 80070ba:	6860      	ldr	r0, [r4, #4]
 80070bc:	2243      	movs	r2, #67	; 0x43
 80070be:	f006 fc59 	bl	800d974 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80070c2:	490b      	ldr	r1, [pc, #44]	; (80070f0 <dhcp_inc_pcb_refcount+0x68>)
 80070c4:	6860      	ldr	r0, [r4, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f006 fc90 	bl	800d9ec <udp_recv>
  dhcp_pcb_refcount++;
 80070cc:	7a23      	ldrb	r3, [r4, #8]
 80070ce:	3301      	adds	r3, #1
 80070d0:	7223      	strb	r3, [r4, #8]
  return ERR_OK;
 80070d2:	2000      	movs	r0, #0
}
 80070d4:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 80070d6:	f04f 30ff 	mov.w	r0, #4294967295
 80070da:	e7fb      	b.n	80070d4 <dhcp_inc_pcb_refcount+0x4c>
 80070dc:	20006664 	.word	0x20006664
 80070e0:	0801b4dc 	.word	0x0801b4dc
 80070e4:	0801b72a 	.word	0x0801b72a
 80070e8:	0801a4e1 	.word	0x0801a4e1
 80070ec:	0800f99c 	.word	0x0800f99c
 80070f0:	08007195 	.word	0x08007195

080070f4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80070f4:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80070f6:	4d17      	ldr	r5, [pc, #92]	; (8007154 <dhcp_handle_ack.isra.0+0x60>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80070f8:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80070fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80070fe:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8007100:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8007102:	b113      	cbz	r3, 800710a <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8007104:	4b14      	ldr	r3, [pc, #80]	; (8007158 <dhcp_handle_ack.isra.0+0x64>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800710a:	792b      	ldrb	r3, [r5, #4]
 800710c:	b1d3      	cbz	r3, 8007144 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <dhcp_handle_ack.isra.0+0x64>)
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8007114:	796b      	ldrb	r3, [r5, #5]
 8007116:	b1c3      	cbz	r3, 800714a <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8007118:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <dhcp_handle_ack.isra.0+0x64>)
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800711e:	690b      	ldr	r3, [r1, #16]
 8007120:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8007122:	79ab      	ldrb	r3, [r5, #6]
 8007124:	b12b      	cbz	r3, 8007132 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <dhcp_handle_ack.isra.0+0x64>)
 8007128:	6998      	ldr	r0, [r3, #24]
 800712a:	f001 fee8 	bl	8008efe <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800712e:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8007130:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 8007132:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8007134:	79eb      	ldrb	r3, [r5, #7]
 8007136:	b123      	cbz	r3, 8007142 <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <dhcp_handle_ack.isra.0+0x64>)
 800713a:	69d8      	ldr	r0, [r3, #28]
 800713c:	f001 fedf 	bl	8008efe <lwip_htonl>
 8007140:	6260      	str	r0, [r4, #36]	; 0x24
}
 8007142:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8007144:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	e7e3      	b.n	8007112 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800714a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800714c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	e7e3      	b.n	800711c <dhcp_handle_ack.isra.0+0x28>
 8007154:	2000e45c 	.word	0x2000e45c
 8007158:	2000e464 	.word	0x2000e464

0800715c <dhcp_dec_pcb_refcount>:
{
 800715c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800715e:	4c09      	ldr	r4, [pc, #36]	; (8007184 <dhcp_dec_pcb_refcount+0x28>)
 8007160:	7a23      	ldrb	r3, [r4, #8]
 8007162:	b92b      	cbnz	r3, 8007170 <dhcp_dec_pcb_refcount+0x14>
 8007164:	4b08      	ldr	r3, [pc, #32]	; (8007188 <dhcp_dec_pcb_refcount+0x2c>)
 8007166:	4909      	ldr	r1, [pc, #36]	; (800718c <dhcp_dec_pcb_refcount+0x30>)
 8007168:	4809      	ldr	r0, [pc, #36]	; (8007190 <dhcp_dec_pcb_refcount+0x34>)
 800716a:	22ff      	movs	r2, #255	; 0xff
 800716c:	f006 fe92 	bl	800de94 <iprintf>
  dhcp_pcb_refcount--;
 8007170:	7a25      	ldrb	r5, [r4, #8]
 8007172:	3d01      	subs	r5, #1
 8007174:	b2ed      	uxtb	r5, r5
 8007176:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8007178:	b91d      	cbnz	r5, 8007182 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 800717a:	6860      	ldr	r0, [r4, #4]
 800717c:	f006 fc48 	bl	800da10 <udp_remove>
    dhcp_pcb = NULL;
 8007180:	6065      	str	r5, [r4, #4]
}
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20006664 	.word	0x20006664
 8007188:	0801b4dc 	.word	0x0801b4dc
 800718c:	0801b74f 	.word	0x0801b74f
 8007190:	0801a4e1 	.word	0x0801a4e1

08007194 <dhcp_recv>:
{
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8007198:	4bb2      	ldr	r3, [pc, #712]	; (8007464 <dhcp_recv+0x2d0>)
 800719a:	685d      	ldr	r5, [r3, #4]
{
 800719c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800719e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071a0:	9301      	str	r3, [sp, #4]
{
 80071a2:	4693      	mov	fp, r2
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03c      	beq.n	8007222 <dhcp_recv+0x8e>
 80071a8:	791b      	ldrb	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d039      	beq.n	8007222 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80071ae:	8953      	ldrh	r3, [r2, #10]
 80071b0:	2b2b      	cmp	r3, #43	; 0x2b
 80071b2:	d936      	bls.n	8007222 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80071b4:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80071b6:	7813      	ldrb	r3, [r2, #0]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d132      	bne.n	8007222 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80071bc:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 80071c0:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80071c4:	f102 011c 	add.w	r1, r2, #28
 80071c8:	2300      	movs	r3, #0
 80071ca:	b2de      	uxtb	r6, r3
 80071cc:	42b4      	cmp	r4, r6
 80071ce:	d901      	bls.n	80071d4 <dhcp_recv+0x40>
 80071d0:	2b06      	cmp	r3, #6
 80071d2:	d11e      	bne.n	8007212 <dhcp_recv+0x7e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80071d4:	6850      	ldr	r0, [r2, #4]
 80071d6:	f001 fe92 	bl	8008efe <lwip_htonl>
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4298      	cmp	r0, r3
 80071e0:	d11f      	bne.n	8007222 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 80071e2:	4ba1      	ldr	r3, [pc, #644]	; (8007468 <dhcp_recv+0x2d4>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80071e8:	f8bb 100a 	ldrh.w	r1, [fp, #10]
  dhcp_clear_all_options(dhcp);
 80071ec:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 80071ee:	292b      	cmp	r1, #43	; 0x2b
 80071f0:	d917      	bls.n	8007222 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 80071f2:	f8bb a008 	ldrh.w	sl, [fp, #8]
  int parse_sname_as_options = 0;
 80071f6:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 80071f8:	f04f 09f0 	mov.w	r9, #240	; 0xf0
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80071fc:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 80071fe:	46d8      	mov	r8, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 8007200:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007204:	454b      	cmp	r3, r9
 8007206:	d912      	bls.n	800722e <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 8007208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800720c:	9305      	str	r3, [sp, #20]
 800720e:	464c      	mov	r4, r9
 8007210:	e0a9      	b.n	8007366 <dhcp_recv+0x1d2>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8007212:	f810 7b01 	ldrb.w	r7, [r0], #1
 8007216:	f811 6b01 	ldrb.w	r6, [r1], #1
 800721a:	42b7      	cmp	r7, r6
 800721c:	f103 0301 	add.w	r3, r3, #1
 8007220:	d0d3      	beq.n	80071ca <dhcp_recv+0x36>
  pbuf_free(p);
 8007222:	4658      	mov	r0, fp
 8007224:	f002 fbce 	bl	80099c4 <pbuf_free>
}
 8007228:	b009      	add	sp, #36	; 0x24
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 800722e:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 8007232:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8007236:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 800723a:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800723e:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8007242:	f1b8 0f00 	cmp.w	r8, #0
 8007246:	d1db      	bne.n	8007200 <dhcp_recv+0x6c>
 8007248:	e7eb      	b.n	8007222 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 800724a:	1ca3      	adds	r3, r4, #2
 800724c:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 800724e:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 8007250:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 8007252:	d3e6      	bcc.n	8007222 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 8007254:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007258:	1c60      	adds	r0, r4, #1
 800725a:	4298      	cmp	r0, r3
 800725c:	da16      	bge.n	800728c <dhcp_recv+0xf8>
      len = options[offset + 1];
 800725e:	9b05      	ldr	r3, [sp, #20]
 8007260:	4423      	add	r3, r4
 8007262:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8007264:	2a3b      	cmp	r2, #59	; 0x3b
 8007266:	d855      	bhi.n	8007314 <dhcp_recv+0x180>
 8007268:	2a32      	cmp	r2, #50	; 0x32
 800726a:	f200 818a 	bhi.w	8007582 <dhcp_recv+0x3ee>
 800726e:	2a01      	cmp	r2, #1
 8007270:	d014      	beq.n	800729c <dhcp_recv+0x108>
 8007272:	2a03      	cmp	r2, #3
 8007274:	d14e      	bne.n	8007314 <dhcp_recv+0x180>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8007276:	2b03      	cmp	r3, #3
 8007278:	f200 8171 	bhi.w	800755e <dhcp_recv+0x3ca>
 800727c:	4b7b      	ldr	r3, [pc, #492]	; (800746c <dhcp_recv+0x2d8>)
 800727e:	497c      	ldr	r1, [pc, #496]	; (8007470 <dhcp_recv+0x2dc>)
 8007280:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007284:	487b      	ldr	r0, [pc, #492]	; (8007474 <dhcp_recv+0x2e0>)
 8007286:	f006 fe05 	bl	800de94 <iprintf>
 800728a:	e7ca      	b.n	8007222 <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800728c:	f8d8 3000 	ldr.w	r3, [r8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80ff 	beq.w	8007494 <dhcp_recv+0x300>
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	e7e3      	b.n	8007264 <dhcp_recv+0xd0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800729c:	2b04      	cmp	r3, #4
 800729e:	f000 815b 	beq.w	8007558 <dhcp_recv+0x3c4>
 80072a2:	4b72      	ldr	r3, [pc, #456]	; (800746c <dhcp_recv+0x2d8>)
 80072a4:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80072a8:	4973      	ldr	r1, [pc, #460]	; (8007478 <dhcp_recv+0x2e4>)
 80072aa:	e7eb      	b.n	8007284 <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	f000 8159 	beq.w	8007564 <dhcp_recv+0x3d0>
 80072b2:	4b6e      	ldr	r3, [pc, #440]	; (800746c <dhcp_recv+0x2d8>)
 80072b4:	f240 6241 	movw	r2, #1601	; 0x641
 80072b8:	e7f6      	b.n	80072a8 <dhcp_recv+0x114>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d004      	beq.n	80072c8 <dhcp_recv+0x134>
 80072be:	4b6b      	ldr	r3, [pc, #428]	; (800746c <dhcp_recv+0x2d8>)
 80072c0:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80072c4:	496d      	ldr	r1, [pc, #436]	; (800747c <dhcp_recv+0x2e8>)
 80072c6:	e7dd      	b.n	8007284 <dhcp_recv+0xf0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80072c8:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 80072cc:	f000 814d 	beq.w	800756a <dhcp_recv+0x3d6>
 80072d0:	4b66      	ldr	r3, [pc, #408]	; (800746c <dhcp_recv+0x2d8>)
 80072d2:	496b      	ldr	r1, [pc, #428]	; (8007480 <dhcp_recv+0x2ec>)
 80072d4:	f240 6251 	movw	r2, #1617	; 0x651
 80072d8:	e7d4      	b.n	8007284 <dhcp_recv+0xf0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80072da:	2b01      	cmp	r3, #1
 80072dc:	f000 814b 	beq.w	8007576 <dhcp_recv+0x3e2>
 80072e0:	4b62      	ldr	r3, [pc, #392]	; (800746c <dhcp_recv+0x2d8>)
 80072e2:	f240 6255 	movw	r2, #1621	; 0x655
 80072e6:	e7ed      	b.n	80072c4 <dhcp_recv+0x130>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	f000 8141 	beq.w	8007570 <dhcp_recv+0x3dc>
 80072ee:	4b5f      	ldr	r3, [pc, #380]	; (800746c <dhcp_recv+0x2d8>)
 80072f0:	f240 6259 	movw	r2, #1625	; 0x659
 80072f4:	e7d8      	b.n	80072a8 <dhcp_recv+0x114>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	f000 813d 	beq.w	8007576 <dhcp_recv+0x3e2>
 80072fc:	4b5b      	ldr	r3, [pc, #364]	; (800746c <dhcp_recv+0x2d8>)
 80072fe:	f240 625d 	movw	r2, #1629	; 0x65d
 8007302:	e7d1      	b.n	80072a8 <dhcp_recv+0x114>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8007304:	2b04      	cmp	r3, #4
 8007306:	f000 8139 	beq.w	800757c <dhcp_recv+0x3e8>
 800730a:	4b58      	ldr	r3, [pc, #352]	; (800746c <dhcp_recv+0x2d8>)
 800730c:	f240 6261 	movw	r2, #1633	; 0x661
 8007310:	e7ca      	b.n	80072a8 <dhcp_recv+0x114>
    switch (op) {
 8007312:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8007314:	2a00      	cmp	r2, #0
 8007316:	f040 80cc 	bne.w	80074b2 <dhcp_recv+0x31e>
      offset++;
 800731a:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 800731c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007320:	42a3      	cmp	r3, r4
 8007322:	d820      	bhi.n	8007366 <dhcp_recv+0x1d2>
      offset = (u16_t)(offset - q->len);
 8007324:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8007326:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 800732a:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 800732c:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8007330:	4554      	cmp	r4, sl
 8007332:	f4bf af76 	bcs.w	8007222 <dhcp_recv+0x8e>
        q = q->next;
 8007336:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800733a:	f1b8 0f00 	cmp.w	r8, #0
 800733e:	d10f      	bne.n	8007360 <dhcp_recv+0x1cc>
 8007340:	4b4a      	ldr	r3, [pc, #296]	; (800746c <dhcp_recv+0x2d8>)
 8007342:	4950      	ldr	r1, [pc, #320]	; (8007484 <dhcp_recv+0x2f0>)
 8007344:	f240 629d 	movw	r2, #1693	; 0x69d
 8007348:	e79c      	b.n	8007284 <dhcp_recv+0xf0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800734a:	2e01      	cmp	r6, #1
 800734c:	d004      	beq.n	8007358 <dhcp_recv+0x1c4>
 800734e:	4b47      	ldr	r3, [pc, #284]	; (800746c <dhcp_recv+0x2d8>)
 8007350:	494d      	ldr	r1, [pc, #308]	; (8007488 <dhcp_recv+0x2f4>)
 8007352:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8007356:	e795      	b.n	8007284 <dhcp_recv+0xf0>
            value = ((u8_t *)&value)[0];
 8007358:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	e0d9      	b.n	8007514 <dhcp_recv+0x380>
        options = (u8_t *)q->payload;
 8007360:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007364:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8007366:	4554      	cmp	r4, sl
 8007368:	d204      	bcs.n	8007374 <dhcp_recv+0x1e0>
 800736a:	9b05      	ldr	r3, [sp, #20]
 800736c:	5d1a      	ldrb	r2, [r3, r4]
 800736e:	2aff      	cmp	r2, #255	; 0xff
 8007370:	f47f af6b 	bne.w	800724a <dhcp_recv+0xb6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b9db      	cbnz	r3, 80073b2 <dhcp_recv+0x21e>
  } else if (parse_sname_as_options) {
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	bb13      	cbnz	r3, 80073c4 <dhcp_recv+0x230>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800737e:	9b02      	ldr	r3, [sp, #8]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f43f af4d 	beq.w	8007222 <dhcp_recv+0x8e>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8007388:	4a40      	ldr	r2, [pc, #256]	; (800748c <dhcp_recv+0x2f8>)
  msg_in = (struct dhcp_msg *)p->payload;
 800738a:	f8db 1004 	ldr.w	r1, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800738e:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8007390:	2b05      	cmp	r3, #5
 8007392:	d132      	bne.n	80073fa <dhcp_recv+0x266>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	795b      	ldrb	r3, [r3, #5]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d123      	bne.n	80073e4 <dhcp_recv+0x250>
      dhcp_handle_ack(netif, msg_in);
 800739c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800739e:	f7ff fea9 	bl	80070f4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80073a2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80073a6:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 80073a8:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80073aa:	d523      	bpl.n	80073f4 <dhcp_recv+0x260>
        dhcp_check(netif);
 80073ac:	f7ff fdd0 	bl	8006f50 <dhcp_check>
 80073b0:	e737      	b.n	8007222 <dhcp_recv+0x8e>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80073b2:	4b36      	ldr	r3, [pc, #216]	; (800748c <dhcp_recv+0x2f8>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80073b4:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80073b6:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80073b8:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 80073ba:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80073bc:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80073be:	d00c      	beq.n	80073da <dhcp_recv+0x246>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d106      	bne.n	80073d2 <dhcp_recv+0x23e>
    parse_sname_as_options = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80073c8:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80073cc:	f04f 092c 	mov.w	r9, #44	; 0x2c
 80073d0:	e715      	b.n	80071fe <dhcp_recv+0x6a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d1d1      	bne.n	800737a <dhcp_recv+0x1e6>
      parse_sname_as_options = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80073da:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80073de:	f04f 096c 	mov.w	r9, #108	; 0x6c
 80073e2:	e70c      	b.n	80071fe <dhcp_recv+0x6a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80073e4:	3b03      	subs	r3, #3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	f63f af1b 	bhi.w	8007222 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 80073ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80073ee:	f7ff fe81 	bl	80070f4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7ff fdc2 	bl	8006f7c <dhcp_bind>
 80073f8:	e713      	b.n	8007222 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 80073fa:	2b06      	cmp	r3, #6
 80073fc:	d115      	bne.n	800742a <dhcp_recv+0x296>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8007402:	1eda      	subs	r2, r3, #3
 8007404:	2a02      	cmp	r2, #2
 8007406:	d902      	bls.n	800740e <dhcp_recv+0x27a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8007408:	2b01      	cmp	r3, #1
 800740a:	f47f af0a 	bne.w	8007222 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800740e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007410:	210c      	movs	r1, #12
 8007412:	f7ff fab9 	bl	8006988 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007416:	4b1e      	ldr	r3, [pc, #120]	; (8007490 <dhcp_recv+0x2fc>)
 8007418:	4628      	mov	r0, r5
 800741a:	461a      	mov	r2, r3
 800741c:	4619      	mov	r1, r3
 800741e:	f002 f913 	bl	8009648 <netif_set_addr>
  dhcp_discover(netif);
 8007422:	4628      	mov	r0, r5
 8007424:	f7ff fd1e 	bl	8006e64 <dhcp_discover>
}
 8007428:	e6fb      	b.n	8007222 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800742a:	2b02      	cmp	r3, #2
 800742c:	f47f aef9 	bne.w	8007222 <dhcp_recv+0x8e>
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	795b      	ldrb	r3, [r3, #5]
 8007434:	2b06      	cmp	r3, #6
 8007436:	f47f aef4 	bne.w	8007222 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800743a:	9b02      	ldr	r3, [sp, #8]
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f43f aeef 	beq.w	8007222 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007444:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800744a:	6890      	ldr	r0, [r2, #8]
 800744c:	9101      	str	r1, [sp, #4]
 800744e:	f001 fd56 	bl	8008efe <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007452:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007454:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 800745a:	4628      	mov	r0, r5
 800745c:	f7ff fc48 	bl	8006cf0 <dhcp_select>
 8007460:	e6df      	b.n	8007222 <dhcp_recv+0x8e>
 8007462:	bf00      	nop
 8007464:	2000e484 	.word	0x2000e484
 8007468:	2000e45c 	.word	0x2000e45c
 800746c:	0801b4dc 	.word	0x0801b4dc
 8007470:	0801b77c 	.word	0x0801b77c
 8007474:	0801a4e1 	.word	0x0801a4e1
 8007478:	0801b773 	.word	0x0801b773
 800747c:	0801b78e 	.word	0x0801b78e
 8007480:	0801b797 	.word	0x0801b797
 8007484:	0801b7d2 	.word	0x0801b7d2
 8007488:	0801b7bf 	.word	0x0801b7bf
 800748c:	2000e464 	.word	0x2000e464
 8007490:	0800f99c 	.word	0x0800f99c
    switch (op) {
 8007494:	2a3b      	cmp	r2, #59	; 0x3b
 8007496:	f63f af3d 	bhi.w	8007314 <dhcp_recv+0x180>
 800749a:	2a32      	cmp	r2, #50	; 0x32
 800749c:	d842      	bhi.n	8007524 <dhcp_recv+0x390>
 800749e:	2a01      	cmp	r2, #1
 80074a0:	f43f aeff 	beq.w	80072a2 <dhcp_recv+0x10e>
 80074a4:	2a03      	cmp	r2, #3
 80074a6:	f43f aee9 	beq.w	800727c <dhcp_recv+0xe8>
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	f43f af35 	beq.w	800731a <dhcp_recv+0x186>
 80074b0:	2300      	movs	r3, #0
 80074b2:	f04f 37ff 	mov.w	r7, #4294967295
 80074b6:	2600      	movs	r6, #0
      if (offset + len + 2 > 0xFFFF) {
 80074b8:	441c      	add	r4, r3
 80074ba:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80074be:	4294      	cmp	r4, r2
 80074c0:	f73f aeaf 	bgt.w	8007222 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 80074c4:	9a04      	ldr	r2, [sp, #16]
 80074c6:	18d4      	adds	r4, r2, r3
 80074c8:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80074ca:	2e00      	cmp	r6, #0
 80074cc:	f43f af26 	beq.w	800731c <dhcp_recv+0x188>
        u32_t value = 0;
 80074d0:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80074d2:	2f07      	cmp	r7, #7
        u32_t value = 0;
 80074d4:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80074d6:	d906      	bls.n	80074e6 <dhcp_recv+0x352>
 80074d8:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <dhcp_recv+0x424>)
 80074da:	4938      	ldr	r1, [pc, #224]	; (80075bc <dhcp_recv+0x428>)
 80074dc:	4838      	ldr	r0, [pc, #224]	; (80075c0 <dhcp_recv+0x42c>)
 80074de:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80074e2:	f006 fcd7 	bl	800de94 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	5ddb      	ldrb	r3, [r3, r7]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f47f af16 	bne.w	800731c <dhcp_recv+0x188>
          copy_len = LWIP_MIN(decode_len, 4);
 80074f0:	b2b2      	uxth	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80074f2:	9b04      	ldr	r3, [sp, #16]
 80074f4:	9204      	str	r2, [sp, #16]
 80074f6:	a907      	add	r1, sp, #28
 80074f8:	4640      	mov	r0, r8
 80074fa:	f002 fca1 	bl	8009e40 <pbuf_copy_partial>
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	4282      	cmp	r2, r0
 8007502:	f47f ae8e 	bne.w	8007222 <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8007506:	2e04      	cmp	r6, #4
 8007508:	f47f af1f 	bne.w	800734a <dhcp_recv+0x1b6>
            value = lwip_ntohl(value);
 800750c:	9807      	ldr	r0, [sp, #28]
 800750e:	f001 fcf6 	bl	8008efe <lwip_htonl>
 8007512:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8007514:	9a02      	ldr	r2, [sp, #8]
 8007516:	2301      	movs	r3, #1
 8007518:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800751a:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <dhcp_recv+0x430>)
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8007522:	e6fb      	b.n	800731c <dhcp_recv+0x188>
 8007524:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8007528:	2b08      	cmp	r3, #8
 800752a:	f63f aef2 	bhi.w	8007312 <dhcp_recv+0x17e>
 800752e:	a101      	add	r1, pc, #4	; (adr r1, 8007534 <dhcp_recv+0x3a0>)
 8007530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007534:	080072b3 	.word	0x080072b3
 8007538:	080072bf 	.word	0x080072bf
 800753c:	080072e1 	.word	0x080072e1
 8007540:	080072ef 	.word	0x080072ef
 8007544:	08007313 	.word	0x08007313
 8007548:	08007313 	.word	0x08007313
 800754c:	08007313 	.word	0x08007313
 8007550:	080072fd 	.word	0x080072fd
 8007554:	0800730b 	.word	0x0800730b
 8007558:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800755a:	2706      	movs	r7, #6
 800755c:	e7ac      	b.n	80074b8 <dhcp_recv+0x324>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800755e:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8007560:	2604      	movs	r6, #4
 8007562:	e7a9      	b.n	80074b8 <dhcp_recv+0x324>
 8007564:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8007566:	2703      	movs	r7, #3
 8007568:	e7a6      	b.n	80074b8 <dhcp_recv+0x324>
    decode_len = len;
 800756a:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800756c:	2700      	movs	r7, #0
 800756e:	e7a3      	b.n	80074b8 <dhcp_recv+0x324>
 8007570:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8007572:	2702      	movs	r7, #2
 8007574:	e7a0      	b.n	80074b8 <dhcp_recv+0x324>
 8007576:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8007578:	461f      	mov	r7, r3
 800757a:	e79d      	b.n	80074b8 <dhcp_recv+0x324>
 800757c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800757e:	2705      	movs	r7, #5
    if (op == DHCP_OPTION_PAD) {
 8007580:	e79a      	b.n	80074b8 <dhcp_recv+0x324>
 8007582:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8007586:	2908      	cmp	r1, #8
 8007588:	f63f aec4 	bhi.w	8007314 <dhcp_recv+0x180>
 800758c:	a601      	add	r6, pc, #4	; (adr r6, 8007594 <dhcp_recv+0x400>)
 800758e:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8007592:	bf00      	nop
 8007594:	080072ad 	.word	0x080072ad
 8007598:	080072bb 	.word	0x080072bb
 800759c:	080072db 	.word	0x080072db
 80075a0:	080072e9 	.word	0x080072e9
 80075a4:	08007315 	.word	0x08007315
 80075a8:	08007315 	.word	0x08007315
 80075ac:	08007315 	.word	0x08007315
 80075b0:	080072f7 	.word	0x080072f7
 80075b4:	08007305 	.word	0x08007305
 80075b8:	0801b4dc 	.word	0x0801b4dc
 80075bc:	0801b7ae 	.word	0x0801b7ae
 80075c0:	0801a4e1 	.word	0x0801a4e1
 80075c4:	2000e464 	.word	0x2000e464

080075c8 <dhcp_arp_reply>:
{
 80075c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80075ca:	4606      	mov	r6, r0
{
 80075cc:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80075ce:	b940      	cbnz	r0, 80075e2 <dhcp_arp_reply+0x1a>
 80075d0:	4b27      	ldr	r3, [pc, #156]	; (8007670 <dhcp_arp_reply+0xa8>)
 80075d2:	4928      	ldr	r1, [pc, #160]	; (8007674 <dhcp_arp_reply+0xac>)
 80075d4:	4828      	ldr	r0, [pc, #160]	; (8007678 <dhcp_arp_reply+0xb0>)
 80075d6:	f240 328b 	movw	r2, #907	; 0x38b
 80075da:	f006 fc5b 	bl	800de94 <iprintf>
}
 80075de:	b007      	add	sp, #28
 80075e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 80075e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80075e4:	2c00      	cmp	r4, #0
 80075e6:	d0fa      	beq.n	80075de <dhcp_arp_reply+0x16>
 80075e8:	7963      	ldrb	r3, [r4, #5]
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d1f7      	bne.n	80075de <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80075ee:	680a      	ldr	r2, [r1, #0]
 80075f0:	69e3      	ldr	r3, [r4, #28]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d1f3      	bne.n	80075de <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80075f6:	210c      	movs	r1, #12
 80075f8:	4620      	mov	r0, r4
 80075fa:	f7ff f9c5 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80075fe:	f10d 0316 	add.w	r3, sp, #22
 8007602:	2204      	movs	r2, #4
 8007604:	4621      	mov	r1, r4
 8007606:	4630      	mov	r0, r6
 8007608:	f7ff fa3c 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 800760c:	4605      	mov	r5, r0
 800760e:	b330      	cbz	r0, 800765e <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007610:	6841      	ldr	r1, [r0, #4]
 8007612:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007616:	2304      	movs	r3, #4
 8007618:	31f0      	adds	r1, #240	; 0xf0
 800761a:	2232      	movs	r2, #50	; 0x32
 800761c:	9103      	str	r1, [sp, #12]
 800761e:	f7ff f9d7 	bl	80069d0 <dhcp_option>
 8007622:	4607      	mov	r7, r0
 8007624:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007628:	69e0      	ldr	r0, [r4, #28]
 800762a:	f001 fc68 	bl	8008efe <lwip_htonl>
 800762e:	9903      	ldr	r1, [sp, #12]
 8007630:	4602      	mov	r2, r0
 8007632:	4638      	mov	r0, r7
 8007634:	f7ff fa02 	bl	8006a3c <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007638:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800763a:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800763e:	462a      	mov	r2, r5
 8007640:	f7ff fab4 	bl	8006bac <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007644:	4b0d      	ldr	r3, [pc, #52]	; (800767c <dhcp_arp_reply+0xb4>)
 8007646:	480e      	ldr	r0, [pc, #56]	; (8007680 <dhcp_arp_reply+0xb8>)
 8007648:	4a0e      	ldr	r2, [pc, #56]	; (8007684 <dhcp_arp_reply+0xbc>)
 800764a:	e9cd 6300 	strd	r6, r3, [sp]
 800764e:	4629      	mov	r1, r5
 8007650:	6840      	ldr	r0, [r0, #4]
 8007652:	2343      	movs	r3, #67	; 0x43
 8007654:	f006 f858 	bl	800d708 <udp_sendto_if_src>
    pbuf_free(p_out);
 8007658:	4628      	mov	r0, r5
 800765a:	f002 f9b3 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 800765e:	79a3      	ldrb	r3, [r4, #6]
 8007660:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007662:	bf1c      	itt	ne
 8007664:	3301      	addne	r3, #1
 8007666:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007668:	2314      	movs	r3, #20
 800766a:	8123      	strh	r3, [r4, #8]
  return result;
 800766c:	e7b7      	b.n	80075de <dhcp_arp_reply+0x16>
 800766e:	bf00      	nop
 8007670:	0801b4dc 	.word	0x0801b4dc
 8007674:	0801b704 	.word	0x0801b704
 8007678:	0801a4e1 	.word	0x0801a4e1
 800767c:	0800f99c 	.word	0x0800f99c
 8007680:	20006664 	.word	0x20006664
 8007684:	0800f998 	.word	0x0800f998

08007688 <dhcp_renew>:
{
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800768c:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800768e:	b086      	sub	sp, #24
 8007690:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8007692:	2105      	movs	r1, #5
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff f977 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800769a:	f10d 0316 	add.w	r3, sp, #22
 800769e:	2203      	movs	r2, #3
 80076a0:	4621      	mov	r1, r4
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff f9ee 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 80076a8:	4605      	mov	r5, r0
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d055      	beq.n	800775a <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80076ae:	6841      	ldr	r1, [r0, #4]
 80076b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80076b4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007764 <dhcp_renew+0xdc>
 80076b8:	31f0      	adds	r1, #240	; 0xf0
 80076ba:	2302      	movs	r3, #2
 80076bc:	2239      	movs	r2, #57	; 0x39
 80076be:	9103      	str	r1, [sp, #12]
 80076c0:	f7ff f986 	bl	80069d0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80076c4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80076c6:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80076c8:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80076cc:	f7ff f964 	bl	8006998 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80076d0:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80076d2:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80076d6:	2303      	movs	r3, #3
 80076d8:	2237      	movs	r2, #55	; 0x37
 80076da:	f7ff f979 	bl	80069d0 <dhcp_option>
 80076de:	9903      	ldr	r1, [sp, #12]
 80076e0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80076e4:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80076e6:	f818 2b01 	ldrb.w	r2, [r8], #1
 80076ea:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80076ee:	9103      	str	r1, [sp, #12]
 80076f0:	f7ff f98c 	bl	8006a0c <dhcp_option_byte>
 80076f4:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80076f6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80076fa:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80076fc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007700:	d1f1      	bne.n	80076e6 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007702:	462a      	mov	r2, r5
 8007704:	f7ff fa52 	bl	8006bac <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007708:	4815      	ldr	r0, [pc, #84]	; (8007760 <dhcp_renew+0xd8>)
 800770a:	9600      	str	r6, [sp, #0]
 800770c:	6840      	ldr	r0, [r0, #4]
 800770e:	2343      	movs	r3, #67	; 0x43
 8007710:	f104 0218 	add.w	r2, r4, #24
 8007714:	4629      	mov	r1, r5
 8007716:	f006 f88f 	bl	800d838 <udp_sendto_if>
 800771a:	4606      	mov	r6, r0
    pbuf_free(p_out);
 800771c:	4628      	mov	r0, r5
 800771e:	f002 f951 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 8007722:	79a3      	ldrb	r3, [r4, #6]
 8007724:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8007726:	bf1c      	itt	ne
 8007728:	3301      	addne	r3, #1
 800772a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800772c:	79a3      	ldrb	r3, [r4, #6]
 800772e:	2b09      	cmp	r3, #9
 8007730:	bf9f      	itttt	ls
 8007732:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8007736:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800773a:	011b      	lslls	r3, r3, #4
 800773c:	b29b      	uxthls	r3, r3
 800773e:	bf88      	it	hi
 8007740:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007744:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8007748:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800774a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800774e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007752:	8123      	strh	r3, [r4, #8]
}
 8007754:	b006      	add	sp, #24
 8007756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800775a:	f04f 36ff 	mov.w	r6, #4294967295
 800775e:	e7e0      	b.n	8007722 <dhcp_renew+0x9a>
 8007760:	20006664 	.word	0x20006664
 8007764:	0800f994 	.word	0x0800f994

08007768 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8007768:	b150      	cbz	r0, 8007780 <dhcp_supplied_address+0x18>
 800776a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800776c:	b140      	cbz	r0, 8007780 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800776e:	7940      	ldrb	r0, [r0, #5]
 8007770:	280a      	cmp	r0, #10
 8007772:	d006      	beq.n	8007782 <dhcp_supplied_address+0x1a>
 8007774:	3804      	subs	r0, #4
 8007776:	2801      	cmp	r0, #1
 8007778:	bf8c      	ite	hi
 800777a:	2000      	movhi	r0, #0
 800777c:	2001      	movls	r0, #1
 800777e:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8007780:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8007782:	2001      	movs	r0, #1
 8007784:	e7fb      	b.n	800777e <dhcp_supplied_address+0x16>
	...

08007788 <dhcp_release_and_stop>:
{
 8007788:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800778a:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800778c:	b087      	sub	sp, #28
 800778e:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8007790:	2c00      	cmp	r4, #0
 8007792:	d050      	beq.n	8007836 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8007794:	7963      	ldrb	r3, [r4, #5]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d04d      	beq.n	8007836 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800779a:	69a3      	ldr	r3, [r4, #24]
 800779c:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800779e:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80077a0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80077a4:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80077a8:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80077ac:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80077ae:	81e3      	strh	r3, [r4, #14]
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 80077b4:	f7ff ffd8 	bl	8007768 <dhcp_supplied_address>
 80077b8:	b368      	cbz	r0, 8007816 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80077ba:	f10d 0312 	add.w	r3, sp, #18
 80077be:	2207      	movs	r2, #7
 80077c0:	4621      	mov	r1, r4
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7ff f95e 	bl	8006a84 <dhcp_create_msg>
    if (p_out != NULL) {
 80077c8:	4605      	mov	r5, r0
 80077ca:	b320      	cbz	r0, 8007816 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80077cc:	6841      	ldr	r1, [r0, #4]
 80077ce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 80077d2:	2304      	movs	r3, #4
 80077d4:	31f0      	adds	r1, #240	; 0xf0
 80077d6:	2236      	movs	r2, #54	; 0x36
 80077d8:	9103      	str	r1, [sp, #12]
 80077da:	f7ff f8f9 	bl	80069d0 <dhcp_option>
 80077de:	4607      	mov	r7, r0
 80077e0:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80077e4:	9805      	ldr	r0, [sp, #20]
 80077e6:	f001 fb8a 	bl	8008efe <lwip_htonl>
 80077ea:	9903      	ldr	r1, [sp, #12]
 80077ec:	4602      	mov	r2, r0
 80077ee:	4638      	mov	r0, r7
 80077f0:	f7ff f924 	bl	8006a3c <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80077f4:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80077f6:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80077fa:	462a      	mov	r2, r5
 80077fc:	f7ff f9d6 	bl	8006bac <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8007800:	480e      	ldr	r0, [pc, #56]	; (800783c <dhcp_release_and_stop+0xb4>)
 8007802:	9600      	str	r6, [sp, #0]
 8007804:	6840      	ldr	r0, [r0, #4]
 8007806:	2343      	movs	r3, #67	; 0x43
 8007808:	aa05      	add	r2, sp, #20
 800780a:	4629      	mov	r1, r5
 800780c:	f006 f814 	bl	800d838 <udp_sendto_if>
      pbuf_free(p_out);
 8007810:	4628      	mov	r0, r5
 8007812:	f002 f8d7 	bl	80099c4 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <dhcp_release_and_stop+0xb8>)
 8007818:	4630      	mov	r0, r6
 800781a:	4619      	mov	r1, r3
 800781c:	461a      	mov	r2, r3
 800781e:	f001 ff13 	bl	8009648 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8007822:	2100      	movs	r1, #0
 8007824:	4620      	mov	r0, r4
 8007826:	f7ff f8af 	bl	8006988 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800782a:	7923      	ldrb	r3, [r4, #4]
 800782c:	b11b      	cbz	r3, 8007836 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800782e:	f7ff fc95 	bl	800715c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	7123      	strb	r3, [r4, #4]
}
 8007836:	b007      	add	sp, #28
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	bf00      	nop
 800783c:	20006664 	.word	0x20006664
 8007840:	0800f99c 	.word	0x0800f99c

08007844 <dhcp_start>:
{
 8007844:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8007846:	4604      	mov	r4, r0
 8007848:	b950      	cbnz	r0, 8007860 <dhcp_start+0x1c>
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <dhcp_start+0x98>)
 800784c:	4924      	ldr	r1, [pc, #144]	; (80078e0 <dhcp_start+0x9c>)
 800784e:	f240 22e7 	movw	r2, #743	; 0x2e7
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007852:	4824      	ldr	r0, [pc, #144]	; (80078e4 <dhcp_start+0xa0>)
 8007854:	f006 fb1e 	bl	800de94 <iprintf>
 8007858:	f06f 020f 	mvn.w	r2, #15
}
 800785c:	4610      	mov	r0, r2
 800785e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8007860:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8007864:	07da      	lsls	r2, r3, #31
 8007866:	d404      	bmi.n	8007872 <dhcp_start+0x2e>
 8007868:	4b1c      	ldr	r3, [pc, #112]	; (80078dc <dhcp_start+0x98>)
 800786a:	491f      	ldr	r1, [pc, #124]	; (80078e8 <dhcp_start+0xa4>)
 800786c:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8007870:	e7ef      	b.n	8007852 <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007872:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8007874:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8007876:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800787a:	d202      	bcs.n	8007882 <dhcp_start+0x3e>
    return ERR_MEM;
 800787c:	f04f 32ff 	mov.w	r2, #4294967295
 8007880:	e7ec      	b.n	800785c <dhcp_start+0x18>
  if (dhcp == NULL) {
 8007882:	b9dd      	cbnz	r5, 80078bc <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8007884:	2034      	movs	r0, #52	; 0x34
 8007886:	f001 fd4d 	bl	8009324 <mem_malloc>
    if (dhcp == NULL) {
 800788a:	4605      	mov	r5, r0
 800788c:	2800      	cmp	r0, #0
 800788e:	d0f5      	beq.n	800787c <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8007890:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8007892:	2234      	movs	r2, #52	; 0x34
 8007894:	2100      	movs	r1, #0
 8007896:	4628      	mov	r0, r5
 8007898:	f006 faf4 	bl	800de84 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800789c:	f7ff fbf4 	bl	8007088 <dhcp_inc_pcb_refcount>
 80078a0:	4602      	mov	r2, r0
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d1ea      	bne.n	800787c <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 80078a6:	2301      	movs	r3, #1
 80078a8:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 80078aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80078ae:	075b      	lsls	r3, r3, #29
 80078b0:	d40a      	bmi.n	80078c8 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80078b2:	2102      	movs	r1, #2
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff f867 	bl	8006988 <dhcp_set_state>
    return ERR_OK;
 80078ba:	e7cf      	b.n	800785c <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 80078bc:	792b      	ldrb	r3, [r5, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0e7      	beq.n	8007892 <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80078c2:	f7ff fc4b 	bl	800715c <dhcp_dec_pcb_refcount>
 80078c6:	e7e4      	b.n	8007892 <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7ff facb 	bl	8006e64 <dhcp_discover>
  if (result != ERR_OK) {
 80078ce:	4602      	mov	r2, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d0c3      	beq.n	800785c <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7ff ff57 	bl	8007788 <dhcp_release_and_stop>
 80078da:	e7cf      	b.n	800787c <dhcp_start+0x38>
 80078dc:	0801b4dc 	.word	0x0801b4dc
 80078e0:	0801b704 	.word	0x0801b704
 80078e4:	0801a4e1 	.word	0x0801a4e1
 80078e8:	0801b81d 	.word	0x0801b81d

080078ec <dhcp_coarse_tmr>:
{
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 80078f0:	4b57      	ldr	r3, [pc, #348]	; (8007a50 <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80078f2:	4f58      	ldr	r7, [pc, #352]	; (8007a54 <dhcp_coarse_tmr+0x168>)
  NETIF_FOREACH(netif) {
 80078f4:	681d      	ldr	r5, [r3, #0]
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80078f6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8007a58 <dhcp_coarse_tmr+0x16c>
{
 80078fa:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80078fc:	f240 2619 	movw	r6, #537	; 0x219
  NETIF_FOREACH(netif) {
 8007900:	b915      	cbnz	r5, 8007908 <dhcp_coarse_tmr+0x1c>
}
 8007902:	b007      	add	sp, #28
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007908:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800790a:	b17c      	cbz	r4, 800792c <dhcp_coarse_tmr+0x40>
 800790c:	7963      	ldrb	r3, [r4, #5]
 800790e:	b16b      	cbz	r3, 800792c <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8007910:	8aa1      	ldrh	r1, [r4, #20]
 8007912:	b169      	cbz	r1, 8007930 <dhcp_coarse_tmr+0x44>
 8007914:	8a62      	ldrh	r2, [r4, #18]
 8007916:	3201      	adds	r2, #1
 8007918:	b292      	uxth	r2, r2
 800791a:	4291      	cmp	r1, r2
 800791c:	8262      	strh	r2, [r4, #18]
 800791e:	d107      	bne.n	8007930 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 8007920:	4628      	mov	r0, r5
 8007922:	f7ff ff31 	bl	8007788 <dhcp_release_and_stop>
        dhcp_start(netif);
 8007926:	4628      	mov	r0, r5
 8007928:	f7ff ff8c 	bl	8007844 <dhcp_start>
  NETIF_FOREACH(netif) {
 800792c:	682d      	ldr	r5, [r5, #0]
 800792e:	e7e7      	b.n	8007900 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8007930:	8a22      	ldrh	r2, [r4, #16]
 8007932:	2a00      	cmp	r2, #0
 8007934:	d072      	beq.n	8007a1c <dhcp_coarse_tmr+0x130>
 8007936:	1e51      	subs	r1, r2, #1
 8007938:	2a01      	cmp	r2, #1
 800793a:	8221      	strh	r1, [r4, #16]
 800793c:	d16e      	bne.n	8007a1c <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800793e:	3b01      	subs	r3, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b09      	cmp	r3, #9
 8007944:	d8f2      	bhi.n	800792c <dhcp_coarse_tmr+0x40>
 8007946:	fa26 f303 	lsr.w	r3, r6, r3
 800794a:	07db      	lsls	r3, r3, #31
 800794c:	d5ee      	bpl.n	800792c <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800794e:	2104      	movs	r1, #4
 8007950:	4620      	mov	r0, r4
 8007952:	f7ff f819 	bl	8006988 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007956:	f10d 0316 	add.w	r3, sp, #22
 800795a:	2203      	movs	r2, #3
 800795c:	4621      	mov	r1, r4
 800795e:	4628      	mov	r0, r5
 8007960:	f7ff f890 	bl	8006a84 <dhcp_create_msg>
  if (p_out != NULL) {
 8007964:	4681      	mov	r9, r0
 8007966:	2800      	cmp	r0, #0
 8007968:	d038      	beq.n	80079dc <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800796a:	6841      	ldr	r1, [r0, #4]
 800796c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8007970:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8007a5c <dhcp_coarse_tmr+0x170>
 8007974:	31f0      	adds	r1, #240	; 0xf0
 8007976:	2302      	movs	r3, #2
 8007978:	2239      	movs	r2, #57	; 0x39
 800797a:	9103      	str	r1, [sp, #12]
 800797c:	f7ff f828 	bl	80069d0 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007980:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8007982:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007984:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007988:	f7ff f806 	bl	8006998 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800798c:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800798e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007992:	2303      	movs	r3, #3
 8007994:	2237      	movs	r2, #55	; 0x37
 8007996:	f7ff f81b 	bl	80069d0 <dhcp_option>
 800799a:	9903      	ldr	r1, [sp, #12]
 800799c:	f8ad 0016 	strh.w	r0, [sp, #22]
 80079a0:	f04f 0a03 	mov.w	sl, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80079a4:	f81b 2b01 	ldrb.w	r2, [fp], #1
 80079a8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80079ac:	9103      	str	r1, [sp, #12]
 80079ae:	f7ff f82d 	bl	8006a0c <dhcp_option_byte>
 80079b2:	f10a 3aff 	add.w	sl, sl, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80079b6:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 80079ba:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80079bc:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80079c0:	d1f0      	bne.n	80079a4 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80079c2:	464a      	mov	r2, r9
 80079c4:	f7ff f8f2 	bl	8006bac <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	9500      	str	r5, [sp, #0]
 80079cc:	2343      	movs	r3, #67	; 0x43
 80079ce:	4642      	mov	r2, r8
 80079d0:	4649      	mov	r1, r9
 80079d2:	f005 ff31 	bl	800d838 <udp_sendto_if>
    pbuf_free(p_out);
 80079d6:	4648      	mov	r0, r9
 80079d8:	f001 fff4 	bl	80099c4 <pbuf_free>
  if (dhcp->tries < 255) {
 80079dc:	79a3      	ldrb	r3, [r4, #6]
 80079de:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80079e0:	bf1c      	itt	ne
 80079e2:	3301      	addne	r3, #1
 80079e4:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80079e6:	79a3      	ldrb	r3, [r4, #6]
 80079e8:	2b09      	cmp	r3, #9
 80079ea:	bf9f      	itttt	ls
 80079ec:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80079f0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80079f4:	00db      	lslls	r3, r3, #3
 80079f6:	b29b      	uxthls	r3, r3
 80079f8:	bf88      	it	hi
 80079fa:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80079fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007a02:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007a06:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007a0a:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007a0c:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007a0e:	8aa3      	ldrh	r3, [r4, #20]
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	dd8a      	ble.n	800792c <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8007a16:	105b      	asrs	r3, r3, #1
 8007a18:	8223      	strh	r3, [r4, #16]
 8007a1a:	e787      	b.n	800792c <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8007a1c:	89e2      	ldrh	r2, [r4, #14]
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d084      	beq.n	800792c <dhcp_coarse_tmr+0x40>
 8007a22:	1e51      	subs	r1, r2, #1
 8007a24:	2a01      	cmp	r2, #1
 8007a26:	81e1      	strh	r1, [r4, #14]
 8007a28:	d180      	bne.n	800792c <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8007a2a:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	d002      	beq.n	8007a38 <dhcp_coarse_tmr+0x14c>
 8007a32:	2b0a      	cmp	r3, #10
 8007a34:	f47f af7a 	bne.w	800792c <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7ff fe25 	bl	8007688 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	8a62      	ldrh	r2, [r4, #18]
 8007a42:	1a9b      	subs	r3, r3, r2
 8007a44:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8007a46:	bfc4      	itt	gt
 8007a48:	105b      	asrgt	r3, r3, #1
 8007a4a:	81e3      	strhgt	r3, [r4, #14]
 8007a4c:	e76e      	b.n	800792c <dhcp_coarse_tmr+0x40>
 8007a4e:	bf00      	nop
 8007a50:	200149fc 	.word	0x200149fc
 8007a54:	20006664 	.word	0x20006664
 8007a58:	0800f998 	.word	0x0800f998
 8007a5c:	0800f994 	.word	0x0800f994

08007a60 <dhcp_fine_tmr>:
{
 8007a60:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <dhcp_fine_tmr+0x7c>)
 8007a64:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 8007a66:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8007a68:	b904      	cbnz	r4, 8007a6c <dhcp_fine_tmr+0xc>
}
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8007a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8007a6e:	b123      	cbz	r3, 8007a7a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8007a70:	891a      	ldrh	r2, [r3, #8]
 8007a72:	2a01      	cmp	r2, #1
 8007a74:	d903      	bls.n	8007a7e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8007a76:	3a01      	subs	r2, #1
 8007a78:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8007a7a:	6824      	ldr	r4, [r4, #0]
 8007a7c:	e7f4      	b.n	8007a68 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8007a7e:	d1fc      	bne.n	8007a7a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007a80:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8007a82:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8007a84:	2a0c      	cmp	r2, #12
 8007a86:	d001      	beq.n	8007a8c <dhcp_fine_tmr+0x2c>
 8007a88:	2a06      	cmp	r2, #6
 8007a8a:	d103      	bne.n	8007a94 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8007a8c:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8007a8e:	f7ff f9e9 	bl	8006e64 <dhcp_discover>
 8007a92:	e7f2      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8007a94:	2a01      	cmp	r2, #1
 8007a96:	d10c      	bne.n	8007ab2 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8007a98:	799b      	ldrb	r3, [r3, #6]
 8007a9a:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 8007a9c:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8007a9e:	d802      	bhi.n	8007aa6 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8007aa0:	f7ff f926 	bl	8006cf0 <dhcp_select>
 8007aa4:	e7e9      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8007aa6:	f7ff fe6f 	bl	8007788 <dhcp_release_and_stop>
      dhcp_start(netif);
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff feca 	bl	8007844 <dhcp_start>
 8007ab0:	e7e3      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8007ab2:	2a08      	cmp	r2, #8
 8007ab4:	d109      	bne.n	8007aca <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8007ab6:	799b      	ldrb	r3, [r3, #6]
 8007ab8:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 8007aba:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8007abc:	d802      	bhi.n	8007ac4 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8007abe:	f7ff fa47 	bl	8006f50 <dhcp_check>
 8007ac2:	e7da      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8007ac4:	f7ff fa5a 	bl	8006f7c <dhcp_bind>
 8007ac8:	e7d7      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8007aca:	2a03      	cmp	r2, #3
 8007acc:	d1d5      	bne.n	8007a7a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8007ace:	799b      	ldrb	r3, [r3, #6]
 8007ad0:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 8007ad2:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8007ad4:	d8db      	bhi.n	8007a8e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8007ad6:	f7ff f887 	bl	8006be8 <dhcp_reboot>
 8007ada:	e7ce      	b.n	8007a7a <dhcp_fine_tmr+0x1a>
 8007adc:	200149fc 	.word	0x200149fc

08007ae0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007ae0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8007ae2:	2618      	movs	r6, #24
 8007ae4:	4d07      	ldr	r5, [pc, #28]	; (8007b04 <etharp_free_entry+0x24>)
 8007ae6:	4346      	muls	r6, r0
{
 8007ae8:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8007aea:	59a8      	ldr	r0, [r5, r6]
 8007aec:	b118      	cbz	r0, 8007af6 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007aee:	f001 ff69 	bl	80099c4 <pbuf_free>
    arp_table[i].q = NULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007af6:	2018      	movs	r0, #24
 8007af8:	fb00 5404 	mla	r4, r0, r4, r5
 8007afc:	2300      	movs	r3, #0
 8007afe:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	bf00      	nop
 8007b04:	20006670 	.word	0x20006670

08007b08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8007b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8007b0e:	f04f 0e0a 	mov.w	lr, #10
{
 8007b12:	e9cd 2100 	strd	r2, r1, [sp]
 8007b16:	4a3f      	ldr	r2, [pc, #252]	; (8007c14 <etharp_find_entry+0x10c>)
 8007b18:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007b1a:	4699      	mov	r9, r3
 8007b1c:	469b      	mov	fp, r3
 8007b1e:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8007b20:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007b22:	4675      	mov	r5, lr
 8007b24:	46f0      	mov	r8, lr
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007b26:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8007b28:	f892 a014 	ldrb.w	sl, [r2, #20]
 8007b2c:	b218      	sxth	r0, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007b2e:	d11a      	bne.n	8007b66 <etharp_find_entry+0x5e>
 8007b30:	f1ba 0f00 	cmp.w	sl, #0
 8007b34:	d05e      	beq.n	8007bf4 <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8007b36:	b156      	cbz	r6, 8007b4e <etharp_find_entry+0x46>
 8007b38:	6837      	ldr	r7, [r6, #0]
 8007b3a:	6851      	ldr	r1, [r2, #4]
 8007b3c:	428f      	cmp	r7, r1
 8007b3e:	d106      	bne.n	8007b4e <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8007b40:	9900      	ldr	r1, [sp, #0]
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d049      	beq.n	8007bda <etharp_find_entry+0xd2>
 8007b46:	6891      	ldr	r1, [r2, #8]
 8007b48:	9f00      	ldr	r7, [sp, #0]
 8007b4a:	42b9      	cmp	r1, r7
 8007b4c:	d045      	beq.n	8007bda <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8007b4e:	f1ba 0f01 	cmp.w	sl, #1
 8007b52:	8a51      	ldrh	r1, [r2, #18]
 8007b54:	d149      	bne.n	8007bea <etharp_find_entry+0xe2>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8007b56:	6817      	ldr	r7, [r2, #0]
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	d041      	beq.n	8007be0 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8007b5c:	458c      	cmp	ip, r1
 8007b5e:	d805      	bhi.n	8007b6c <etharp_find_entry+0x64>
 8007b60:	468c      	mov	ip, r1
 8007b62:	4686      	mov	lr, r0
 8007b64:	e002      	b.n	8007b6c <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007b66:	f1ba 0f00 	cmp.w	sl, #0
 8007b6a:	d1e4      	bne.n	8007b36 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2b0a      	cmp	r3, #10
 8007b70:	f102 0218 	add.w	r2, r2, #24
 8007b74:	d1d7      	bne.n	8007b26 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007b76:	9b01      	ldr	r3, [sp, #4]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d143      	bne.n	8007c04 <etharp_find_entry+0xfc>
 8007b7c:	2c0a      	cmp	r4, #10
 8007b7e:	d111      	bne.n	8007ba4 <etharp_find_entry+0x9c>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8007b80:	2d0a      	cmp	r5, #10
 8007b82:	d039      	beq.n	8007bf8 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8007b84:	2318      	movs	r3, #24
 8007b86:	4a23      	ldr	r2, [pc, #140]	; (8007c14 <etharp_find_entry+0x10c>)
 8007b88:	436b      	muls	r3, r5
 8007b8a:	58d3      	ldr	r3, [r2, r3]
 8007b8c:	b133      	cbz	r3, 8007b9c <etharp_find_entry+0x94>
 8007b8e:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <etharp_find_entry+0x110>)
 8007b90:	4922      	ldr	r1, [pc, #136]	; (8007c1c <etharp_find_entry+0x114>)
 8007b92:	4823      	ldr	r0, [pc, #140]	; (8007c20 <etharp_find_entry+0x118>)
 8007b94:	f240 126d 	movw	r2, #365	; 0x16d
 8007b98:	f006 f97c 	bl	800de94 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f7ff ff9f 	bl	8007ae0 <etharp_free_entry>
 8007ba2:	462c      	mov	r4, r5
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8007ba4:	4d1b      	ldr	r5, [pc, #108]	; (8007c14 <etharp_find_entry+0x10c>)
 8007ba6:	2318      	movs	r3, #24
 8007ba8:	fb03 5304 	mla	r3, r3, r4, r5
 8007bac:	7d1b      	ldrb	r3, [r3, #20]
 8007bae:	b133      	cbz	r3, 8007bbe <etharp_find_entry+0xb6>
 8007bb0:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <etharp_find_entry+0x110>)
 8007bb2:	491c      	ldr	r1, [pc, #112]	; (8007c24 <etharp_find_entry+0x11c>)
 8007bb4:	481a      	ldr	r0, [pc, #104]	; (8007c20 <etharp_find_entry+0x118>)
 8007bb6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007bba:	f006 f96b 	bl	800de94 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8007bbe:	b126      	cbz	r6, 8007bca <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007bc0:	2318      	movs	r3, #24
 8007bc2:	fb03 5304 	mla	r3, r3, r4, r5
 8007bc6:	6832      	ldr	r2, [r6, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8007bca:	2318      	movs	r3, #24
 8007bcc:	fb03 5504 	mla	r5, r3, r4, r5
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	826b      	strh	r3, [r5, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8007bd4:	9b00      	ldr	r3, [sp, #0]
 8007bd6:	60ab      	str	r3, [r5, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8007bd8:	4620      	mov	r0, r4
}
 8007bda:	b003      	add	sp, #12
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8007be0:	458b      	cmp	fp, r1
 8007be2:	d8c3      	bhi.n	8007b6c <etharp_find_entry+0x64>
 8007be4:	468b      	mov	fp, r1
 8007be6:	4680      	mov	r8, r0
 8007be8:	e7c0      	b.n	8007b6c <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8007bea:	4589      	cmp	r9, r1
 8007bec:	d8be      	bhi.n	8007b6c <etharp_find_entry+0x64>
 8007bee:	4689      	mov	r9, r1
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	e7bb      	b.n	8007b6c <etharp_find_entry+0x64>
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	e7b9      	b.n	8007b6c <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8007bf8:	f1b8 0f0a 	cmp.w	r8, #10
 8007bfc:	d105      	bne.n	8007c0a <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8007bfe:	f1be 0f0a 	cmp.w	lr, #10
 8007c02:	d104      	bne.n	8007c0e <etharp_find_entry+0x106>
    return (s16_t)ERR_MEM;
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295
 8007c08:	e7e7      	b.n	8007bda <etharp_find_entry+0xd2>
 8007c0a:	4645      	mov	r5, r8
 8007c0c:	e7c6      	b.n	8007b9c <etharp_find_entry+0x94>
 8007c0e:	4675      	mov	r5, lr
 8007c10:	e7c4      	b.n	8007b9c <etharp_find_entry+0x94>
 8007c12:	bf00      	nop
 8007c14:	20006670 	.word	0x20006670
 8007c18:	0801b83e 	.word	0x0801b83e
 8007c1c:	0801b8bf 	.word	0x0801b8bf
 8007c20:	0801a4e1 	.word	0x0801a4e1
 8007c24:	0801b8d6 	.word	0x0801b8d6

08007c28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8007c28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8007c30:	4688      	mov	r8, r1
 8007c32:	4691      	mov	r9, r2
 8007c34:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007c36:	4607      	mov	r7, r0
 8007c38:	b930      	cbnz	r0, 8007c48 <etharp_raw+0x20>
 8007c3a:	4b2d      	ldr	r3, [pc, #180]	; (8007cf0 <etharp_raw+0xc8>)
 8007c3c:	492d      	ldr	r1, [pc, #180]	; (8007cf4 <etharp_raw+0xcc>)
 8007c3e:	482e      	ldr	r0, [pc, #184]	; (8007cf8 <etharp_raw+0xd0>)
 8007c40:	f240 4257 	movw	r2, #1111	; 0x457
 8007c44:	f006 f926 	bl	800de94 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8007c48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007c4c:	211c      	movs	r1, #28
 8007c4e:	200e      	movs	r0, #14
 8007c50:	f001 ff20 	bl	8009a94 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8007c54:	4605      	mov	r5, r0
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d047      	beq.n	8007cea <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8007c5a:	8943      	ldrh	r3, [r0, #10]
 8007c5c:	2b1b      	cmp	r3, #27
 8007c5e:	d806      	bhi.n	8007c6e <etharp_raw+0x46>
 8007c60:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <etharp_raw+0xc8>)
 8007c62:	4926      	ldr	r1, [pc, #152]	; (8007cfc <etharp_raw+0xd4>)
 8007c64:	4824      	ldr	r0, [pc, #144]	; (8007cf8 <etharp_raw+0xd0>)
 8007c66:	f240 4262 	movw	r2, #1122	; 0x462
 8007c6a:	f006 f913 	bl	800de94 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8007c6e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 8007c72:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8007c74:	f001 f940 	bl	8008ef8 <lwip_htons>
 8007c78:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8007c7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d006      	beq.n	8007c90 <etharp_raw+0x68>
 8007c82:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <etharp_raw+0xc8>)
 8007c84:	491e      	ldr	r1, [pc, #120]	; (8007d00 <etharp_raw+0xd8>)
 8007c86:	481c      	ldr	r0, [pc, #112]	; (8007cf8 <etharp_raw+0xd0>)
 8007c88:	f240 4269 	movw	r2, #1129	; 0x469
 8007c8c:	f006 f902 	bl	800de94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	60a3      	str	r3, [r4, #8]
 8007c94:	88b3      	ldrh	r3, [r6, #4]
 8007c96:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8007c98:	f8da 3000 	ldr.w	r3, [sl]
 8007c9c:	f8c4 3012 	str.w	r3, [r4, #18]
 8007ca0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8007ca4:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8007cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007cb8:	2308      	movs	r3, #8
 8007cba:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8007cbc:	2306      	movs	r3, #6
 8007cbe:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8007cc0:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007cc2:	2600      	movs	r6, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8007cc4:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8007cc6:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8007cca:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8007ccc:	70e6      	strb	r6, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8007cce:	4642      	mov	r2, r8
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f005 ff36 	bl	800db48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f001 fe71 	bl	80099c4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8007ce2:	4630      	mov	r0, r6
}
 8007ce4:	b002      	add	sp, #8
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	e7f9      	b.n	8007ce4 <etharp_raw+0xbc>
 8007cf0:	0801b83e 	.word	0x0801b83e
 8007cf4:	0801b704 	.word	0x0801b704
 8007cf8:	0801a4e1 	.word	0x0801a4e1
 8007cfc:	0801b8ff 	.word	0x0801b8ff
 8007d00:	0801b930 	.word	0x0801b930

08007d04 <etharp_cleanup_netif>:
{
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	4d08      	ldr	r5, [pc, #32]	; (8007d28 <etharp_cleanup_netif+0x24>)
 8007d08:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007d0a:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8007d0c:	7d2b      	ldrb	r3, [r5, #20]
 8007d0e:	b12b      	cbz	r3, 8007d1c <etharp_cleanup_netif+0x18>
 8007d10:	68ab      	ldr	r3, [r5, #8]
 8007d12:	42b3      	cmp	r3, r6
 8007d14:	d102      	bne.n	8007d1c <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7ff fee2 	bl	8007ae0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007d1c:	3401      	adds	r4, #1
 8007d1e:	2c0a      	cmp	r4, #10
 8007d20:	f105 0518 	add.w	r5, r5, #24
 8007d24:	d1f2      	bne.n	8007d0c <etharp_cleanup_netif+0x8>
}
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	20006670 	.word	0x20006670

08007d2c <etharp_input>:
{
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	4607      	mov	r7, r0
 8007d32:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8007d34:	460c      	mov	r4, r1
 8007d36:	b949      	cbnz	r1, 8007d4c <etharp_input+0x20>
 8007d38:	4b4c      	ldr	r3, [pc, #304]	; (8007e6c <etharp_input+0x140>)
 8007d3a:	494d      	ldr	r1, [pc, #308]	; (8007e70 <etharp_input+0x144>)
 8007d3c:	484d      	ldr	r0, [pc, #308]	; (8007e74 <etharp_input+0x148>)
 8007d3e:	f240 228a 	movw	r2, #650	; 0x28a
 8007d42:	f006 f8a7 	bl	800de94 <iprintf>
}
 8007d46:	b008      	add	sp, #32
 8007d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8007d4c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8007d4e:	882b      	ldrh	r3, [r5, #0]
 8007d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d54:	d108      	bne.n	8007d68 <etharp_input+0x3c>
 8007d56:	792b      	ldrb	r3, [r5, #4]
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	d105      	bne.n	8007d68 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8007d5c:	796b      	ldrb	r3, [r5, #5]
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d102      	bne.n	8007d68 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8007d62:	886b      	ldrh	r3, [r5, #2]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d003      	beq.n	8007d70 <etharp_input+0x44>
  pbuf_free(p);
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f001 fe2b 	bl	80099c4 <pbuf_free>
 8007d6e:	e7ea      	b.n	8007d46 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d70:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8007d72:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8007d76:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8007d78:	f105 0808 	add.w	r8, r5, #8
 8007d7c:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	d05f      	beq.n	8007e42 <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8007d82:	1af3      	subs	r3, r6, r3
 8007d84:	425e      	negs	r6, r3
 8007d86:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007d88:	f1c6 0a02 	rsb	sl, r6, #2
 8007d8c:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8007d90:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007d94:	2b06      	cmp	r3, #6
 8007d96:	d006      	beq.n	8007da6 <etharp_input+0x7a>
 8007d98:	4b34      	ldr	r3, [pc, #208]	; (8007e6c <etharp_input+0x140>)
 8007d9a:	4937      	ldr	r1, [pc, #220]	; (8007e78 <etharp_input+0x14c>)
 8007d9c:	4835      	ldr	r0, [pc, #212]	; (8007e74 <etharp_input+0x148>)
 8007d9e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8007da2:	f006 f877 	bl	800de94 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8007da6:	9807      	ldr	r0, [sp, #28]
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d03e      	beq.n	8007e2a <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007dac:	4621      	mov	r1, r4
 8007dae:	f000 fcb2 	bl	8008716 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8007db2:	4681      	mov	r9, r0
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d138      	bne.n	8007e2a <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8007db8:	9b07      	ldr	r3, [sp, #28]
 8007dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8007dbe:	2be0      	cmp	r3, #224	; 0xe0
 8007dc0:	d033      	beq.n	8007e2a <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	a807      	add	r0, sp, #28
 8007dc8:	f7ff fe9e 	bl	8007b08 <etharp_find_entry>
  if (i < 0) {
 8007dcc:	1e03      	subs	r3, r0, #0
 8007dce:	db2c      	blt.n	8007e2a <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8007dd0:	4a2a      	ldr	r2, [pc, #168]	; (8007e7c <etharp_input+0x150>)
 8007dd2:	2018      	movs	r0, #24
 8007dd4:	fb00 fc03 	mul.w	ip, r0, r3
 8007dd8:	eb02 010c 	add.w	r1, r2, ip
 8007ddc:	f04f 0e02 	mov.w	lr, #2
 8007de0:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007de4:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8007de8:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8007dea:	fb13 e300 	smlabb	r3, r3, r0, lr
 8007dee:	f8d8 0000 	ldr.w	r0, [r8]
 8007df2:	50d0      	str	r0, [r2, r3]
 8007df4:	eb02 0e03 	add.w	lr, r2, r3
 8007df8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007dfc:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8007e00:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8007e04:	f852 100c 	ldr.w	r1, [r2, ip]
 8007e08:	b179      	cbz	r1, 8007e2a <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8007e0e:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8007e12:	4620      	mov	r0, r4
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8007e1a:	4643      	mov	r3, r8
 8007e1c:	9105      	str	r1, [sp, #20]
 8007e1e:	f005 fe93 	bl	800db48 <ethernet_output>
    pbuf_free(p);
 8007e22:	9905      	ldr	r1, [sp, #20]
 8007e24:	4608      	mov	r0, r1
 8007e26:	f001 fdcd 	bl	80099c4 <pbuf_free>
  switch (hdr->opcode) {
 8007e2a:	88eb      	ldrh	r3, [r5, #6]
 8007e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e30:	d00a      	beq.n	8007e48 <etharp_input+0x11c>
 8007e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e36:	d197      	bne.n	8007d68 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8007e38:	a907      	add	r1, sp, #28
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff fbc4 	bl	80075c8 <dhcp_arp_reply>
      break;
 8007e40:	e792      	b.n	8007d68 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8007e42:	f04f 0a02 	mov.w	sl, #2
 8007e46:	e7a3      	b.n	8007d90 <etharp_input+0x64>
      if (for_us) {
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	d08d      	beq.n	8007d68 <etharp_input+0x3c>
        etharp_raw(netif,
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	9203      	str	r2, [sp, #12]
 8007e50:	aa07      	add	r2, sp, #28
 8007e52:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8007e56:	f104 032a 	add.w	r3, r4, #42	; 0x2a
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8007e5a:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8007e5c:	9200      	str	r2, [sp, #0]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4642      	mov	r2, r8
 8007e62:	4620      	mov	r0, r4
 8007e64:	f7ff fee0 	bl	8007c28 <etharp_raw>
 8007e68:	e77e      	b.n	8007d68 <etharp_input+0x3c>
 8007e6a:	bf00      	nop
 8007e6c:	0801b83e 	.word	0x0801b83e
 8007e70:	0801b704 	.word	0x0801b704
 8007e74:	0801a4e1 	.word	0x0801a4e1
 8007e78:	0801b9b2 	.word	0x0801b9b2
 8007e7c:	20006670 	.word	0x20006670

08007e80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8007e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e82:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007e84:	2401      	movs	r4, #1
 8007e86:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8007e8a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 8007e8e:	4905      	ldr	r1, [pc, #20]	; (8007ea4 <etharp_request+0x24>)
 8007e90:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007e92:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007e94:	9200      	str	r2, [sp, #0]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4a03      	ldr	r2, [pc, #12]	; (8007ea8 <etharp_request+0x28>)
 8007e9a:	f7ff fec5 	bl	8007c28 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8007e9e:	b004      	add	sp, #16
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	0800faf2 	.word	0x0800faf2
 8007ea8:	0800faec 	.word	0x0800faec

08007eac <etharp_tmr>:
{
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	4c13      	ldr	r4, [pc, #76]	; (8007efc <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007eb0:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007eb2:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007eb4:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8007eb6:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8007eb8:	b16a      	cbz	r2, 8007ed6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8007eba:	8a63      	ldrh	r3, [r4, #18]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007ec0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8007ec4:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007ec6:	d203      	bcs.n	8007ed0 <etharp_tmr+0x24>
 8007ec8:	2a01      	cmp	r2, #1
 8007eca:	d10a      	bne.n	8007ee2 <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	d910      	bls.n	8007ef2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff fe05 	bl	8007ae0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007ed6:	3501      	adds	r5, #1
 8007ed8:	2d0a      	cmp	r5, #10
 8007eda:	f104 0418 	add.w	r4, r4, #24
 8007ede:	d1ea      	bne.n	8007eb6 <etharp_tmr+0xa>
}
 8007ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007ee2:	2a03      	cmp	r2, #3
 8007ee4:	d101      	bne.n	8007eea <etharp_tmr+0x3e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007ee6:	7527      	strb	r7, [r4, #20]
 8007ee8:	e7f5      	b.n	8007ed6 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007eea:	2a04      	cmp	r2, #4
 8007eec:	d1f3      	bne.n	8007ed6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007eee:	7526      	strb	r6, [r4, #20]
 8007ef0:	e7f1      	b.n	8007ed6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007ef2:	68a0      	ldr	r0, [r4, #8]
 8007ef4:	1d21      	adds	r1, r4, #4
 8007ef6:	f7ff ffc3 	bl	8007e80 <etharp_request>
 8007efa:	e7ec      	b.n	8007ed6 <etharp_tmr+0x2a>
 8007efc:	20006670 	.word	0x20006670

08007f00 <etharp_output_to_arp_index>:
{
 8007f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007f04:	4d24      	ldr	r5, [pc, #144]	; (8007f98 <etharp_output_to_arp_index+0x98>)
 8007f06:	2318      	movs	r3, #24
 8007f08:	fb03 5302 	mla	r3, r3, r2, r5
{
 8007f0c:	4607      	mov	r7, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007f0e:	7d1b      	ldrb	r3, [r3, #20]
 8007f10:	2b01      	cmp	r3, #1
{
 8007f12:	4688      	mov	r8, r1
 8007f14:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8007f16:	d806      	bhi.n	8007f26 <etharp_output_to_arp_index+0x26>
 8007f18:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <etharp_output_to_arp_index+0x9c>)
 8007f1a:	4921      	ldr	r1, [pc, #132]	; (8007fa0 <etharp_output_to_arp_index+0xa0>)
 8007f1c:	4821      	ldr	r0, [pc, #132]	; (8007fa4 <etharp_output_to_arp_index+0xa4>)
 8007f1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007f22:	f005 ffb7 	bl	800de94 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8007f26:	2218      	movs	r2, #24
 8007f28:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8007f2c:	fb02 5404 	mla	r4, r2, r4, r5
 8007f30:	00f6      	lsls	r6, r6, #3
 8007f32:	7d23      	ldrb	r3, [r4, #20]
 8007f34:	f106 0a0c 	add.w	sl, r6, #12
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	44aa      	add	sl, r5
 8007f3c:	f107 092a 	add.w	r9, r7, #42	; 0x2a
 8007f40:	d10b      	bne.n	8007f5a <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8007f42:	8a63      	ldrh	r3, [r4, #18]
 8007f44:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007f48:	d913      	bls.n	8007f72 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8007f4a:	3604      	adds	r6, #4
 8007f4c:	19a9      	adds	r1, r5, r6
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7ff ff96 	bl	8007e80 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007f54:	b908      	cbnz	r0, 8007f5a <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8007f56:	2303      	movs	r3, #3
 8007f58:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8007f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	464a      	mov	r2, r9
 8007f62:	4653      	mov	r3, sl
 8007f64:	4641      	mov	r1, r8
 8007f66:	4638      	mov	r0, r7
 8007f68:	f005 fdee 	bl	800db48 <ethernet_output>
}
 8007f6c:	b004      	add	sp, #16
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8007f72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8007f76:	d3f0      	bcc.n	8007f5a <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007f78:	2301      	movs	r3, #1
 8007f7a:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007f7c:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <etharp_output_to_arp_index+0xa8>)
 8007f80:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8007f82:	442e      	add	r6, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8007f84:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	9602      	str	r6, [sp, #8]
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	4649      	mov	r1, r9
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff fe49 	bl	8007c28 <etharp_raw>
 8007f96:	e7dd      	b.n	8007f54 <etharp_output_to_arp_index+0x54>
 8007f98:	20006670 	.word	0x20006670
 8007f9c:	0801b83e 	.word	0x0801b83e
 8007fa0:	0801b9d6 	.word	0x0801b9d6
 8007fa4:	0801a4e1 	.word	0x0801a4e1
 8007fa8:	0800faf2 	.word	0x0800faf2

08007fac <etharp_query>:
{
 8007fac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	4688      	mov	r8, r1
 8007fb2:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	f8d8 0000 	ldr.w	r0, [r8]
{
 8007fba:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007fbc:	f000 fbab 	bl	8008716 <ip4_addr_isbroadcast_u32>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d16b      	bne.n	800809c <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8007fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8007fcc:	2ae0      	cmp	r2, #224	; 0xe0
 8007fce:	d065      	beq.n	800809c <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d063      	beq.n	800809c <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4640      	mov	r0, r8
 8007fda:	f7ff fd95 	bl	8007b08 <etharp_find_entry>
  if (i_err < 0) {
 8007fde:	1e04      	subs	r4, r0, #0
 8007fe0:	da03      	bge.n	8007fea <etharp_query+0x3e>
    return (err_t)i_err;
 8007fe2:	b260      	sxtb	r0, r4
}
 8007fe4:	b002      	add	sp, #8
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8007fea:	2c7e      	cmp	r4, #126	; 0x7e
 8007fec:	dd06      	ble.n	8007ffc <etharp_query+0x50>
 8007fee:	4b35      	ldr	r3, [pc, #212]	; (80080c4 <etharp_query+0x118>)
 8007ff0:	4935      	ldr	r1, [pc, #212]	; (80080c8 <etharp_query+0x11c>)
 8007ff2:	4836      	ldr	r0, [pc, #216]	; (80080cc <etharp_query+0x120>)
 8007ff4:	f240 32c1 	movw	r2, #961	; 0x3c1
 8007ff8:	f005 ff4c 	bl	800de94 <iprintf>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8007ffc:	4f34      	ldr	r7, [pc, #208]	; (80080d0 <etharp_query+0x124>)
  i = (netif_addr_idx_t)i_err;
 8007ffe:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008000:	2218      	movs	r2, #24
 8008002:	fb02 7204 	mla	r2, r2, r4, r7
 8008006:	7d13      	ldrb	r3, [r2, #20]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d156      	bne.n	80080ba <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800800c:	2301      	movs	r3, #1
 800800e:	7513      	strb	r3, [r2, #20]
    arp_table[i].netif = netif;
 8008010:	6096      	str	r6, [r2, #8]
    result = etharp_request(netif, ipaddr);
 8008012:	4641      	mov	r1, r8
 8008014:	4630      	mov	r0, r6
 8008016:	f7ff ff33 	bl	8007e80 <etharp_request>
    if (q == NULL) {
 800801a:	2d00      	cmp	r5, #0
 800801c:	d0e2      	beq.n	8007fe4 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800801e:	2318      	movs	r3, #24
 8008020:	fb03 7204 	mla	r2, r3, r4, r7
 8008024:	7d12      	ldrb	r2, [r2, #20]
 8008026:	2a01      	cmp	r2, #1
 8008028:	d90e      	bls.n	8008048 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800802a:	fb03 7304 	mla	r3, r3, r4, r7
 800802e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008032:	9200      	str	r2, [sp, #0]
 8008034:	330c      	adds	r3, #12
 8008036:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 800803a:	4629      	mov	r1, r5
 800803c:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800803e:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008042:	f005 fd81 	bl	800db48 <ethernet_output>
 8008046:	e7cd      	b.n	8007fe4 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008048:	d1cc      	bne.n	8007fe4 <etharp_query+0x38>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800804a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80080c4 <etharp_query+0x118>
 800804e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80080d4 <etharp_query+0x128>
 8008052:	f8df a078 	ldr.w	sl, [pc, #120]	; 80080cc <etharp_query+0x120>
 8008056:	462e      	mov	r6, r5
 8008058:	8972      	ldrh	r2, [r6, #10]
 800805a:	8933      	ldrh	r3, [r6, #8]
 800805c:	429a      	cmp	r2, r3
 800805e:	d108      	bne.n	8008072 <etharp_query+0xc6>
 8008060:	6833      	ldr	r3, [r6, #0]
 8008062:	b133      	cbz	r3, 8008072 <etharp_query+0xc6>
 8008064:	4643      	mov	r3, r8
 8008066:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800806a:	4649      	mov	r1, r9
 800806c:	4650      	mov	r0, sl
 800806e:	f005 ff11 	bl	800de94 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008072:	7b33      	ldrb	r3, [r6, #12]
 8008074:	065b      	lsls	r3, r3, #25
 8008076:	d414      	bmi.n	80080a2 <etharp_query+0xf6>
      p = p->next;
 8008078:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800807a:	2e00      	cmp	r6, #0
 800807c:	d1ec      	bne.n	8008058 <etharp_query+0xac>
      pbuf_ref(p);
 800807e:	4628      	mov	r0, r5
 8008080:	f001 fdfc 	bl	8009c7c <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8008084:	2318      	movs	r3, #24
 8008086:	fb03 f204 	mul.w	r2, r3, r4
 800808a:	461e      	mov	r6, r3
 800808c:	58b8      	ldr	r0, [r7, r2]
 800808e:	b108      	cbz	r0, 8008094 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 8008090:	f001 fc98 	bl	80099c4 <pbuf_free>
      arp_table[i].q = p;
 8008094:	4374      	muls	r4, r6
      result = ERR_OK;
 8008096:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8008098:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800809a:	e7a3      	b.n	8007fe4 <etharp_query+0x38>
    return ERR_ARG;
 800809c:	f06f 000f 	mvn.w	r0, #15
 80080a0:	e7a0      	b.n	8007fe4 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80080a2:	462a      	mov	r2, r5
 80080a4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80080a8:	200e      	movs	r0, #14
 80080aa:	f001 ff0f 	bl	8009ecc <pbuf_clone>
    if (p != NULL) {
 80080ae:	4605      	mov	r5, r0
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d1e7      	bne.n	8008084 <etharp_query+0xd8>
      result = ERR_MEM;
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	e794      	b.n	8007fe4 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 80080ba:	2d00      	cmp	r5, #0
 80080bc:	d0a9      	beq.n	8008012 <etharp_query+0x66>
  err_t result = ERR_MEM;
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	e7ac      	b.n	800801e <etharp_query+0x72>
 80080c4:	0801b83e 	.word	0x0801b83e
 80080c8:	0801ba06 	.word	0x0801ba06
 80080cc:	0801a4e1 	.word	0x0801a4e1
 80080d0:	20006670 	.word	0x20006670
 80080d4:	0801ba14 	.word	0x0801ba14

080080d8 <etharp_output>:
{
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	460e      	mov	r6, r1
 80080dc:	b085      	sub	sp, #20
 80080de:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80080e0:	4604      	mov	r4, r0
 80080e2:	b930      	cbnz	r0, 80080f2 <etharp_output+0x1a>
 80080e4:	4b41      	ldr	r3, [pc, #260]	; (80081ec <etharp_output+0x114>)
 80080e6:	4942      	ldr	r1, [pc, #264]	; (80081f0 <etharp_output+0x118>)
 80080e8:	4842      	ldr	r0, [pc, #264]	; (80081f4 <etharp_output+0x11c>)
 80080ea:	f240 321e 	movw	r2, #798	; 0x31e
 80080ee:	f005 fed1 	bl	800de94 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80080f2:	b936      	cbnz	r6, 8008102 <etharp_output+0x2a>
 80080f4:	4b3d      	ldr	r3, [pc, #244]	; (80081ec <etharp_output+0x114>)
 80080f6:	4940      	ldr	r1, [pc, #256]	; (80081f8 <etharp_output+0x120>)
 80080f8:	483e      	ldr	r0, [pc, #248]	; (80081f4 <etharp_output+0x11c>)
 80080fa:	f240 321f 	movw	r2, #799	; 0x31f
 80080fe:	f005 fec9 	bl	800de94 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008102:	b935      	cbnz	r5, 8008112 <etharp_output+0x3a>
 8008104:	4b39      	ldr	r3, [pc, #228]	; (80081ec <etharp_output+0x114>)
 8008106:	493d      	ldr	r1, [pc, #244]	; (80081fc <etharp_output+0x124>)
 8008108:	483a      	ldr	r0, [pc, #232]	; (80081f4 <etharp_output+0x11c>)
 800810a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800810e:	f005 fec1 	bl	800de94 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008112:	6828      	ldr	r0, [r5, #0]
 8008114:	4621      	mov	r1, r4
 8008116:	f000 fafe 	bl	8008716 <ip4_addr_isbroadcast_u32>
 800811a:	2800      	cmp	r0, #0
 800811c:	d161      	bne.n	80081e2 <etharp_output+0x10a>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008124:	2ae0      	cmp	r2, #224	; 0xe0
 8008126:	d11b      	bne.n	8008160 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008128:	2301      	movs	r3, #1
 800812a:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800812e:	235e      	movs	r3, #94	; 0x5e
 8008130:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008134:	786b      	ldrb	r3, [r5, #1]
 8008136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800813e:	78ab      	ldrb	r3, [r5, #2]
 8008140:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008144:	78eb      	ldrb	r3, [r5, #3]
 8008146:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800814a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800814c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008150:	9200      	str	r2, [sp, #0]
 8008152:	4631      	mov	r1, r6
 8008154:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8008158:	4620      	mov	r0, r4
 800815a:	f005 fcf5 	bl	800db48 <ethernet_output>
 800815e:	e023      	b.n	80081a8 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008160:	6862      	ldr	r2, [r4, #4]
 8008162:	68a1      	ldr	r1, [r4, #8]
 8008164:	405a      	eors	r2, r3
 8008166:	420a      	tst	r2, r1
 8008168:	d009      	beq.n	800817e <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 800816a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800816c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008170:	4293      	cmp	r3, r2
 8008172:	d004      	beq.n	800817e <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008174:	68e3      	ldr	r3, [r4, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d035      	beq.n	80081e6 <etharp_output+0x10e>
            dst_addr = netif_ip4_gw(netif);
 800817a:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800817e:	4920      	ldr	r1, [pc, #128]	; (8008200 <etharp_output+0x128>)
 8008180:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8008184:	2318      	movs	r3, #24
 8008186:	fb03 1302 	mla	r3, r3, r2, r1
 800818a:	468c      	mov	ip, r1
 800818c:	7d18      	ldrb	r0, [r3, #20]
 800818e:	2801      	cmp	r0, #1
 8008190:	d90c      	bls.n	80081ac <etharp_output+0xd4>
 8008192:	6899      	ldr	r1, [r3, #8]
 8008194:	42a1      	cmp	r1, r4
 8008196:	d109      	bne.n	80081ac <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008198:	6829      	ldr	r1, [r5, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	4299      	cmp	r1, r3
 800819e:	d105      	bne.n	80081ac <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 80081a0:	4631      	mov	r1, r6
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff feac 	bl	8007f00 <etharp_output_to_arp_index>
}
 80081a8:	b005      	add	sp, #20
 80081aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ac:	4b14      	ldr	r3, [pc, #80]	; (8008200 <etharp_output+0x128>)
{
 80081ae:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80081b0:	7d1f      	ldrb	r7, [r3, #20]
 80081b2:	2f01      	cmp	r7, #1
 80081b4:	b2ca      	uxtb	r2, r1
 80081b6:	d909      	bls.n	80081cc <etharp_output+0xf4>
 80081b8:	689f      	ldr	r7, [r3, #8]
 80081ba:	42a7      	cmp	r7, r4
 80081bc:	d106      	bne.n	80081cc <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 80081be:	685f      	ldr	r7, [r3, #4]
 80081c0:	6828      	ldr	r0, [r5, #0]
 80081c2:	42b8      	cmp	r0, r7
 80081c4:	d102      	bne.n	80081cc <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 80081c6:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 80081ca:	e7e9      	b.n	80081a0 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80081cc:	3101      	adds	r1, #1
 80081ce:	290a      	cmp	r1, #10
 80081d0:	f103 0318 	add.w	r3, r3, #24
 80081d4:	d1ec      	bne.n	80081b0 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 80081d6:	4632      	mov	r2, r6
 80081d8:	4629      	mov	r1, r5
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff fee6 	bl	8007fac <etharp_query>
 80081e0:	e7e2      	b.n	80081a8 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 80081e2:	4b08      	ldr	r3, [pc, #32]	; (8008204 <etharp_output+0x12c>)
 80081e4:	e7b2      	b.n	800814c <etharp_output+0x74>
            return ERR_RTE;
 80081e6:	f06f 0003 	mvn.w	r0, #3
 80081ea:	e7dd      	b.n	80081a8 <etharp_output+0xd0>
 80081ec:	0801b83e 	.word	0x0801b83e
 80081f0:	0801b704 	.word	0x0801b704
 80081f4:	0801a4e1 	.word	0x0801a4e1
 80081f8:	0801c4ea 	.word	0x0801c4ea
 80081fc:	0801b993 	.word	0x0801b993
 8008200:	20006670 	.word	0x20006670
 8008204:	0800faec 	.word	0x0800faec

08008208 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8008208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	b087      	sub	sp, #28
 800820e:	460f      	mov	r7, r1
 8008210:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008212:	2124      	movs	r1, #36	; 0x24
 8008214:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008218:	2022      	movs	r0, #34	; 0x22
 800821a:	f001 fc3b 	bl	8009a94 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800821e:	4605      	mov	r5, r0
 8008220:	b390      	cbz	r0, 8008288 <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008222:	8943      	ldrh	r3, [r0, #10]
 8008224:	2b23      	cmp	r3, #35	; 0x23
 8008226:	d806      	bhi.n	8008236 <icmp_send_response.isra.0+0x2e>
 8008228:	4b18      	ldr	r3, [pc, #96]	; (800828c <icmp_send_response.isra.0+0x84>)
 800822a:	4919      	ldr	r1, [pc, #100]	; (8008290 <icmp_send_response.isra.0+0x88>)
 800822c:	4819      	ldr	r0, [pc, #100]	; (8008294 <icmp_send_response.isra.0+0x8c>)
 800822e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008232:	f005 fe2f 	bl	800de94 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008236:	6820      	ldr	r0, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008238:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	7123      	strb	r3, [r4, #4]
 800823e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8008240:	71a3      	strb	r3, [r4, #6]
 8008242:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8008244:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8008246:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008248:	4603      	mov	r3, r0
 800824a:	f104 0208 	add.w	r2, r4, #8
 800824e:	f100 011c 	add.w	r1, r0, #28
 8008252:	f853 6b04 	ldr.w	r6, [r3], #4
 8008256:	f842 6b04 	str.w	r6, [r2], #4
 800825a:	428b      	cmp	r3, r1
 800825c:	d1f9      	bne.n	8008252 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800825e:	68c3      	ldr	r3, [r0, #12]
 8008260:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008262:	a805      	add	r0, sp, #20
 8008264:	f000 f8da 	bl	800841c <ip4_route>
#endif
  if (netif != NULL) {
 8008268:	b158      	cbz	r0, 8008282 <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800826a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800826c:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800826e:	70a1      	strb	r1, [r4, #2]
 8008270:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008272:	aa05      	add	r2, sp, #20
 8008274:	e9cd 1300 	strd	r1, r3, [sp]
 8008278:	9002      	str	r0, [sp, #8]
 800827a:	23ff      	movs	r3, #255	; 0xff
 800827c:	4628      	mov	r0, r5
 800827e:	f000 fa39 	bl	80086f4 <ip4_output_if>
  }
  pbuf_free(q);
 8008282:	4628      	mov	r0, r5
 8008284:	f001 fb9e 	bl	80099c4 <pbuf_free>
}
 8008288:	b007      	add	sp, #28
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828c:	0801ba2e 	.word	0x0801ba2e
 8008290:	0801baad 	.word	0x0801baad
 8008294:	0801a4e1 	.word	0x0801a4e1

08008298 <icmp_input>:
{
 8008298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800829c:	4b47      	ldr	r3, [pc, #284]	; (80083bc <icmp_input+0x124>)
 800829e:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80082a2:	f899 5000 	ldrb.w	r5, [r9]
 80082a6:	f005 050f 	and.w	r5, r5, #15
 80082aa:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80082ac:	2d13      	cmp	r5, #19
{
 80082ae:	b087      	sub	sp, #28
 80082b0:	4604      	mov	r4, r0
 80082b2:	460f      	mov	r7, r1
 80082b4:	4698      	mov	r8, r3
  if (hlen < IP_HLEN) {
 80082b6:	d916      	bls.n	80082e6 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 80082b8:	8942      	ldrh	r2, [r0, #10]
 80082ba:	2a03      	cmp	r2, #3
 80082bc:	d913      	bls.n	80082e6 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 80082be:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	2a08      	cmp	r2, #8
 80082c4:	d10f      	bne.n	80082e6 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80082c6:	6958      	ldr	r0, [r3, #20]
 80082c8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80082cc:	2ae0      	cmp	r2, #224	; 0xe0
 80082ce:	d00a      	beq.n	80082e6 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80082d0:	6819      	ldr	r1, [r3, #0]
 80082d2:	f000 fa20 	bl	8008716 <ip4_addr_isbroadcast_u32>
 80082d6:	b930      	cbnz	r0, 80082e6 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80082d8:	8923      	ldrh	r3, [r4, #8]
 80082da:	2b07      	cmp	r3, #7
 80082dc:	d903      	bls.n	80082e6 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fe3c 	bl	8008f5c <inet_chksum_pbuf>
 80082e4:	b128      	cbz	r0, 80082f2 <icmp_input+0x5a>
  pbuf_free(p);
 80082e6:	4620      	mov	r0, r4
}
 80082e8:	b007      	add	sp, #28
 80082ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80082ee:	f001 bb69 	b.w	80099c4 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80082f2:	f105 010e 	add.w	r1, r5, #14
 80082f6:	4620      	mov	r0, r4
 80082f8:	9105      	str	r1, [sp, #20]
 80082fa:	f001 fb2b 	bl	8009954 <pbuf_add_header>
 80082fe:	9905      	ldr	r1, [sp, #20]
 8008300:	2800      	cmp	r0, #0
 8008302:	d04f      	beq.n	80083a4 <icmp_input+0x10c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008304:	8923      	ldrh	r3, [r4, #8]
 8008306:	1959      	adds	r1, r3, r5
 8008308:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800830a:	428b      	cmp	r3, r1
 800830c:	d8eb      	bhi.n	80082e6 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800830e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008312:	200e      	movs	r0, #14
 8008314:	f001 fbbe 	bl	8009a94 <pbuf_alloc>
        if (r == NULL) {
 8008318:	4606      	mov	r6, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d0e3      	beq.n	80082e6 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800831e:	8942      	ldrh	r2, [r0, #10]
 8008320:	f105 0308 	add.w	r3, r5, #8
 8008324:	429a      	cmp	r2, r3
 8008326:	d203      	bcs.n	8008330 <icmp_input+0x98>
          pbuf_free(r);
 8008328:	4630      	mov	r0, r6
 800832a:	f001 fb4b 	bl	80099c4 <pbuf_free>
          goto icmperr;
 800832e:	e7da      	b.n	80082e6 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 8008330:	4649      	mov	r1, r9
 8008332:	6840      	ldr	r0, [r0, #4]
 8008334:	462a      	mov	r2, r5
 8008336:	f005 fd7d 	bl	800de34 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800833a:	4629      	mov	r1, r5
 800833c:	4630      	mov	r0, r6
 800833e:	f001 fb0d 	bl	800995c <pbuf_remove_header>
 8008342:	b130      	cbz	r0, 8008352 <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008344:	4b1e      	ldr	r3, [pc, #120]	; (80083c0 <icmp_input+0x128>)
 8008346:	491f      	ldr	r1, [pc, #124]	; (80083c4 <icmp_input+0x12c>)
 8008348:	481f      	ldr	r0, [pc, #124]	; (80083c8 <icmp_input+0x130>)
 800834a:	22b6      	movs	r2, #182	; 0xb6
 800834c:	f005 fda2 	bl	800de94 <iprintf>
          pbuf_free(r);
 8008350:	e7ea      	b.n	8008328 <icmp_input+0x90>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008352:	4621      	mov	r1, r4
 8008354:	4630      	mov	r0, r6
 8008356:	f001 fcf1 	bl	8009d3c <pbuf_copy>
 800835a:	2800      	cmp	r0, #0
 800835c:	d1e4      	bne.n	8008328 <icmp_input+0x90>
        pbuf_free(p);
 800835e:	4620      	mov	r0, r4
 8008360:	f001 fb30 	bl	80099c4 <pbuf_free>
        p = r;
 8008364:	4634      	mov	r4, r6
      if (pbuf_add_header(p, hlen)) {
 8008366:	4629      	mov	r1, r5
 8008368:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 800836a:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800836c:	f001 faf2 	bl	8009954 <pbuf_add_header>
 8008370:	2800      	cmp	r0, #0
 8008372:	d1b8      	bne.n	80082e6 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008374:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8008376:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800837a:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800837c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008380:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008382:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008384:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8008386:	70b0      	strb	r0, [r6, #2]
 8008388:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800838a:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800838c:	7290      	strb	r0, [r2, #10]
 800838e:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008390:	2201      	movs	r2, #1
 8008392:	e9cd 0200 	strd	r0, r2, [sp]
 8008396:	490d      	ldr	r1, [pc, #52]	; (80083cc <icmp_input+0x134>)
 8008398:	9702      	str	r7, [sp, #8]
 800839a:	4602      	mov	r2, r0
 800839c:	4620      	mov	r0, r4
 800839e:	f000 f9a9 	bl	80086f4 <ip4_output_if>
  pbuf_free(p);
 80083a2:	e7a0      	b.n	80082e6 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80083a4:	4620      	mov	r0, r4
 80083a6:	f001 fad9 	bl	800995c <pbuf_remove_header>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0db      	beq.n	8008366 <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <icmp_input+0x128>)
 80083b0:	4907      	ldr	r1, [pc, #28]	; (80083d0 <icmp_input+0x138>)
 80083b2:	4805      	ldr	r0, [pc, #20]	; (80083c8 <icmp_input+0x130>)
 80083b4:	22c7      	movs	r2, #199	; 0xc7
 80083b6:	f005 fd6d 	bl	800de94 <iprintf>
          goto icmperr;
 80083ba:	e794      	b.n	80082e6 <icmp_input+0x4e>
 80083bc:	2000e484 	.word	0x2000e484
 80083c0:	0801ba2e 	.word	0x0801ba2e
 80083c4:	0801bad9 	.word	0x0801bad9
 80083c8:	0801a4e1 	.word	0x0801a4e1
 80083cc:	2000e498 	.word	0x2000e498
 80083d0:	0801bb0e 	.word	0x0801bb0e

080083d4 <icmp_dest_unreach>:
{
 80083d4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80083d6:	3004      	adds	r0, #4
 80083d8:	2103      	movs	r1, #3
 80083da:	f7ff bf15 	b.w	8008208 <icmp_send_response.isra.0>

080083de <icmp_time_exceeded>:
{
 80083de:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80083e0:	3004      	adds	r0, #4
 80083e2:	210b      	movs	r1, #11
 80083e4:	f7ff bf10 	b.w	8008208 <icmp_send_response.isra.0>

080083e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80083e8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80083ea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80083ee:	f013 0301 	ands.w	r3, r3, #1
{
 80083f2:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80083f4:	d00b      	beq.n	800840e <ip4_input_accept+0x26>
 80083f6:	6843      	ldr	r3, [r0, #4]
 80083f8:	b14b      	cbz	r3, 800840e <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80083fa:	4a07      	ldr	r2, [pc, #28]	; (8008418 <ip4_input_accept+0x30>)
 80083fc:	6950      	ldr	r0, [r2, #20]
 80083fe:	4283      	cmp	r3, r0
 8008400:	d007      	beq.n	8008412 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008402:	f000 f988 	bl	8008716 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008406:	3800      	subs	r0, #0
 8008408:	bf18      	it	ne
 800840a:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 800840c:	bd08      	pop	{r3, pc}
  return 0;
 800840e:	4618      	mov	r0, r3
 8008410:	e7fc      	b.n	800840c <ip4_input_accept+0x24>
      return 1;
 8008412:	2001      	movs	r0, #1
 8008414:	e7fa      	b.n	800840c <ip4_input_accept+0x24>
 8008416:	bf00      	nop
 8008418:	2000e484 	.word	0x2000e484

0800841c <ip4_route>:
{
 800841c:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <ip4_route+0x54>)
{
 8008420:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	b978      	cbnz	r0, 8008446 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <ip4_route+0x58>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	b15b      	cbz	r3, 8008444 <ip4_route+0x28>
 800842c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8008430:	f001 0105 	and.w	r1, r1, #5
 8008434:	2905      	cmp	r1, #5
 8008436:	d105      	bne.n	8008444 <ip4_route+0x28>
 8008438:	6859      	ldr	r1, [r3, #4]
 800843a:	b119      	cbz	r1, 8008444 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800843c:	7812      	ldrb	r2, [r2, #0]
 800843e:	2a7f      	cmp	r2, #127	; 0x7f
 8008440:	bf18      	it	ne
 8008442:	4618      	movne	r0, r3
}
 8008444:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008446:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 800844a:	07cd      	lsls	r5, r1, #31
 800844c:	d50d      	bpl.n	800846a <ip4_route+0x4e>
 800844e:	074c      	lsls	r4, r1, #29
 8008450:	d50b      	bpl.n	800846a <ip4_route+0x4e>
 8008452:	6843      	ldr	r3, [r0, #4]
 8008454:	b14b      	cbz	r3, 800846a <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008456:	6814      	ldr	r4, [r2, #0]
 8008458:	6885      	ldr	r5, [r0, #8]
 800845a:	4063      	eors	r3, r4
 800845c:	422b      	tst	r3, r5
 800845e:	d0f1      	beq.n	8008444 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008460:	078b      	lsls	r3, r1, #30
 8008462:	d402      	bmi.n	800846a <ip4_route+0x4e>
 8008464:	68c3      	ldr	r3, [r0, #12]
 8008466:	429c      	cmp	r4, r3
 8008468:	d0ec      	beq.n	8008444 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	e7da      	b.n	8008424 <ip4_route+0x8>
 800846e:	bf00      	nop
 8008470:	200149fc 	.word	0x200149fc
 8008474:	20014a00 	.word	0x20014a00

08008478 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800847c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8008480:	f898 5000 	ldrb.w	r5, [r8]
 8008484:	092b      	lsrs	r3, r5, #4
 8008486:	2b04      	cmp	r3, #4
{
 8008488:	4604      	mov	r4, r0
 800848a:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 800848c:	d005      	beq.n	800849a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800848e:	4620      	mov	r0, r4
 8008490:	f001 fa98 	bl	80099c4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008494:	2000      	movs	r0, #0
 8008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800849a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800849e:	f000 fd2b 	bl	8008ef8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 80084a2:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80084a4:	f005 050f 	and.w	r5, r5, #15
 80084a8:	ea4f 0985 	mov.w	r9, r5, lsl #2
  if (iphdr_len < p->tot_len) {
 80084ac:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80084ae:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80084b0:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 80084b2:	d903      	bls.n	80084bc <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 80084b4:	4601      	mov	r1, r0
 80084b6:	4620      	mov	r0, r4
 80084b8:	f001 fb68 	bl	8009b8c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80084bc:	8963      	ldrh	r3, [r4, #10]
 80084be:	42ab      	cmp	r3, r5
 80084c0:	d3e5      	bcc.n	800848e <ip4_input+0x16>
 80084c2:	8923      	ldrh	r3, [r4, #8]
 80084c4:	42bb      	cmp	r3, r7
 80084c6:	d3e2      	bcc.n	800848e <ip4_input+0x16>
 80084c8:	2d13      	cmp	r5, #19
 80084ca:	d9e0      	bls.n	800848e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80084cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80084d0:	4d49      	ldr	r5, [pc, #292]	; (80085f8 <ip4_input+0x180>)
 80084d2:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80084d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80084d8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80084dc:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80084de:	2be0      	cmp	r3, #224	; 0xe0
 80084e0:	d143      	bne.n	800856a <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80084e2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 80084e6:	07db      	lsls	r3, r3, #31
 80084e8:	d405      	bmi.n	80084f6 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80084ea:	f898 3009 	ldrb.w	r3, [r8, #9]
 80084ee:	2b11      	cmp	r3, #17
 80084f0:	d053      	beq.n	800859a <ip4_input+0x122>
 80084f2:	2700      	movs	r7, #0
 80084f4:	e003      	b.n	80084fe <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80084f6:	6873      	ldr	r3, [r6, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0f6      	beq.n	80084ea <ip4_input+0x72>
 80084fc:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80084fe:	6928      	ldr	r0, [r5, #16]
 8008500:	b148      	cbz	r0, 8008516 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008502:	4631      	mov	r1, r6
 8008504:	f000 f907 	bl	8008716 <ip4_addr_isbroadcast_u32>
 8008508:	2800      	cmp	r0, #0
 800850a:	d1c0      	bne.n	800848e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800850c:	692b      	ldr	r3, [r5, #16]
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008512:	2be0      	cmp	r3, #224	; 0xe0
 8008514:	d0bb      	beq.n	800848e <ip4_input+0x16>
  if (netif == NULL) {
 8008516:	2f00      	cmp	r7, #0
 8008518:	d0b9      	beq.n	800848e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800851a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800851e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008522:	b13b      	cbz	r3, 8008534 <ip4_input+0xbc>
    p = ip4_reass(p);
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fa29 	bl	800897c <ip4_reass>
    if (p == NULL) {
 800852a:	4604      	mov	r4, r0
 800852c:	2800      	cmp	r0, #0
 800852e:	d0b1      	beq.n	8008494 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8008530:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8008534:	f8c5 8008 	str.w	r8, [r5, #8]
  ip_data.current_input_netif = inp;
 8008538:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800853c:	f898 3000 	ldrb.w	r3, [r8]
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	009b      	lsls	r3, r3, #2
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8008546:	4649      	mov	r1, r9
 8008548:	4620      	mov	r0, r4
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800854a:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800854c:	f001 fa06 	bl	800995c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8008550:	f898 3009 	ldrb.w	r3, [r8, #9]
 8008554:	2b06      	cmp	r3, #6
 8008556:	d034      	beq.n	80085c2 <ip4_input+0x14a>
 8008558:	2b11      	cmp	r3, #17
 800855a:	d026      	beq.n	80085aa <ip4_input+0x132>
 800855c:	2b01      	cmp	r3, #1
 800855e:	d135      	bne.n	80085cc <ip4_input+0x154>
        icmp_input(p, inp);
 8008560:	4631      	mov	r1, r6
 8008562:	4620      	mov	r0, r4
 8008564:	f7ff fe98 	bl	8008298 <icmp_input>
        break;
 8008568:	e023      	b.n	80085b2 <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ff3c 	bl	80083e8 <ip4_input_accept>
 8008570:	b980      	cbnz	r0, 8008594 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008572:	7d2b      	ldrb	r3, [r5, #20]
 8008574:	2b7f      	cmp	r3, #127	; 0x7f
 8008576:	d0b8      	beq.n	80084ea <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8008578:	4b20      	ldr	r3, [pc, #128]	; (80085fc <ip4_input+0x184>)
 800857a:	681f      	ldr	r7, [r3, #0]
 800857c:	2f00      	cmp	r7, #0
 800857e:	d0b4      	beq.n	80084ea <ip4_input+0x72>
          if (netif == inp) {
 8008580:	42b7      	cmp	r7, r6
 8008582:	d101      	bne.n	8008588 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8008584:	683f      	ldr	r7, [r7, #0]
 8008586:	e7f9      	b.n	800857c <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8008588:	4638      	mov	r0, r7
 800858a:	f7ff ff2d 	bl	80083e8 <ip4_input_accept>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0f8      	beq.n	8008584 <ip4_input+0x10c>
 8008592:	e7b4      	b.n	80084fe <ip4_input+0x86>
  if (netif == NULL) {
 8008594:	2e00      	cmp	r6, #0
 8008596:	d1b1      	bne.n	80084fc <ip4_input+0x84>
 8008598:	e7a7      	b.n	80084ea <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800859a:	eb08 0309 	add.w	r3, r8, r9
 800859e:	885b      	ldrh	r3, [r3, #2]
 80085a0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80085a4:	d1a5      	bne.n	80084f2 <ip4_input+0x7a>
 80085a6:	4637      	mov	r7, r6
 80085a8:	e7b5      	b.n	8008516 <ip4_input+0x9e>
        udp_input(p, inp);
 80085aa:	4631      	mov	r1, r6
 80085ac:	4620      	mov	r0, r4
 80085ae:	f004 ff6b 	bl	800d488 <udp_input>
  ip_data.current_netif = NULL;
 80085b2:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80085b4:	e9c5 3300 	strd	r3, r3, [r5]
  ip4_addr_set_any(ip4_current_dest_addr());
 80085b8:	e9c5 3304 	strd	r3, r3, [r5, #16]
  ip_data.current_ip4_header = NULL;
 80085bc:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 80085be:	81ab      	strh	r3, [r5, #12]
  return ERR_OK;
 80085c0:	e768      	b.n	8008494 <ip4_input+0x1c>
        tcp_input(p, inp);
 80085c2:	4631      	mov	r1, r6
 80085c4:	4620      	mov	r0, r4
 80085c6:	f003 f815 	bl	800b5f4 <tcp_input>
        break;
 80085ca:	e7f2      	b.n	80085b2 <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80085cc:	6968      	ldr	r0, [r5, #20]
 80085ce:	4639      	mov	r1, r7
 80085d0:	f000 f8a1 	bl	8008716 <ip4_addr_isbroadcast_u32>
 80085d4:	b960      	cbnz	r0, 80085f0 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80085d6:	696b      	ldr	r3, [r5, #20]
 80085d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80085dc:	2be0      	cmp	r3, #224	; 0xe0
 80085de:	d007      	beq.n	80085f0 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80085e0:	4649      	mov	r1, r9
 80085e2:	4620      	mov	r0, r4
 80085e4:	f001 f9e6 	bl	80099b4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80085e8:	2102      	movs	r1, #2
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7ff fef2 	bl	80083d4 <icmp_dest_unreach>
        pbuf_free(p);
 80085f0:	4620      	mov	r0, r4
 80085f2:	f001 f9e7 	bl	80099c4 <pbuf_free>
        break;
 80085f6:	e7dc      	b.n	80085b2 <ip4_input+0x13a>
 80085f8:	2000e484 	.word	0x2000e484
 80085fc:	200149fc 	.word	0x200149fc

08008600 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8008600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008606:	7b83      	ldrb	r3, [r0, #14]
{
 8008608:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800860c:	2b01      	cmp	r3, #1
{
 800860e:	4604      	mov	r4, r0
 8008610:	4689      	mov	r9, r1
 8008612:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8008614:	d006      	beq.n	8008624 <ip4_output_if_src+0x24>
 8008616:	4b31      	ldr	r3, [pc, #196]	; (80086dc <ip4_output_if_src+0xdc>)
 8008618:	4931      	ldr	r1, [pc, #196]	; (80086e0 <ip4_output_if_src+0xe0>)
 800861a:	4832      	ldr	r0, [pc, #200]	; (80086e4 <ip4_output_if_src+0xe4>)
 800861c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8008620:	f005 fc38 	bl	800de94 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8008624:	2e00      	cmp	r6, #0
 8008626:	d049      	beq.n	80086bc <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8008628:	2114      	movs	r1, #20
 800862a:	4620      	mov	r0, r4
 800862c:	f001 f992 	bl	8009954 <pbuf_add_header>
 8008630:	b120      	cbz	r0, 800863c <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8008632:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8008636:	b002      	add	sp, #8
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800863c:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800863e:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8008640:	2b13      	cmp	r3, #19
 8008642:	d806      	bhi.n	8008652 <ip4_output_if_src+0x52>
 8008644:	4b25      	ldr	r3, [pc, #148]	; (80086dc <ip4_output_if_src+0xdc>)
 8008646:	4928      	ldr	r1, [pc, #160]	; (80086e8 <ip4_output_if_src+0xe8>)
 8008648:	4826      	ldr	r0, [pc, #152]	; (80086e4 <ip4_output_if_src+0xe4>)
 800864a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800864e:	f005 fc21 	bl	800de94 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8008652:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8008656:	722f      	strb	r7, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 8008658:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800865a:	6833      	ldr	r3, [r6, #0]
 800865c:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800865e:	2345      	movs	r3, #69	; 0x45
 8008660:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8008662:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8008666:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008668:	8920      	ldrh	r0, [r4, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800866a:	f8df a084 	ldr.w	sl, [pc, #132]	; 80086f0 <ip4_output_if_src+0xf0>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800866e:	f000 fc43 	bl	8008ef8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8008672:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8008674:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8008676:	71af      	strb	r7, [r5, #6]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008678:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 800867c:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800867e:	f000 fc3b 	bl	8008ef8 <lwip_htons>
    ++ip_id;
 8008682:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8008686:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8008688:	3301      	adds	r3, #1
 800868a:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800868e:	f1b9 0f00 	cmp.w	r9, #0
 8008692:	d110      	bne.n	80086b6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <ip4_output_if_src+0xec>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800869a:	72af      	strb	r7, [r5, #10]
 800869c:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800869e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 80086a2:	b19b      	cbz	r3, 80086cc <ip4_output_if_src+0xcc>
 80086a4:	8922      	ldrh	r2, [r4, #8]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d910      	bls.n	80086cc <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 80086aa:	4632      	mov	r2, r6
 80086ac:	4641      	mov	r1, r8
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 fb36 	bl	8008d20 <ip4_frag>
 80086b4:	e7bf      	b.n	8008636 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 80086b6:	f8d9 3000 	ldr.w	r3, [r9]
 80086ba:	e7ed      	b.n	8008698 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 80086bc:	8963      	ldrh	r3, [r4, #10]
 80086be:	2b13      	cmp	r3, #19
 80086c0:	d9b7      	bls.n	8008632 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80086c2:	6863      	ldr	r3, [r4, #4]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80086c8:	ae01      	add	r6, sp, #4
 80086ca:	e7e8      	b.n	800869e <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 80086cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80086d0:	4632      	mov	r2, r6
 80086d2:	4621      	mov	r1, r4
 80086d4:	4640      	mov	r0, r8
 80086d6:	4798      	blx	r3
 80086d8:	e7ad      	b.n	8008636 <ip4_output_if_src+0x36>
 80086da:	bf00      	nop
 80086dc:	0801bb40 	.word	0x0801bb40
 80086e0:	0801bbbe 	.word	0x0801bbbe
 80086e4:	0801a4e1 	.word	0x0801a4e1
 80086e8:	0801bbca 	.word	0x0801bbca
 80086ec:	0800f99c 	.word	0x0800f99c
 80086f0:	20006762 	.word	0x20006762

080086f4 <ip4_output_if>:
{
 80086f4:	b4f0      	push	{r4, r5, r6, r7}
 80086f6:	9c06      	ldr	r4, [sp, #24]
 80086f8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80086fc:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8008700:	b11a      	cbz	r2, 800870a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8008702:	b109      	cbz	r1, 8008708 <ip4_output_if+0x14>
 8008704:	680f      	ldr	r7, [r1, #0]
 8008706:	b907      	cbnz	r7, 800870a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8008708:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800870a:	e9cd 6405 	strd	r6, r4, [sp, #20]
 800870e:	9504      	str	r5, [sp, #16]
}
 8008710:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8008712:	f7ff bf75 	b.w	8008600 <ip4_output_if_src>

08008716 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8008716:	1e43      	subs	r3, r0, #1
 8008718:	3303      	adds	r3, #3
{
 800871a:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800871c:	d812      	bhi.n	8008744 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800871e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8008722:	f013 0002 	ands.w	r0, r3, #2
 8008726:	d010      	beq.n	800874a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8008728:	684b      	ldr	r3, [r1, #4]
 800872a:	4293      	cmp	r3, r2
 800872c:	d00c      	beq.n	8008748 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800872e:	6888      	ldr	r0, [r1, #8]
 8008730:	4053      	eors	r3, r2
 8008732:	4203      	tst	r3, r0
 8008734:	d108      	bne.n	8008748 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8008736:	43c3      	mvns	r3, r0
 8008738:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800873c:	1ac3      	subs	r3, r0, r3
 800873e:	4258      	negs	r0, r3
 8008740:	4158      	adcs	r0, r3
 8008742:	4770      	bx	lr
    return 1;
 8008744:	2001      	movs	r0, #1
 8008746:	4770      	bx	lr
    return 0;
 8008748:	2000      	movs	r0, #0
  }
}
 800874a:	4770      	bx	lr

0800874c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800874c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <ip_reass_dequeue_datagram+0x34>)
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4282      	cmp	r2, r0
{
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8008758:	d107      	bne.n	800876a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800875a:	6802      	ldr	r2, [r0, #0]
 800875c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800875e:	4621      	mov	r1, r4
 8008760:	2004      	movs	r0, #4
}
 8008762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8008766:	f000 beff 	b.w	8009568 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800876a:	b931      	cbnz	r1, 800877a <ip_reass_dequeue_datagram+0x2e>
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <ip_reass_dequeue_datagram+0x38>)
 800876e:	4906      	ldr	r1, [pc, #24]	; (8008788 <ip_reass_dequeue_datagram+0x3c>)
 8008770:	4806      	ldr	r0, [pc, #24]	; (800878c <ip_reass_dequeue_datagram+0x40>)
 8008772:	f240 1245 	movw	r2, #325	; 0x145
 8008776:	f005 fb8d 	bl	800de94 <iprintf>
    prev->next = ipr->next;
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	e7ee      	b.n	800875e <ip_reass_dequeue_datagram+0x12>
 8008780:	20006764 	.word	0x20006764
 8008784:	0801bbf7 	.word	0x0801bbf7
 8008788:	0801bc7a 	.word	0x0801bc7a
 800878c:	0801a4e1 	.word	0x0801a4e1

08008790 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8008790:	4281      	cmp	r1, r0
{
 8008792:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800879a:	d105      	bne.n	80087a8 <ip_reass_free_complete_datagram+0x18>
 800879c:	4b2f      	ldr	r3, [pc, #188]	; (800885c <ip_reass_free_complete_datagram+0xcc>)
 800879e:	4930      	ldr	r1, [pc, #192]	; (8008860 <ip_reass_free_complete_datagram+0xd0>)
 80087a0:	4830      	ldr	r0, [pc, #192]	; (8008864 <ip_reass_free_complete_datagram+0xd4>)
 80087a2:	22ab      	movs	r2, #171	; 0xab
 80087a4:	f005 fb76 	bl	800de94 <iprintf>
  if (prev != NULL) {
 80087a8:	b146      	cbz	r6, 80087bc <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80087aa:	6833      	ldr	r3, [r6, #0]
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d005      	beq.n	80087bc <ip_reass_free_complete_datagram+0x2c>
 80087b0:	4b2a      	ldr	r3, [pc, #168]	; (800885c <ip_reass_free_complete_datagram+0xcc>)
 80087b2:	492d      	ldr	r1, [pc, #180]	; (8008868 <ip_reass_free_complete_datagram+0xd8>)
 80087b4:	482b      	ldr	r0, [pc, #172]	; (8008864 <ip_reass_free_complete_datagram+0xd4>)
 80087b6:	22ad      	movs	r2, #173	; 0xad
 80087b8:	f005 fb6c 	bl	800de94 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80087bc:	6867      	ldr	r7, [r4, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 80087c0:	889a      	ldrh	r2, [r3, #4]
 80087c2:	bb92      	cbnz	r2, 800882a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80087c8:	f104 011c 	add.w	r1, r4, #28
 80087cc:	f104 0208 	add.w	r2, r4, #8
 80087d0:	f852 0b04 	ldr.w	r0, [r2], #4
 80087d4:	f843 0b04 	str.w	r0, [r3], #4
 80087d8:	428a      	cmp	r2, r1
 80087da:	d1f9      	bne.n	80087d0 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80087dc:	2101      	movs	r1, #1
 80087de:	4638      	mov	r0, r7
 80087e0:	f7ff fdfd 	bl	80083de <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80087e4:	4638      	mov	r0, r7
 80087e6:	f001 fa41 	bl	8009c6c <pbuf_clen>
 80087ea:	4605      	mov	r5, r0
    pbuf_free(p);
 80087ec:	4638      	mov	r0, r7
 80087ee:	f001 f8e9 	bl	80099c4 <pbuf_free>
  p = ipr->p;
 80087f2:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80087f4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800885c <ip_reass_free_complete_datagram+0xcc>
 80087f8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008874 <ip_reass_free_complete_datagram+0xe4>
 80087fc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008864 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8008800:	b9af      	cbnz	r7, 800882e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8008802:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8008804:	4c19      	ldr	r4, [pc, #100]	; (800886c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8008806:	4631      	mov	r1, r6
 8008808:	f7ff ffa0 	bl	800874c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800880c:	88a3      	ldrh	r3, [r4, #4]
 800880e:	42ab      	cmp	r3, r5
 8008810:	d205      	bcs.n	800881e <ip_reass_free_complete_datagram+0x8e>
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <ip_reass_free_complete_datagram+0xcc>)
 8008814:	4916      	ldr	r1, [pc, #88]	; (8008870 <ip_reass_free_complete_datagram+0xe0>)
 8008816:	4813      	ldr	r0, [pc, #76]	; (8008864 <ip_reass_free_complete_datagram+0xd4>)
 8008818:	22d2      	movs	r2, #210	; 0xd2
 800881a:	f005 fb3b 	bl	800de94 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800881e:	88a3      	ldrh	r3, [r4, #4]
 8008820:	1b5b      	subs	r3, r3, r5
 8008822:	80a3      	strh	r3, [r4, #4]
}
 8008824:	4628      	mov	r0, r5
 8008826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800882a:	2500      	movs	r5, #0
 800882c:	e7e1      	b.n	80087f2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800882e:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8008830:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8008832:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8008836:	f001 fa19 	bl	8009c6c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800883a:	4405      	add	r5, r0
 800883c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008840:	db05      	blt.n	800884e <ip_reass_free_complete_datagram+0xbe>
 8008842:	4643      	mov	r3, r8
 8008844:	22cc      	movs	r2, #204	; 0xcc
 8008846:	4649      	mov	r1, r9
 8008848:	4650      	mov	r0, sl
 800884a:	f005 fb23 	bl	800de94 <iprintf>
    pbuf_free(pcur);
 800884e:	4638      	mov	r0, r7
 8008850:	f001 f8b8 	bl	80099c4 <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8008854:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8008856:	465f      	mov	r7, fp
 8008858:	e7d2      	b.n	8008800 <ip_reass_free_complete_datagram+0x70>
 800885a:	bf00      	nop
 800885c:	0801bbf7 	.word	0x0801bbf7
 8008860:	0801bc93 	.word	0x0801bc93
 8008864:	0801a4e1 	.word	0x0801a4e1
 8008868:	0801bc9f 	.word	0x0801bc9f
 800886c:	20006764 	.word	0x20006764
 8008870:	0801bcce 	.word	0x0801bcce
 8008874:	0801bcb1 	.word	0x0801bcb1

08008878 <ip_reass_remove_oldest_datagram>:
{
 8008878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 800887c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80088ec <ip_reass_remove_oldest_datagram+0x74>
{
 8008880:	4605      	mov	r5, r0
 8008882:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8008884:	2600      	movs	r6, #0
    other_datagrams = 0;
 8008886:	2400      	movs	r4, #0
    r = reassdatagrams;
 8008888:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800888c:	4621      	mov	r1, r4
    prev = NULL;
 800888e:	46a4      	mov	ip, r4
    oldest = NULL;
 8008890:	4620      	mov	r0, r4
    while (r != NULL) {
 8008892:	b953      	cbnz	r3, 80088aa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8008894:	b110      	cbz	r0, 800889c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8008896:	f7ff ff7b 	bl	8008790 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800889a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800889c:	42be      	cmp	r6, r7
 800889e:	da01      	bge.n	80088a4 <ip_reass_remove_oldest_datagram+0x2c>
 80088a0:	2c01      	cmp	r4, #1
 80088a2:	dcf0      	bgt.n	8008886 <ip_reass_remove_oldest_datagram+0xe>
}
 80088a4:	4630      	mov	r0, r6
 80088a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80088aa:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80088ae:	695a      	ldr	r2, [r3, #20]
 80088b0:	4572      	cmp	r2, lr
 80088b2:	d109      	bne.n	80088c8 <ip_reass_remove_oldest_datagram+0x50>
 80088b4:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	4572      	cmp	r2, lr
 80088bc:	d104      	bne.n	80088c8 <ip_reass_remove_oldest_datagram+0x50>
 80088be:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 80088c2:	88aa      	ldrh	r2, [r5, #4]
 80088c4:	4596      	cmp	lr, r2
 80088c6:	d008      	beq.n	80088da <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 80088c8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80088ca:	b160      	cbz	r0, 80088e6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 80088cc:	7fc2      	ldrb	r2, [r0, #31]
 80088ce:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 80088d2:	4596      	cmp	lr, r2
 80088d4:	bf9c      	itt	ls
 80088d6:	4661      	movls	r1, ip
 80088d8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	2a00      	cmp	r2, #0
 80088de:	bf18      	it	ne
 80088e0:	469c      	movne	ip, r3
 80088e2:	4613      	mov	r3, r2
 80088e4:	e7d5      	b.n	8008892 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 80088e6:	4661      	mov	r1, ip
 80088e8:	4618      	mov	r0, r3
 80088ea:	e7f6      	b.n	80088da <ip_reass_remove_oldest_datagram+0x62>
 80088ec:	20006764 	.word	0x20006764

080088f0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80088f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80088f2:	4604      	mov	r4, r0
 80088f4:	b930      	cbnz	r0, 8008904 <ip_frag_free_pbuf_custom_ref+0x14>
 80088f6:	4b06      	ldr	r3, [pc, #24]	; (8008910 <ip_frag_free_pbuf_custom_ref+0x20>)
 80088f8:	4906      	ldr	r1, [pc, #24]	; (8008914 <ip_frag_free_pbuf_custom_ref+0x24>)
 80088fa:	4807      	ldr	r0, [pc, #28]	; (8008918 <ip_frag_free_pbuf_custom_ref+0x28>)
 80088fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8008900:	f005 fac8 	bl	800de94 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8008904:	4621      	mov	r1, r4
 8008906:	2005      	movs	r0, #5
}
 8008908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800890c:	f000 be2c 	b.w	8009568 <memp_free>
 8008910:	0801bbf7 	.word	0x0801bbf7
 8008914:	0801c4d2 	.word	0x0801c4d2
 8008918:	0801a4e1 	.word	0x0801a4e1

0800891c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800891c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800891e:	4604      	mov	r4, r0
 8008920:	b930      	cbnz	r0, 8008930 <ipfrag_free_pbuf_custom+0x14>
 8008922:	4b08      	ldr	r3, [pc, #32]	; (8008944 <ipfrag_free_pbuf_custom+0x28>)
 8008924:	4908      	ldr	r1, [pc, #32]	; (8008948 <ipfrag_free_pbuf_custom+0x2c>)
 8008926:	4809      	ldr	r0, [pc, #36]	; (800894c <ipfrag_free_pbuf_custom+0x30>)
 8008928:	f240 22ce 	movw	r2, #718	; 0x2ce
 800892c:	f005 fab2 	bl	800de94 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8008930:	6960      	ldr	r0, [r4, #20]
 8008932:	b108      	cbz	r0, 8008938 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8008934:	f001 f846 	bl	80099c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8008938:	4620      	mov	r0, r4
}
 800893a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800893e:	f7ff bfd7 	b.w	80088f0 <ip_frag_free_pbuf_custom_ref>
 8008942:	bf00      	nop
 8008944:	0801bbf7 	.word	0x0801bbf7
 8008948:	0801bcf0 	.word	0x0801bcf0
 800894c:	0801a4e1 	.word	0x0801a4e1

08008950 <ip_reass_tmr>:
{
 8008950:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8008952:	4b09      	ldr	r3, [pc, #36]	; (8008978 <ip_reass_tmr+0x28>)
 8008954:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8008956:	2400      	movs	r4, #0
  while (r != NULL) {
 8008958:	b900      	cbnz	r0, 800895c <ip_reass_tmr+0xc>
}
 800895a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800895c:	7fc3      	ldrb	r3, [r0, #31]
 800895e:	6805      	ldr	r5, [r0, #0]
 8008960:	b123      	cbz	r3, 800896c <ip_reass_tmr+0x1c>
      r->timer--;
 8008962:	3b01      	subs	r3, #1
 8008964:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8008966:	4604      	mov	r4, r0
 8008968:	4628      	mov	r0, r5
 800896a:	e7f5      	b.n	8008958 <ip_reass_tmr+0x8>
 800896c:	4621      	mov	r1, r4
 800896e:	f7ff ff0f 	bl	8008790 <ip_reass_free_complete_datagram>
 8008972:	4620      	mov	r0, r4
 8008974:	e7f7      	b.n	8008966 <ip_reass_tmr+0x16>
 8008976:	bf00      	nop
 8008978:	20006764 	.word	0x20006764

0800897c <ip4_reass>:
{
 800897c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8008980:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8008982:	782b      	ldrb	r3, [r5, #0]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	2b05      	cmp	r3, #5
{
 800898a:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800898c:	f040 80a0 	bne.w	8008ad0 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008990:	88e8      	ldrh	r0, [r5, #6]
 8008992:	f000 fab1 	bl	8008ef8 <lwip_htons>
 8008996:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008998:	8868      	ldrh	r0, [r5, #2]
 800899a:	f000 faad 	bl	8008ef8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800899e:	782b      	ldrb	r3, [r5, #0]
 80089a0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80089a4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80089a8:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80089ac:	f0c0 8090 	bcc.w	8008ad0 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 80089b0:	1bc0      	subs	r0, r0, r7
 80089b2:	b283      	uxth	r3, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80089b4:	4ebf      	ldr	r6, [pc, #764]	; (8008cb4 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 80089b6:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 80089b8:	4640      	mov	r0, r8
 80089ba:	f001 f957 	bl	8009c6c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80089be:	88b3      	ldrh	r3, [r6, #4]
 80089c0:	4403      	add	r3, r0
 80089c2:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 80089c4:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80089c6:	dc79      	bgt.n	8008abc <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80089c8:	6834      	ldr	r4, [r6, #0]
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	f040 8085 	bne.w	8008ada <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80089d0:	2004      	movs	r0, #4
 80089d2:	f000 fdad 	bl	8009530 <memp_malloc>
  if (ipr == NULL) {
 80089d6:	4604      	mov	r4, r0
 80089d8:	b958      	cbnz	r0, 80089f2 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80089da:	4649      	mov	r1, r9
 80089dc:	4628      	mov	r0, r5
 80089de:	f7ff ff4b 	bl	8008878 <ip_reass_remove_oldest_datagram>
 80089e2:	4581      	cmp	r9, r0
 80089e4:	dc74      	bgt.n	8008ad0 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80089e6:	2004      	movs	r0, #4
 80089e8:	f000 fda2 	bl	8009530 <memp_malloc>
    if (ipr == NULL)
 80089ec:	4604      	mov	r4, r0
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d06e      	beq.n	8008ad0 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80089f2:	221c      	movs	r2, #28
 80089f4:	2100      	movs	r1, #0
 80089f6:	1d20      	adds	r0, r4, #4
 80089f8:	f005 fa44 	bl	800de84 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80089fc:	230f      	movs	r3, #15
 80089fe:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8008a00:	6833      	ldr	r3, [r6, #0]
 8008a02:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8008a04:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8008a06:	462b      	mov	r3, r5
 8008a08:	f104 0208 	add.w	r2, r4, #8
 8008a0c:	f105 0114 	add.w	r1, r5, #20
 8008a10:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a14:	f842 0b04 	str.w	r0, [r2], #4
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	d1f9      	bne.n	8008a10 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8008a1c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008a20:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 8008a24:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008a28:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8008a2c:	d10a      	bne.n	8008a44 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8008a34:	429f      	cmp	r7, r3
 8008a36:	f200 8129 	bhi.w	8008c8c <ip4_reass+0x310>
 8008a3a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f200 8124 	bhi.w	8008c8c <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8008a44:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8008a48:	8868      	ldrh	r0, [r5, #2]
 8008a4a:	f000 fa55 	bl	8008ef8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8008a4e:	782b      	ldrb	r3, [r5, #0]
 8008a50:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8008a54:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8008a58:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008a5c:	f0c0 8116 	bcc.w	8008c8c <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 8008a60:	1a80      	subs	r0, r0, r2
 8008a62:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8008a66:	88e8      	ldrh	r0, [r5, #6]
 8008a68:	f000 fa46 	bl	8008ef8 <lwip_htons>
 8008a6c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008a70:	00c0      	lsls	r0, r0, #3
  iprh->end = (u16_t)(offset + len);
 8008a72:	eb0a 0300 	add.w	r3, sl, r0
  iprh = (struct ip_reass_helper *)new_p->payload;
 8008a76:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->end = (u16_t)(offset + len);
 8008a7a:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8008a7e:	2500      	movs	r5, #0
  if (iprh->end < offset) {
 8008a80:	4560      	cmp	r0, ip
  iprh->next_pbuf = NULL;
 8008a82:	7035      	strb	r5, [r6, #0]
 8008a84:	7075      	strb	r5, [r6, #1]
 8008a86:	70b5      	strb	r5, [r6, #2]
 8008a88:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8008a8a:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 8008a8c:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8008a8e:	f200 80fd 	bhi.w	8008c8c <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 8008a92:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8008a96:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8008a9a:	4671      	mov	r1, lr
 8008a9c:	bb61      	cbnz	r1, 8008af8 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8008a9e:	2d00      	cmp	r5, #0
 8008aa0:	f040 80ae 	bne.w	8008c00 <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8008aa4:	f1be 0f00 	cmp.w	lr, #0
 8008aa8:	f000 809a 	beq.w	8008be0 <ip4_reass+0x264>
 8008aac:	4b82      	ldr	r3, [pc, #520]	; (8008cb8 <ip4_reass+0x33c>)
 8008aae:	4983      	ldr	r1, [pc, #524]	; (8008cbc <ip4_reass+0x340>)
 8008ab0:	4883      	ldr	r0, [pc, #524]	; (8008cc0 <ip4_reass+0x344>)
 8008ab2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8008ab6:	f005 f9ed 	bl	800de94 <iprintf>
 8008aba:	e091      	b.n	8008be0 <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8008abc:	4601      	mov	r1, r0
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7ff feda 	bl	8008878 <ip_reass_remove_oldest_datagram>
 8008ac4:	b120      	cbz	r0, 8008ad0 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8008ac6:	88b3      	ldrh	r3, [r6, #4]
 8008ac8:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8008aca:	2b0a      	cmp	r3, #10
 8008acc:	f77f af7c 	ble.w	80089c8 <ip4_reass+0x4c>
  pbuf_free(p);
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	f000 ff77 	bl	80099c4 <pbuf_free>
  return NULL;
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	e07c      	b.n	8008bd4 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8008ada:	68eb      	ldr	r3, [r5, #12]
 8008adc:	6962      	ldr	r2, [r4, #20]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d108      	bne.n	8008af4 <ip4_reass+0x178>
 8008ae2:	692b      	ldr	r3, [r5, #16]
 8008ae4:	69a2      	ldr	r2, [r4, #24]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d104      	bne.n	8008af4 <ip4_reass+0x178>
 8008aea:	89a2      	ldrh	r2, [r4, #12]
 8008aec:	88ab      	ldrh	r3, [r5, #4]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	f000 80f2 	beq.w	8008cd8 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8008af4:	6824      	ldr	r4, [r4, #0]
 8008af6:	e768      	b.n	80089ca <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8008af8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8008afa:	889a      	ldrh	r2, [r3, #4]
 8008afc:	4290      	cmp	r0, r2
 8008afe:	d272      	bcs.n	8008be6 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 8008b00:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	d06a      	beq.n	8008bdc <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8008b06:	88eb      	ldrh	r3, [r5, #6]
 8008b08:	4298      	cmp	r0, r3
 8008b0a:	f0c0 80bf 	bcc.w	8008c8c <ip4_reass+0x310>
 8008b0e:	4594      	cmp	ip, r2
 8008b10:	f200 80bc 	bhi.w	8008c8c <ip4_reass+0x310>
        iprh_prev->next_pbuf = new_p;
 8008b14:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8008b18:	4298      	cmp	r0, r3
      if (iprh_prev->end != iprh->start) {
 8008b1a:	f040 80f9 	bne.w	8008d10 <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8008b1e:	f1bb 0f00 	cmp.w	fp, #0
 8008b22:	d004      	beq.n	8008b2e <ip4_reass+0x1b2>
 8008b24:	7fa3      	ldrb	r3, [r4, #30]
 8008b26:	f013 0301 	ands.w	r3, r3, #1
 8008b2a:	f000 80a0 	beq.w	8008c6e <ip4_reass+0x2f2>
    if (valid) {
 8008b2e:	f1ba 0f00 	cmp.w	sl, #0
 8008b32:	d175      	bne.n	8008c20 <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 8008b34:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8008b38:	4b5e      	ldr	r3, [pc, #376]	; (8008cb4 <ip4_reass+0x338>)
 8008b3a:	8898      	ldrh	r0, [r3, #4]
 8008b3c:	4481      	add	r9, r0
 8008b3e:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 8008b42:	4698      	mov	r8, r3
 8008b44:	f1bb 0f00 	cmp.w	fp, #0
 8008b48:	d106      	bne.n	8008b58 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 8008b4a:	9b01      	ldr	r3, [sp, #4]
 8008b4c:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008b4e:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8008b50:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8008b58:	f1ba 0f01 	cmp.w	sl, #1
 8008b5c:	d1bb      	bne.n	8008ad6 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008b5e:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008b60:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008b62:	685e      	ldr	r6, [r3, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008b64:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8008b66:	6835      	ldr	r5, [r6, #0]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8008b68:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8008b6a:	f104 0308 	add.w	r3, r4, #8
 8008b6e:	4632      	mov	r2, r6
 8008b70:	f104 011c 	add.w	r1, r4, #28
 8008b74:	f853 7b04 	ldr.w	r7, [r3], #4
 8008b78:	f842 7b04 	str.w	r7, [r2], #4
 8008b7c:	428b      	cmp	r3, r1
 8008b7e:	d1f9      	bne.n	8008b74 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008b80:	f000 f9ba 	bl	8008ef8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8008b84:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8008b86:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8008b88:	71b3      	strb	r3, [r6, #6]
 8008b8a:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8008b8c:	72b3      	strb	r3, [r6, #10]
 8008b8e:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8008b90:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8008b92:	2d00      	cmp	r5, #0
 8008b94:	d16d      	bne.n	8008c72 <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 8008b96:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	d002      	beq.n	8008ba4 <ip4_reass+0x228>
 8008b9e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d171      	bne.n	8008c88 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7ff fdd0 	bl	800874c <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8008bac:	4630      	mov	r0, r6
 8008bae:	f001 f85d 	bl	8009c6c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8008bb2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008bb6:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 8008bb8:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8008bba:	d206      	bcs.n	8008bca <ip4_reass+0x24e>
 8008bbc:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <ip4_reass+0x33c>)
 8008bbe:	4941      	ldr	r1, [pc, #260]	; (8008cc4 <ip4_reass+0x348>)
 8008bc0:	483f      	ldr	r0, [pc, #252]	; (8008cc0 <ip4_reass+0x344>)
 8008bc2:	f240 229b 	movw	r2, #667	; 0x29b
 8008bc6:	f005 f965 	bl	800de94 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8008bca:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8008bce:	1b04      	subs	r4, r0, r4
 8008bd0:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	b003      	add	sp, #12
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8008bdc:	4594      	cmp	ip, r2
 8008bde:	d855      	bhi.n	8008c8c <ip4_reass+0x310>
      ipr->p = new_p;
 8008be0:	f8c4 8004 	str.w	r8, [r4, #4]
 8008be4:	e79b      	b.n	8008b1e <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8008be6:	d051      	beq.n	8008c8c <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 8008be8:	88d9      	ldrh	r1, [r3, #6]
 8008bea:	4281      	cmp	r1, r0
 8008bec:	d84e      	bhi.n	8008c8c <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 8008bee:	b125      	cbz	r5, 8008bfa <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 8008bf0:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	bf18      	it	ne
 8008bf6:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8008bfa:	6819      	ldr	r1, [r3, #0]
 8008bfc:	461d      	mov	r5, r3
 8008bfe:	e74d      	b.n	8008a9c <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8008c00:	88eb      	ldrh	r3, [r5, #6]
 8008c02:	4283      	cmp	r3, r0
 8008c04:	d906      	bls.n	8008c14 <ip4_reass+0x298>
 8008c06:	4b2c      	ldr	r3, [pc, #176]	; (8008cb8 <ip4_reass+0x33c>)
 8008c08:	492f      	ldr	r1, [pc, #188]	; (8008cc8 <ip4_reass+0x34c>)
 8008c0a:	482d      	ldr	r0, [pc, #180]	; (8008cc0 <ip4_reass+0x344>)
 8008c0c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8008c10:	f005 f940 	bl	800de94 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8008c14:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8008c18:	88ea      	ldrh	r2, [r5, #6]
 8008c1a:	88b3      	ldrh	r3, [r6, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	e77c      	b.n	8008b1a <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d086      	beq.n	8008b34 <ip4_reass+0x1b8>
 8008c26:	6859      	ldr	r1, [r3, #4]
 8008c28:	888b      	ldrh	r3, [r1, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d182      	bne.n	8008b34 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 8008c2e:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8008c30:	b9a3      	cbnz	r3, 8008c5c <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 8008c32:	42b1      	cmp	r1, r6
 8008c34:	d106      	bne.n	8008c44 <ip4_reass+0x2c8>
 8008c36:	4b20      	ldr	r3, [pc, #128]	; (8008cb8 <ip4_reass+0x33c>)
 8008c38:	4924      	ldr	r1, [pc, #144]	; (8008ccc <ip4_reass+0x350>)
 8008c3a:	4821      	ldr	r0, [pc, #132]	; (8008cc0 <ip4_reass+0x344>)
 8008c3c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008c40:	f005 f928 	bl	800de94 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8008c44:	6833      	ldr	r3, [r6, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f43f af76 	beq.w	8008b38 <ip4_reass+0x1bc>
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <ip4_reass+0x33c>)
 8008c4e:	4920      	ldr	r1, [pc, #128]	; (8008cd0 <ip4_reass+0x354>)
 8008c50:	481b      	ldr	r0, [pc, #108]	; (8008cc0 <ip4_reass+0x344>)
 8008c52:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8008c56:	f005 f91d 	bl	800de94 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8008c5a:	e76d      	b.n	8008b38 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8008c5c:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8008c5e:	88f0      	ldrh	r0, [r6, #6]
 8008c60:	8893      	ldrh	r3, [r2, #4]
 8008c62:	4298      	cmp	r0, r3
 8008c64:	f47f af66 	bne.w	8008b34 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8008c68:	6813      	ldr	r3, [r2, #0]
 8008c6a:	4616      	mov	r6, r2
 8008c6c:	e7e0      	b.n	8008c30 <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8008c6e:	469a      	mov	sl, r3
 8008c70:	e762      	b.n	8008b38 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8008c72:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8008c74:	2114      	movs	r1, #20
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 fe70 	bl	800995c <pbuf_remove_header>
      pbuf_cat(p, r);
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f001 f818 	bl	8009cb4 <pbuf_cat>
      r = iprh->next_pbuf;
 8008c84:	683d      	ldr	r5, [r7, #0]
 8008c86:	e784      	b.n	8008b92 <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	e786      	b.n	8008b9a <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 8008c8c:	6863      	ldr	r3, [r4, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f47f af1e 	bne.w	8008ad0 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8008c94:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <ip4_reass+0x338>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d006      	beq.n	8008caa <ip4_reass+0x32e>
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <ip4_reass+0x33c>)
 8008c9e:	490d      	ldr	r1, [pc, #52]	; (8008cd4 <ip4_reass+0x358>)
 8008ca0:	4807      	ldr	r0, [pc, #28]	; (8008cc0 <ip4_reass+0x344>)
 8008ca2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008ca6:	f005 f8f5 	bl	800de94 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8008caa:	2100      	movs	r1, #0
 8008cac:	4620      	mov	r0, r4
 8008cae:	f7ff fd4d 	bl	800874c <ip_reass_dequeue_datagram>
 8008cb2:	e70d      	b.n	8008ad0 <ip4_reass+0x154>
 8008cb4:	20006764 	.word	0x20006764
 8008cb8:	0801bbf7 	.word	0x0801bbf7
 8008cbc:	0801bd1a 	.word	0x0801bd1a
 8008cc0:	0801a4e1 	.word	0x0801a4e1
 8008cc4:	0801bd80 	.word	0x0801bd80
 8008cc8:	0801bcfc 	.word	0x0801bcfc
 8008ccc:	0801bd51 	.word	0x0801bd51
 8008cd0:	0801bd5e 	.word	0x0801bd5e
 8008cd4:	0801bd9b 	.word	0x0801bd9b
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008cd8:	88e8      	ldrh	r0, [r5, #6]
 8008cda:	f000 f90d 	bl	8008ef8 <lwip_htons>
 8008cde:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f47f ae9a 	bne.w	8008a1c <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8008ce8:	89e0      	ldrh	r0, [r4, #14]
 8008cea:	f000 f905 	bl	8008ef8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8008cee:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	f43f ae92 	beq.w	8008a1c <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	f104 0208 	add.w	r2, r4, #8
 8008cfe:	f105 0114 	add.w	r1, r5, #20
 8008d02:	f853 0b04 	ldr.w	r0, [r3], #4
 8008d06:	f842 0b04 	str.w	r0, [r2], #4
 8008d0a:	428b      	cmp	r3, r1
 8008d0c:	d1f9      	bne.n	8008d02 <ip4_reass+0x386>
 8008d0e:	e685      	b.n	8008a1c <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8008d10:	f1bb 0f00 	cmp.w	fp, #0
 8008d14:	f43f af0e 	beq.w	8008b34 <ip4_reass+0x1b8>
 8008d18:	f04f 0a00 	mov.w	sl, #0
 8008d1c:	e702      	b.n	8008b24 <ip4_reass+0x1a8>
 8008d1e:	bf00      	nop

08008d20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008d24:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8008d26:	ed2d 8b02 	vpush	{d8}
 8008d2a:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008d2e:	f1b3 0214 	subs.w	r2, r3, #20
{
 8008d32:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8008d34:	bf48      	it	mi
 8008d36:	f1a3 020d 	submi.w	r2, r3, #13
 8008d3a:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 8008d3e:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8008d40:	6843      	ldr	r3, [r0, #4]
 8008d42:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	2b05      	cmp	r3, #5
{
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	468a      	mov	sl, r1
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8008d50:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8008d54:	d109      	bne.n	8008d6a <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8008d56:	8943      	ldrh	r3, [r0, #10]
 8008d58:	2b13      	cmp	r3, #19
 8008d5a:	d809      	bhi.n	8008d70 <ip4_frag+0x50>
 8008d5c:	4b60      	ldr	r3, [pc, #384]	; (8008ee0 <ip4_frag+0x1c0>)
 8008d5e:	4961      	ldr	r1, [pc, #388]	; (8008ee4 <ip4_frag+0x1c4>)
 8008d60:	4861      	ldr	r0, [pc, #388]	; (8008ee8 <ip4_frag+0x1c8>)
 8008d62:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8008d66:	f005 f895 	bl	800de94 <iprintf>
    return ERR_VAL;
 8008d6a:	f06f 0005 	mvn.w	r0, #5
 8008d6e:	e013      	b.n	8008d98 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8008d70:	9b02      	ldr	r3, [sp, #8]
 8008d72:	88d8      	ldrh	r0, [r3, #6]
 8008d74:	f000 f8c0 	bl	8008ef8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8008d78:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8008d7c:	9303      	str	r3, [sp, #12]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8008d7e:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8008d82:	9307      	str	r3, [sp, #28]

  left = (u16_t)(p->tot_len - IP_HLEN);

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008d84:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008d86:	892c      	ldrh	r4, [r5, #8]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008d88:	00db      	lsls	r3, r3, #3
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008d8a:	3c14      	subs	r4, #20
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008d8c:	b29b      	uxth	r3, r3
  left = (u16_t)(p->tot_len - IP_HLEN);
 8008d8e:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008d90:	9306      	str	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8008d92:	2600      	movs	r6, #0
  while (left) {
 8008d94:	b92c      	cbnz	r4, 8008da2 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8008d96:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8008d98:	b00b      	add	sp, #44	; 0x2c
 8008d9a:	ecbd 8b02 	vpop	{d8}
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	bf28      	it	cs
 8008da8:	4623      	movcs	r3, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008daa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008dae:	2114      	movs	r1, #20
 8008db0:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8008db2:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8008db4:	f000 fe6e 	bl	8009a94 <pbuf_alloc>
    if (rambuf == NULL) {
 8008db8:	4680      	mov	r8, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d036      	beq.n	8008e2c <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8008dbe:	8943      	ldrh	r3, [r0, #10]
 8008dc0:	2b13      	cmp	r3, #19
 8008dc2:	d806      	bhi.n	8008dd2 <ip4_frag+0xb2>
 8008dc4:	4b46      	ldr	r3, [pc, #280]	; (8008ee0 <ip4_frag+0x1c0>)
 8008dc6:	4949      	ldr	r1, [pc, #292]	; (8008eec <ip4_frag+0x1cc>)
 8008dc8:	4847      	ldr	r0, [pc, #284]	; (8008ee8 <ip4_frag+0x1c8>)
 8008dca:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008dce:	f005 f861 	bl	800de94 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	3114      	adds	r1, #20
 8008ddc:	f853 0b04 	ldr.w	r0, [r3], #4
 8008de0:	f842 0b04 	str.w	r0, [r2], #4
 8008de4:	428b      	cmp	r3, r1
 8008de6:	d1f9      	bne.n	8008ddc <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8008de8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8008dec:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	d041      	beq.n	8008e7a <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8008df6:	896b      	ldrh	r3, [r5, #10]
 8008df8:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8008dfa:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8008dfc:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8008dfe:	d206      	bcs.n	8008e0e <ip4_frag+0xee>
 8008e00:	4b37      	ldr	r3, [pc, #220]	; (8008ee0 <ip4_frag+0x1c0>)
 8008e02:	493b      	ldr	r1, [pc, #236]	; (8008ef0 <ip4_frag+0x1d0>)
 8008e04:	4838      	ldr	r0, [pc, #224]	; (8008ee8 <ip4_frag+0x1c8>)
 8008e06:	f240 322d 	movw	r2, #813	; 0x32d
 8008e0a:	f005 f843 	bl	800de94 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8008e0e:	454e      	cmp	r6, r9
 8008e10:	bf28      	it	cs
 8008e12:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8008e14:	b916      	cbnz	r6, 8008e1c <ip4_frag+0xfc>
        p = p->next;
 8008e16:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8008e18:	2700      	movs	r7, #0
 8008e1a:	e7e9      	b.n	8008df0 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8008e1c:	2005      	movs	r0, #5
 8008e1e:	f000 fb87 	bl	8009530 <memp_malloc>
      if (pcr == NULL) {
 8008e22:	4603      	mov	r3, r0
 8008e24:	b928      	cbnz	r0, 8008e32 <ip4_frag+0x112>
        pbuf_free(rambuf);
 8008e26:	4640      	mov	r0, r8
 8008e28:	f000 fdcc 	bl	80099c4 <pbuf_free>
  return ERR_MEM;
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	e7b2      	b.n	8008d98 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8008e32:	9601      	str	r6, [sp, #4]
 8008e34:	686a      	ldr	r2, [r5, #4]
 8008e36:	9008      	str	r0, [sp, #32]
 8008e38:	443a      	add	r2, r7
 8008e3a:	9200      	str	r2, [sp, #0]
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	2241      	movs	r2, #65	; 0x41
 8008e40:	2000      	movs	r0, #0
 8008e42:	f000 fd6d 	bl	8009920 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8008e46:	9b08      	ldr	r3, [sp, #32]
 8008e48:	b918      	cbnz	r0, 8008e52 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fd50 	bl	80088f0 <ip_frag_free_pbuf_custom_ref>
 8008e50:	e7e9      	b.n	8008e26 <ip4_frag+0x106>
 8008e52:	e9cd 0308 	strd	r0, r3, [sp, #32]
      pbuf_ref(p);
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 ff10 	bl	8009c7c <pbuf_ref>
      pcr->original = p;
 8008e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008e5e:	4a25      	ldr	r2, [pc, #148]	; (8008ef4 <ip4_frag+0x1d4>)
      pbuf_cat(rambuf, newpbuf);
 8008e60:	9908      	ldr	r1, [sp, #32]
      pcr->original = p;
 8008e62:	615d      	str	r5, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008e64:	eba9 0906 	sub.w	r9, r9, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8008e68:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8008e6a:	4640      	mov	r0, r8
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8008e6c:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8008e70:	f000 ff20 	bl	8009cb4 <pbuf_cat>
      if (left_to_copy) {
 8008e74:	f1b9 0f00 	cmp.w	r9, #0
 8008e78:	d1cd      	bne.n	8008e16 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8008e80:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
 8008e84:	3b13      	subs	r3, #19
    poff = (u16_t)(poff + newpbuflen);
 8008e86:	4437      	add	r7, r6
    if (!last || mf_set) {
 8008e88:	42a3      	cmp	r3, r4
    poff = (u16_t)(poff + newpbuflen);
 8008e8a:	b2bf      	uxth	r7, r7
    if (!last || mf_set) {
 8008e8c:	dd01      	ble.n	8008e92 <ip4_frag+0x172>
 8008e8e:	9b07      	ldr	r3, [sp, #28]
 8008e90:	b10b      	cbz	r3, 8008e96 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8008e92:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008e96:	f000 f82f 	bl	8008ef8 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008e9a:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8008e9c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008ea0:	f103 0014 	add.w	r0, r3, #20
 8008ea4:	b280      	uxth	r0, r0
 8008ea6:	f000 f827 	bl	8008ef8 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8008eaa:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8008eac:	ee18 2a10 	vmov	r2, s16
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8008eb0:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8008eb4:	f88b 300a 	strb.w	r3, [fp, #10]
 8008eb8:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4798      	blx	r3
    pbuf_free(rambuf);
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	f000 fd7c 	bl	80099c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8008ecc:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8008ece:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8008ed0:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8008ed2:	9b03      	ldr	r3, [sp, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8008ed8:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8008eda:	9303      	str	r3, [sp, #12]
 8008edc:	e75a      	b.n	8008d94 <ip4_frag+0x74>
 8008ede:	bf00      	nop
 8008ee0:	0801bbf7 	.word	0x0801bbf7
 8008ee4:	0801bdbb 	.word	0x0801bdbb
 8008ee8:	0801a4e1 	.word	0x0801a4e1
 8008eec:	0801bdd6 	.word	0x0801bdd6
 8008ef0:	0801bdf6 	.word	0x0801bdf6
 8008ef4:	0800891d 	.word	0x0800891d

08008ef8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8008ef8:	ba40      	rev16	r0, r0
}
 8008efa:	b280      	uxth	r0, r0
 8008efc:	4770      	bx	lr

08008efe <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8008efe:	ba00      	rev	r0, r0
 8008f00:	4770      	bx	lr

08008f02 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008f02:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8008f04:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008f06:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8008f0a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8008f0e:	d007      	beq.n	8008f20 <lwip_standard_chksum+0x1e>
 8008f10:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8008f12:	bfc2      	ittt	gt
 8008f14:	f810 3b01 	ldrbgt.w	r3, [r0], #1
 8008f18:	f88d 3007 	strbgt.w	r3, [sp, #7]
    len--;
 8008f1c:	f101 31ff 	addgt.w	r1, r1, #4294967295
  u32_t sum = 0;
 8008f20:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8008f22:	2901      	cmp	r1, #1
 8008f24:	dc15      	bgt.n	8008f52 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008f26:	bf04      	itt	eq
 8008f28:	7803      	ldrbeq	r3, [r0, #0]
 8008f2a:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8008f2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f32:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008f34:	b298      	uxth	r0, r3
 8008f36:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8008f3a:	b298      	uxth	r0, r3
 8008f3c:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8008f40:	b124      	cbz	r4, 8008f4c <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8008f42:	0203      	lsls	r3, r0, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008f4a:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8008f4c:	b280      	uxth	r0, r0
 8008f4e:	b002      	add	sp, #8
 8008f50:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8008f52:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8008f56:	3902      	subs	r1, #2
    sum += *ps++;
 8008f58:	441a      	add	r2, r3
    len -= 2;
 8008f5a:	e7e2      	b.n	8008f22 <lwip_standard_chksum+0x20>

08008f5c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8008f5c:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8008f5e:	2600      	movs	r6, #0
{
 8008f60:	4605      	mov	r5, r0

  acc = 0;
 8008f62:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8008f64:	b945      	cbnz	r5, 8008f78 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8008f66:	b126      	cbz	r6, 8008f72 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008f68:	0223      	lsls	r3, r4, #8
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008f70:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8008f72:	43e0      	mvns	r0, r4
}
 8008f74:	b280      	uxth	r0, r0
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008f78:	8969      	ldrh	r1, [r5, #10]
 8008f7a:	6868      	ldr	r0, [r5, #4]
 8008f7c:	f7ff ffc1 	bl	8008f02 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8008f80:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008f82:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 8008f84:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8008f86:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8008f88:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8008f8c:	d506      	bpl.n	8008f9c <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8008f8e:	0223      	lsls	r3, r4, #8
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008f96:	f086 0601 	eor.w	r6, r6, #1
 8008f9a:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8008f9c:	682d      	ldr	r5, [r5, #0]
 8008f9e:	e7e1      	b.n	8008f64 <inet_chksum_pbuf+0x8>

08008fa0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008fa0:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008fa2:	f004 fea9 	bl	800dcf8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8008fa6:	f000 f80d 	bl	8008fc4 <mem_init>
  memp_init();
 8008faa:	f000 fab3 	bl	8009514 <memp_init>
  pbuf_init();
  netif_init();
 8008fae:	f000 fb49 	bl	8009644 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008fb2:	f004 fa5d 	bl	800d470 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008fb6:	f000 ffff 	bl	8009fb8 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8008fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8008fbe:	f004 ba05 	b.w	800d3cc <sys_timeouts_init>
	...

08008fc4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <mem_init+0x44>)
 8008fc6:	4811      	ldr	r0, [pc, #68]	; (800900c <mem_init+0x48>)
 8008fc8:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8008fcc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
{
 8008fd0:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8008fd2:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8008fd8:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8008fdc:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
 8008fe0:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8008fe2:	2101      	movs	r1, #1
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008fe4:	6003      	str	r3, [r0, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008fe6:	6042      	str	r2, [r0, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008fe8:	6083      	str	r3, [r0, #8]
  ram_end->used = 1;
 8008fea:	7111      	strb	r1, [r2, #4]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008fec:	300c      	adds	r0, #12
 8008fee:	f004 fe8f 	bl	800dd10 <sys_mutex_new>
 8008ff2:	b140      	cbz	r0, 8009006 <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <mem_init+0x4c>)
 8008ffa:	4906      	ldr	r1, [pc, #24]	; (8009014 <mem_init+0x50>)
 8008ffc:	4806      	ldr	r0, [pc, #24]	; (8009018 <mem_init+0x54>)
 8008ffe:	f240 221f 	movw	r2, #543	; 0x21f
 8009002:	f004 bf47 	b.w	800de94 <iprintf>
}
 8009006:	bd10      	pop	{r4, pc}
 8009008:	2000e49f 	.word	0x2000e49f
 800900c:	2000676c 	.word	0x2000676c
 8009010:	0801be05 	.word	0x0801be05
 8009014:	0801be7e 	.word	0x0801be7e
 8009018:	0801a4e1 	.word	0x0801a4e1

0800901c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800901e:	4604      	mov	r4, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	f000 80b8 	beq.w	8009196 <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009026:	0783      	lsls	r3, r0, #30
 8009028:	d00c      	beq.n	8009044 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800902a:	4b5b      	ldr	r3, [pc, #364]	; (8009198 <mem_free+0x17c>)
 800902c:	495b      	ldr	r1, [pc, #364]	; (800919c <mem_free+0x180>)
 800902e:	f240 2273 	movw	r2, #627	; 0x273
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009032:	485b      	ldr	r0, [pc, #364]	; (80091a0 <mem_free+0x184>)
 8009034:	f004 ff2e 	bl	800de94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009038:	f004 fe90 	bl	800dd5c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800903c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009040:	f004 be98 	b.w	800dd74 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009044:	4f57      	ldr	r7, [pc, #348]	; (80091a4 <mem_free+0x188>)
 8009046:	683b      	ldr	r3, [r7, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009048:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800904c:	42b3      	cmp	r3, r6
 800904e:	463d      	mov	r5, r7
 8009050:	d804      	bhi.n	800905c <mem_free+0x40>
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	f100 030c 	add.w	r3, r0, #12
 8009058:	429a      	cmp	r2, r3
 800905a:	d204      	bcs.n	8009066 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800905c:	4b4e      	ldr	r3, [pc, #312]	; (8009198 <mem_free+0x17c>)
 800905e:	4952      	ldr	r1, [pc, #328]	; (80091a8 <mem_free+0x18c>)
 8009060:	f240 227f 	movw	r2, #639	; 0x27f
 8009064:	e7e5      	b.n	8009032 <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8009066:	f107 000c 	add.w	r0, r7, #12
 800906a:	f004 fe5f 	bl	800dd2c <sys_mutex_lock>
  if (!mem->used) {
 800906e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009072:	b95b      	cbnz	r3, 800908c <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009074:	4b48      	ldr	r3, [pc, #288]	; (8009198 <mem_free+0x17c>)
 8009076:	494d      	ldr	r1, [pc, #308]	; (80091ac <mem_free+0x190>)
 8009078:	4849      	ldr	r0, [pc, #292]	; (80091a0 <mem_free+0x184>)
 800907a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800907e:	f004 ff09 	bl	800de94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009082:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 8009086:	f004 fe56 	bl	800dd36 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800908a:	e7d5      	b.n	8009038 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800908c:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009090:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8009094:	d813      	bhi.n	80090be <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 8009096:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800909a:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800909e:	d80e      	bhi.n	80090be <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	1a73      	subs	r3, r6, r1
 80090a4:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80090a6:	4283      	cmp	r3, r0
 80090a8:	d002      	beq.n	80090b0 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80090aa:	5a08      	ldrh	r0, [r1, r0]
 80090ac:	4298      	cmp	r0, r3
 80090ae:	d106      	bne.n	80090be <mem_free+0xa2>
 80090b0:	6868      	ldr	r0, [r5, #4]
  return (struct mem *)(void *)&ram[ptr];
 80090b2:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80090b4:	4282      	cmp	r2, r0
 80090b6:	d00b      	beq.n	80090d0 <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80090b8:	8852      	ldrh	r2, [r2, #2]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d008      	beq.n	80090d0 <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80090be:	4b36      	ldr	r3, [pc, #216]	; (8009198 <mem_free+0x17c>)
 80090c0:	493b      	ldr	r1, [pc, #236]	; (80091b0 <mem_free+0x194>)
 80090c2:	4837      	ldr	r0, [pc, #220]	; (80091a0 <mem_free+0x184>)
 80090c4:	f240 2295 	movw	r2, #661	; 0x295
 80090c8:	f004 fee4 	bl	800de94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80090cc:	4839      	ldr	r0, [pc, #228]	; (80091b4 <mem_free+0x198>)
 80090ce:	e7da      	b.n	8009086 <mem_free+0x6a>
  mem->used = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80090d6:	68ab      	ldr	r3, [r5, #8]
 80090d8:	42b3      	cmp	r3, r6
    lfree = mem;
 80090da:	bf88      	it	hi
 80090dc:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80090de:	428e      	cmp	r6, r1
 80090e0:	d206      	bcs.n	80090f0 <mem_free+0xd4>
 80090e2:	4b2d      	ldr	r3, [pc, #180]	; (8009198 <mem_free+0x17c>)
 80090e4:	4934      	ldr	r1, [pc, #208]	; (80091b8 <mem_free+0x19c>)
 80090e6:	482e      	ldr	r0, [pc, #184]	; (80091a0 <mem_free+0x184>)
 80090e8:	f240 12df 	movw	r2, #479	; 0x1df
 80090ec:	f004 fed2 	bl	800de94 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80090f0:	686b      	ldr	r3, [r5, #4]
 80090f2:	429e      	cmp	r6, r3
 80090f4:	d306      	bcc.n	8009104 <mem_free+0xe8>
 80090f6:	4b28      	ldr	r3, [pc, #160]	; (8009198 <mem_free+0x17c>)
 80090f8:	4930      	ldr	r1, [pc, #192]	; (80091bc <mem_free+0x1a0>)
 80090fa:	4829      	ldr	r0, [pc, #164]	; (80091a0 <mem_free+0x184>)
 80090fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009100:	f004 fec8 	bl	800de94 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009104:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009108:	b133      	cbz	r3, 8009118 <mem_free+0xfc>
 800910a:	4b23      	ldr	r3, [pc, #140]	; (8009198 <mem_free+0x17c>)
 800910c:	492c      	ldr	r1, [pc, #176]	; (80091c0 <mem_free+0x1a4>)
 800910e:	4824      	ldr	r0, [pc, #144]	; (80091a0 <mem_free+0x184>)
 8009110:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009114:	f004 febe 	bl	800de94 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009118:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800911c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009120:	d906      	bls.n	8009130 <mem_free+0x114>
 8009122:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <mem_free+0x17c>)
 8009124:	4927      	ldr	r1, [pc, #156]	; (80091c4 <mem_free+0x1a8>)
 8009126:	481e      	ldr	r0, [pc, #120]	; (80091a0 <mem_free+0x184>)
 8009128:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800912c:	f004 feb2 	bl	800de94 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009136:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009138:	4296      	cmp	r6, r2
 800913a:	d012      	beq.n	8009162 <mem_free+0x146>
 800913c:	7910      	ldrb	r0, [r2, #4]
 800913e:	b980      	cbnz	r0, 8009162 <mem_free+0x146>
 8009140:	6868      	ldr	r0, [r5, #4]
 8009142:	4282      	cmp	r2, r0
 8009144:	d00d      	beq.n	8009162 <mem_free+0x146>
    if (lfree == nmem) {
 8009146:	68a8      	ldr	r0, [r5, #8]
 8009148:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800914a:	5a5a      	ldrh	r2, [r3, r1]
 800914c:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009150:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8009152:	bf08      	it	eq
 8009154:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009156:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800915a:	bf1e      	ittt	ne
 800915c:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800915e:	1af1      	subne	r1, r6, r3
 8009160:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8009162:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8009166:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8009168:	428e      	cmp	r6, r1
 800916a:	d00f      	beq.n	800918c <mem_free+0x170>
 800916c:	7908      	ldrb	r0, [r1, #4]
 800916e:	b968      	cbnz	r0, 800918c <mem_free+0x170>
    if (lfree == mem) {
 8009170:	68a8      	ldr	r0, [r5, #8]
 8009172:	4286      	cmp	r6, r0
      lfree = pmem;
 8009174:	bf08      	it	eq
 8009176:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8009178:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800917c:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800917e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009182:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009186:	bf1c      	itt	ne
 8009188:	185b      	addne	r3, r3, r1
 800918a:	805a      	strhne	r2, [r3, #2]
}
 800918c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009190:	4808      	ldr	r0, [pc, #32]	; (80091b4 <mem_free+0x198>)
 8009192:	f004 bdd0 	b.w	800dd36 <sys_mutex_unlock>
}
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	0801be05 	.word	0x0801be05
 800919c:	0801be99 	.word	0x0801be99
 80091a0:	0801a4e1 	.word	0x0801a4e1
 80091a4:	2000676c 	.word	0x2000676c
 80091a8:	0801beba 	.word	0x0801beba
 80091ac:	0801bed3 	.word	0x0801bed3
 80091b0:	0801bef9 	.word	0x0801bef9
 80091b4:	20006778 	.word	0x20006778
 80091b8:	0801bf2b 	.word	0x0801bf2b
 80091bc:	0801bf42 	.word	0x0801bf42
 80091c0:	0801bf5c 	.word	0x0801bf5c
 80091c4:	0801bf77 	.word	0x0801bf77

080091c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80091c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80091cc:	1ccc      	adds	r4, r1, #3
 80091ce:	f024 0403 	bic.w	r4, r4, #3
 80091d2:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80091d4:	2c0b      	cmp	r4, #11
{
 80091d6:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 80091d8:	d904      	bls.n	80091e4 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80091da:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 80091de:	d902      	bls.n	80091e6 <mem_trim+0x1e>
    return NULL;
 80091e0:	2500      	movs	r5, #0
 80091e2:	e01a      	b.n	800921a <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 80091e4:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80091e6:	42a1      	cmp	r1, r4
 80091e8:	d8fa      	bhi.n	80091e0 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80091ea:	4e47      	ldr	r6, [pc, #284]	; (8009308 <mem_trim+0x140>)
 80091ec:	6833      	ldr	r3, [r6, #0]
 80091ee:	42ab      	cmp	r3, r5
 80091f0:	d802      	bhi.n	80091f8 <mem_trim+0x30>
 80091f2:	6873      	ldr	r3, [r6, #4]
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	d806      	bhi.n	8009206 <mem_trim+0x3e>
 80091f8:	4b44      	ldr	r3, [pc, #272]	; (800930c <mem_trim+0x144>)
 80091fa:	4945      	ldr	r1, [pc, #276]	; (8009310 <mem_trim+0x148>)
 80091fc:	4845      	ldr	r0, [pc, #276]	; (8009314 <mem_trim+0x14c>)
 80091fe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009202:	f004 fe47 	bl	800de94 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009206:	6833      	ldr	r3, [r6, #0]
 8009208:	42ab      	cmp	r3, r5
 800920a:	d802      	bhi.n	8009212 <mem_trim+0x4a>
 800920c:	6872      	ldr	r2, [r6, #4]
 800920e:	42aa      	cmp	r2, r5
 8009210:	d806      	bhi.n	8009220 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009212:	f004 fda3 	bl	800dd5c <sys_arch_protect>
 8009216:	f004 fdad 	bl	800dd74 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800921a:	4628      	mov	r0, r5
 800921c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009220:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009224:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009228:	1aff      	subs	r7, r7, r3
 800922a:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800922c:	f1a8 0808 	sub.w	r8, r8, #8
 8009230:	eba8 0807 	sub.w	r8, r8, r7
 8009234:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009238:	45a0      	cmp	r8, r4
 800923a:	d207      	bcs.n	800924c <mem_trim+0x84>
 800923c:	4b33      	ldr	r3, [pc, #204]	; (800930c <mem_trim+0x144>)
 800923e:	4936      	ldr	r1, [pc, #216]	; (8009318 <mem_trim+0x150>)
 8009240:	4834      	ldr	r0, [pc, #208]	; (8009314 <mem_trim+0x14c>)
 8009242:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009246:	f004 fe25 	bl	800de94 <iprintf>
  if (newsize > size) {
 800924a:	e7c9      	b.n	80091e0 <mem_trim+0x18>
  if (newsize == size) {
 800924c:	d0e5      	beq.n	800921a <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 800924e:	4833      	ldr	r0, [pc, #204]	; (800931c <mem_trim+0x154>)
 8009250:	f004 fd6c 	bl	800dd2c <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8009254:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009258:	f8d6 b000 	ldr.w	fp, [r6]
 800925c:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8009260:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009264:	bb3b      	cbnz	r3, 80092b6 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009266:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 800926a:	d106      	bne.n	800927a <mem_trim+0xb2>
 800926c:	4b27      	ldr	r3, [pc, #156]	; (800930c <mem_trim+0x144>)
 800926e:	492c      	ldr	r1, [pc, #176]	; (8009320 <mem_trim+0x158>)
 8009270:	4828      	ldr	r0, [pc, #160]	; (8009314 <mem_trim+0x14c>)
 8009272:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009276:	f004 fe0d 	bl	800de94 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	441c      	add	r4, r3
 8009280:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8009282:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8009284:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009288:	b2a2      	uxth	r2, r4
    if (lfree == mem2) {
 800928a:	fa13 f484 	uxtah	r4, r3, r4
 800928e:	4551      	cmp	r1, sl
    mem2->used = 0;
 8009290:	f04f 0100 	mov.w	r1, #0
 8009294:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8009296:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8009298:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 800929a:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800929e:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 80092a0:	bf08      	it	eq
 80092a2:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092a4:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 80092a8:	d001      	beq.n	80092ae <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80092aa:	440b      	add	r3, r1
 80092ac:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80092ae:	481b      	ldr	r0, [pc, #108]	; (800931c <mem_trim+0x154>)
 80092b0:	f004 fd41 	bl	800dd36 <sys_mutex_unlock>
  return rmem;
 80092b4:	e7b1      	b.n	800921a <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80092b6:	f104 0314 	add.w	r3, r4, #20
 80092ba:	4543      	cmp	r3, r8
 80092bc:	d8f7      	bhi.n	80092ae <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80092be:	f107 0308 	add.w	r3, r7, #8
 80092c2:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80092c4:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80092c8:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80092ca:	d106      	bne.n	80092da <mem_trim+0x112>
 80092cc:	4b0f      	ldr	r3, [pc, #60]	; (800930c <mem_trim+0x144>)
 80092ce:	4914      	ldr	r1, [pc, #80]	; (8009320 <mem_trim+0x158>)
 80092d0:	4810      	ldr	r0, [pc, #64]	; (8009314 <mem_trim+0x14c>)
 80092d2:	f240 3216 	movw	r2, #790	; 0x316
 80092d6:	f004 fddd 	bl	800de94 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80092da:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 80092dc:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 80092de:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80092e0:	4291      	cmp	r1, r2
    mem2->used = 0;
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 80092e8:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 80092ec:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 80092ee:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 80092f0:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = mem2;
 80092f4:	bf88      	it	hi
 80092f6:	60b2      	strhi	r2, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80092f8:	5b1a      	ldrh	r2, [r3, r4]
 80092fa:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 80092fe:	bf1c      	itt	ne
 8009300:	189b      	addne	r3, r3, r2
 8009302:	805c      	strhne	r4, [r3, #2]
 8009304:	e7d3      	b.n	80092ae <mem_trim+0xe6>
 8009306:	bf00      	nop
 8009308:	2000676c 	.word	0x2000676c
 800930c:	0801be05 	.word	0x0801be05
 8009310:	0801bfa1 	.word	0x0801bfa1
 8009314:	0801a4e1 	.word	0x0801a4e1
 8009318:	0801bfb8 	.word	0x0801bfb8
 800931c:	20006778 	.word	0x20006778
 8009320:	0801bfd8 	.word	0x0801bfd8

08009324 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009328:	2800      	cmp	r0, #0
 800932a:	f000 8088 	beq.w	800943e <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800932e:	1cc5      	adds	r5, r0, #3
 8009330:	f025 0503 	bic.w	r5, r5, #3
 8009334:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8009336:	2d0b      	cmp	r5, #11
 8009338:	d904      	bls.n	8009344 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800933a:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800933e:	d902      	bls.n	8009346 <mem_malloc+0x22>
    return NULL;
 8009340:	2000      	movs	r0, #0
 8009342:	e07c      	b.n	800943e <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 8009344:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009346:	42a8      	cmp	r0, r5
 8009348:	d8fa      	bhi.n	8009340 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800934a:	4f42      	ldr	r7, [pc, #264]	; (8009454 <mem_malloc+0x130>)
 800934c:	f107 000c 	add.w	r0, r7, #12
 8009350:	f004 fcec 	bl	800dd2c <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	68be      	ldr	r6, [r7, #8]
 8009358:	1ab6      	subs	r6, r6, r2
 800935a:	b2b6      	uxth	r6, r6
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800935c:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009360:	f06f 0c07 	mvn.w	ip, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009364:	4286      	cmp	r6, r0
 8009366:	d303      	bcc.n	8009370 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009368:	483b      	ldr	r0, [pc, #236]	; (8009458 <mem_malloc+0x134>)
 800936a:	f004 fce4 	bl	800dd36 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800936e:	e7e7      	b.n	8009340 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8009370:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 8009372:	5b91      	ldrh	r1, [r2, r6]
 8009374:	7923      	ldrb	r3, [r4, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d169      	bne.n	800944e <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800937a:	ebac 0306 	sub.w	r3, ip, r6
 800937e:	440b      	add	r3, r1
      if ((!mem->used) &&
 8009380:	42ab      	cmp	r3, r5
 8009382:	d364      	bcc.n	800944e <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009384:	f105 0214 	add.w	r2, r5, #20
 8009388:	4293      	cmp	r3, r2
 800938a:	d35a      	bcc.n	8009442 <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800938c:	f105 0808 	add.w	r8, r5, #8
 8009390:	44b0      	add	r8, r6
 8009392:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009396:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800939a:	d106      	bne.n	80093aa <mem_malloc+0x86>
 800939c:	4b2f      	ldr	r3, [pc, #188]	; (800945c <mem_malloc+0x138>)
 800939e:	4930      	ldr	r1, [pc, #192]	; (8009460 <mem_malloc+0x13c>)
 80093a0:	4830      	ldr	r0, [pc, #192]	; (8009464 <mem_malloc+0x140>)
 80093a2:	f240 3287 	movw	r2, #903	; 0x387
 80093a6:	f004 fd75 	bl	800de94 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 80093b0:	2100      	movs	r1, #0
 80093b2:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 80093b4:	8821      	ldrh	r1, [r4, #0]
 80093b6:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 80093ba:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 80093bc:	2201      	movs	r2, #1
          mem->next = ptr2;
 80093be:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 80093c2:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80093c4:	f833 2008 	ldrh.w	r2, [r3, r8]
 80093c8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80093cc:	d002      	beq.n	80093d4 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80093ce:	4413      	add	r3, r2
 80093d0:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	42a3      	cmp	r3, r4
 80093d8:	d110      	bne.n	80093fc <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 80093da:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 80093de:	791a      	ldrb	r2, [r3, #4]
 80093e0:	b10a      	cbz	r2, 80093e6 <mem_malloc+0xc2>
 80093e2:	4299      	cmp	r1, r3
 80093e4:	d130      	bne.n	8009448 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80093e6:	4299      	cmp	r1, r3
          lfree = cur;
 80093e8:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80093ea:	d007      	beq.n	80093fc <mem_malloc+0xd8>
 80093ec:	b132      	cbz	r2, 80093fc <mem_malloc+0xd8>
 80093ee:	4b1b      	ldr	r3, [pc, #108]	; (800945c <mem_malloc+0x138>)
 80093f0:	491d      	ldr	r1, [pc, #116]	; (8009468 <mem_malloc+0x144>)
 80093f2:	481c      	ldr	r0, [pc, #112]	; (8009464 <mem_malloc+0x140>)
 80093f4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80093f8:	f004 fd4c 	bl	800de94 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 80093fc:	4816      	ldr	r0, [pc, #88]	; (8009458 <mem_malloc+0x134>)
 80093fe:	f004 fc9a 	bl	800dd36 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009402:	3508      	adds	r5, #8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4425      	add	r5, r4
 8009408:	42ab      	cmp	r3, r5
 800940a:	d206      	bcs.n	800941a <mem_malloc+0xf6>
 800940c:	4b13      	ldr	r3, [pc, #76]	; (800945c <mem_malloc+0x138>)
 800940e:	4917      	ldr	r1, [pc, #92]	; (800946c <mem_malloc+0x148>)
 8009410:	4814      	ldr	r0, [pc, #80]	; (8009464 <mem_malloc+0x140>)
 8009412:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009416:	f004 fd3d 	bl	800de94 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800941a:	07a3      	lsls	r3, r4, #30
 800941c:	d00d      	beq.n	800943a <mem_malloc+0x116>
 800941e:	4b0f      	ldr	r3, [pc, #60]	; (800945c <mem_malloc+0x138>)
 8009420:	4913      	ldr	r1, [pc, #76]	; (8009470 <mem_malloc+0x14c>)
 8009422:	4810      	ldr	r0, [pc, #64]	; (8009464 <mem_malloc+0x140>)
 8009424:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009428:	f004 fd34 	bl	800de94 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800942c:	4b0b      	ldr	r3, [pc, #44]	; (800945c <mem_malloc+0x138>)
 800942e:	4911      	ldr	r1, [pc, #68]	; (8009474 <mem_malloc+0x150>)
 8009430:	480c      	ldr	r0, [pc, #48]	; (8009464 <mem_malloc+0x140>)
 8009432:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009436:	f004 fd2d 	bl	800de94 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800943a:	f104 0008 	add.w	r0, r4, #8
}
 800943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009442:	2301      	movs	r3, #1
 8009444:	7123      	strb	r3, [r4, #4]
 8009446:	e7c5      	b.n	80093d4 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	4403      	add	r3, r0
 800944c:	e7c7      	b.n	80093de <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 800944e:	460e      	mov	r6, r1
 8009450:	e788      	b.n	8009364 <mem_malloc+0x40>
 8009452:	bf00      	nop
 8009454:	2000676c 	.word	0x2000676c
 8009458:	20006778 	.word	0x20006778
 800945c:	0801be05 	.word	0x0801be05
 8009460:	0801bfd8 	.word	0x0801bfd8
 8009464:	0801a4e1 	.word	0x0801a4e1
 8009468:	0801bfe9 	.word	0x0801bfe9
 800946c:	0801c002 	.word	0x0801c002
 8009470:	0801c032 	.word	0x0801c032
 8009474:	0801c061 	.word	0x0801c061

08009478 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800947c:	f004 fc6e 	bl	800dd5c <sys_arch_protect>

  memp = *desc->tab;
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8009484:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009486:	b15c      	cbz	r4, 80094a0 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009488:	6822      	ldr	r2, [r4, #0]
 800948a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800948c:	07a3      	lsls	r3, r4, #30
 800948e:	d006      	beq.n	800949e <do_memp_malloc_pool.isra.0+0x26>
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <do_memp_malloc_pool.isra.0+0x30>)
 8009492:	4906      	ldr	r1, [pc, #24]	; (80094ac <do_memp_malloc_pool.isra.0+0x34>)
 8009494:	4806      	ldr	r0, [pc, #24]	; (80094b0 <do_memp_malloc_pool.isra.0+0x38>)
 8009496:	f44f 728c 	mov.w	r2, #280	; 0x118
 800949a:	f004 fcfb 	bl	800de94 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800949e:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80094a0:	f004 fc68 	bl	800dd74 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80094a4:	4620      	mov	r0, r4
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	0801c084 	.word	0x0801c084
 80094ac:	0801c0fe 	.word	0x0801c0fe
 80094b0:	0801a4e1 	.word	0x0801a4e1

080094b4 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 80094b4:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80094b6:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 80094b8:	4605      	mov	r5, r0
 80094ba:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80094bc:	d006      	beq.n	80094cc <do_memp_free_pool.isra.0+0x18>
 80094be:	4b08      	ldr	r3, [pc, #32]	; (80094e0 <do_memp_free_pool.isra.0+0x2c>)
 80094c0:	4908      	ldr	r1, [pc, #32]	; (80094e4 <do_memp_free_pool.isra.0+0x30>)
 80094c2:	4809      	ldr	r0, [pc, #36]	; (80094e8 <do_memp_free_pool.isra.0+0x34>)
 80094c4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80094c8:	f004 fce4 	bl	800de94 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80094cc:	f004 fc46 	bl	800dd5c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80094d6:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80094d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80094dc:	f004 bc4a 	b.w	800dd74 <sys_arch_unprotect>
 80094e0:	0801c084 	.word	0x0801c084
 80094e4:	0801c121 	.word	0x0801c121
 80094e8:	0801a4e1 	.word	0x0801a4e1

080094ec <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80094ec:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80094ee:	6881      	ldr	r1, [r0, #8]
{
 80094f0:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 80094f2:	2200      	movs	r2, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80094f4:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 80094f6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80094f8:	600a      	str	r2, [r1, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80094fa:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80094fe:	4294      	cmp	r4, r2
 8009500:	dc00      	bgt.n	8009504 <memp_init_pool+0x18>
}
 8009502:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8009504:	680d      	ldr	r5, [r1, #0]
 8009506:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009508:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800950a:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800950c:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800950e:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8009510:	e7f5      	b.n	80094fe <memp_init_pool+0x12>
	...

08009514 <memp_init>:
{
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d05      	ldr	r5, [pc, #20]	; (800952c <memp_init+0x18>)
 8009518:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 800951a:	3c01      	subs	r4, #1
 800951c:	f855 0b04 	ldr.w	r0, [r5], #4
 8009520:	b2a4      	uxth	r4, r4
 8009522:	f7ff ffe3 	bl	80094ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009526:	2c00      	cmp	r4, #0
 8009528:	d1f7      	bne.n	800951a <memp_init+0x6>
}
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	0800f9a0 	.word	0x0800f9a0

08009530 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009530:	280c      	cmp	r0, #12
{
 8009532:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009534:	d807      	bhi.n	8009546 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <memp_malloc+0x28>)
 8009538:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800953c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009540:	3008      	adds	r0, #8
 8009542:	f7ff bf99 	b.w	8009478 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <memp_malloc+0x2c>)
 8009548:	4905      	ldr	r1, [pc, #20]	; (8009560 <memp_malloc+0x30>)
 800954a:	4806      	ldr	r0, [pc, #24]	; (8009564 <memp_malloc+0x34>)
 800954c:	f240 1257 	movw	r2, #343	; 0x157
 8009550:	f004 fca0 	bl	800de94 <iprintf>
}
 8009554:	2000      	movs	r0, #0
 8009556:	bd08      	pop	{r3, pc}
 8009558:	0800f9a0 	.word	0x0800f9a0
 800955c:	0801c084 	.word	0x0801c084
 8009560:	0801c153 	.word	0x0801c153
 8009564:	0801a4e1 	.word	0x0801a4e1

08009568 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009568:	280c      	cmp	r0, #12
 800956a:	d906      	bls.n	800957a <memp_free+0x12>
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <memp_free+0x24>)
 800956e:	4908      	ldr	r1, [pc, #32]	; (8009590 <memp_free+0x28>)
 8009570:	4808      	ldr	r0, [pc, #32]	; (8009594 <memp_free+0x2c>)
 8009572:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009576:	f004 bc8d 	b.w	800de94 <iprintf>

  if (mem == NULL) {
 800957a:	b129      	cbz	r1, 8009588 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <memp_free+0x30>)
 800957e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009582:	3008      	adds	r0, #8
 8009584:	f7ff bf96 	b.w	80094b4 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	0801c084 	.word	0x0801c084
 8009590:	0801c170 	.word	0x0801c170
 8009594:	0801a4e1 	.word	0x0801a4e1
 8009598:	0800f9a0 	.word	0x0800f9a0

0800959c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800959c:	f06f 000b 	mvn.w	r0, #11
 80095a0:	4770      	bx	lr
	...

080095a4 <netif_issue_reports>:
{
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80095a8:	4604      	mov	r4, r0
 80095aa:	b930      	cbnz	r0, 80095ba <netif_issue_reports+0x16>
 80095ac:	4b0c      	ldr	r3, [pc, #48]	; (80095e0 <netif_issue_reports+0x3c>)
 80095ae:	490d      	ldr	r1, [pc, #52]	; (80095e4 <netif_issue_reports+0x40>)
 80095b0:	480d      	ldr	r0, [pc, #52]	; (80095e8 <netif_issue_reports+0x44>)
 80095b2:	f240 326d 	movw	r2, #877	; 0x36d
 80095b6:	f004 fc6d 	bl	800de94 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80095ba:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80095be:	f003 0205 	and.w	r2, r3, #5
 80095c2:	2a05      	cmp	r2, #5
 80095c4:	d10b      	bne.n	80095de <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80095c6:	07ea      	lsls	r2, r5, #31
 80095c8:	d509      	bpl.n	80095de <netif_issue_reports+0x3a>
 80095ca:	6862      	ldr	r2, [r4, #4]
 80095cc:	b13a      	cbz	r2, 80095de <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80095ce:	071b      	lsls	r3, r3, #28
 80095d0:	d505      	bpl.n	80095de <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80095d2:	1d21      	adds	r1, r4, #4
 80095d4:	4620      	mov	r0, r4
}
 80095d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 80095da:	f7fe bc51 	b.w	8007e80 <etharp_request>
}
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	0801c18b 	.word	0x0801c18b
 80095e4:	0801c206 	.word	0x0801c206
 80095e8:	0801a4e1 	.word	0x0801a4e1

080095ec <netif_do_set_ipaddr>:
{
 80095ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095ee:	4605      	mov	r5, r0
 80095f0:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80095f2:	460c      	mov	r4, r1
 80095f4:	b931      	cbnz	r1, 8009604 <netif_do_set_ipaddr+0x18>
 80095f6:	4b10      	ldr	r3, [pc, #64]	; (8009638 <netif_do_set_ipaddr+0x4c>)
 80095f8:	4910      	ldr	r1, [pc, #64]	; (800963c <netif_do_set_ipaddr+0x50>)
 80095fa:	4811      	ldr	r0, [pc, #68]	; (8009640 <netif_do_set_ipaddr+0x54>)
 80095fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009600:	f004 fc48 	bl	800de94 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009604:	686b      	ldr	r3, [r5, #4]
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d101      	bne.n	8009610 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 800960c:	2000      	movs	r0, #0
 800960e:	e010      	b.n	8009632 <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009610:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009612:	a901      	add	r1, sp, #4
 8009614:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009616:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009618:	f001 fcae 	bl	800af78 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800961c:	a901      	add	r1, sp, #4
 800961e:	4630      	mov	r0, r6
 8009620:	f004 fa2c 	bl	800da7c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009628:	4628      	mov	r0, r5
 800962a:	2101      	movs	r1, #1
 800962c:	f7ff ffba 	bl	80095a4 <netif_issue_reports>
    return 1; /* address changed */
 8009630:	2001      	movs	r0, #1
}
 8009632:	b002      	add	sp, #8
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	bf00      	nop
 8009638:	0801c18b 	.word	0x0801c18b
 800963c:	0801a949 	.word	0x0801a949
 8009640:	0801a4e1 	.word	0x0801a4e1

08009644 <netif_init>:
}
 8009644:	4770      	bx	lr
	...

08009648 <netif_set_addr>:
{
 8009648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800964a:	4f14      	ldr	r7, [pc, #80]	; (800969c <netif_set_addr+0x54>)
 800964c:	2900      	cmp	r1, #0
 800964e:	bf14      	ite	ne
 8009650:	460d      	movne	r5, r1
 8009652:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 8009654:	2a00      	cmp	r2, #0
 8009656:	bf14      	ite	ne
 8009658:	4616      	movne	r6, r2
 800965a:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 800965c:	2b00      	cmp	r3, #0
 800965e:	bf18      	it	ne
 8009660:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8009662:	682b      	ldr	r3, [r5, #0]
{
 8009664:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
 8009666:	b9b3      	cbnz	r3, 8009696 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009668:	aa01      	add	r2, sp, #4
 800966a:	4629      	mov	r1, r5
 800966c:	f7ff ffbe 	bl	80095ec <netif_do_set_ipaddr>
 8009670:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009672:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009674:	68a1      	ldr	r1, [r4, #8]
 8009676:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009678:	bf18      	it	ne
 800967a:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800967c:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800967e:	68e1      	ldr	r1, [r4, #12]
 8009680:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009682:	bf18      	it	ne
 8009684:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8009686:	b923      	cbnz	r3, 8009692 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009688:	aa01      	add	r2, sp, #4
 800968a:	4629      	mov	r1, r5
 800968c:	4620      	mov	r0, r4
 800968e:	f7ff ffad 	bl	80095ec <netif_do_set_ipaddr>
}
 8009692:	b003      	add	sp, #12
 8009694:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8009696:	2300      	movs	r3, #0
 8009698:	e7eb      	b.n	8009672 <netif_set_addr+0x2a>
 800969a:	bf00      	nop
 800969c:	0800f99c 	.word	0x0800f99c

080096a0 <netif_add>:
{
 80096a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80096a6:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80096a8:	4604      	mov	r4, r0
 80096aa:	b948      	cbnz	r0, 80096c0 <netif_add+0x20>
 80096ac:	4b3e      	ldr	r3, [pc, #248]	; (80097a8 <netif_add+0x108>)
 80096ae:	493f      	ldr	r1, [pc, #252]	; (80097ac <netif_add+0x10c>)
 80096b0:	483f      	ldr	r0, [pc, #252]	; (80097b0 <netif_add+0x110>)
 80096b2:	f240 1227 	movw	r2, #295	; 0x127
 80096b6:	f004 fbed 	bl	800de94 <iprintf>
}
 80096ba:	4620      	mov	r0, r4
 80096bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80096c0:	b947      	cbnz	r7, 80096d4 <netif_add+0x34>
 80096c2:	4b39      	ldr	r3, [pc, #228]	; (80097a8 <netif_add+0x108>)
 80096c4:	493b      	ldr	r1, [pc, #236]	; (80097b4 <netif_add+0x114>)
 80096c6:	483a      	ldr	r0, [pc, #232]	; (80097b0 <netif_add+0x110>)
 80096c8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80096cc:	f004 fbe2 	bl	800de94 <iprintf>
 80096d0:	463c      	mov	r4, r7
 80096d2:	e7f2      	b.n	80096ba <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 80096d4:	4e38      	ldr	r6, [pc, #224]	; (80097b8 <netif_add+0x118>)
 80096d6:	6146      	str	r6, [r0, #20]
  netif->state = state;
 80096d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096da:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 80096dc:	4e37      	ldr	r6, [pc, #220]	; (80097bc <netif_add+0x11c>)
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80096de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097c4 <netif_add+0x124>
  netif->input = input;
 80096e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 80096e4:	f896 e000 	ldrb.w	lr, [r6]
  netif->input = input;
 80096e8:	6103      	str	r3, [r0, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80096ea:	2500      	movs	r5, #0
  ip_addr_set_zero_ip4(&netif->netmask);
 80096ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 80096f0:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 80096f2:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 80096f4:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80096f8:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 80096fa:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 80096fc:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009700:	45a8      	cmp	r8, r5
 8009702:	bf14      	ite	ne
 8009704:	4643      	movne	r3, r8
 8009706:	4663      	moveq	r3, ip
 8009708:	42aa      	cmp	r2, r5
 800970a:	bf08      	it	eq
 800970c:	4662      	moveq	r2, ip
 800970e:	42a9      	cmp	r1, r5
 8009710:	bf08      	it	eq
 8009712:	4661      	moveq	r1, ip
 8009714:	f7ff ff98 	bl	8009648 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009718:	4620      	mov	r0, r4
 800971a:	47b8      	blx	r7
 800971c:	2800      	cmp	r0, #0
 800971e:	d140      	bne.n	80097a2 <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009720:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80097c8 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009724:	4b20      	ldr	r3, [pc, #128]	; (80097a8 <netif_add+0x108>)
 8009726:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 8009728:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800972c:	f8d9 5000 	ldr.w	r5, [r9]
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009730:	f8df b098 	ldr.w	fp, [pc, #152]	; 80097cc <netif_add+0x12c>
 8009734:	f8df a078 	ldr.w	sl, [pc, #120]	; 80097b0 <netif_add+0x110>
      if (netif->num == 255) {
 8009738:	2aff      	cmp	r2, #255	; 0xff
        netif->num = 0;
 800973a:	bf04      	itt	eq
 800973c:	2200      	moveq	r2, #0
 800973e:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
 8009742:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009744:	b92d      	cbnz	r5, 8009752 <netif_add+0xb2>
  if (netif->num == 254) {
 8009746:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800974a:	2bfe      	cmp	r3, #254	; 0xfe
 800974c:	d120      	bne.n	8009790 <netif_add+0xf0>
    netif_num = 0;
 800974e:	462b      	mov	r3, r5
 8009750:	e020      	b.n	8009794 <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009752:	42a5      	cmp	r5, r4
 8009754:	d106      	bne.n	8009764 <netif_add+0xc4>
 8009756:	f240 128b 	movw	r2, #395	; 0x18b
 800975a:	4659      	mov	r1, fp
 800975c:	4650      	mov	r0, sl
 800975e:	f004 fb99 	bl	800de94 <iprintf>
 8009762:	4b11      	ldr	r3, [pc, #68]	; (80097a8 <netif_add+0x108>)
        num_netifs++;
 8009764:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009766:	2fff      	cmp	r7, #255	; 0xff
 8009768:	dd06      	ble.n	8009778 <netif_add+0xd8>
 800976a:	4915      	ldr	r1, [pc, #84]	; (80097c0 <netif_add+0x120>)
 800976c:	f240 128d 	movw	r2, #397	; 0x18d
 8009770:	4650      	mov	r0, sl
 8009772:	f004 fb8f 	bl	800de94 <iprintf>
 8009776:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <netif_add+0x108>)
        if (netif2->num == netif->num) {
 8009778:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800977c:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8009780:	428a      	cmp	r2, r1
 8009782:	d103      	bne.n	800978c <netif_add+0xec>
          netif->num++;
 8009784:	3201      	adds	r2, #1
 8009786:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 800978a:	e7cd      	b.n	8009728 <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800978c:	682d      	ldr	r5, [r5, #0]
 800978e:	e7d9      	b.n	8009744 <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 8009790:	3301      	adds	r3, #1
 8009792:	b2db      	uxtb	r3, r3
 8009794:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8009796:	f8d8 3000 	ldr.w	r3, [r8]
 800979a:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800979c:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 80097a0:	e78b      	b.n	80096ba <netif_add+0x1a>
    return NULL;
 80097a2:	462c      	mov	r4, r5
 80097a4:	e789      	b.n	80096ba <netif_add+0x1a>
 80097a6:	bf00      	nop
 80097a8:	0801c18b 	.word	0x0801c18b
 80097ac:	0801c2bb 	.word	0x0801c2bb
 80097b0:	0801a4e1 	.word	0x0801a4e1
 80097b4:	0801c2d4 	.word	0x0801c2d4
 80097b8:	0800959d 	.word	0x0800959d
 80097bc:	200067b0 	.word	0x200067b0
 80097c0:	0801c30a 	.word	0x0801c30a
 80097c4:	0800f99c 	.word	0x0800f99c
 80097c8:	200149fc 	.word	0x200149fc
 80097cc:	0801c2f6 	.word	0x0801c2f6

080097d0 <netif_set_default>:
  netif_default = netif;
 80097d0:	4b01      	ldr	r3, [pc, #4]	; (80097d8 <netif_set_default+0x8>)
 80097d2:	6018      	str	r0, [r3, #0]
}
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20014a00 	.word	0x20014a00

080097dc <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80097dc:	b930      	cbnz	r0, 80097ec <netif_set_up+0x10>
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <netif_set_up+0x28>)
 80097e0:	4909      	ldr	r1, [pc, #36]	; (8009808 <netif_set_up+0x2c>)
 80097e2:	480a      	ldr	r0, [pc, #40]	; (800980c <netif_set_up+0x30>)
 80097e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80097e8:	f004 bb54 	b.w	800de94 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80097ec:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 80097f0:	07d1      	lsls	r1, r2, #31
 80097f2:	d406      	bmi.n	8009802 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80097f4:	f042 0201 	orr.w	r2, r2, #1
 80097f8:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80097fc:	2103      	movs	r1, #3
 80097fe:	f7ff bed1 	b.w	80095a4 <netif_issue_reports>
}
 8009802:	4770      	bx	lr
 8009804:	0801c18b 	.word	0x0801c18b
 8009808:	0801c338 	.word	0x0801c338
 800980c:	0801a4e1 	.word	0x0801a4e1

08009810 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009810:	b930      	cbnz	r0, 8009820 <netif_set_down+0x10>
 8009812:	4b0a      	ldr	r3, [pc, #40]	; (800983c <netif_set_down+0x2c>)
 8009814:	490a      	ldr	r1, [pc, #40]	; (8009840 <netif_set_down+0x30>)
 8009816:	480b      	ldr	r0, [pc, #44]	; (8009844 <netif_set_down+0x34>)
 8009818:	f240 329b 	movw	r2, #923	; 0x39b
 800981c:	f004 bb3a 	b.w	800de94 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8009820:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8009824:	07d1      	lsls	r1, r2, #31
 8009826:	d507      	bpl.n	8009838 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009828:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800982c:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800982e:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009832:	d501      	bpl.n	8009838 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8009834:	f7fe ba66 	b.w	8007d04 <etharp_cleanup_netif>
}
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	0801c18b 	.word	0x0801c18b
 8009840:	0801c354 	.word	0x0801c354
 8009844:	0801a4e1 	.word	0x0801a4e1

08009848 <netif_set_link_callback>:
  if (netif) {
 8009848:	b100      	cbz	r0, 800984c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800984a:	61c1      	str	r1, [r0, #28]
}
 800984c:	4770      	bx	lr
	...

08009850 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009850:	4603      	mov	r3, r0
 8009852:	b158      	cbz	r0, 800986c <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8009854:	4a06      	ldr	r2, [pc, #24]	; (8009870 <netif_get_by_index+0x20>)
 8009856:	6810      	ldr	r0, [r2, #0]
 8009858:	b900      	cbnz	r0, 800985c <netif_get_by_index+0xc>
 800985a:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800985c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8009860:	3201      	adds	r2, #1
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	429a      	cmp	r2, r3
 8009866:	d001      	beq.n	800986c <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8009868:	6800      	ldr	r0, [r0, #0]
 800986a:	e7f5      	b.n	8009858 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	200149fc 	.word	0x200149fc

08009874 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009874:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009876:	b968      	cbnz	r0, 8009894 <pbuf_add_header_impl+0x20>
 8009878:	4b14      	ldr	r3, [pc, #80]	; (80098cc <pbuf_add_header_impl+0x58>)
 800987a:	4915      	ldr	r1, [pc, #84]	; (80098d0 <pbuf_add_header_impl+0x5c>)
 800987c:	4815      	ldr	r0, [pc, #84]	; (80098d4 <pbuf_add_header_impl+0x60>)
 800987e:	f240 12df 	movw	r2, #479	; 0x1df
 8009882:	f004 fb07 	bl	800de94 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8009886:	2001      	movs	r0, #1
 8009888:	e01f      	b.n	80098ca <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800988a:	2a00      	cmp	r2, #0
 800988c:	d0fb      	beq.n	8009886 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800988e:	6842      	ldr	r2, [r0, #4]
 8009890:	1a51      	subs	r1, r2, r1
 8009892:	e014      	b.n	80098be <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009894:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009898:	d2f5      	bcs.n	8009886 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800989a:	b1a9      	cbz	r1, 80098c8 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800989c:	8903      	ldrh	r3, [r0, #8]
 800989e:	fa13 f381 	uxtah	r3, r3, r1
  increment_magnitude = (u16_t)header_size_increment;
 80098a2:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	429c      	cmp	r4, r3
 80098a8:	d8ed      	bhi.n	8009886 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80098aa:	f990 500c 	ldrsb.w	r5, [r0, #12]
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	daeb      	bge.n	800988a <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 80098b2:	6842      	ldr	r2, [r0, #4]
 80098b4:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80098b6:	f100 0210 	add.w	r2, r0, #16
 80098ba:	4291      	cmp	r1, r2
 80098bc:	d3e3      	bcc.n	8009886 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 80098be:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 80098c0:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80098c2:	4414      	add	r4, r2
 80098c4:	8144      	strh	r4, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80098c6:	8103      	strh	r3, [r0, #8]


  return 0;
 80098c8:	2000      	movs	r0, #0
}
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	0801c3b6 	.word	0x0801c3b6
 80098d0:	0801c4d2 	.word	0x0801c4d2
 80098d4:	0801a4e1 	.word	0x0801a4e1

080098d8 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80098d8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80098dc:	2b01      	cmp	r3, #1
{
 80098de:	b570      	push	{r4, r5, r6, lr}
 80098e0:	4606      	mov	r6, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80098e6:	d006      	beq.n	80098f6 <pbuf_alloc_reference+0x1e>
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <pbuf_alloc_reference+0x3c>)
 80098ea:	490b      	ldr	r1, [pc, #44]	; (8009918 <pbuf_alloc_reference+0x40>)
 80098ec:	480b      	ldr	r0, [pc, #44]	; (800991c <pbuf_alloc_reference+0x44>)
 80098ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80098f2:	f004 facf 	bl	800de94 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098f6:	200b      	movs	r0, #11
 80098f8:	f7ff fe1a 	bl	8009530 <memp_malloc>
  if (p == NULL) {
 80098fc:	b140      	cbz	r0, 8009910 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 80098fe:	2300      	movs	r3, #0
  p->payload = payload;
 8009900:	e9c0 3600 	strd	r3, r6, [r0]
  p->flags = flags;
 8009904:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8009906:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8009908:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800990a:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800990c:	7304      	strb	r4, [r0, #12]
  p->ref = 1;
 800990e:	81c3      	strh	r3, [r0, #14]
}
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	bf00      	nop
 8009914:	0801c3b6 	.word	0x0801c3b6
 8009918:	0801c430 	.word	0x0801c430
 800991c:	0801a4e1 	.word	0x0801a4e1

08009920 <pbuf_alloced_custom>:
{
 8009920:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009922:	3003      	adds	r0, #3
 8009924:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8009928:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800992a:	f020 0003 	bic.w	r0, r0, #3
 800992e:	180e      	adds	r6, r1, r0
 8009930:	42ae      	cmp	r6, r5
 8009932:	d80d      	bhi.n	8009950 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8009934:	b104      	cbz	r4, 8009938 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009936:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009938:	4618      	mov	r0, r3
  p->next = NULL;
 800993a:	2300      	movs	r3, #0
  p->payload = payload;
 800993c:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 8009940:	2302      	movs	r3, #2
 8009942:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8009944:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8009946:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8009948:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800994a:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800994c:	81c3      	strh	r3, [r0, #14]
}
 800994e:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8009950:	2000      	movs	r0, #0
 8009952:	e7fc      	b.n	800994e <pbuf_alloced_custom+0x2e>

08009954 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009954:	2200      	movs	r2, #0
 8009956:	f7ff bf8d 	b.w	8009874 <pbuf_add_header_impl>
	...

0800995c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800995c:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800995e:	b990      	cbnz	r0, 8009986 <pbuf_remove_header+0x2a>
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <pbuf_remove_header+0x48>)
 8009962:	4911      	ldr	r1, [pc, #68]	; (80099a8 <pbuf_remove_header+0x4c>)
 8009964:	f240 224b 	movw	r2, #587	; 0x24b
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009968:	4810      	ldr	r0, [pc, #64]	; (80099ac <pbuf_remove_header+0x50>)
 800996a:	f004 fa93 	bl	800de94 <iprintf>
    return 1;
 800996e:	2001      	movs	r0, #1
 8009970:	e008      	b.n	8009984 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009972:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009974:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8009976:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009978:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800997a:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800997c:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800997e:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009980:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009982:	2000      	movs	r0, #0
}
 8009984:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009986:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800998a:	d2f0      	bcs.n	800996e <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800998c:	2900      	cmp	r1, #0
 800998e:	d0f8      	beq.n	8009982 <pbuf_remove_header+0x26>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009990:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
 8009992:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009994:	4293      	cmp	r3, r2
 8009996:	d2ec      	bcs.n	8009972 <pbuf_remove_header+0x16>
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <pbuf_remove_header+0x48>)
 800999a:	4905      	ldr	r1, [pc, #20]	; (80099b0 <pbuf_remove_header+0x54>)
 800999c:	f240 2255 	movw	r2, #597	; 0x255
 80099a0:	e7e2      	b.n	8009968 <pbuf_remove_header+0xc>
 80099a2:	bf00      	nop
 80099a4:	0801c3b6 	.word	0x0801c3b6
 80099a8:	0801c4d2 	.word	0x0801c4d2
 80099ac:	0801a4e1 	.word	0x0801a4e1
 80099b0:	0801c442 	.word	0x0801c442

080099b4 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80099b4:	1e0b      	subs	r3, r1, #0
 80099b6:	da02      	bge.n	80099be <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80099b8:	4259      	negs	r1, r3
 80099ba:	f7ff bfcf 	b.w	800995c <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80099be:	2201      	movs	r2, #1
 80099c0:	f7ff bf58 	b.w	8009874 <pbuf_add_header_impl>

080099c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80099c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80099c8:	4604      	mov	r4, r0
 80099ca:	b950      	cbnz	r0, 80099e2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 80099cc:	4b2b      	ldr	r3, [pc, #172]	; (8009a7c <pbuf_free+0xb8>)
 80099ce:	492c      	ldr	r1, [pc, #176]	; (8009a80 <pbuf_free+0xbc>)
 80099d0:	482c      	ldr	r0, [pc, #176]	; (8009a84 <pbuf_free+0xc0>)
 80099d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80099d6:	f004 fa5d 	bl	800de94 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80099da:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80099dc:	4628      	mov	r0, r5
 80099de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80099e2:	4f26      	ldr	r7, [pc, #152]	; (8009a7c <pbuf_free+0xb8>)
 80099e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8009a90 <pbuf_free+0xcc>
 80099e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8009a84 <pbuf_free+0xc0>
  count = 0;
 80099ec:	2500      	movs	r5, #0
    SYS_ARCH_PROTECT(old_level);
 80099ee:	f004 f9b5 	bl	800dd5c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80099f2:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 80099f4:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80099f6:	b933      	cbnz	r3, 8009a06 <pbuf_free+0x42>
 80099f8:	463b      	mov	r3, r7
 80099fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80099fe:	4651      	mov	r1, sl
 8009a00:	4640      	mov	r0, r8
 8009a02:	f004 fa47 	bl	800de94 <iprintf>
    ref = --(p->ref);
 8009a06:	7ba6      	ldrb	r6, [r4, #14]
 8009a08:	3e01      	subs	r6, #1
 8009a0a:	b2f6      	uxtb	r6, r6
 8009a0c:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8009a0e:	4648      	mov	r0, r9
 8009a10:	f004 f9b0 	bl	800dd74 <sys_arch_unprotect>
    if (ref == 0) {
 8009a14:	2e00      	cmp	r6, #0
 8009a16:	d1e1      	bne.n	80099dc <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009a18:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8009a1a:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009a1c:	079b      	lsls	r3, r3, #30
 8009a1e:	d511      	bpl.n	8009a44 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	b933      	cbnz	r3, 8009a32 <pbuf_free+0x6e>
 8009a24:	4918      	ldr	r1, [pc, #96]	; (8009a88 <pbuf_free+0xc4>)
 8009a26:	463b      	mov	r3, r7
 8009a28:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	f004 fa31 	bl	800de94 <iprintf>
        pc->custom_free_function(p);
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	4620      	mov	r0, r4
 8009a36:	4798      	blx	r3
      count++;
 8009a38:	3501      	adds	r5, #1
 8009a3a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	d0cd      	beq.n	80099dc <pbuf_free+0x18>
 8009a40:	4634      	mov	r4, r6
 8009a42:	e7d4      	b.n	80099ee <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 8009a44:	7b23      	ldrb	r3, [r4, #12]
 8009a46:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d104      	bne.n	8009a58 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 8009a4e:	4621      	mov	r1, r4
 8009a50:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8009a52:	f7ff fd89 	bl	8009568 <memp_free>
 8009a56:	e7ef      	b.n	8009a38 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d102      	bne.n	8009a62 <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	200b      	movs	r0, #11
 8009a60:	e7f7      	b.n	8009a52 <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009a62:	b91b      	cbnz	r3, 8009a6c <pbuf_free+0xa8>
          mem_free(p);
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fad9 	bl	800901c <mem_free>
 8009a6a:	e7e5      	b.n	8009a38 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8009a6c:	4907      	ldr	r1, [pc, #28]	; (8009a8c <pbuf_free+0xc8>)
 8009a6e:	463b      	mov	r3, r7
 8009a70:	f240 320f 	movw	r2, #783	; 0x30f
 8009a74:	4640      	mov	r0, r8
 8009a76:	f004 fa0d 	bl	800de94 <iprintf>
 8009a7a:	e7dd      	b.n	8009a38 <pbuf_free+0x74>
 8009a7c:	0801c3b6 	.word	0x0801c3b6
 8009a80:	0801c4d2 	.word	0x0801c4d2
 8009a84:	0801a4e1 	.word	0x0801a4e1
 8009a88:	0801c476 	.word	0x0801c476
 8009a8c:	0801c497 	.word	0x0801c497
 8009a90:	0801c460 	.word	0x0801c460

08009a94 <pbuf_alloc>:
  switch (type) {
 8009a94:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8009a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8009aa0:	b284      	uxth	r4, r0
  switch (type) {
 8009aa2:	d014      	beq.n	8009ace <pbuf_alloc+0x3a>
 8009aa4:	d808      	bhi.n	8009ab8 <pbuf_alloc+0x24>
 8009aa6:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d107      	bne.n	8009abe <pbuf_alloc+0x2a>
}
 8009aae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f7ff bf10 	b.w	80098d8 <pbuf_alloc_reference>
  switch (type) {
 8009ab8:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8009abc:	d03c      	beq.n	8009b38 <pbuf_alloc+0xa4>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009abe:	4b2e      	ldr	r3, [pc, #184]	; (8009b78 <pbuf_alloc+0xe4>)
 8009ac0:	492e      	ldr	r1, [pc, #184]	; (8009b7c <pbuf_alloc+0xe8>)
 8009ac2:	482f      	ldr	r0, [pc, #188]	; (8009b80 <pbuf_alloc+0xec>)
 8009ac4:	f240 1227 	movw	r2, #295	; 0x127
 8009ac8:	f004 f9e4 	bl	800de94 <iprintf>
 8009acc:	e00c      	b.n	8009ae8 <pbuf_alloc+0x54>
  switch (type) {
 8009ace:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 8009ad0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009b88 <pbuf_alloc+0xf4>
  switch (type) {
 8009ad4:	4635      	mov	r5, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009ad6:	f240 58f4 	movw	r8, #1524	; 0x5f4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009ada:	200c      	movs	r0, #12
 8009adc:	f7ff fd28 	bl	8009530 <memp_malloc>
        if (q == NULL) {
 8009ae0:	46b2      	mov	sl, r6
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	b930      	cbnz	r0, 8009af4 <pbuf_alloc+0x60>
          if (p) {
 8009ae6:	b90d      	cbnz	r5, 8009aec <pbuf_alloc+0x58>
      return NULL;
 8009ae8:	2500      	movs	r5, #0
 8009aea:	e020      	b.n	8009b2e <pbuf_alloc+0x9a>
            pbuf_free(p);
 8009aec:	4628      	mov	r0, r5
 8009aee:	f7ff ff69 	bl	80099c4 <pbuf_free>
 8009af2:	e7f9      	b.n	8009ae8 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009af4:	1ce3      	adds	r3, r4, #3
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	eba8 0303 	sub.w	r3, r8, r3
 8009afe:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009b00:	4404      	add	r4, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009b02:	42bb      	cmp	r3, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009b04:	f104 0413 	add.w	r4, r4, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009b08:	bf28      	it	cs
 8009b0a:	463b      	movcs	r3, r7
  p->next = NULL;
 8009b0c:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009b0e:	f024 0403 	bic.w	r4, r4, #3
  p->next = NULL;
 8009b12:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8009b14:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 8009b16:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8009b18:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8009b1a:	f8c0 900c 	str.w	r9, [r0, #12]
        if (p == NULL) {
 8009b1e:	b14d      	cbz	r5, 8009b34 <pbuf_alloc+0xa0>
          last->next = q;
 8009b20:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8009b24:	1afb      	subs	r3, r7, r3
 8009b26:	b29f      	uxth	r7, r3
        offset = 0;
 8009b28:	2400      	movs	r4, #0
      } while (rem_len > 0);
 8009b2a:	2f00      	cmp	r7, #0
 8009b2c:	d1d5      	bne.n	8009ada <pbuf_alloc+0x46>
}
 8009b2e:	4628      	mov	r0, r5
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	4605      	mov	r5, r0
 8009b36:	e7f5      	b.n	8009b24 <pbuf_alloc+0x90>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009b38:	3403      	adds	r4, #3
 8009b3a:	1ccb      	adds	r3, r1, #3
 8009b3c:	f023 0303 	bic.w	r3, r3, #3
 8009b40:	f024 0403 	bic.w	r4, r4, #3
 8009b44:	441c      	add	r4, r3
 8009b46:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009b48:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009b4c:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009b4e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009b50:	d3ca      	bcc.n	8009ae8 <pbuf_alloc+0x54>
 8009b52:	4283      	cmp	r3, r0
 8009b54:	d8c8      	bhi.n	8009ae8 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009b56:	f7ff fbe5 	bl	8009324 <mem_malloc>
      if (p == NULL) {
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d0e6      	beq.n	8009b2e <pbuf_alloc+0x9a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009b60:	4406      	add	r6, r0
  p->next = NULL;
 8009b62:	2300      	movs	r3, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009b64:	3613      	adds	r6, #19
  p->next = NULL;
 8009b66:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009b68:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 8009b6c:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <pbuf_alloc+0xf0>)
  p->payload = payload;
 8009b6e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8009b70:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8009b72:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8009b74:	60c3      	str	r3, [r0, #12]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009b76:	e7da      	b.n	8009b2e <pbuf_alloc+0x9a>
 8009b78:	0801c3b6 	.word	0x0801c3b6
 8009b7c:	0801c4a9 	.word	0x0801c4a9
 8009b80:	0801a4e1 	.word	0x0801a4e1
 8009b84:	00010080 	.word	0x00010080
 8009b88:	00010082 	.word	0x00010082

08009b8c <pbuf_realloc>:
{
 8009b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b92:	4604      	mov	r4, r0
 8009b94:	b930      	cbnz	r0, 8009ba4 <pbuf_realloc+0x18>
 8009b96:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <pbuf_realloc+0x9c>)
 8009b98:	4924      	ldr	r1, [pc, #144]	; (8009c2c <pbuf_realloc+0xa0>)
 8009b9a:	4825      	ldr	r0, [pc, #148]	; (8009c30 <pbuf_realloc+0xa4>)
 8009b9c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009ba0:	f004 f978 	bl	800de94 <iprintf>
  if (new_len >= p->tot_len) {
 8009ba4:	8927      	ldrh	r7, [r4, #8]
 8009ba6:	42b7      	cmp	r7, r6
 8009ba8:	d93c      	bls.n	8009c24 <pbuf_realloc+0x98>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009baa:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009c28 <pbuf_realloc+0x9c>
 8009bae:	f8df a088 	ldr.w	sl, [pc, #136]	; 8009c38 <pbuf_realloc+0xac>
 8009bb2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8009c30 <pbuf_realloc+0xa4>
 8009bb6:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8009bb8:	8962      	ldrh	r2, [r4, #10]
 8009bba:	42aa      	cmp	r2, r5
 8009bbc:	d319      	bcc.n	8009bf2 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009bbe:	7b23      	ldrb	r3, [r4, #12]
 8009bc0:	0719      	lsls	r1, r3, #28
 8009bc2:	d127      	bne.n	8009c14 <pbuf_realloc+0x88>
 8009bc4:	42aa      	cmp	r2, r5
 8009bc6:	d025      	beq.n	8009c14 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009bc8:	7b63      	ldrb	r3, [r4, #13]
 8009bca:	079b      	lsls	r3, r3, #30
 8009bcc:	d422      	bmi.n	8009c14 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009bce:	6861      	ldr	r1, [r4, #4]
 8009bd0:	1b09      	subs	r1, r1, r4
 8009bd2:	4429      	add	r1, r5
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	b289      	uxth	r1, r1
 8009bd8:	f7ff faf6 	bl	80091c8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009bdc:	4604      	mov	r4, r0
 8009bde:	b9c8      	cbnz	r0, 8009c14 <pbuf_realloc+0x88>
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <pbuf_realloc+0x9c>)
 8009be2:	4914      	ldr	r1, [pc, #80]	; (8009c34 <pbuf_realloc+0xa8>)
 8009be4:	4812      	ldr	r0, [pc, #72]	; (8009c30 <pbuf_realloc+0xa4>)
 8009be6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009bea:	f004 f953 	bl	800de94 <iprintf>
  q->len = rem_len;
 8009bee:	8164      	strh	r4, [r4, #10]
 8009bf0:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 8009bf2:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009bf4:	8922      	ldrh	r2, [r4, #8]
 8009bf6:	1bf3      	subs	r3, r6, r7
 8009bf8:	4413      	add	r3, r2
 8009bfa:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8009bfc:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
 8009bfe:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009c00:	2c00      	cmp	r4, #0
 8009c02:	d1d9      	bne.n	8009bb8 <pbuf_realloc+0x2c>
 8009c04:	4643      	mov	r3, r8
 8009c06:	f240 12af 	movw	r2, #431	; 0x1af
 8009c0a:	4651      	mov	r1, sl
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f004 f941 	bl	800de94 <iprintf>
 8009c12:	e7d1      	b.n	8009bb8 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 8009c14:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8009c16:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8009c18:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8009c1a:	b108      	cbz	r0, 8009c20 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8009c1c:	f7ff fed2 	bl	80099c4 <pbuf_free>
  q->next = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	6023      	str	r3, [r4, #0]
}
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	0801c3b6 	.word	0x0801c3b6
 8009c2c:	0801c4c4 	.word	0x0801c4c4
 8009c30:	0801a4e1 	.word	0x0801a4e1
 8009c34:	0801c4f4 	.word	0x0801c4f4
 8009c38:	0801c4dc 	.word	0x0801c4dc

08009c3c <pbuf_free_header>:
{
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	460d      	mov	r5, r1
  struct pbuf *p = q;
 8009c40:	4604      	mov	r4, r0
      f->next = 0;
 8009c42:	2600      	movs	r6, #0
  while (free_left && p) {
 8009c44:	b185      	cbz	r5, 8009c68 <pbuf_free_header+0x2c>
 8009c46:	b17c      	cbz	r4, 8009c68 <pbuf_free_header+0x2c>
    if (free_left >= p->len) {
 8009c48:	8961      	ldrh	r1, [r4, #10]
 8009c4a:	42a9      	cmp	r1, r5
 8009c4c:	d808      	bhi.n	8009c60 <pbuf_free_header+0x24>
      p = p->next;
 8009c4e:	6827      	ldr	r7, [r4, #0]
      f->next = 0;
 8009c50:	6026      	str	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 8009c52:	1a6d      	subs	r5, r5, r1
      pbuf_free(f);
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff feb5 	bl	80099c4 <pbuf_free>
      free_left = (u16_t)(free_left - p->len);
 8009c5a:	b2ad      	uxth	r5, r5
      p = p->next;
 8009c5c:	463c      	mov	r4, r7
 8009c5e:	e7f1      	b.n	8009c44 <pbuf_free_header+0x8>
      pbuf_remove_header(p, free_left);
 8009c60:	4629      	mov	r1, r5
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fe7a 	bl	800995c <pbuf_remove_header>
}
 8009c68:	4620      	mov	r0, r4
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c6c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009c6c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8009c6e:	2200      	movs	r2, #0
 8009c70:	b290      	uxth	r0, r2
 8009c72:	3201      	adds	r2, #1
 8009c74:	b903      	cbnz	r3, 8009c78 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8009c76:	4770      	bx	lr
    p = p->next;
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	e7f9      	b.n	8009c70 <pbuf_clen+0x4>

08009c7c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009c7c:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8009c7e:	4604      	mov	r4, r0
 8009c80:	b188      	cbz	r0, 8009ca6 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009c82:	f004 f86b 	bl	800dd5c <sys_arch_protect>
 8009c86:	7ba3      	ldrb	r3, [r4, #14]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	73a3      	strb	r3, [r4, #14]
 8009c8c:	f004 f872 	bl	800dd74 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009c90:	7ba3      	ldrb	r3, [r4, #14]
 8009c92:	b943      	cbnz	r3, 8009ca6 <pbuf_ref+0x2a>
  }
}
 8009c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009c98:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <pbuf_ref+0x2c>)
 8009c9a:	4904      	ldr	r1, [pc, #16]	; (8009cac <pbuf_ref+0x30>)
 8009c9c:	4804      	ldr	r0, [pc, #16]	; (8009cb0 <pbuf_ref+0x34>)
 8009c9e:	f240 3242 	movw	r2, #834	; 0x342
 8009ca2:	f004 b8f7 	b.w	800de94 <iprintf>
}
 8009ca6:	bd10      	pop	{r4, pc}
 8009ca8:	0801c3b6 	.word	0x0801c3b6
 8009cac:	0801c510 	.word	0x0801c510
 8009cb0:	0801a4e1 	.word	0x0801a4e1

08009cb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009cb8:	4604      	mov	r4, r0
 8009cba:	b100      	cbz	r0, 8009cbe <pbuf_cat+0xa>
 8009cbc:	b961      	cbnz	r1, 8009cd8 <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <pbuf_cat+0x60>)
 8009cc4:	4914      	ldr	r1, [pc, #80]	; (8009d18 <pbuf_cat+0x64>)
 8009cc6:	4815      	ldr	r0, [pc, #84]	; (8009d1c <pbuf_cat+0x68>)
 8009cc8:	f240 3259 	movw	r2, #857	; 0x359
 8009ccc:	f004 b8e2 	b.w	800de94 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009cd0:	8929      	ldrh	r1, [r5, #8]
 8009cd2:	440b      	add	r3, r1
 8009cd4:	8123      	strh	r3, [r4, #8]
 8009cd6:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8009cd8:	6822      	ldr	r2, [r4, #0]
 8009cda:	8923      	ldrh	r3, [r4, #8]
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	d1f7      	bne.n	8009cd0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009ce0:	8962      	ldrh	r2, [r4, #10]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d00f      	beq.n	8009d06 <pbuf_cat+0x52>
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <pbuf_cat+0x60>)
 8009ce8:	490d      	ldr	r1, [pc, #52]	; (8009d20 <pbuf_cat+0x6c>)
 8009cea:	480c      	ldr	r0, [pc, #48]	; (8009d1c <pbuf_cat+0x68>)
 8009cec:	f240 3262 	movw	r2, #866	; 0x362
 8009cf0:	f004 f8d0 	bl	800de94 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009cf4:	6823      	ldr	r3, [r4, #0]
 8009cf6:	b133      	cbz	r3, 8009d06 <pbuf_cat+0x52>
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <pbuf_cat+0x60>)
 8009cfa:	490a      	ldr	r1, [pc, #40]	; (8009d24 <pbuf_cat+0x70>)
 8009cfc:	4807      	ldr	r0, [pc, #28]	; (8009d1c <pbuf_cat+0x68>)
 8009cfe:	f240 3263 	movw	r2, #867	; 0x363
 8009d02:	f004 f8c7 	bl	800de94 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d06:	892a      	ldrh	r2, [r5, #8]
 8009d08:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8009d0a:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009d0c:	4413      	add	r3, r2
 8009d0e:	8123      	strh	r3, [r4, #8]
}
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	bf00      	nop
 8009d14:	0801c3b6 	.word	0x0801c3b6
 8009d18:	0801c522 	.word	0x0801c522
 8009d1c:	0801a4e1 	.word	0x0801a4e1
 8009d20:	0801c557 	.word	0x0801c557
 8009d24:	0801c584 	.word	0x0801c584

08009d28 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8009d2c:	f7ff ffc2 	bl	8009cb4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009d30:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8009d36:	f7ff bfa1 	b.w	8009c7c <pbuf_ref>
	...

08009d3c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009d42:	4605      	mov	r5, r0
 8009d44:	b120      	cbz	r0, 8009d50 <pbuf_copy+0x14>
 8009d46:	b119      	cbz	r1, 8009d50 <pbuf_copy+0x14>
 8009d48:	8902      	ldrh	r2, [r0, #8]
 8009d4a:	890b      	ldrh	r3, [r1, #8]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d20a      	bcs.n	8009d66 <pbuf_copy+0x2a>
 8009d50:	4b34      	ldr	r3, [pc, #208]	; (8009e24 <pbuf_copy+0xe8>)
 8009d52:	4935      	ldr	r1, [pc, #212]	; (8009e28 <pbuf_copy+0xec>)
 8009d54:	f240 32c9 	movw	r2, #969	; 0x3c9
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009d58:	4834      	ldr	r0, [pc, #208]	; (8009e2c <pbuf_copy+0xf0>)
 8009d5a:	f004 f89b 	bl	800de94 <iprintf>
 8009d5e:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8009d62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 8009d66:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d68:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009e24 <pbuf_copy+0xe8>
 8009d6c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009e3c <pbuf_copy+0x100>
 8009d70:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8009e2c <pbuf_copy+0xf0>
  size_t offset_to = 0, offset_from = 0, len;
 8009d74:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009d76:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 8009d7a:	8962      	ldrh	r2, [r4, #10]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009d7c:	6868      	ldr	r0, [r5, #4]
 8009d7e:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009d80:	eba8 0807 	sub.w	r8, r8, r7
 8009d84:	1b92      	subs	r2, r2, r6
 8009d86:	4590      	cmp	r8, r2
 8009d88:	bf28      	it	cs
 8009d8a:	4690      	movcs	r8, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009d8c:	4431      	add	r1, r6
 8009d8e:	4438      	add	r0, r7
 8009d90:	4642      	mov	r2, r8
 8009d92:	f004 f84f 	bl	800de34 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d96:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8009d98:	4447      	add	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d9a:	429f      	cmp	r7, r3
    offset_from += len;
 8009d9c:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d9e:	d906      	bls.n	8009dae <pbuf_copy+0x72>
 8009da0:	465b      	mov	r3, fp
 8009da2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009da6:	4651      	mov	r1, sl
 8009da8:	4648      	mov	r0, r9
 8009daa:	f004 f873 	bl	800de94 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009dae:	8963      	ldrh	r3, [r4, #10]
 8009db0:	429e      	cmp	r6, r3
 8009db2:	d906      	bls.n	8009dc2 <pbuf_copy+0x86>
 8009db4:	491e      	ldr	r1, [pc, #120]	; (8009e30 <pbuf_copy+0xf4>)
 8009db6:	465b      	mov	r3, fp
 8009db8:	f240 32da 	movw	r2, #986	; 0x3da
 8009dbc:	4648      	mov	r0, r9
 8009dbe:	f004 f869 	bl	800de94 <iprintf>
    if (offset_from >= p_from->len) {
 8009dc2:	8963      	ldrh	r3, [r4, #10]
 8009dc4:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8009dc6:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8009dc8:	bf24      	itt	cs
 8009dca:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 8009dcc:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 8009dce:	429f      	cmp	r7, r3
 8009dd0:	d108      	bne.n	8009de4 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8009dd2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009dd4:	b92d      	cbnz	r5, 8009de2 <pbuf_copy+0xa6>
 8009dd6:	b314      	cbz	r4, 8009e1e <pbuf_copy+0xe2>
 8009dd8:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <pbuf_copy+0xe8>)
 8009dda:	4916      	ldr	r1, [pc, #88]	; (8009e34 <pbuf_copy+0xf8>)
 8009ddc:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009de0:	e7ba      	b.n	8009d58 <pbuf_copy+0x1c>
      offset_to = 0;
 8009de2:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009de4:	b17c      	cbz	r4, 8009e06 <pbuf_copy+0xca>
 8009de6:	8962      	ldrh	r2, [r4, #10]
 8009de8:	8923      	ldrh	r3, [r4, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d10b      	bne.n	8009e06 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	b14b      	cbz	r3, 8009e06 <pbuf_copy+0xca>
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <pbuf_copy+0xe8>)
 8009df4:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009df8:	490f      	ldr	r1, [pc, #60]	; (8009e38 <pbuf_copy+0xfc>)
 8009dfa:	480c      	ldr	r0, [pc, #48]	; (8009e2c <pbuf_copy+0xf0>)
 8009dfc:	f004 f84a 	bl	800de94 <iprintf>
 8009e00:	f06f 0005 	mvn.w	r0, #5
 8009e04:	e7ad      	b.n	8009d62 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009e06:	896a      	ldrh	r2, [r5, #10]
 8009e08:	892b      	ldrh	r3, [r5, #8]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d105      	bne.n	8009e1a <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	b11b      	cbz	r3, 8009e1a <pbuf_copy+0xde>
 8009e12:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <pbuf_copy+0xe8>)
 8009e14:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009e18:	e7ee      	b.n	8009df8 <pbuf_copy+0xbc>
  } while (p_from);
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	d1ab      	bne.n	8009d76 <pbuf_copy+0x3a>
  return ERR_OK;
 8009e1e:	4620      	mov	r0, r4
 8009e20:	e79f      	b.n	8009d62 <pbuf_copy+0x26>
 8009e22:	bf00      	nop
 8009e24:	0801c3b6 	.word	0x0801c3b6
 8009e28:	0801c5cb 	.word	0x0801c5cb
 8009e2c:	0801a4e1 	.word	0x0801a4e1
 8009e30:	0801c612 	.word	0x0801c612
 8009e34:	0801c62d 	.word	0x0801c62d
 8009e38:	0801c63a 	.word	0x0801c63a
 8009e3c:	0801c5fb 	.word	0x0801c5fb

08009e40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e44:	4688      	mov	r8, r1
 8009e46:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009e48:	4606      	mov	r6, r0
 8009e4a:	b950      	cbnz	r0, 8009e62 <pbuf_copy_partial+0x22>
 8009e4c:	4b1b      	ldr	r3, [pc, #108]	; (8009ebc <pbuf_copy_partial+0x7c>)
 8009e4e:	491c      	ldr	r1, [pc, #112]	; (8009ec0 <pbuf_copy_partial+0x80>)
 8009e50:	481c      	ldr	r0, [pc, #112]	; (8009ec4 <pbuf_copy_partial+0x84>)
 8009e52:	f240 420a 	movw	r2, #1034	; 0x40a
 8009e56:	f004 f81d 	bl	800de94 <iprintf>
 8009e5a:	4637      	mov	r7, r6
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009e62:	bb49      	cbnz	r1, 8009eb8 <pbuf_copy_partial+0x78>
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <pbuf_copy_partial+0x7c>)
 8009e66:	4918      	ldr	r1, [pc, #96]	; (8009ec8 <pbuf_copy_partial+0x88>)
 8009e68:	4816      	ldr	r0, [pc, #88]	; (8009ec4 <pbuf_copy_partial+0x84>)
 8009e6a:	f240 420b 	movw	r2, #1035	; 0x40b
 8009e6e:	f004 f811 	bl	800de94 <iprintf>
 8009e72:	4647      	mov	r7, r8
 8009e74:	e7f2      	b.n	8009e5c <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8009e76:	8975      	ldrh	r5, [r6, #10]
 8009e78:	b153      	cbz	r3, 8009e90 <pbuf_copy_partial+0x50>
 8009e7a:	42ab      	cmp	r3, r5
 8009e7c:	d308      	bcc.n	8009e90 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8009e7e:	1b5b      	subs	r3, r3, r5
 8009e80:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009e82:	6836      	ldr	r6, [r6, #0]
 8009e84:	f1b9 0f00 	cmp.w	r9, #0
 8009e88:	d0e8      	beq.n	8009e5c <pbuf_copy_partial+0x1c>
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d1f3      	bne.n	8009e76 <pbuf_copy_partial+0x36>
 8009e8e:	e7e5      	b.n	8009e5c <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8009e90:	1aec      	subs	r4, r5, r3
 8009e92:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8009e94:	454c      	cmp	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009e96:	6871      	ldr	r1, [r6, #4]
 8009e98:	bf28      	it	cs
 8009e9a:	464c      	movcs	r4, r9
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4419      	add	r1, r3
 8009ea0:	eb08 0007 	add.w	r0, r8, r7
 8009ea4:	f003 ffc6 	bl	800de34 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009ea8:	4427      	add	r7, r4
      len = (u16_t)(len - buf_copy_len);
 8009eaa:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009eae:	b2bf      	uxth	r7, r7
      len = (u16_t)(len - buf_copy_len);
 8009eb0:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e7e4      	b.n	8009e82 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8009eb8:	2700      	movs	r7, #0
 8009eba:	e7e3      	b.n	8009e84 <pbuf_copy_partial+0x44>
 8009ebc:	0801c3b6 	.word	0x0801c3b6
 8009ec0:	0801c664 	.word	0x0801c664
 8009ec4:	0801a4e1 	.word	0x0801a4e1
 8009ec8:	0801c683 	.word	0x0801c683

08009ecc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009ed0:	460a      	mov	r2, r1
 8009ed2:	8929      	ldrh	r1, [r5, #8]
 8009ed4:	f7ff fdde 	bl	8009a94 <pbuf_alloc>
  if (q == NULL) {
 8009ed8:	4604      	mov	r4, r0
 8009eda:	b150      	cbz	r0, 8009ef2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8009edc:	4629      	mov	r1, r5
 8009ede:	f7ff ff2d 	bl	8009d3c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009ee2:	b130      	cbz	r0, 8009ef2 <pbuf_clone+0x26>
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <pbuf_clone+0x2c>)
 8009ee6:	4905      	ldr	r1, [pc, #20]	; (8009efc <pbuf_clone+0x30>)
 8009ee8:	4805      	ldr	r0, [pc, #20]	; (8009f00 <pbuf_clone+0x34>)
 8009eea:	f240 5224 	movw	r2, #1316	; 0x524
 8009eee:	f003 ffd1 	bl	800de94 <iprintf>
  return q;
}
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0801c3b6 	.word	0x0801c3b6
 8009efc:	0801c783 	.word	0x0801c783
 8009f00:	0801a4e1 	.word	0x0801a4e1

08009f04 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8009f04:	4a12      	ldr	r2, [pc, #72]	; (8009f50 <tcp_new_port+0x4c>)
 8009f06:	8813      	ldrh	r3, [r2, #0]
{
 8009f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009f0e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8009f12:	3301      	adds	r3, #1
 8009f14:	b29b      	uxth	r3, r3
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009f16:	4d0f      	ldr	r5, [pc, #60]	; (8009f54 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	bf08      	it	eq
 8009f1c:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 8009f20:	2104      	movs	r1, #4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009f22:	f855 4b04 	ldr.w	r4, [r5], #4
 8009f26:	6824      	ldr	r4, [r4, #0]
 8009f28:	b934      	cbnz	r4, 8009f38 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009f2a:	3901      	subs	r1, #1
 8009f2c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009f30:	d1f7      	bne.n	8009f22 <tcp_new_port+0x1e>
 8009f32:	8013      	strh	r3, [r2, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009f34:	4618      	mov	r0, r3
 8009f36:	e007      	b.n	8009f48 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 8009f38:	8ae7      	ldrh	r7, [r4, #22]
 8009f3a:	429f      	cmp	r7, r3
 8009f3c:	d105      	bne.n	8009f4a <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009f3e:	3801      	subs	r0, #1
 8009f40:	b280      	uxth	r0, r0
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d1e5      	bne.n	8009f12 <tcp_new_port+0xe>
 8009f46:	8013      	strh	r3, [r2, #0]
}
 8009f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009f4a:	68e4      	ldr	r4, [r4, #12]
 8009f4c:	e7ec      	b.n	8009f28 <tcp_new_port+0x24>
 8009f4e:	bf00      	nop
 8009f50:	20000038 	.word	0x20000038
 8009f54:	0800fa70 	.word	0x0800fa70

08009f58 <tcp_close_shutdown_fin>:
{
 8009f58:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	b930      	cbnz	r0, 8009f6c <tcp_close_shutdown_fin+0x14>
 8009f5e:	4b13      	ldr	r3, [pc, #76]	; (8009fac <tcp_close_shutdown_fin+0x54>)
 8009f60:	4913      	ldr	r1, [pc, #76]	; (8009fb0 <tcp_close_shutdown_fin+0x58>)
 8009f62:	4814      	ldr	r0, [pc, #80]	; (8009fb4 <tcp_close_shutdown_fin+0x5c>)
 8009f64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009f68:	f003 ff94 	bl	800de94 <iprintf>
  switch (pcb->state) {
 8009f6c:	7d23      	ldrb	r3, [r4, #20]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d003      	beq.n	8009f7a <tcp_close_shutdown_fin+0x22>
 8009f72:	2b07      	cmp	r3, #7
 8009f74:	d00c      	beq.n	8009f90 <tcp_close_shutdown_fin+0x38>
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d108      	bne.n	8009f8c <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f002 fdb8 	bl	800caf0 <tcp_send_fin>
      if (err == ERR_OK) {
 8009f80:	b960      	cbnz	r0, 8009f9c <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8009f82:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8009f84:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8009f86:	4620      	mov	r0, r4
 8009f88:	f002 ff14 	bl	800cdb4 <tcp_output>
  switch (pcb->state) {
 8009f8c:	2000      	movs	r0, #0
}
 8009f8e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8009f90:	4620      	mov	r0, r4
 8009f92:	f002 fdad 	bl	800caf0 <tcp_send_fin>
      if (err == ERR_OK) {
 8009f96:	b908      	cbnz	r0, 8009f9c <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8009f98:	2309      	movs	r3, #9
 8009f9a:	e7f3      	b.n	8009f84 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d1f6      	bne.n	8009f8e <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009fa0:	8b63      	ldrh	r3, [r4, #26]
 8009fa2:	f043 0308 	orr.w	r3, r3, #8
 8009fa6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009fa8:	e7f0      	b.n	8009f8c <tcp_close_shutdown_fin+0x34>
 8009faa:	bf00      	nop
 8009fac:	0801c794 	.word	0x0801c794
 8009fb0:	0801c80d 	.word	0x0801c80d
 8009fb4:	0801a4e1 	.word	0x0801a4e1

08009fb8 <tcp_init>:
{
 8009fb8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009fba:	f003 ff83 	bl	800dec4 <rand>
 8009fbe:	4b03      	ldr	r3, [pc, #12]	; (8009fcc <tcp_init+0x14>)
 8009fc0:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8009fc4:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8009fc8:	8018      	strh	r0, [r3, #0]
}
 8009fca:	bd08      	pop	{r3, pc}
 8009fcc:	20000038 	.word	0x20000038

08009fd0 <tcp_free>:
{
 8009fd0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009fd2:	7d03      	ldrb	r3, [r0, #20]
 8009fd4:	2b01      	cmp	r3, #1
{
 8009fd6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009fd8:	d105      	bne.n	8009fe6 <tcp_free+0x16>
 8009fda:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <tcp_free+0x24>)
 8009fdc:	4906      	ldr	r1, [pc, #24]	; (8009ff8 <tcp_free+0x28>)
 8009fde:	4807      	ldr	r0, [pc, #28]	; (8009ffc <tcp_free+0x2c>)
 8009fe0:	22d4      	movs	r2, #212	; 0xd4
 8009fe2:	f003 ff57 	bl	800de94 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	2001      	movs	r0, #1
}
 8009fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009fee:	f7ff babb 	b.w	8009568 <memp_free>
 8009ff2:	bf00      	nop
 8009ff4:	0801c794 	.word	0x0801c794
 8009ff8:	0801c819 	.word	0x0801c819
 8009ffc:	0801a4e1 	.word	0x0801a4e1

0800a000 <tcp_bind>:
{
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a002:	4d23      	ldr	r5, [pc, #140]	; (800a090 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a004:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800a006:	2900      	cmp	r1, #0
 800a008:	bf18      	it	ne
 800a00a:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a00c:	b948      	cbnz	r0, 800a022 <tcp_bind+0x22>
 800a00e:	4b21      	ldr	r3, [pc, #132]	; (800a094 <tcp_bind+0x94>)
 800a010:	4921      	ldr	r1, [pc, #132]	; (800a098 <tcp_bind+0x98>)
 800a012:	4822      	ldr	r0, [pc, #136]	; (800a09c <tcp_bind+0x9c>)
 800a014:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a018:	f003 ff3c 	bl	800de94 <iprintf>
 800a01c:	f06f 000f 	mvn.w	r0, #15
}
 800a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a022:	7d03      	ldrb	r3, [r0, #20]
 800a024:	b14b      	cbz	r3, 800a03a <tcp_bind+0x3a>
 800a026:	4b1b      	ldr	r3, [pc, #108]	; (800a094 <tcp_bind+0x94>)
 800a028:	491d      	ldr	r1, [pc, #116]	; (800a0a0 <tcp_bind+0xa0>)
 800a02a:	481c      	ldr	r0, [pc, #112]	; (800a09c <tcp_bind+0x9c>)
 800a02c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a030:	f003 ff30 	bl	800de94 <iprintf>
 800a034:	f06f 0005 	mvn.w	r0, #5
 800a038:	e7f2      	b.n	800a020 <tcp_bind+0x20>
  if (port == 0) {
 800a03a:	b932      	cbnz	r2, 800a04a <tcp_bind+0x4a>
    port = tcp_new_port();
 800a03c:	f7ff ff62 	bl	8009f04 <tcp_new_port>
    if (port == 0) {
 800a040:	4602      	mov	r2, r0
 800a042:	b950      	cbnz	r0, 800a05a <tcp_bind+0x5a>
      return ERR_BUF;
 800a044:	f06f 0001 	mvn.w	r0, #1
 800a048:	e7ea      	b.n	800a020 <tcp_bind+0x20>
 800a04a:	4816      	ldr	r0, [pc, #88]	; (800a0a4 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a04c:	f850 1b04 	ldr.w	r1, [r0], #4
 800a050:	6809      	ldr	r1, [r1, #0]
 800a052:	b971      	cbnz	r1, 800a072 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800a054:	3301      	adds	r3, #1
 800a056:	2b04      	cmp	r3, #4
 800a058:	d1f8      	bne.n	800a04c <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a05e:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a060:	4b11      	ldr	r3, [pc, #68]	; (800a0a8 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800a062:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	60e2      	str	r2, [r4, #12]
 800a068:	601c      	str	r4, [r3, #0]
 800a06a:	f003 f979 	bl	800d360 <tcp_timer_needed>
  return ERR_OK;
 800a06e:	2000      	movs	r0, #0
 800a070:	e7d6      	b.n	800a020 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800a072:	8ace      	ldrh	r6, [r1, #22]
 800a074:	4296      	cmp	r6, r2
 800a076:	d105      	bne.n	800a084 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a078:	680f      	ldr	r7, [r1, #0]
 800a07a:	b12f      	cbz	r7, 800a088 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800a07c:	682e      	ldr	r6, [r5, #0]
 800a07e:	b11e      	cbz	r6, 800a088 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a080:	42b7      	cmp	r7, r6
 800a082:	d001      	beq.n	800a088 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a084:	68c9      	ldr	r1, [r1, #12]
 800a086:	e7e4      	b.n	800a052 <tcp_bind+0x52>
              return ERR_USE;
 800a088:	f06f 0007 	mvn.w	r0, #7
 800a08c:	e7c8      	b.n	800a020 <tcp_bind+0x20>
 800a08e:	bf00      	nop
 800a090:	0800f99c 	.word	0x0800f99c
 800a094:	0801c794 	.word	0x0801c794
 800a098:	0801c82a 	.word	0x0801c82a
 800a09c:	0801a4e1 	.word	0x0801a4e1
 800a0a0:	0801c840 	.word	0x0801c840
 800a0a4:	0800fa70 	.word	0x0800fa70
 800a0a8:	20014a14 	.word	0x20014a14

0800a0ac <tcp_listen_with_backlog_and_err>:
{
 800a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ae:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	b968      	cbnz	r0, 800a0d0 <tcp_listen_with_backlog_and_err+0x24>
 800a0b4:	4b29      	ldr	r3, [pc, #164]	; (800a15c <tcp_listen_with_backlog_and_err+0xb0>)
 800a0b6:	492a      	ldr	r1, [pc, #168]	; (800a160 <tcp_listen_with_backlog_and_err+0xb4>)
 800a0b8:	482a      	ldr	r0, [pc, #168]	; (800a164 <tcp_listen_with_backlog_and_err+0xb8>)
 800a0ba:	f240 3259 	movw	r2, #857	; 0x359
 800a0be:	f003 fee9 	bl	800de94 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800a0c2:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a0c4:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800a0c8:	b106      	cbz	r6, 800a0cc <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800a0ca:	7033      	strb	r3, [r6, #0]
}
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a0d0:	7d07      	ldrb	r7, [r0, #20]
 800a0d2:	b157      	cbz	r7, 800a0ea <tcp_listen_with_backlog_and_err+0x3e>
 800a0d4:	4b21      	ldr	r3, [pc, #132]	; (800a15c <tcp_listen_with_backlog_and_err+0xb0>)
 800a0d6:	4924      	ldr	r1, [pc, #144]	; (800a168 <tcp_listen_with_backlog_and_err+0xbc>)
 800a0d8:	4822      	ldr	r0, [pc, #136]	; (800a164 <tcp_listen_with_backlog_and_err+0xb8>)
 800a0da:	f240 325a 	movw	r2, #858	; 0x35a
 800a0de:	f003 fed9 	bl	800de94 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800a0e2:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a0e4:	f06f 030e 	mvn.w	r3, #14
 800a0e8:	e7ee      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a0ea:	2002      	movs	r0, #2
 800a0ec:	f7ff fa20 	bl	8009530 <memp_malloc>
  if (lpcb == NULL) {
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d02f      	beq.n	800a156 <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 800a0f6:	692b      	ldr	r3, [r5, #16]
 800a0f8:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 800a0fa:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 800a0fc:	8aeb      	ldrh	r3, [r5, #22]
 800a0fe:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800a100:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 800a102:	7d6a      	ldrb	r2, [r5, #21]
 800a104:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a106:	7a6a      	ldrb	r2, [r5, #9]
 800a108:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a10a:	7207      	strb	r7, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800a10c:	7aea      	ldrb	r2, [r5, #11]
 800a10e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800a110:	7aaa      	ldrb	r2, [r5, #10]
 800a112:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a114:	682a      	ldr	r2, [r5, #0]
 800a116:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a118:	b13b      	cbz	r3, 800a12a <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a11a:	4a14      	ldr	r2, [pc, #80]	; (800a16c <tcp_listen_with_backlog_and_err+0xc0>)
 800a11c:	6813      	ldr	r3, [r2, #0]
 800a11e:	42ab      	cmp	r3, r5
 800a120:	d111      	bne.n	800a146 <tcp_listen_with_backlog_and_err+0x9a>
 800a122:	68eb      	ldr	r3, [r5, #12]
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	2300      	movs	r3, #0
 800a128:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800a12a:	4628      	mov	r0, r5
 800a12c:	f7ff ff50 	bl	8009fd0 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <tcp_listen_with_backlog_and_err+0xc4>)
 800a132:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <tcp_listen_with_backlog_and_err+0xc8>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	60e2      	str	r2, [r4, #12]
 800a13a:	601c      	str	r4, [r3, #0]
 800a13c:	f003 f910 	bl	800d360 <tcp_timer_needed>
  res = ERR_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	e7c1      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x1c>
 800a144:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0ed      	beq.n	800a126 <tcp_listen_with_backlog_and_err+0x7a>
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	42aa      	cmp	r2, r5
 800a14e:	d1f9      	bne.n	800a144 <tcp_listen_with_backlog_and_err+0x98>
 800a150:	68ea      	ldr	r2, [r5, #12]
 800a152:	60da      	str	r2, [r3, #12]
 800a154:	e7e7      	b.n	800a126 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800a156:	f04f 33ff 	mov.w	r3, #4294967295
 800a15a:	e7b5      	b.n	800a0c8 <tcp_listen_with_backlog_and_err+0x1c>
 800a15c:	0801c794 	.word	0x0801c794
 800a160:	0801c868 	.word	0x0801c868
 800a164:	0801a4e1 	.word	0x0801a4e1
 800a168:	0801c895 	.word	0x0801c895
 800a16c:	20014a14 	.word	0x20014a14
 800a170:	0800ad29 	.word	0x0800ad29
 800a174:	20014a10 	.word	0x20014a10

0800a178 <tcp_update_rcv_ann_wnd>:
{
 800a178:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a17a:	4604      	mov	r4, r0
 800a17c:	b930      	cbnz	r0, 800a18c <tcp_update_rcv_ann_wnd+0x14>
 800a17e:	4b15      	ldr	r3, [pc, #84]	; (800a1d4 <tcp_update_rcv_ann_wnd+0x5c>)
 800a180:	4915      	ldr	r1, [pc, #84]	; (800a1d8 <tcp_update_rcv_ann_wnd+0x60>)
 800a182:	4816      	ldr	r0, [pc, #88]	; (800a1dc <tcp_update_rcv_ann_wnd+0x64>)
 800a184:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a188:	f003 fe84 	bl	800de94 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a18c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a18e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a190:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a192:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a194:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800a198:	1ac8      	subs	r0, r1, r3
 800a19a:	42b2      	cmp	r2, r6
 800a19c:	4428      	add	r0, r5
 800a19e:	bf94      	ite	ls
 800a1a0:	1a82      	subls	r2, r0, r2
 800a1a2:	1b82      	subhi	r2, r0, r6
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	db01      	blt.n	800a1ac <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a1a8:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a1ac:	1aea      	subs	r2, r5, r3
 800a1ae:	2a00      	cmp	r2, #0
 800a1b0:	dd02      	ble.n	800a1b8 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	8560      	strh	r0, [r4, #42]	; 0x2a
 800a1b6:	e7f8      	b.n	800a1aa <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a1b8:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a1ba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a1be:	d306      	bcc.n	800a1ce <tcp_update_rcv_ann_wnd+0x56>
 800a1c0:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <tcp_update_rcv_ann_wnd+0x5c>)
 800a1c2:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <tcp_update_rcv_ann_wnd+0x68>)
 800a1c4:	4805      	ldr	r0, [pc, #20]	; (800a1dc <tcp_update_rcv_ann_wnd+0x64>)
 800a1c6:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a1ca:	f003 fe63 	bl	800de94 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a1ce:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e7ea      	b.n	800a1aa <tcp_update_rcv_ann_wnd+0x32>
 800a1d4:	0801c794 	.word	0x0801c794
 800a1d8:	0801c8cc 	.word	0x0801c8cc
 800a1dc:	0801a4e1 	.word	0x0801a4e1
 800a1e0:	0801c8f0 	.word	0x0801c8f0

0800a1e4 <tcp_recved>:
{
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	b940      	cbnz	r0, 800a1fe <tcp_recved+0x1a>
}
 800a1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a1f0:	4b17      	ldr	r3, [pc, #92]	; (800a250 <tcp_recved+0x6c>)
 800a1f2:	4918      	ldr	r1, [pc, #96]	; (800a254 <tcp_recved+0x70>)
 800a1f4:	4818      	ldr	r0, [pc, #96]	; (800a258 <tcp_recved+0x74>)
 800a1f6:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a1fa:	f003 be4b 	b.w	800de94 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a1fe:	7d03      	ldrb	r3, [r0, #20]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d106      	bne.n	800a212 <tcp_recved+0x2e>
 800a204:	4b12      	ldr	r3, [pc, #72]	; (800a250 <tcp_recved+0x6c>)
 800a206:	4915      	ldr	r1, [pc, #84]	; (800a25c <tcp_recved+0x78>)
 800a208:	4813      	ldr	r0, [pc, #76]	; (800a258 <tcp_recved+0x74>)
 800a20a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a20e:	f003 fe41 	bl	800de94 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a212:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800a214:	1911      	adds	r1, r2, r4
 800a216:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a218:	f640 3368 	movw	r3, #2920	; 0xb68
 800a21c:	4299      	cmp	r1, r3
 800a21e:	d813      	bhi.n	800a248 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a220:	428a      	cmp	r2, r1
 800a222:	bf88      	it	hi
 800a224:	4619      	movhi	r1, r3
 800a226:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a228:	4628      	mov	r0, r5
 800a22a:	f7ff ffa5 	bl	800a178 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a22e:	f240 23d9 	movw	r3, #729	; 0x2d9
 800a232:	4298      	cmp	r0, r3
 800a234:	d90a      	bls.n	800a24c <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800a236:	8b6b      	ldrh	r3, [r5, #26]
 800a238:	f043 0302 	orr.w	r3, r3, #2
 800a23c:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800a23e:	4628      	mov	r0, r5
}
 800a240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800a244:	f002 bdb6 	b.w	800cdb4 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a248:	4619      	mov	r1, r3
 800a24a:	e7ec      	b.n	800a226 <tcp_recved+0x42>
}
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	bf00      	nop
 800a250:	0801c794 	.word	0x0801c794
 800a254:	0801c90a 	.word	0x0801c90a
 800a258:	0801a4e1 	.word	0x0801a4e1
 800a25c:	0801c922 	.word	0x0801c922

0800a260 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a260:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800a262:	4604      	mov	r4, r0
 800a264:	b148      	cbz	r0, 800a27a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800a266:	6840      	ldr	r0, [r0, #4]
 800a268:	b108      	cbz	r0, 800a26e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800a26a:	f7ff fbab 	bl	80099c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a26e:	4621      	mov	r1, r4
 800a270:	2003      	movs	r0, #3
  }
}
 800a272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800a276:	f7ff b977 	b.w	8009568 <memp_free>
}
 800a27a:	bd10      	pop	{r4, pc}

0800a27c <tcp_segs_free>:
{
 800a27c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800a27e:	b900      	cbnz	r0, 800a282 <tcp_segs_free+0x6>
}
 800a280:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800a282:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800a284:	f7ff ffec 	bl	800a260 <tcp_seg_free>
    seg = next;
 800a288:	4620      	mov	r0, r4
 800a28a:	e7f8      	b.n	800a27e <tcp_segs_free+0x2>

0800a28c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a28c:	b100      	cbz	r0, 800a290 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800a28e:	6101      	str	r1, [r0, #16]
  }
}
 800a290:	4770      	bx	lr
	...

0800a294 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a294:	b538      	push	{r3, r4, r5, lr}
 800a296:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a298:	4604      	mov	r4, r0
 800a29a:	b158      	cbz	r0, 800a2b4 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a29c:	7d03      	ldrb	r3, [r0, #20]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d106      	bne.n	800a2b0 <tcp_recv+0x1c>
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <tcp_recv+0x24>)
 800a2a4:	4905      	ldr	r1, [pc, #20]	; (800a2bc <tcp_recv+0x28>)
 800a2a6:	4806      	ldr	r0, [pc, #24]	; (800a2c0 <tcp_recv+0x2c>)
 800a2a8:	f240 72df 	movw	r2, #2015	; 0x7df
 800a2ac:	f003 fdf2 	bl	800de94 <iprintf>
    pcb->recv = recv;
 800a2b0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0801c794 	.word	0x0801c794
 800a2bc:	0801c961 	.word	0x0801c961
 800a2c0:	0801a4e1 	.word	0x0801a4e1

0800a2c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	b150      	cbz	r0, 800a2e2 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a2cc:	7d03      	ldrb	r3, [r0, #20]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d106      	bne.n	800a2e0 <tcp_sent+0x1c>
 800a2d2:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <tcp_sent+0x20>)
 800a2d4:	4904      	ldr	r1, [pc, #16]	; (800a2e8 <tcp_sent+0x24>)
 800a2d6:	4805      	ldr	r0, [pc, #20]	; (800a2ec <tcp_sent+0x28>)
 800a2d8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800a2dc:	f003 fdda 	bl	800de94 <iprintf>
    pcb->sent = sent;
 800a2e0:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800a2e2:	bd38      	pop	{r3, r4, r5, pc}
 800a2e4:	0801c794 	.word	0x0801c794
 800a2e8:	0801c988 	.word	0x0801c988
 800a2ec:	0801a4e1 	.word	0x0801a4e1

0800a2f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	b158      	cbz	r0, 800a310 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a2f8:	7d03      	ldrb	r3, [r0, #20]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d106      	bne.n	800a30c <tcp_err+0x1c>
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <tcp_err+0x24>)
 800a300:	4905      	ldr	r1, [pc, #20]	; (800a318 <tcp_err+0x28>)
 800a302:	4806      	ldr	r0, [pc, #24]	; (800a31c <tcp_err+0x2c>)
 800a304:	f640 020d 	movw	r2, #2061	; 0x80d
 800a308:	f003 fdc4 	bl	800de94 <iprintf>
    pcb->errf = err;
 800a30c:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800a310:	bd38      	pop	{r3, r4, r5, pc}
 800a312:	bf00      	nop
 800a314:	0801c794 	.word	0x0801c794
 800a318:	0801c9af 	.word	0x0801c9af
 800a31c:	0801a4e1 	.word	0x0801a4e1

0800a320 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a320:	b118      	cbz	r0, 800a32a <tcp_accept+0xa>
 800a322:	7d03      	ldrb	r3, [r0, #20]
 800a324:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800a326:	bf08      	it	eq
 800a328:	6181      	streq	r1, [r0, #24]
  }
}
 800a32a:	4770      	bx	lr

0800a32c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	460e      	mov	r6, r1
 800a330:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a332:	4604      	mov	r4, r0
 800a334:	b940      	cbnz	r0, 800a348 <tcp_poll+0x1c>
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800a336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a33a:	4b0a      	ldr	r3, [pc, #40]	; (800a364 <tcp_poll+0x38>)
 800a33c:	490a      	ldr	r1, [pc, #40]	; (800a368 <tcp_poll+0x3c>)
 800a33e:	480b      	ldr	r0, [pc, #44]	; (800a36c <tcp_poll+0x40>)
 800a340:	f640 023d 	movw	r2, #2109	; 0x83d
 800a344:	f003 bda6 	b.w	800de94 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a348:	7d03      	ldrb	r3, [r0, #20]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d106      	bne.n	800a35c <tcp_poll+0x30>
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <tcp_poll+0x38>)
 800a350:	4907      	ldr	r1, [pc, #28]	; (800a370 <tcp_poll+0x44>)
 800a352:	4806      	ldr	r0, [pc, #24]	; (800a36c <tcp_poll+0x40>)
 800a354:	f640 023e 	movw	r2, #2110	; 0x83e
 800a358:	f003 fd9c 	bl	800de94 <iprintf>
  pcb->pollinterval = interval;
 800a35c:	7765      	strb	r5, [r4, #29]
  pcb->poll = poll;
 800a35e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
}
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	0801c794 	.word	0x0801c794
 800a368:	0801c9d5 	.word	0x0801c9d5
 800a36c:	0801a4e1 	.word	0x0801a4e1
 800a370:	0801c9eb 	.word	0x0801c9eb

0800a374 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a374:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a376:	4604      	mov	r4, r0
 800a378:	b940      	cbnz	r0, 800a38c <tcp_pcb_purge+0x18>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800a37a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a37e:	4b10      	ldr	r3, [pc, #64]	; (800a3c0 <tcp_pcb_purge+0x4c>)
 800a380:	4910      	ldr	r1, [pc, #64]	; (800a3c4 <tcp_pcb_purge+0x50>)
 800a382:	4811      	ldr	r0, [pc, #68]	; (800a3c8 <tcp_pcb_purge+0x54>)
 800a384:	f640 0251 	movw	r2, #2129	; 0x851
 800a388:	f003 bd84 	b.w	800de94 <iprintf>
  if (pcb->state != CLOSED &&
 800a38c:	7d03      	ldrb	r3, [r0, #20]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d915      	bls.n	800a3be <tcp_pcb_purge+0x4a>
 800a392:	2b0a      	cmp	r3, #10
 800a394:	d013      	beq.n	800a3be <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800a396:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a398:	b118      	cbz	r0, 800a3a2 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800a39a:	f7ff fb13 	bl	80099c4 <pbuf_free>
      pcb->refused_data = NULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800a3a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3a6:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800a3a8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a3aa:	f7ff ff67 	bl	800a27c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a3ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a3b0:	f7ff ff64 	bl	800a27c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800a3ba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800a3be:	bd10      	pop	{r4, pc}
 800a3c0:	0801c794 	.word	0x0801c794
 800a3c4:	0801ca09 	.word	0x0801ca09
 800a3c8:	0801a4e1 	.word	0x0801a4e1

0800a3cc <tcp_slowtmr>:
{
 800a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a3d0:	4eaf      	ldr	r6, [pc, #700]	; (800a690 <tcp_slowtmr+0x2c4>)
 800a3d2:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800a69c <tcp_slowtmr+0x2d0>
 800a3d6:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a3d8:	4fae      	ldr	r7, [pc, #696]	; (800a694 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 800a3da:	3301      	adds	r3, #1
 800a3dc:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800a3de:	4bae      	ldr	r3, [pc, #696]	; (800a698 <tcp_slowtmr+0x2cc>)
 800a3e0:	781a      	ldrb	r2, [r3, #0]
{
 800a3e2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800a3e4:	3201      	adds	r2, #1
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	9304      	str	r3, [sp, #16]
  pcb = tcp_active_pcbs;
 800a3ea:	4bac      	ldr	r3, [pc, #688]	; (800a69c <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a3ec:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800a6c4 <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 800a3f0:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800a3f2:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800a3f6:	b96c      	cbnz	r4, 800a414 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 800a3f8:	4fa9      	ldr	r7, [pc, #676]	; (800a6a0 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3fa:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800a694 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 800a3fe:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a400:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800a6c8 <tcp_slowtmr+0x2fc>
 800a404:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800a6c4 <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 800a408:	2d00      	cmp	r5, #0
 800a40a:	f040 81aa 	bne.w	800a762 <tcp_slowtmr+0x396>
}
 800a40e:	b007      	add	sp, #28
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a414:	7d23      	ldrb	r3, [r4, #20]
 800a416:	b933      	cbnz	r3, 800a426 <tcp_slowtmr+0x5a>
 800a418:	49a2      	ldr	r1, [pc, #648]	; (800a6a4 <tcp_slowtmr+0x2d8>)
 800a41a:	463b      	mov	r3, r7
 800a41c:	f240 42be 	movw	r2, #1214	; 0x4be
 800a420:	4640      	mov	r0, r8
 800a422:	f003 fd37 	bl	800de94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a426:	7d23      	ldrb	r3, [r4, #20]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d106      	bne.n	800a43a <tcp_slowtmr+0x6e>
 800a42c:	499e      	ldr	r1, [pc, #632]	; (800a6a8 <tcp_slowtmr+0x2dc>)
 800a42e:	463b      	mov	r3, r7
 800a430:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a434:	4640      	mov	r0, r8
 800a436:	f003 fd2d 	bl	800de94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a43a:	7d23      	ldrb	r3, [r4, #20]
 800a43c:	2b0a      	cmp	r3, #10
 800a43e:	d106      	bne.n	800a44e <tcp_slowtmr+0x82>
 800a440:	499a      	ldr	r1, [pc, #616]	; (800a6ac <tcp_slowtmr+0x2e0>)
 800a442:	463b      	mov	r3, r7
 800a444:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a448:	4640      	mov	r0, r8
 800a44a:	f003 fd23 	bl	800de94 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	7fa2      	ldrb	r2, [r4, #30]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d103      	bne.n	800a460 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 800a458:	68e5      	ldr	r5, [r4, #12]
      continue;
 800a45a:	46a1      	mov	r9, r4
 800a45c:	462c      	mov	r4, r5
 800a45e:	e7ca      	b.n	800a3f6 <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a460:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800a462:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a464:	2a02      	cmp	r2, #2
 800a466:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a46a:	d178      	bne.n	800a55e <tcp_slowtmr+0x192>
 800a46c:	2b05      	cmp	r3, #5
 800a46e:	d978      	bls.n	800a562 <tcp_slowtmr+0x196>
      ++pcb_remove;
 800a470:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800a474:	7d23      	ldrb	r3, [r4, #20]
 800a476:	2b06      	cmp	r3, #6
 800a478:	d10b      	bne.n	800a492 <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 800a47a:	8b62      	ldrh	r2, [r4, #26]
 800a47c:	06d2      	lsls	r2, r2, #27
 800a47e:	d508      	bpl.n	800a492 <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a480:	6832      	ldr	r2, [r6, #0]
 800a482:	6a21      	ldr	r1, [r4, #32]
 800a484:	1a52      	subs	r2, r2, r1
 800a486:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800a488:	bf84      	itt	hi
 800a48a:	f10b 0b01 	addhi.w	fp, fp, #1
 800a48e:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a492:	7a65      	ldrb	r5, [r4, #9]
 800a494:	f015 0508 	ands.w	r5, r5, #8
 800a498:	d019      	beq.n	800a4ce <tcp_slowtmr+0x102>
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d002      	beq.n	800a4a4 <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 800a49e:	2b07      	cmp	r3, #7
 800a4a0:	f040 8126 	bne.w	800a6f0 <tcp_slowtmr+0x324>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4a4:	6831      	ldr	r1, [r6, #0]
 800a4a6:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a4a8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4ac:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a4ae:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 800a4b2:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 800a4b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a4ba:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	f240 8104 	bls.w	800a6cc <tcp_slowtmr+0x300>
        ++pcb_remove;
 800a4c4:	f10b 0b01 	add.w	fp, fp, #1
 800a4c8:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 800a4cc:	2501      	movs	r5, #1
    if (pcb->state == SYN_RCVD) {
 800a4ce:	7d23      	ldrb	r3, [r4, #20]
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	f040 810f 	bne.w	800a6f4 <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4d6:	6833      	ldr	r3, [r6, #0]
 800a4d8:	6a22      	ldr	r2, [r4, #32]
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a4de:	d803      	bhi.n	800a4e8 <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 800a4e0:	f1bb 0f00 	cmp.w	fp, #0
 800a4e4:	f000 811b 	beq.w	800a71e <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 800a4e8:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a4ea:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800a4ee:	f7ff ff41 	bl	800a374 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a4f2:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 800a4f6:	f1b9 0f00 	cmp.w	r9, #0
 800a4fa:	f000 8103 	beq.w	800a704 <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	d106      	bne.n	800a510 <tcp_slowtmr+0x144>
 800a502:	496b      	ldr	r1, [pc, #428]	; (800a6b0 <tcp_slowtmr+0x2e4>)
 800a504:	463b      	mov	r3, r7
 800a506:	f240 526d 	movw	r2, #1389	; 0x56d
 800a50a:	4640      	mov	r0, r8
 800a50c:	f003 fcc2 	bl	800de94 <iprintf>
        prev->next = pcb->next;
 800a510:	68e3      	ldr	r3, [r4, #12]
 800a512:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800a516:	b15d      	cbz	r5, 800a530 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a518:	8b23      	ldrh	r3, [r4, #24]
 800a51a:	9302      	str	r3, [sp, #8]
 800a51c:	8ae3      	ldrh	r3, [r4, #22]
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	1d23      	adds	r3, r4, #4
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a526:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a528:	4623      	mov	r3, r4
 800a52a:	4620      	mov	r0, r4
 800a52c:	f002 fbca 	bl	800ccc4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a530:	6923      	ldr	r3, [r4, #16]
      pcb = pcb->next;
 800a532:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800a534:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800a536:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 800a538:	4c5e      	ldr	r4, [pc, #376]	; (800a6b4 <tcp_slowtmr+0x2e8>)
      tcp_free(pcb2);
 800a53a:	f7ff fd49 	bl	8009fd0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a53e:	2200      	movs	r2, #0
 800a540:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a542:	f1bb 0f00 	cmp.w	fp, #0
 800a546:	d008      	beq.n	800a55a <tcp_slowtmr+0x18e>
 800a548:	9b05      	ldr	r3, [sp, #20]
 800a54a:	f06f 010c 	mvn.w	r1, #12
 800a54e:	4618      	mov	r0, r3
 800a550:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800a552:	7823      	ldrb	r3, [r4, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	f47f af48 	bne.w	800a3ea <tcp_slowtmr+0x1e>
 800a55a:	464c      	mov	r4, r9
 800a55c:	e77d      	b.n	800a45a <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a55e:	2b0b      	cmp	r3, #11
 800a560:	e785      	b.n	800a46e <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 800a562:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800a566:	f1bb 0f00 	cmp.w	fp, #0
 800a56a:	d045      	beq.n	800a5f8 <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a56c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a56e:	b133      	cbz	r3, 800a57e <tcp_slowtmr+0x1b2>
 800a570:	4951      	ldr	r1, [pc, #324]	; (800a6b8 <tcp_slowtmr+0x2ec>)
 800a572:	463b      	mov	r3, r7
 800a574:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a578:	4640      	mov	r0, r8
 800a57a:	f003 fc8b 	bl	800de94 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a57e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a580:	b933      	cbnz	r3, 800a590 <tcp_slowtmr+0x1c4>
 800a582:	494e      	ldr	r1, [pc, #312]	; (800a6bc <tcp_slowtmr+0x2f0>)
 800a584:	463b      	mov	r3, r7
 800a586:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a58a:	4640      	mov	r0, r8
 800a58c:	f003 fc82 	bl	800de94 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a590:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a594:	2b0b      	cmp	r3, #11
 800a596:	f63f af6b 	bhi.w	800a470 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a59a:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800a59e:	4b48      	ldr	r3, [pc, #288]	; (800a6c0 <tcp_slowtmr+0x2f4>)
 800a5a0:	4413      	add	r3, r2
 800a5a2:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800a5a4:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d30b      	bcc.n	800a5c4 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 800a5ac:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800a5b0:	b189      	cbz	r1, 800a5d6 <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f002 f93c 	bl	800c830 <tcp_split_unsent_seg>
 800a5b8:	b990      	cbnz	r0, 800a5e0 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f002 fbfa 	bl	800cdb4 <tcp_output>
 800a5c0:	b130      	cbz	r0, 800a5d0 <tcp_slowtmr+0x204>
 800a5c2:	e00d      	b.n	800a5e0 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800a5c8:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800a5ca:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800a5ce:	d2ed      	bcs.n	800a5ac <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 800a5d0:	f04f 0b00 	mov.w	fp, #0
 800a5d4:	e74e      	b.n	800a474 <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f002 fdf4 	bl	800d1c4 <tcp_zero_window_probe>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d1f7      	bne.n	800a5d0 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a5e0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800a5e4:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a5e8:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800a5ea:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a5ee:	d8ef      	bhi.n	800a5d0 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a5f6:	e73d      	b.n	800a474 <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a5f8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800a5fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a5fe:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800a600:	bf9c      	itt	ls
 800a602:	3301      	addls	r3, #1
 800a604:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800a606:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a60a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a60e:	429a      	cmp	r2, r3
 800a610:	dbde      	blt.n	800a5d0 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a612:	4620      	mov	r0, r4
 800a614:	f002 fa9c 	bl	800cb50 <tcp_rexmit_rto_prepare>
 800a618:	b128      	cbz	r0, 800a626 <tcp_slowtmr+0x25a>
 800a61a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1d7      	bne.n	800a5d0 <tcp_slowtmr+0x204>
 800a620:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a622:	2b00      	cmp	r3, #0
 800a624:	d0d4      	beq.n	800a5d0 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 800a626:	7d23      	ldrb	r3, [r4, #20]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d015      	beq.n	800a658 <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a62c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800a630:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a634:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a638:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800a63c:	4a20      	ldr	r2, [pc, #128]	; (800a6c0 <tcp_slowtmr+0x2f4>)
 800a63e:	290c      	cmp	r1, #12
 800a640:	bf94      	ite	ls
 800a642:	1852      	addls	r2, r2, r1
 800a644:	320c      	addhi	r2, #12
 800a646:	7dd2      	ldrb	r2, [r2, #23]
 800a648:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a64a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a64e:	4293      	cmp	r3, r2
 800a650:	bfa8      	it	ge
 800a652:	4613      	movge	r3, r2
 800a654:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a658:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800a65c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a660:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->cwnd = pcb->mss;
 800a662:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800a666:	429a      	cmp	r2, r3
 800a668:	bf28      	it	cs
 800a66a:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a66c:	006b      	lsls	r3, r5, #1
 800a66e:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800a670:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a672:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
            pcb->rtime = 0;
 800a676:	f04f 0000 	mov.w	r0, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a67a:	bf98      	it	ls
 800a67c:	460b      	movls	r3, r1
            pcb->rtime = 0;
 800a67e:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800a680:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a684:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800a688:	4620      	mov	r0, r4
 800a68a:	f002 fd3d 	bl	800d108 <tcp_rexmit_rto_commit>
 800a68e:	e6f1      	b.n	800a474 <tcp_slowtmr+0xa8>
 800a690:	20014a0c 	.word	0x20014a0c
 800a694:	0801c794 	.word	0x0801c794
 800a698:	200067b1 	.word	0x200067b1
 800a69c:	20014a08 	.word	0x20014a08
 800a6a0:	20014a18 	.word	0x20014a18
 800a6a4:	0801ca24 	.word	0x0801ca24
 800a6a8:	0801ca4e 	.word	0x0801ca4e
 800a6ac:	0801ca78 	.word	0x0801ca78
 800a6b0:	0801cb0c 	.word	0x0801cb0c
 800a6b4:	20014a04 	.word	0x20014a04
 800a6b8:	0801caa5 	.word	0x0801caa5
 800a6bc:	0801cad7 	.word	0x0801cad7
 800a6c0:	0800fa70 	.word	0x0800fa70
 800a6c4:	0801a4e1 	.word	0x0801a4e1
 800a6c8:	0801cb61 	.word	0x0801cb61
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a6cc:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a6d0:	4a3f      	ldr	r2, [pc, #252]	; (800a7d0 <tcp_slowtmr+0x404>)
 800a6d2:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 800a6d6:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6da:	4299      	cmp	r1, r3
 800a6dc:	d908      	bls.n	800a6f0 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f002 fd48 	bl	800d174 <tcp_keepalive>
        if (err == ERR_OK) {
 800a6e4:	b920      	cbnz	r0, 800a6f0 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 800a6e6:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	e6ec      	b.n	800a4ce <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 800a6f4:	2b09      	cmp	r3, #9
 800a6f6:	f47f aef3 	bne.w	800a4e0 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a6fa:	6833      	ldr	r3, [r6, #0]
 800a6fc:	6a22      	ldr	r2, [r4, #32]
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	2bf0      	cmp	r3, #240	; 0xf0
 800a702:	e6ec      	b.n	800a4de <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a704:	42a3      	cmp	r3, r4
 800a706:	d006      	beq.n	800a716 <tcp_slowtmr+0x34a>
 800a708:	4932      	ldr	r1, [pc, #200]	; (800a7d4 <tcp_slowtmr+0x408>)
 800a70a:	463b      	mov	r3, r7
 800a70c:	f240 5271 	movw	r2, #1393	; 0x571
 800a710:	4640      	mov	r0, r8
 800a712:	f003 fbbf 	bl	800de94 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a716:	68e3      	ldr	r3, [r4, #12]
 800a718:	f8ca 3000 	str.w	r3, [sl]
 800a71c:	e6fb      	b.n	800a516 <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 800a71e:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a720:	7f62      	ldrb	r2, [r4, #29]
      pcb = pcb->next;
 800a722:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800a724:	3301      	adds	r3, #1
 800a726:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a728:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a72a:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a72c:	f63f ae95 	bhi.w	800a45a <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 800a730:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800a7e0 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 800a734:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800a738:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800a73c:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 800a740:	b91b      	cbnz	r3, 800a74a <tcp_slowtmr+0x37e>
          tcp_output(prev);
 800a742:	4620      	mov	r0, r4
 800a744:	f002 fb36 	bl	800cdb4 <tcp_output>
 800a748:	e687      	b.n	800a45a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800a74a:	6920      	ldr	r0, [r4, #16]
 800a74c:	4621      	mov	r1, r4
 800a74e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a750:	f899 3000 	ldrb.w	r3, [r9]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f47f ae48 	bne.w	800a3ea <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f47f ae7d 	bne.w	800a45a <tcp_slowtmr+0x8e>
 800a760:	e7ef      	b.n	800a742 <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a762:	7d2b      	ldrb	r3, [r5, #20]
 800a764:	2b0a      	cmp	r3, #10
 800a766:	d006      	beq.n	800a776 <tcp_slowtmr+0x3aa>
 800a768:	4643      	mov	r3, r8
 800a76a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a76e:	4651      	mov	r1, sl
 800a770:	4648      	mov	r0, r9
 800a772:	f003 fb8f 	bl	800de94 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a776:	6833      	ldr	r3, [r6, #0]
 800a778:	6a2a      	ldr	r2, [r5, #32]
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	2bf0      	cmp	r3, #240	; 0xf0
 800a77e:	d910      	bls.n	800a7a2 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fdf7 	bl	800a374 <tcp_pcb_purge>
      if (prev != NULL) {
 800a786:	b97c      	cbnz	r4, 800a7a8 <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	42ab      	cmp	r3, r5
 800a78c:	d006      	beq.n	800a79c <tcp_slowtmr+0x3d0>
 800a78e:	4912      	ldr	r1, [pc, #72]	; (800a7d8 <tcp_slowtmr+0x40c>)
 800a790:	4643      	mov	r3, r8
 800a792:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a796:	4648      	mov	r0, r9
 800a798:	f003 fb7c 	bl	800de94 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a79c:	68eb      	ldr	r3, [r5, #12]
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	e00e      	b.n	800a7c0 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 800a7a2:	462c      	mov	r4, r5
 800a7a4:	68ed      	ldr	r5, [r5, #12]
 800a7a6:	e62f      	b.n	800a408 <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	42ab      	cmp	r3, r5
 800a7ac:	d106      	bne.n	800a7bc <tcp_slowtmr+0x3f0>
 800a7ae:	490b      	ldr	r1, [pc, #44]	; (800a7dc <tcp_slowtmr+0x410>)
 800a7b0:	4643      	mov	r3, r8
 800a7b2:	f240 52af 	movw	r2, #1455	; 0x5af
 800a7b6:	4648      	mov	r0, r9
 800a7b8:	f003 fb6c 	bl	800de94 <iprintf>
        prev->next = pcb->next;
 800a7bc:	68eb      	ldr	r3, [r5, #12]
 800a7be:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800a7c0:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f7ff fc03 	bl	8009fd0 <tcp_free>
      pcb = pcb->next;
 800a7ca:	465d      	mov	r5, fp
 800a7cc:	e61c      	b.n	800a408 <tcp_slowtmr+0x3c>
 800a7ce:	bf00      	nop
 800a7d0:	000124f8 	.word	0x000124f8
 800a7d4:	0801cb37 	.word	0x0801cb37
 800a7d8:	0801cbb7 	.word	0x0801cbb7
 800a7dc:	0801cb90 	.word	0x0801cb90
 800a7e0:	20014a04 	.word	0x20014a04

0800a7e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	b931      	cbnz	r1, 800a7fa <tcp_pcb_remove+0x16>
 800a7ec:	4b25      	ldr	r3, [pc, #148]	; (800a884 <tcp_pcb_remove+0xa0>)
 800a7ee:	4926      	ldr	r1, [pc, #152]	; (800a888 <tcp_pcb_remove+0xa4>)
 800a7f0:	4826      	ldr	r0, [pc, #152]	; (800a88c <tcp_pcb_remove+0xa8>)
 800a7f2:	f640 0283 	movw	r2, #2179	; 0x883
 800a7f6:	f003 fb4d 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a7fa:	b935      	cbnz	r5, 800a80a <tcp_pcb_remove+0x26>
 800a7fc:	4b21      	ldr	r3, [pc, #132]	; (800a884 <tcp_pcb_remove+0xa0>)
 800a7fe:	4924      	ldr	r1, [pc, #144]	; (800a890 <tcp_pcb_remove+0xac>)
 800a800:	4822      	ldr	r0, [pc, #136]	; (800a88c <tcp_pcb_remove+0xa8>)
 800a802:	f640 0284 	movw	r2, #2180	; 0x884
 800a806:	f003 fb45 	bl	800de94 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a80a:	682b      	ldr	r3, [r5, #0]
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	d116      	bne.n	800a83e <tcp_pcb_remove+0x5a>
 800a810:	68e3      	ldr	r3, [r4, #12]
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800a818:	4620      	mov	r0, r4
 800a81a:	f7ff fdab 	bl	800a374 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a81e:	7d23      	ldrb	r3, [r4, #20]
 800a820:	2b0a      	cmp	r3, #10
 800a822:	d114      	bne.n	800a84e <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a824:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a826:	bb23      	cbnz	r3, 800a872 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a828:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a82a:	b1f3      	cbz	r3, 800a86a <tcp_pcb_remove+0x86>
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <tcp_pcb_remove+0xa0>)
 800a82e:	4919      	ldr	r1, [pc, #100]	; (800a894 <tcp_pcb_remove+0xb0>)
 800a830:	4816      	ldr	r0, [pc, #88]	; (800a88c <tcp_pcb_remove+0xa8>)
 800a832:	f640 0294 	movw	r2, #2196	; 0x894
 800a836:	f003 fb2d 	bl	800de94 <iprintf>
 800a83a:	e016      	b.n	800a86a <tcp_pcb_remove+0x86>
 800a83c:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0e8      	beq.n	800a814 <tcp_pcb_remove+0x30>
 800a842:	68da      	ldr	r2, [r3, #12]
 800a844:	42a2      	cmp	r2, r4
 800a846:	d1f9      	bne.n	800a83c <tcp_pcb_remove+0x58>
 800a848:	68e2      	ldr	r2, [r4, #12]
 800a84a:	60da      	str	r2, [r3, #12]
 800a84c:	e7e2      	b.n	800a814 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d00b      	beq.n	800a86a <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800a852:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800a854:	07da      	lsls	r2, r3, #31
 800a856:	d5e5      	bpl.n	800a824 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800a858:	f043 0302 	orr.w	r3, r3, #2
 800a85c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a85e:	4620      	mov	r0, r4
 800a860:	f002 faa8 	bl	800cdb4 <tcp_output>
  if (pcb->state != LISTEN) {
 800a864:	7d23      	ldrb	r3, [r4, #20]
 800a866:	2b01      	cmp	r3, #1
 800a868:	d1dc      	bne.n	800a824 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a86a:	2300      	movs	r3, #0
 800a86c:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a86e:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a870:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a872:	4b04      	ldr	r3, [pc, #16]	; (800a884 <tcp_pcb_remove+0xa0>)
 800a874:	4908      	ldr	r1, [pc, #32]	; (800a898 <tcp_pcb_remove+0xb4>)
 800a876:	4805      	ldr	r0, [pc, #20]	; (800a88c <tcp_pcb_remove+0xa8>)
 800a878:	f640 0293 	movw	r2, #2195	; 0x893
 800a87c:	f003 fb0a 	bl	800de94 <iprintf>
 800a880:	e7d2      	b.n	800a828 <tcp_pcb_remove+0x44>
 800a882:	bf00      	nop
 800a884:	0801c794 	.word	0x0801c794
 800a888:	0801cbdd 	.word	0x0801cbdd
 800a88c:	0801a4e1 	.word	0x0801a4e1
 800a890:	0801cbf9 	.word	0x0801cbf9
 800a894:	0801cc31 	.word	0x0801cc31
 800a898:	0801cc19 	.word	0x0801cc19

0800a89c <tcp_close_shutdown>:
{
 800a89c:	b530      	push	{r4, r5, lr}
 800a89e:	460d      	mov	r5, r1
 800a8a0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	b930      	cbnz	r0, 800a8b4 <tcp_close_shutdown+0x18>
 800a8a6:	4b4b      	ldr	r3, [pc, #300]	; (800a9d4 <tcp_close_shutdown+0x138>)
 800a8a8:	494b      	ldr	r1, [pc, #300]	; (800a9d8 <tcp_close_shutdown+0x13c>)
 800a8aa:	484c      	ldr	r0, [pc, #304]	; (800a9dc <tcp_close_shutdown+0x140>)
 800a8ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a8b0:	f003 faf0 	bl	800de94 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a8b4:	7d23      	ldrb	r3, [r4, #20]
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	d040      	beq.n	800a93c <tcp_close_shutdown+0xa0>
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d001      	beq.n	800a8c2 <tcp_close_shutdown+0x26>
 800a8be:	2b07      	cmp	r3, #7
 800a8c0:	d13c      	bne.n	800a93c <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a8c2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a8c4:	b922      	cbnz	r2, 800a8d0 <tcp_close_shutdown+0x34>
 800a8c6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a8c8:	f640 3268 	movw	r2, #2920	; 0xb68
 800a8cc:	4291      	cmp	r1, r2
 800a8ce:	d035      	beq.n	800a93c <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a8d0:	8b63      	ldrh	r3, [r4, #26]
 800a8d2:	06db      	lsls	r3, r3, #27
 800a8d4:	d406      	bmi.n	800a8e4 <tcp_close_shutdown+0x48>
 800a8d6:	4b3f      	ldr	r3, [pc, #252]	; (800a9d4 <tcp_close_shutdown+0x138>)
 800a8d8:	4941      	ldr	r1, [pc, #260]	; (800a9e0 <tcp_close_shutdown+0x144>)
 800a8da:	4840      	ldr	r0, [pc, #256]	; (800a9dc <tcp_close_shutdown+0x140>)
 800a8dc:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a8e0:	f003 fad8 	bl	800de94 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a8e4:	8b23      	ldrh	r3, [r4, #24]
 800a8e6:	9302      	str	r3, [sp, #8]
 800a8e8:	8ae3      	ldrh	r3, [r4, #22]
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	1d23      	adds	r3, r4, #4
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a8f2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f002 f9e4 	bl	800ccc4 <tcp_rst>
      tcp_pcb_purge(pcb);
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7ff fd39 	bl	800a374 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a902:	4a38      	ldr	r2, [pc, #224]	; (800a9e4 <tcp_close_shutdown+0x148>)
 800a904:	6813      	ldr	r3, [r2, #0]
 800a906:	42a3      	cmp	r3, r4
 800a908:	d110      	bne.n	800a92c <tcp_close_shutdown+0x90>
 800a90a:	68e3      	ldr	r3, [r4, #12]
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	2300      	movs	r3, #0
 800a910:	60e3      	str	r3, [r4, #12]
 800a912:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <tcp_close_shutdown+0x14c>)
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800a918:	4b34      	ldr	r3, [pc, #208]	; (800a9ec <tcp_close_shutdown+0x150>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d11d      	bne.n	800a95c <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 800a920:	f001 fb5c 	bl	800bfdc <tcp_trigger_input_pcb_close>
}
 800a924:	2000      	movs	r0, #0
 800a926:	b005      	add	sp, #20
 800a928:	bd30      	pop	{r4, r5, pc}
 800a92a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0ee      	beq.n	800a90e <tcp_close_shutdown+0x72>
 800a930:	68da      	ldr	r2, [r3, #12]
 800a932:	42a2      	cmp	r2, r4
 800a934:	d1f9      	bne.n	800a92a <tcp_close_shutdown+0x8e>
 800a936:	68e2      	ldr	r2, [r4, #12]
 800a938:	60da      	str	r2, [r3, #12]
 800a93a:	e7e8      	b.n	800a90e <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d01a      	beq.n	800a976 <tcp_close_shutdown+0xda>
 800a940:	2b02      	cmp	r3, #2
 800a942:	d039      	beq.n	800a9b8 <tcp_close_shutdown+0x11c>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d13f      	bne.n	800a9c8 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800a948:	8ae3      	ldrh	r3, [r4, #22]
 800a94a:	b13b      	cbz	r3, 800a95c <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a94c:	4a28      	ldr	r2, [pc, #160]	; (800a9f0 <tcp_close_shutdown+0x154>)
 800a94e:	6813      	ldr	r3, [r2, #0]
 800a950:	42a3      	cmp	r3, r4
 800a952:	d108      	bne.n	800a966 <tcp_close_shutdown+0xca>
 800a954:	68e3      	ldr	r3, [r4, #12]
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	2300      	movs	r3, #0
 800a95a:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7ff fb37 	bl	8009fd0 <tcp_free>
      break;
 800a962:	e7df      	b.n	800a924 <tcp_close_shutdown+0x88>
 800a964:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a966:	2b00      	cmp	r3, #0
 800a968:	d0f6      	beq.n	800a958 <tcp_close_shutdown+0xbc>
 800a96a:	68da      	ldr	r2, [r3, #12]
 800a96c:	42a2      	cmp	r2, r4
 800a96e:	d1f9      	bne.n	800a964 <tcp_close_shutdown+0xc8>
 800a970:	68e2      	ldr	r2, [r4, #12]
 800a972:	60da      	str	r2, [r3, #12]
 800a974:	e7f0      	b.n	800a958 <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a976:	491f      	ldr	r1, [pc, #124]	; (800a9f4 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800a978:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a97a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800a97e:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a980:	b9a2      	cbnz	r2, 800a9ac <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a982:	3301      	adds	r3, #1
 800a984:	2b04      	cmp	r3, #4
 800a986:	d1f8      	bne.n	800a97a <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a988:	481b      	ldr	r0, [pc, #108]	; (800a9f8 <tcp_close_shutdown+0x15c>)
 800a98a:	4621      	mov	r1, r4
 800a98c:	f7ff ff2a 	bl	800a7e4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a990:	7d23      	ldrb	r3, [r4, #20]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d105      	bne.n	800a9a2 <tcp_close_shutdown+0x106>
 800a996:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <tcp_close_shutdown+0x138>)
 800a998:	4918      	ldr	r1, [pc, #96]	; (800a9fc <tcp_close_shutdown+0x160>)
 800a99a:	4810      	ldr	r0, [pc, #64]	; (800a9dc <tcp_close_shutdown+0x140>)
 800a99c:	22df      	movs	r2, #223	; 0xdf
 800a99e:	f003 fa79 	bl	800de94 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	2002      	movs	r0, #2
 800a9a6:	f7fe fddf 	bl	8009568 <memp_free>
}
 800a9aa:	e7bb      	b.n	800a924 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800a9ac:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800a9ae:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800a9b0:	bf08      	it	eq
 800a9b2:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a9b4:	68d2      	ldr	r2, [r2, #12]
 800a9b6:	e7e3      	b.n	800a980 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a9b8:	480a      	ldr	r0, [pc, #40]	; (800a9e4 <tcp_close_shutdown+0x148>)
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	f7ff ff12 	bl	800a7e4 <tcp_pcb_remove>
 800a9c0:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <tcp_close_shutdown+0x14c>)
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	e7c9      	b.n	800a95c <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800a9c8:	4620      	mov	r0, r4
}
 800a9ca:	b005      	add	sp, #20
 800a9cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800a9d0:	f7ff bac2 	b.w	8009f58 <tcp_close_shutdown_fin>
 800a9d4:	0801c794 	.word	0x0801c794
 800a9d8:	0801cc4a 	.word	0x0801cc4a
 800a9dc:	0801a4e1 	.word	0x0801a4e1
 800a9e0:	0801cc6a 	.word	0x0801cc6a
 800a9e4:	20014a08 	.word	0x20014a08
 800a9e8:	20014a04 	.word	0x20014a04
 800a9ec:	20014a1c 	.word	0x20014a1c
 800a9f0:	20014a14 	.word	0x20014a14
 800a9f4:	0800fa70 	.word	0x0800fa70
 800a9f8:	20014a10 	.word	0x20014a10
 800a9fc:	0801cc83 	.word	0x0801cc83

0800aa00 <tcp_close>:
{
 800aa00:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa02:	b158      	cbz	r0, 800aa1c <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800aa04:	7d03      	ldrb	r3, [r0, #20]
 800aa06:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800aa08:	bf1e      	ittt	ne
 800aa0a:	8b43      	ldrhne	r3, [r0, #26]
 800aa0c:	f043 0310 	orrne.w	r3, r3, #16
 800aa10:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800aa12:	2101      	movs	r1, #1
}
 800aa14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800aa18:	f7ff bf40 	b.w	800a89c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <tcp_close+0x30>)
 800aa1e:	4905      	ldr	r1, [pc, #20]	; (800aa34 <tcp_close+0x34>)
 800aa20:	4805      	ldr	r0, [pc, #20]	; (800aa38 <tcp_close+0x38>)
 800aa22:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800aa26:	f003 fa35 	bl	800de94 <iprintf>
}
 800aa2a:	f06f 000f 	mvn.w	r0, #15
 800aa2e:	bd08      	pop	{r3, pc}
 800aa30:	0801c794 	.word	0x0801c794
 800aa34:	0801cc9c 	.word	0x0801cc9c
 800aa38:	0801a4e1 	.word	0x0801a4e1

0800aa3c <tcp_recv_null>:
{
 800aa3c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa3e:	4608      	mov	r0, r1
{
 800aa40:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa42:	b949      	cbnz	r1, 800aa58 <tcp_recv_null+0x1c>
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <tcp_recv_null+0x3c>)
 800aa46:	490d      	ldr	r1, [pc, #52]	; (800aa7c <tcp_recv_null+0x40>)
 800aa48:	480d      	ldr	r0, [pc, #52]	; (800aa80 <tcp_recv_null+0x44>)
 800aa4a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800aa4e:	f003 fa21 	bl	800de94 <iprintf>
 800aa52:	f06f 000f 	mvn.w	r0, #15
}
 800aa56:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800aa58:	b13a      	cbz	r2, 800aa6a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800aa5a:	8911      	ldrh	r1, [r2, #8]
 800aa5c:	f7ff fbc2 	bl	800a1e4 <tcp_recved>
    pbuf_free(p);
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7fe ffaf 	bl	80099c4 <pbuf_free>
  return ERR_OK;
 800aa66:	2000      	movs	r0, #0
 800aa68:	e7f5      	b.n	800aa56 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800aa6a:	b91b      	cbnz	r3, 800aa74 <tcp_recv_null+0x38>
}
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800aa70:	f7ff bfc6 	b.w	800aa00 <tcp_close>
  return ERR_OK;
 800aa74:	4610      	mov	r0, r2
 800aa76:	e7ee      	b.n	800aa56 <tcp_recv_null+0x1a>
 800aa78:	0801c794 	.word	0x0801c794
 800aa7c:	0801ccb3 	.word	0x0801ccb3
 800aa80:	0801a4e1 	.word	0x0801a4e1

0800aa84 <tcp_process_refused_data>:
{
 800aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800aa86:	4604      	mov	r4, r0
 800aa88:	b950      	cbnz	r0, 800aaa0 <tcp_process_refused_data+0x1c>
 800aa8a:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <tcp_process_refused_data+0x80>)
 800aa8c:	491e      	ldr	r1, [pc, #120]	; (800ab08 <tcp_process_refused_data+0x84>)
 800aa8e:	481f      	ldr	r0, [pc, #124]	; (800ab0c <tcp_process_refused_data+0x88>)
 800aa90:	f240 6209 	movw	r2, #1545	; 0x609
 800aa94:	f003 f9fe 	bl	800de94 <iprintf>
 800aa98:	f06f 050f 	mvn.w	r5, #15
}
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800aaa0:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aaa2:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800aaa6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aaac:	b1e5      	cbz	r5, 800aae8 <tcp_process_refused_data+0x64>
 800aaae:	4601      	mov	r1, r0
 800aab0:	4632      	mov	r2, r6
 800aab2:	6900      	ldr	r0, [r0, #16]
 800aab4:	47a8      	blx	r5
 800aab6:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800aab8:	b9e8      	cbnz	r0, 800aaf6 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800aaba:	06bb      	lsls	r3, r7, #26
 800aabc:	d5ee      	bpl.n	800aa9c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aabe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800aac0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aac4:	f640 3268 	movw	r2, #2920	; 0xb68
 800aac8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800aaca:	bf1c      	itt	ne
 800aacc:	3301      	addne	r3, #1
 800aace:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	d0e3      	beq.n	800aa9c <tcp_process_refused_data+0x18>
 800aad4:	2300      	movs	r3, #0
 800aad6:	6920      	ldr	r0, [r4, #16]
 800aad8:	461a      	mov	r2, r3
 800aada:	4621      	mov	r1, r4
 800aadc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800aade:	300d      	adds	r0, #13
 800aae0:	d1dc      	bne.n	800aa9c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800aae2:	f06f 050c 	mvn.w	r5, #12
 800aae6:	e7d9      	b.n	800aa9c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800aae8:	4601      	mov	r1, r0
 800aaea:	462b      	mov	r3, r5
 800aaec:	4632      	mov	r2, r6
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f7ff ffa4 	bl	800aa3c <tcp_recv_null>
 800aaf4:	e7df      	b.n	800aab6 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800aaf6:	350d      	adds	r5, #13
 800aaf8:	d0f3      	beq.n	800aae2 <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 800aafa:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800aafc:	f06f 0504 	mvn.w	r5, #4
 800ab00:	e7cc      	b.n	800aa9c <tcp_process_refused_data+0x18>
 800ab02:	bf00      	nop
 800ab04:	0801c794 	.word	0x0801c794
 800ab08:	0801ccce 	.word	0x0801ccce
 800ab0c:	0801a4e1 	.word	0x0801a4e1

0800ab10 <tcp_fasttmr>:
{
 800ab10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800ab14:	4d1b      	ldr	r5, [pc, #108]	; (800ab84 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800ab16:	4f1c      	ldr	r7, [pc, #112]	; (800ab88 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800ab18:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800ab1a:	4e1c      	ldr	r6, [pc, #112]	; (800ab8c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800ab20:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800ab22:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800ab26:	b90c      	cbnz	r4, 800ab2c <tcp_fasttmr+0x1c>
}
 800ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800ab2c:	782b      	ldrb	r3, [r5, #0]
 800ab2e:	7fa2      	ldrb	r2, [r4, #30]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d024      	beq.n	800ab7e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800ab34:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800ab36:	8b63      	ldrh	r3, [r4, #26]
 800ab38:	07d9      	lsls	r1, r3, #31
 800ab3a:	d509      	bpl.n	800ab50 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800ab3c:	f043 0302 	orr.w	r3, r3, #2
 800ab40:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800ab42:	4620      	mov	r0, r4
 800ab44:	f002 f936 	bl	800cdb4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab48:	8b63      	ldrh	r3, [r4, #26]
 800ab4a:	f023 0303 	bic.w	r3, r3, #3
 800ab4e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800ab50:	8b63      	ldrh	r3, [r4, #26]
 800ab52:	071a      	lsls	r2, r3, #28
 800ab54:	d505      	bpl.n	800ab62 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ab56:	f023 0308 	bic.w	r3, r3, #8
 800ab5a:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7ff f9fb 	bl	8009f58 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800ab62:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800ab64:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ab68:	b13b      	cbz	r3, 800ab7a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800ab6a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800ab6c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800ab70:	f7ff ff88 	bl	800aa84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ab74:	7833      	ldrb	r3, [r6, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1d2      	bne.n	800ab20 <tcp_fasttmr+0x10>
{
 800ab7a:	464c      	mov	r4, r9
 800ab7c:	e7d3      	b.n	800ab26 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800ab7e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800ab82:	e7fa      	b.n	800ab7a <tcp_fasttmr+0x6a>
 800ab84:	200067b1 	.word	0x200067b1
 800ab88:	20014a08 	.word	0x20014a08
 800ab8c:	20014a04 	.word	0x20014a04

0800ab90 <tcp_tmr>:
{
 800ab90:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ab92:	f7ff ffbd 	bl	800ab10 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ab96:	4a06      	ldr	r2, [pc, #24]	; (800abb0 <tcp_tmr+0x20>)
 800ab98:	7853      	ldrb	r3, [r2, #1]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	7053      	strb	r3, [r2, #1]
 800aba0:	07db      	lsls	r3, r3, #31
 800aba2:	d503      	bpl.n	800abac <tcp_tmr+0x1c>
}
 800aba4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800aba8:	f7ff bc10 	b.w	800a3cc <tcp_slowtmr>
}
 800abac:	bd08      	pop	{r3, pc}
 800abae:	bf00      	nop
 800abb0:	200067b1 	.word	0x200067b1

0800abb4 <tcp_shutdown>:
{
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800abb8:	4605      	mov	r5, r0
 800abba:	b948      	cbnz	r0, 800abd0 <tcp_shutdown+0x1c>
 800abbc:	4b16      	ldr	r3, [pc, #88]	; (800ac18 <tcp_shutdown+0x64>)
 800abbe:	4917      	ldr	r1, [pc, #92]	; (800ac1c <tcp_shutdown+0x68>)
 800abc0:	4817      	ldr	r0, [pc, #92]	; (800ac20 <tcp_shutdown+0x6c>)
 800abc2:	f240 2207 	movw	r2, #519	; 0x207
 800abc6:	f003 f965 	bl	800de94 <iprintf>
 800abca:	f06f 000f 	mvn.w	r0, #15
}
 800abce:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800abd0:	7d03      	ldrb	r3, [r0, #20]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d018      	beq.n	800ac08 <tcp_shutdown+0x54>
  if (shut_rx) {
 800abd6:	b189      	cbz	r1, 800abfc <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800abd8:	8b43      	ldrh	r3, [r0, #26]
 800abda:	f043 0310 	orr.w	r3, r3, #16
 800abde:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800abe0:	b122      	cbz	r2, 800abec <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800abe2:	2101      	movs	r1, #1
}
 800abe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800abe8:	f7ff be58 	b.w	800a89c <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800abec:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800abee:	b908      	cbnz	r0, 800abf4 <tcp_shutdown+0x40>
  return ERR_OK;
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7ec      	b.n	800abce <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800abf4:	f7fe fee6 	bl	80099c4 <pbuf_free>
      pcb->refused_data = NULL;
 800abf8:	676c      	str	r4, [r5, #116]	; 0x74
 800abfa:	e7f9      	b.n	800abf0 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800abfc:	2a00      	cmp	r2, #0
 800abfe:	d0f7      	beq.n	800abf0 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d804      	bhi.n	800ac0e <tcp_shutdown+0x5a>
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d804      	bhi.n	800ac12 <tcp_shutdown+0x5e>
 800ac08:	f06f 000a 	mvn.w	r0, #10
 800ac0c:	e7df      	b.n	800abce <tcp_shutdown+0x1a>
 800ac0e:	2b07      	cmp	r3, #7
 800ac10:	d1fa      	bne.n	800ac08 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ac12:	2100      	movs	r1, #0
 800ac14:	4628      	mov	r0, r5
 800ac16:	e7e5      	b.n	800abe4 <tcp_shutdown+0x30>
 800ac18:	0801c794 	.word	0x0801c794
 800ac1c:	0801ccf4 	.word	0x0801ccf4
 800ac20:	0801a4e1 	.word	0x0801a4e1

0800ac24 <tcp_abandon>:
{
 800ac24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac28:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b948      	cbnz	r0, 800ac42 <tcp_abandon+0x1e>
 800ac2e:	4b34      	ldr	r3, [pc, #208]	; (800ad00 <tcp_abandon+0xdc>)
 800ac30:	4934      	ldr	r1, [pc, #208]	; (800ad04 <tcp_abandon+0xe0>)
 800ac32:	4835      	ldr	r0, [pc, #212]	; (800ad08 <tcp_abandon+0xe4>)
 800ac34:	f240 223d 	movw	r2, #573	; 0x23d
}
 800ac38:	b004      	add	sp, #16
 800ac3a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ac3e:	f003 b929 	b.w	800de94 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ac42:	7d03      	ldrb	r3, [r0, #20]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d106      	bne.n	800ac56 <tcp_abandon+0x32>
 800ac48:	4b2d      	ldr	r3, [pc, #180]	; (800ad00 <tcp_abandon+0xdc>)
 800ac4a:	4930      	ldr	r1, [pc, #192]	; (800ad0c <tcp_abandon+0xe8>)
 800ac4c:	482e      	ldr	r0, [pc, #184]	; (800ad08 <tcp_abandon+0xe4>)
 800ac4e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ac52:	f003 f91f 	bl	800de94 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800ac56:	7d23      	ldrb	r3, [r4, #20]
 800ac58:	2b0a      	cmp	r3, #10
 800ac5a:	d109      	bne.n	800ac70 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ac5c:	482c      	ldr	r0, [pc, #176]	; (800ad10 <tcp_abandon+0xec>)
 800ac5e:	4621      	mov	r1, r4
 800ac60:	f7ff fdc0 	bl	800a7e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ac64:	4620      	mov	r0, r4
}
 800ac66:	b004      	add	sp, #16
 800ac68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800ac6c:	f7ff b9b0 	b.w	8009fd0 <tcp_free>
    seqno = pcb->snd_nxt;
 800ac70:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800ac74:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800ac78:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800ac7c:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 800ac80:	8ae5      	ldrh	r5, [r4, #22]
 800ac82:	b99b      	cbnz	r3, 800acac <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 800ac84:	b13d      	cbz	r5, 800ac96 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac86:	4a23      	ldr	r2, [pc, #140]	; (800ad14 <tcp_abandon+0xf0>)
 800ac88:	6813      	ldr	r3, [r2, #0]
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	d106      	bne.n	800ac9c <tcp_abandon+0x78>
 800ac8e:	68e3      	ldr	r3, [r4, #12]
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	2500      	movs	r5, #0
 800ac94:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800ac96:	462e      	mov	r6, r5
 800ac98:	e00f      	b.n	800acba <tcp_abandon+0x96>
 800ac9a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0f8      	beq.n	800ac92 <tcp_abandon+0x6e>
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	42a2      	cmp	r2, r4
 800aca4:	d1f9      	bne.n	800ac9a <tcp_abandon+0x76>
 800aca6:	68e2      	ldr	r2, [r4, #12]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e7f2      	b.n	800ac92 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800acac:	481a      	ldr	r0, [pc, #104]	; (800ad18 <tcp_abandon+0xf4>)
 800acae:	4621      	mov	r1, r4
 800acb0:	f7ff fd98 	bl	800a7e4 <tcp_pcb_remove>
 800acb4:	4b19      	ldr	r3, [pc, #100]	; (800ad1c <tcp_abandon+0xf8>)
 800acb6:	2201      	movs	r2, #1
 800acb8:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800acba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800acbc:	b108      	cbz	r0, 800acc2 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 800acbe:	f7ff fadd 	bl	800a27c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800acc2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800acc4:	b108      	cbz	r0, 800acca <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800acc6:	f7ff fad9 	bl	800a27c <tcp_segs_free>
    if (send_rst) {
 800acca:	b156      	cbz	r6, 800ace2 <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800accc:	8b23      	ldrh	r3, [r4, #24]
 800acce:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800acd2:	1d23      	adds	r3, r4, #4
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4652      	mov	r2, sl
 800acd8:	4623      	mov	r3, r4
 800acda:	4649      	mov	r1, r9
 800acdc:	4620      	mov	r0, r4
 800acde:	f001 fff1 	bl	800ccc4 <tcp_rst>
    tcp_free(pcb);
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7ff f974 	bl	8009fd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ace8:	b13f      	cbz	r7, 800acfa <tcp_abandon+0xd6>
 800acea:	f06f 010c 	mvn.w	r1, #12
 800acee:	4640      	mov	r0, r8
 800acf0:	463b      	mov	r3, r7
}
 800acf2:	b004      	add	sp, #16
 800acf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800acf8:	4718      	bx	r3
}
 800acfa:	b004      	add	sp, #16
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad00:	0801c794 	.word	0x0801c794
 800ad04:	0801cd0e 	.word	0x0801cd0e
 800ad08:	0801a4e1 	.word	0x0801a4e1
 800ad0c:	0801cd27 	.word	0x0801cd27
 800ad10:	20014a18 	.word	0x20014a18
 800ad14:	20014a14 	.word	0x20014a14
 800ad18:	20014a08 	.word	0x20014a08
 800ad1c:	20014a04 	.word	0x20014a04

0800ad20 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800ad20:	2101      	movs	r1, #1
 800ad22:	f7ff bf7f 	b.w	800ac24 <tcp_abandon>
	...

0800ad28 <tcp_accept_null>:
{
 800ad28:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	b931      	cbnz	r1, 800ad3c <tcp_accept_null+0x14>
 800ad2e:	4b06      	ldr	r3, [pc, #24]	; (800ad48 <tcp_accept_null+0x20>)
 800ad30:	4906      	ldr	r1, [pc, #24]	; (800ad4c <tcp_accept_null+0x24>)
 800ad32:	4807      	ldr	r0, [pc, #28]	; (800ad50 <tcp_accept_null+0x28>)
 800ad34:	f240 320f 	movw	r2, #783	; 0x30f
 800ad38:	f003 f8ac 	bl	800de94 <iprintf>
  tcp_abort(pcb);
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7ff ffef 	bl	800ad20 <tcp_abort>
}
 800ad42:	f06f 000c 	mvn.w	r0, #12
 800ad46:	bd10      	pop	{r4, pc}
 800ad48:	0801c794 	.word	0x0801c794
 800ad4c:	0801cd58 	.word	0x0801cd58
 800ad50:	0801a4e1 	.word	0x0801a4e1

0800ad54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ad58:	4605      	mov	r5, r0
 800ad5a:	b930      	cbnz	r0, 800ad6a <tcp_netif_ip_addr_changed_pcblist+0x16>
 800ad5c:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800ad5e:	490a      	ldr	r1, [pc, #40]	; (800ad88 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800ad60:	480a      	ldr	r0, [pc, #40]	; (800ad8c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800ad62:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ad66:	f003 f895 	bl	800de94 <iprintf>

  while (pcb != NULL) {
 800ad6a:	b904      	cbnz	r4, 800ad6e <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	68e6      	ldr	r6, [r4, #12]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d102      	bne.n	800ad7e <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f7ff ffd1 	bl	800ad20 <tcp_abort>
{
 800ad7e:	4634      	mov	r4, r6
 800ad80:	e7f3      	b.n	800ad6a <tcp_netif_ip_addr_changed_pcblist+0x16>
 800ad82:	bf00      	nop
 800ad84:	0801c794 	.word	0x0801c794
 800ad88:	0801cd75 	.word	0x0801cd75
 800ad8c:	0801a4e1 	.word	0x0801a4e1

0800ad90 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad90:	4b0c      	ldr	r3, [pc, #48]	; (800adc4 <tcp_kill_state+0x34>)
 800ad92:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad94:	4b0c      	ldr	r3, [pc, #48]	; (800adc8 <tcp_kill_state+0x38>)
{
 800ad96:	b430      	push	{r4, r5}
  inactivity = 0;
 800ad98:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ad9a:	681d      	ldr	r5, [r3, #0]
{
 800ad9c:	4604      	mov	r4, r0
  inactive = NULL;
 800ad9e:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ada0:	b919      	cbnz	r1, 800adaa <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800ada2:	b168      	cbz	r0, 800adc0 <tcp_kill_state+0x30>
}
 800ada4:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800ada6:	f7ff bf3d 	b.w	800ac24 <tcp_abandon>
    if (pcb->state == state) {
 800adaa:	7d0b      	ldrb	r3, [r1, #20]
 800adac:	42a3      	cmp	r3, r4
 800adae:	d105      	bne.n	800adbc <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adb0:	6a0b      	ldr	r3, [r1, #32]
 800adb2:	1aeb      	subs	r3, r5, r3
 800adb4:	4293      	cmp	r3, r2
 800adb6:	bf24      	itt	cs
 800adb8:	461a      	movcs	r2, r3
 800adba:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adbc:	68c9      	ldr	r1, [r1, #12]
 800adbe:	e7ef      	b.n	800ada0 <tcp_kill_state+0x10>
}
 800adc0:	bc30      	pop	{r4, r5}
 800adc2:	4770      	bx	lr
 800adc4:	20014a08 	.word	0x20014a08
 800adc8:	20014a0c 	.word	0x20014a0c

0800adcc <tcp_alloc>:
{
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800add0:	2001      	movs	r0, #1
 800add2:	f7fe fbad 	bl	8009530 <memp_malloc>
  if (pcb == NULL) {
 800add6:	4603      	mov	r3, r0
 800add8:	2800      	cmp	r0, #0
 800adda:	d136      	bne.n	800ae4a <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800addc:	4e3f      	ldr	r6, [pc, #252]	; (800aedc <tcp_alloc+0x110>)
 800adde:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d157      	bne.n	800ae94 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ade4:	4b3e      	ldr	r3, [pc, #248]	; (800aee0 <tcp_alloc+0x114>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ade6:	4d3f      	ldr	r5, [pc, #252]	; (800aee4 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ade8:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adea:	682f      	ldr	r7, [r5, #0]
  inactivity = 0;
 800adec:	4601      	mov	r1, r0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d15b      	bne.n	800aeaa <tcp_alloc+0xde>
  if (inactive != NULL) {
 800adf2:	b108      	cbz	r0, 800adf8 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800adf4:	f7ff ff94 	bl	800ad20 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800adf8:	2001      	movs	r0, #1
 800adfa:	f7fe fb99 	bl	8009530 <memp_malloc>
    if (pcb == NULL) {
 800adfe:	4603      	mov	r3, r0
 800ae00:	bb18      	cbnz	r0, 800ae4a <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800ae02:	2009      	movs	r0, #9
 800ae04:	f7ff ffc4 	bl	800ad90 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae08:	2001      	movs	r0, #1
 800ae0a:	f7fe fb91 	bl	8009530 <memp_malloc>
      if (pcb == NULL) {
 800ae0e:	4603      	mov	r3, r0
 800ae10:	b9d8      	cbnz	r0, 800ae4a <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800ae12:	2008      	movs	r0, #8
 800ae14:	f7ff ffbc 	bl	800ad90 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae18:	2001      	movs	r0, #1
 800ae1a:	f7fe fb89 	bl	8009530 <memp_malloc>
        if (pcb == NULL) {
 800ae1e:	4603      	mov	r3, r0
 800ae20:	b998      	cbnz	r0, 800ae4a <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ae22:	0622      	lsls	r2, r4, #24
 800ae24:	d449      	bmi.n	800aeba <tcp_alloc+0xee>
  if (mprio == 0) {
 800ae26:	b15c      	cbz	r4, 800ae40 <tcp_alloc+0x74>
 800ae28:	4621      	mov	r1, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae2a:	6832      	ldr	r2, [r6, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ae2c:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800ae2e:	3901      	subs	r1, #1
 800ae30:	b2c9      	uxtb	r1, r1
  inactivity = 0;
 800ae32:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d142      	bne.n	800aebe <tcp_alloc+0xf2>
  if (inactive != NULL) {
 800ae38:	b113      	cbz	r3, 800ae40 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff ff70 	bl	800ad20 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae40:	2001      	movs	r0, #1
 800ae42:	f7fe fb75 	bl	8009530 <memp_malloc>
  if (pcb != NULL) {
 800ae46:	4603      	mov	r3, r0
 800ae48:	b310      	cbz	r0, 800ae90 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ae4a:	2298      	movs	r2, #152	; 0x98
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f003 f818 	bl	800de84 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800ae54:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800ae58:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ae5c:	4a22      	ldr	r2, [pc, #136]	; (800aee8 <tcp_alloc+0x11c>)
 800ae5e:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ae60:	22ff      	movs	r2, #255	; 0xff
 800ae62:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ae64:	2206      	movs	r2, #6
 800ae66:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ae6a:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800ae6c:	4a1f      	ldr	r2, [pc, #124]	; (800aeec <tcp_alloc+0x120>)
 800ae6e:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800ae70:	4a1c      	ldr	r2, [pc, #112]	; (800aee4 <tcp_alloc+0x118>)
    pcb->prio = prio;
 800ae72:	7544      	strb	r4, [r0, #21]
    pcb->tmr = tcp_ticks;
 800ae74:	6812      	ldr	r2, [r2, #0]
 800ae76:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ae78:	4a1d      	ldr	r2, [pc, #116]	; (800aef0 <tcp_alloc+0x124>)
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800ae7e:	4a1d      	ldr	r2, [pc, #116]	; (800aef4 <tcp_alloc+0x128>)
 800ae80:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800ae82:	4a1d      	ldr	r2, [pc, #116]	; (800aef8 <tcp_alloc+0x12c>)
 800ae84:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ae88:	4a1c      	ldr	r2, [pc, #112]	; (800aefc <tcp_alloc+0x130>)
 800ae8a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ae8e:	4603      	mov	r3, r0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800ae94:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800ae96:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800ae98:	0719      	lsls	r1, r3, #28
 800ae9a:	d504      	bpl.n	800aea6 <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ae9c:	f023 0308 	bic.w	r3, r3, #8
 800aea0:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800aea2:	f7ff f859 	bl	8009f58 <tcp_close_shutdown_fin>
{
 800aea6:	4628      	mov	r0, r5
 800aea8:	e79a      	b.n	800ade0 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aeaa:	6a1a      	ldr	r2, [r3, #32]
 800aeac:	1aba      	subs	r2, r7, r2
 800aeae:	428a      	cmp	r2, r1
 800aeb0:	bf24      	itt	cs
 800aeb2:	4618      	movcs	r0, r3
 800aeb4:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	e799      	b.n	800adee <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800aeba:	217f      	movs	r1, #127	; 0x7f
 800aebc:	e7b5      	b.n	800ae2a <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800aebe:	7d57      	ldrb	r7, [r2, #21]
 800aec0:	428f      	cmp	r7, r1
 800aec2:	d304      	bcc.n	800aece <tcp_alloc+0x102>
 800aec4:	d107      	bne.n	800aed6 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800aec6:	6a15      	ldr	r5, [r2, #32]
 800aec8:	1b75      	subs	r5, r6, r5
 800aeca:	4285      	cmp	r5, r0
 800aecc:	d303      	bcc.n	800aed6 <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 800aece:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800aed0:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 800aed2:	1a30      	subs	r0, r6, r0
 800aed4:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aed6:	68d2      	ldr	r2, [r2, #12]
 800aed8:	e7ac      	b.n	800ae34 <tcp_alloc+0x68>
 800aeda:	bf00      	nop
 800aedc:	20014a08 	.word	0x20014a08
 800aee0:	20014a18 	.word	0x20014a18
 800aee4:	20014a0c 	.word	0x20014a0c
 800aee8:	0b680b68 	.word	0x0b680b68
 800aeec:	0218ffff 	.word	0x0218ffff
 800aef0:	200067b1 	.word	0x200067b1
 800aef4:	16d00001 	.word	0x16d00001
 800aef8:	0800aa3d 	.word	0x0800aa3d
 800aefc:	006ddd00 	.word	0x006ddd00

0800af00 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800af00:	2040      	movs	r0, #64	; 0x40
 800af02:	f7ff bf63 	b.w	800adcc <tcp_alloc>
	...

0800af08 <tcp_next_iss>:
{
 800af08:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800af0a:	b930      	cbnz	r0, 800af1a <tcp_next_iss+0x12>
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <tcp_next_iss+0x20>)
 800af0e:	4907      	ldr	r1, [pc, #28]	; (800af2c <tcp_next_iss+0x24>)
 800af10:	4807      	ldr	r0, [pc, #28]	; (800af30 <tcp_next_iss+0x28>)
 800af12:	f640 02af 	movw	r2, #2223	; 0x8af
 800af16:	f002 ffbd 	bl	800de94 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800af1a:	4b06      	ldr	r3, [pc, #24]	; (800af34 <tcp_next_iss+0x2c>)
 800af1c:	4a06      	ldr	r2, [pc, #24]	; (800af38 <tcp_next_iss+0x30>)
 800af1e:	6858      	ldr	r0, [r3, #4]
 800af20:	6812      	ldr	r2, [r2, #0]
 800af22:	4410      	add	r0, r2
 800af24:	6058      	str	r0, [r3, #4]
}
 800af26:	bd08      	pop	{r3, pc}
 800af28:	0801c794 	.word	0x0801c794
 800af2c:	0801cda9 	.word	0x0801cda9
 800af30:	0801a4e1 	.word	0x0801a4e1
 800af34:	20000038 	.word	0x20000038
 800af38:	20014a0c 	.word	0x20014a0c

0800af3c <tcp_eff_send_mss_netif>:
{
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4604      	mov	r4, r0
 800af40:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800af42:	b932      	cbnz	r2, 800af52 <tcp_eff_send_mss_netif+0x16>
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <tcp_eff_send_mss_netif+0x30>)
 800af46:	490a      	ldr	r1, [pc, #40]	; (800af70 <tcp_eff_send_mss_netif+0x34>)
 800af48:	480a      	ldr	r0, [pc, #40]	; (800af74 <tcp_eff_send_mss_netif+0x38>)
 800af4a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800af4e:	f002 ffa1 	bl	800de94 <iprintf>
    if (outif == NULL) {
 800af52:	b14d      	cbz	r5, 800af68 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800af54:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800af56:	b13b      	cbz	r3, 800af68 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800af58:	2b28      	cmp	r3, #40	; 0x28
 800af5a:	bf86      	itte	hi
 800af5c:	3b28      	subhi	r3, #40	; 0x28
 800af5e:	b29b      	uxthhi	r3, r3
 800af60:	2300      	movls	r3, #0
    sendmss = LWIP_MIN(sendmss, mss_s);
 800af62:	429c      	cmp	r4, r3
 800af64:	bf28      	it	cs
 800af66:	461c      	movcs	r4, r3
}
 800af68:	4620      	mov	r0, r4
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	0801c794 	.word	0x0801c794
 800af70:	0801cdc3 	.word	0x0801cdc3
 800af74:	0801a4e1 	.word	0x0801a4e1

0800af78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af7c:	4604      	mov	r4, r0
 800af7e:	b180      	cbz	r0, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
 800af80:	6803      	ldr	r3, [r0, #0]
 800af82:	b173      	cbz	r3, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af84:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <tcp_netif_ip_addr_changed+0x3c>)
 800af86:	6819      	ldr	r1, [r3, #0]
 800af88:	f7ff fee4 	bl	800ad54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <tcp_netif_ip_addr_changed+0x40>)
 800af8e:	4620      	mov	r0, r4
 800af90:	6819      	ldr	r1, [r3, #0]
 800af92:	f7ff fedf 	bl	800ad54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800af96:	b125      	cbz	r5, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b113      	cbz	r3, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800af9c:	4b07      	ldr	r3, [pc, #28]	; (800afbc <tcp_netif_ip_addr_changed+0x44>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	b903      	cbnz	r3, 800afa4 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afa4:	6819      	ldr	r1, [r3, #0]
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afaa:	bf04      	itt	eq
 800afac:	682a      	ldreq	r2, [r5, #0]
 800afae:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	e7f5      	b.n	800afa0 <tcp_netif_ip_addr_changed+0x28>
 800afb4:	20014a08 	.word	0x20014a08
 800afb8:	20014a14 	.word	0x20014a14
 800afbc:	20014a10 	.word	0x20014a10

0800afc0 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800afc0:	4a08      	ldr	r2, [pc, #32]	; (800afe4 <tcp_get_next_optbyte+0x24>)
 800afc2:	8813      	ldrh	r3, [r2, #0]
 800afc4:	1c59      	adds	r1, r3, #1
 800afc6:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800afc8:	6851      	ldr	r1, [r2, #4]
 800afca:	4610      	mov	r0, r2
 800afcc:	b111      	cbz	r1, 800afd4 <tcp_get_next_optbyte+0x14>
 800afce:	8912      	ldrh	r2, [r2, #8]
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d203      	bcs.n	800afdc <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800afd4:	68c2      	ldr	r2, [r0, #12]
 800afd6:	4413      	add	r3, r2
 800afd8:	7d18      	ldrb	r0, [r3, #20]
 800afda:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800afdc:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800afe2:	4770      	bx	lr
 800afe4:	200067b4 	.word	0x200067b4

0800afe8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800afe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800afec:	4606      	mov	r6, r0
 800afee:	b930      	cbnz	r0, 800affe <tcp_parseopt+0x16>
 800aff0:	4b1e      	ldr	r3, [pc, #120]	; (800b06c <tcp_parseopt+0x84>)
 800aff2:	491f      	ldr	r1, [pc, #124]	; (800b070 <tcp_parseopt+0x88>)
 800aff4:	481f      	ldr	r0, [pc, #124]	; (800b074 <tcp_parseopt+0x8c>)
 800aff6:	f240 727d 	movw	r2, #1917	; 0x77d
 800affa:	f002 ff4b 	bl	800de94 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800affe:	4d1e      	ldr	r5, [pc, #120]	; (800b078 <tcp_parseopt+0x90>)
 800b000:	8a2f      	ldrh	r7, [r5, #16]
 800b002:	b17f      	cbz	r7, 800b024 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b004:	2300      	movs	r3, #0
 800b006:	802b      	strh	r3, [r5, #0]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b008:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800b00c:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b010:	882b      	ldrh	r3, [r5, #0]
 800b012:	42bb      	cmp	r3, r7
 800b014:	d206      	bcs.n	800b024 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800b016:	f7ff ffd3 	bl	800afc0 <tcp_get_next_optbyte>
      switch (opt) {
 800b01a:	2801      	cmp	r0, #1
 800b01c:	d0f8      	beq.n	800b010 <tcp_parseopt+0x28>
 800b01e:	2802      	cmp	r0, #2
 800b020:	d002      	beq.n	800b028 <tcp_parseopt+0x40>
 800b022:	b9c8      	cbnz	r0, 800b058 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800b024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b028:	f7ff ffca 	bl	800afc0 <tcp_get_next_optbyte>
 800b02c:	2804      	cmp	r0, #4
 800b02e:	d1f9      	bne.n	800b024 <tcp_parseopt+0x3c>
 800b030:	882b      	ldrh	r3, [r5, #0]
 800b032:	3301      	adds	r3, #1
 800b034:	42bb      	cmp	r3, r7
 800b036:	daf5      	bge.n	800b024 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b038:	f7ff ffc2 	bl	800afc0 <tcp_get_next_optbyte>
 800b03c:	0200      	lsls	r0, r0, #8
 800b03e:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800b040:	f7ff ffbe 	bl	800afc0 <tcp_get_next_optbyte>
 800b044:	ea44 0300 	orr.w	r3, r4, r0
 800b048:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b04a:	1e5a      	subs	r2, r3, #1
 800b04c:	b292      	uxth	r2, r2
 800b04e:	4542      	cmp	r2, r8
 800b050:	bf88      	it	hi
 800b052:	464b      	movhi	r3, r9
 800b054:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800b056:	e7db      	b.n	800b010 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800b058:	f7ff ffb2 	bl	800afc0 <tcp_get_next_optbyte>
          if (data < 2) {
 800b05c:	2801      	cmp	r0, #1
 800b05e:	d9e1      	bls.n	800b024 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800b060:	882b      	ldrh	r3, [r5, #0]
 800b062:	3b02      	subs	r3, #2
 800b064:	4418      	add	r0, r3
 800b066:	8028      	strh	r0, [r5, #0]
 800b068:	e7d2      	b.n	800b010 <tcp_parseopt+0x28>
 800b06a:	bf00      	nop
 800b06c:	0801cea9 	.word	0x0801cea9
 800b070:	0801cf25 	.word	0x0801cf25
 800b074:	0801a4e1 	.word	0x0801a4e1
 800b078:	200067b4 	.word	0x200067b4

0800b07c <tcp_input_delayed_close>:
{
 800b07c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b07e:	4604      	mov	r4, r0
 800b080:	b930      	cbnz	r0, 800b090 <tcp_input_delayed_close+0x14>
 800b082:	4b0f      	ldr	r3, [pc, #60]	; (800b0c0 <tcp_input_delayed_close+0x44>)
 800b084:	490f      	ldr	r1, [pc, #60]	; (800b0c4 <tcp_input_delayed_close+0x48>)
 800b086:	4810      	ldr	r0, [pc, #64]	; (800b0c8 <tcp_input_delayed_close+0x4c>)
 800b088:	f240 225a 	movw	r2, #602	; 0x25a
 800b08c:	f002 ff02 	bl	800de94 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800b090:	4b0e      	ldr	r3, [pc, #56]	; (800b0cc <tcp_input_delayed_close+0x50>)
 800b092:	7c98      	ldrb	r0, [r3, #18]
 800b094:	f010 0010 	ands.w	r0, r0, #16
 800b098:	d011      	beq.n	800b0be <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b09a:	8b63      	ldrh	r3, [r4, #26]
 800b09c:	06db      	lsls	r3, r3, #27
 800b09e:	d406      	bmi.n	800b0ae <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b0a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b0a4:	b11b      	cbz	r3, 800b0ae <tcp_input_delayed_close+0x32>
 800b0a6:	6920      	ldr	r0, [r4, #16]
 800b0a8:	f06f 010e 	mvn.w	r1, #14
 800b0ac:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b0ae:	4808      	ldr	r0, [pc, #32]	; (800b0d0 <tcp_input_delayed_close+0x54>)
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	f7ff fb97 	bl	800a7e4 <tcp_pcb_remove>
    tcp_free(pcb);
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7fe ff8a 	bl	8009fd0 <tcp_free>
 800b0bc:	2001      	movs	r0, #1
}
 800b0be:	bd10      	pop	{r4, pc}
 800b0c0:	0801cea9 	.word	0x0801cea9
 800b0c4:	0801cf3f 	.word	0x0801cf3f
 800b0c8:	0801a4e1 	.word	0x0801a4e1
 800b0cc:	200067b4 	.word	0x200067b4
 800b0d0:	20014a08 	.word	0x20014a08

0800b0d4 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800b0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b0d8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b188 <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b0dc:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800b180 <tcp_free_acked_segments.isra.0+0xac>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800b0e4:	460c      	mov	r4, r1
  while (seg_list != NULL &&
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d037      	beq.n	800b15a <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b0ea:	68e3      	ldr	r3, [r4, #12]
 800b0ec:	6858      	ldr	r0, [r3, #4]
 800b0ee:	f7fd ff06 	bl	8008efe <lwip_htonl>
 800b0f2:	68e3      	ldr	r3, [r4, #12]
 800b0f4:	8925      	ldrh	r5, [r4, #8]
 800b0f6:	4682      	mov	sl, r0
 800b0f8:	8998      	ldrh	r0, [r3, #12]
 800b0fa:	f7fd fefd 	bl	8008ef8 <lwip_htons>
 800b0fe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b102:	f010 0003 	ands.w	r0, r0, #3
 800b106:	eba5 0303 	sub.w	r3, r5, r3
 800b10a:	bf18      	it	ne
 800b10c:	2001      	movne	r0, #1
 800b10e:	eb03 050a 	add.w	r5, r3, sl
 800b112:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800b114:	2d00      	cmp	r5, #0
 800b116:	dc21      	bgt.n	800b15c <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 800b118:	e9d4 a000 	ldrd	sl, r0, [r4]
 800b11c:	f7fe fda6 	bl	8009c6c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b120:	8833      	ldrh	r3, [r6, #0]
 800b122:	4283      	cmp	r3, r0
    clen = pbuf_clen(next->p);
 800b124:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b126:	d206      	bcs.n	800b136 <tcp_free_acked_segments.isra.0+0x62>
 800b128:	4913      	ldr	r1, [pc, #76]	; (800b178 <tcp_free_acked_segments.isra.0+0xa4>)
 800b12a:	4814      	ldr	r0, [pc, #80]	; (800b17c <tcp_free_acked_segments.isra.0+0xa8>)
 800b12c:	464b      	mov	r3, r9
 800b12e:	f240 4257 	movw	r2, #1111	; 0x457
 800b132:	f002 feaf 	bl	800de94 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b136:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b138:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b13c:	1b45      	subs	r5, r0, r5
 800b13e:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b140:	8923      	ldrh	r3, [r4, #8]
    tcp_seg_free(next);
 800b142:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b144:	4413      	add	r3, r2
 800b146:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800b14a:	f7ff f889 	bl	800a260 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800b14e:	8833      	ldrh	r3, [r6, #0]
 800b150:	b17b      	cbz	r3, 800b172 <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b152:	f1ba 0f00 	cmp.w	sl, #0
 800b156:	d10c      	bne.n	800b172 <tcp_free_acked_segments.isra.0+0x9e>
 800b158:	b11f      	cbz	r7, 800b162 <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 800b15a:	2400      	movs	r4, #0
}
 800b15c:	4620      	mov	r0, r4
 800b15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <tcp_free_acked_segments.isra.0+0xac>)
 800b164:	4907      	ldr	r1, [pc, #28]	; (800b184 <tcp_free_acked_segments.isra.0+0xb0>)
 800b166:	4805      	ldr	r0, [pc, #20]	; (800b17c <tcp_free_acked_segments.isra.0+0xa8>)
 800b168:	f240 4261 	movw	r2, #1121	; 0x461
 800b16c:	f002 fe92 	bl	800de94 <iprintf>
  while (seg_list != NULL &&
 800b170:	e7f3      	b.n	800b15a <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 800b172:	4654      	mov	r4, sl
 800b174:	e7b7      	b.n	800b0e6 <tcp_free_acked_segments.isra.0+0x12>
 800b176:	bf00      	nop
 800b178:	0801cf64 	.word	0x0801cf64
 800b17c:	0801a4e1 	.word	0x0801a4e1
 800b180:	0801cea9 	.word	0x0801cea9
 800b184:	0801cf8c 	.word	0x0801cf8c
 800b188:	200067b4 	.word	0x200067b4

0800b18c <tcp_receive>:
{
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b18e:	4604      	mov	r4, r0
 800b190:	b930      	cbnz	r0, 800b1a0 <tcp_receive+0x14>
 800b192:	4bb4      	ldr	r3, [pc, #720]	; (800b464 <tcp_receive+0x2d8>)
 800b194:	49b4      	ldr	r1, [pc, #720]	; (800b468 <tcp_receive+0x2dc>)
 800b196:	48b5      	ldr	r0, [pc, #724]	; (800b46c <tcp_receive+0x2e0>)
 800b198:	f240 427b 	movw	r2, #1147	; 0x47b
 800b19c:	f002 fe7a 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b1a0:	7d23      	ldrb	r3, [r4, #20]
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d806      	bhi.n	800b1b4 <tcp_receive+0x28>
 800b1a6:	4baf      	ldr	r3, [pc, #700]	; (800b464 <tcp_receive+0x2d8>)
 800b1a8:	49b1      	ldr	r1, [pc, #708]	; (800b470 <tcp_receive+0x2e4>)
 800b1aa:	48b0      	ldr	r0, [pc, #704]	; (800b46c <tcp_receive+0x2e0>)
 800b1ac:	f240 427c 	movw	r2, #1148	; 0x47c
 800b1b0:	f002 fe70 	bl	800de94 <iprintf>
  if (flags & TCP_ACK) {
 800b1b4:	4daf      	ldr	r5, [pc, #700]	; (800b474 <tcp_receive+0x2e8>)
 800b1b6:	7f2b      	ldrb	r3, [r5, #28]
 800b1b8:	06de      	lsls	r6, r3, #27
 800b1ba:	d57d      	bpl.n	800b2b8 <tcp_receive+0x12c>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1bc:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800b1c0:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b1c2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800b1c6:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b1c8:	1af7      	subs	r7, r6, r3
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	db0a      	blt.n	800b1e4 <tcp_receive+0x58>
 800b1ce:	429e      	cmp	r6, r3
 800b1d0:	d102      	bne.n	800b1d8 <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1d2:	1a86      	subs	r6, r0, r2
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	db05      	blt.n	800b1e4 <tcp_receive+0x58>
 800b1d8:	4290      	cmp	r0, r2
 800b1da:	d110      	bne.n	800b1fe <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b1dc:	68ee      	ldr	r6, [r5, #12]
 800b1de:	89f6      	ldrh	r6, [r6, #14]
 800b1e0:	428e      	cmp	r6, r1
 800b1e2:	d90c      	bls.n	800b1fe <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b1e4:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b1e6:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b1ea:	89f6      	ldrh	r6, [r6, #14]
 800b1ec:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 800b1f0:	b2b7      	uxth	r7, r6
      pcb->snd_wl2 = ackno;
 800b1f2:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b1f6:	45bc      	cmp	ip, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b1f8:	bf38      	it	cc
 800b1fa:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b1fe:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800b200:	1b93      	subs	r3, r2, r6
 800b202:	2b00      	cmp	r3, #0
 800b204:	f300 8148 	bgt.w	800b498 <tcp_receive+0x30c>
      if (tcplen == 0) {
 800b208:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f040 8140 	bne.w	800b490 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b210:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b214:	6da7      	ldr	r7, [r4, #88]	; 0x58
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b216:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b218:	443b      	add	r3, r7
 800b21a:	428b      	cmp	r3, r1
 800b21c:	f040 8138 	bne.w	800b490 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 800b220:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800b224:	2b00      	cmp	r3, #0
 800b226:	f2c0 8133 	blt.w	800b490 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 800b22a:	4296      	cmp	r6, r2
 800b22c:	f040 8130 	bne.w	800b490 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b230:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b234:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800b236:	bf1c      	itt	ne
 800b238:	3301      	addne	r3, #1
 800b23a:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800b23e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b242:	2b03      	cmp	r3, #3
 800b244:	d90f      	bls.n	800b266 <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b246:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b24a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b24c:	4413      	add	r3, r2
 800b24e:	b29b      	uxth	r3, r3
 800b250:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b254:	429a      	cmp	r2, r3
 800b256:	bf88      	it	hi
 800b258:	460b      	movhi	r3, r1
 800b25a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800b25e:	4620      	mov	r0, r4
 800b260:	f001 fcfc 	bl	800cc5c <tcp_rexmit_fast>
      if (!found_dupack) {
 800b264:	e000      	b.n	800b268 <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 800b266:	d0fa      	beq.n	800b25e <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b268:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b26a:	b328      	cbz	r0, 800b2b8 <tcp_receive+0x12c>
 800b26c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b26e:	69aa      	ldr	r2, [r5, #24]
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	2b00      	cmp	r3, #0
 800b274:	da20      	bge.n	800b2b8 <tcp_receive+0x12c>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b276:	4b80      	ldr	r3, [pc, #512]	; (800b478 <tcp_receive+0x2ec>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800b278:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b27c:	881a      	ldrh	r2, [r3, #0]
 800b27e:	b280      	uxth	r0, r0
 800b280:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 800b282:	f3c7 06cf 	ubfx	r6, r7, #3, #16
 800b286:	1b89      	subs	r1, r1, r6
 800b288:	b20b      	sxth	r3, r1
      if (m < 0) {
 800b28a:	2b00      	cmp	r3, #0
        m = (s16_t) - m;
 800b28c:	bfb8      	it	lt
 800b28e:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800b290:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
        m = (s16_t) - m;
 800b294:	bfbc      	itt	lt
 800b296:	1980      	addlt	r0, r0, r6
 800b298:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 800b29a:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      pcb->sa = (s16_t)(pcb->sa + m);
 800b29e:	fa17 f181 	uxtah	r1, r7, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2a2:	4413      	add	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2a4:	b209      	sxth	r1, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b2aa:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b2ae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800b2b2:	2300      	movs	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800b2b4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 800b2b6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b2b8:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800b2ba:	6a2b      	ldr	r3, [r5, #32]
 800b2bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f000 818c 	beq.w	800b5dc <tcp_receive+0x450>
 800b2c4:	7d21      	ldrb	r1, [r4, #20]
 800b2c6:	2906      	cmp	r1, #6
 800b2c8:	f200 8188 	bhi.w	800b5dc <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b2cc:	1ad7      	subs	r7, r2, r3
 800b2ce:	2f01      	cmp	r7, #1
 800b2d0:	f100 8173 	bmi.w	800b5ba <tcp_receive+0x42e>
 800b2d4:	f1c3 0101 	rsb	r1, r3, #1
 800b2d8:	1a09      	subs	r1, r1, r0
 800b2da:	4411      	add	r1, r2
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	f300 816c 	bgt.w	800b5ba <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 800b2e2:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2e4:	b936      	cbnz	r6, 800b2f4 <tcp_receive+0x168>
 800b2e6:	4b5f      	ldr	r3, [pc, #380]	; (800b464 <tcp_receive+0x2d8>)
 800b2e8:	4964      	ldr	r1, [pc, #400]	; (800b47c <tcp_receive+0x2f0>)
 800b2ea:	4860      	ldr	r0, [pc, #384]	; (800b46c <tcp_receive+0x2e0>)
 800b2ec:	f240 5294 	movw	r2, #1428	; 0x594
 800b2f0:	f002 fdd0 	bl	800de94 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2f4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800b2f8:	429f      	cmp	r7, r3
 800b2fa:	d906      	bls.n	800b30a <tcp_receive+0x17e>
 800b2fc:	4b59      	ldr	r3, [pc, #356]	; (800b464 <tcp_receive+0x2d8>)
 800b2fe:	4960      	ldr	r1, [pc, #384]	; (800b480 <tcp_receive+0x2f4>)
 800b300:	485a      	ldr	r0, [pc, #360]	; (800b46c <tcp_receive+0x2e0>)
 800b302:	f240 5295 	movw	r2, #1429	; 0x595
 800b306:	f002 fdc5 	bl	800de94 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b30a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b30c:	891b      	ldrh	r3, [r3, #8]
      off = (u16_t)off32;
 800b30e:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b310:	42bb      	cmp	r3, r7
 800b312:	d206      	bcs.n	800b322 <tcp_receive+0x196>
 800b314:	4b53      	ldr	r3, [pc, #332]	; (800b464 <tcp_receive+0x2d8>)
 800b316:	495b      	ldr	r1, [pc, #364]	; (800b484 <tcp_receive+0x2f8>)
 800b318:	4854      	ldr	r0, [pc, #336]	; (800b46c <tcp_receive+0x2e0>)
 800b31a:	f240 5297 	movw	r2, #1431	; 0x597
 800b31e:	f002 fdb9 	bl	800de94 <iprintf>
      inseg.len -= off;
 800b322:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800b324:	1bdb      	subs	r3, r3, r7
 800b326:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b328:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b32a:	891b      	ldrh	r3, [r3, #8]
 800b32c:	1bdb      	subs	r3, r3, r7
 800b32e:	b29b      	uxth	r3, r3
        p->len = 0;
 800b330:	2100      	movs	r1, #0
      while (p->len < off) {
 800b332:	8972      	ldrh	r2, [r6, #10]
 800b334:	42ba      	cmp	r2, r7
 800b336:	f0c0 813a 	bcc.w	800b5ae <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 800b33a:	4639      	mov	r1, r7
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7fe fb0d 	bl	800995c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b342:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b346:	622b      	str	r3, [r5, #32]
 800b348:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b34a:	6a29      	ldr	r1, [r5, #32]
 800b34c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b34e:	1a8b      	subs	r3, r1, r2
 800b350:	2b00      	cmp	r3, #0
 800b352:	f2c0 813e 	blt.w	800b5d2 <tcp_receive+0x446>
 800b356:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b358:	1c4b      	adds	r3, r1, #1
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	1a1b      	subs	r3, r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f300 8137 	bgt.w	800b5d2 <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 800b364:	4291      	cmp	r1, r2
 800b366:	f040 8134 	bne.w	800b5d2 <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 800b36a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b36c:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800b36e:	8998      	ldrh	r0, [r3, #12]
 800b370:	f7fd fdc2 	bl	8008ef8 <lwip_htons>
 800b374:	f010 0003 	ands.w	r0, r0, #3
 800b378:	bf18      	it	ne
 800b37a:	2001      	movne	r0, #1
        if (tcplen > pcb->rcv_wnd) {
 800b37c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b37e:	4430      	add	r0, r6
 800b380:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800b382:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800b384:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800b386:	d23e      	bcs.n	800b406 <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b388:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b38a:	8998      	ldrh	r0, [r3, #12]
 800b38c:	f7fd fdb4 	bl	8008ef8 <lwip_htons>
 800b390:	07c6      	lsls	r6, r0, #31
 800b392:	d50d      	bpl.n	800b3b0 <tcp_receive+0x224>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b394:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b396:	899e      	ldrh	r6, [r3, #12]
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fd fdad 	bl	8008ef8 <lwip_htons>
 800b39e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b3a2:	f7fd fda9 	bl	8008ef8 <lwip_htons>
 800b3a6:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b3aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b3ac:	4306      	orrs	r6, r0
 800b3ae:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b3b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b3b2:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b3b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b3b6:	8998      	ldrh	r0, [r3, #12]
 800b3b8:	f7fd fd9e 	bl	8008ef8 <lwip_htons>
 800b3bc:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800b3be:	bf48      	it	mi
 800b3c0:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800b3c2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800b3c4:	bf44      	itt	mi
 800b3c6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800b3ca:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800b3cc:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800b3ce:	f7fe fbdd 	bl	8009b8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b3d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b3d4:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800b3d6:	8998      	ldrh	r0, [r3, #12]
 800b3d8:	f7fd fd8e 	bl	8008ef8 <lwip_htons>
 800b3dc:	f010 0003 	ands.w	r0, r0, #3
 800b3e0:	bf18      	it	ne
 800b3e2:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b3e4:	6a2b      	ldr	r3, [r5, #32]
 800b3e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800b3e8:	4430      	add	r0, r6
 800b3ea:	b280      	uxth	r0, r0
 800b3ec:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b3ee:	4418      	add	r0, r3
 800b3f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b3f2:	4413      	add	r3, r2
 800b3f4:	4298      	cmp	r0, r3
 800b3f6:	d006      	beq.n	800b406 <tcp_receive+0x27a>
 800b3f8:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <tcp_receive+0x2d8>)
 800b3fa:	4923      	ldr	r1, [pc, #140]	; (800b488 <tcp_receive+0x2fc>)
 800b3fc:	481b      	ldr	r0, [pc, #108]	; (800b46c <tcp_receive+0x2e0>)
 800b3fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b402:	f002 fd47 	bl	800de94 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800b406:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800b408:	6a2b      	ldr	r3, [r5, #32]
 800b40a:	4413      	add	r3, r2
 800b40c:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b40e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b410:	4293      	cmp	r3, r2
 800b412:	d206      	bcs.n	800b422 <tcp_receive+0x296>
 800b414:	4b13      	ldr	r3, [pc, #76]	; (800b464 <tcp_receive+0x2d8>)
 800b416:	491d      	ldr	r1, [pc, #116]	; (800b48c <tcp_receive+0x300>)
 800b418:	4814      	ldr	r0, [pc, #80]	; (800b46c <tcp_receive+0x2e0>)
 800b41a:	f240 6207 	movw	r2, #1543	; 0x607
 800b41e:	f002 fd39 	bl	800de94 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b422:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b424:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800b426:	1a9b      	subs	r3, r3, r2
 800b428:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7fe fea4 	bl	800a178 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800b430:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b432:	891a      	ldrh	r2, [r3, #8]
 800b434:	b112      	cbz	r2, 800b43c <tcp_receive+0x2b0>
          recv_data = inseg.p;
 800b436:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800b438:	2300      	movs	r3, #0
 800b43a:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b43c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b43e:	8998      	ldrh	r0, [r3, #12]
 800b440:	f7fd fd5a 	bl	8008ef8 <lwip_htons>
 800b444:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800b446:	bf42      	ittt	mi
 800b448:	7cab      	ldrbmi	r3, [r5, #18]
 800b44a:	f043 0320 	orrmi.w	r3, r3, #32
 800b44e:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800b450:	8b63      	ldrh	r3, [r4, #26]
 800b452:	07da      	lsls	r2, r3, #31
 800b454:	f140 80b9 	bpl.w	800b5ca <tcp_receive+0x43e>
 800b458:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800b45c:	f043 0302 	orr.w	r3, r3, #2
 800b460:	e0b5      	b.n	800b5ce <tcp_receive+0x442>
 800b462:	bf00      	nop
 800b464:	0801cea9 	.word	0x0801cea9
 800b468:	0801cfac 	.word	0x0801cfac
 800b46c:	0801a4e1 	.word	0x0801a4e1
 800b470:	0801cfc5 	.word	0x0801cfc5
 800b474:	200067b4 	.word	0x200067b4
 800b478:	20014a0c 	.word	0x20014a0c
 800b47c:	0801cfde 	.word	0x0801cfde
 800b480:	0801cfee 	.word	0x0801cfee
 800b484:	0801cffd 	.word	0x0801cffd
 800b488:	0801d00d 	.word	0x0801d00d
 800b48c:	0801d044 	.word	0x0801d044
        pcb->dupacks = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b496:	e6e7      	b.n	800b268 <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b498:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b49a:	1a51      	subs	r1, r2, r1
 800b49c:	2900      	cmp	r1, #0
 800b49e:	f300 8082 	bgt.w	800b5a6 <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 800b4a2:	8b61      	ldrh	r1, [r4, #26]
 800b4a4:	0748      	lsls	r0, r1, #29
 800b4a6:	d509      	bpl.n	800b4bc <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 800b4a8:	f021 0104 	bic.w	r1, r1, #4
 800b4ac:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b4ae:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800b4b2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b4b6:	2100      	movs	r1, #0
 800b4b8:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b4bc:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800b4c0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800b4c2:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800b4c4:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b4c6:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 800b4ca:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800b4ce:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800b4d0:	f04f 0100 	mov.w	r1, #0
 800b4d4:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800b4d8:	d926      	bls.n	800b528 <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 800b4da:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800b4de:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b4e2:	428a      	cmp	r2, r1
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b4e4:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800b4e6:	d915      	bls.n	800b514 <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b4e8:	8b62      	ldrh	r2, [r4, #26]
 800b4ea:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b4ee:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b4f0:	bf14      	ite	ne
 800b4f2:	2001      	movne	r0, #1
 800b4f4:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b4f6:	fb12 f200 	smulbb	r2, r2, r0
 800b4fa:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	bf94      	ite	ls
 800b500:	188b      	addls	r3, r1, r2
 800b502:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b504:	b29b      	uxth	r3, r3
 800b506:	4299      	cmp	r1, r3
 800b508:	d901      	bls.n	800b50e <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 800b50a:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b50e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800b512:	e009      	b.n	800b528 <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b514:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b518:	4413      	add	r3, r2
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d82d      	bhi.n	800b57c <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b520:	4299      	cmp	r1, r3
 800b522:	d92d      	bls.n	800b580 <tcp_receive+0x3f4>
 800b524:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b528:	f104 0666 	add.w	r6, r4, #102	; 0x66
 800b52c:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800b530:	4630      	mov	r0, r6
 800b532:	f7ff fdcf 	bl	800b0d4 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b536:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b538:	6720      	str	r0, [r4, #112]	; 0x70
 800b53a:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff fdc9 	bl	800b0d4 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800b542:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b544:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800b546:	fab2 f382 	clz	r3, r2
 800b54a:	095b      	lsrs	r3, r3, #5
 800b54c:	425b      	negs	r3, r3
 800b54e:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800b554:	b908      	cbnz	r0, 800b55a <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 800b556:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b55a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800b55e:	8aa9      	ldrh	r1, [r5, #20]
 800b560:	440b      	add	r3, r1
 800b562:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800b566:	8b63      	ldrh	r3, [r4, #26]
 800b568:	051f      	lsls	r7, r3, #20
 800b56a:	f57f ae7d 	bpl.w	800b268 <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 800b56e:	b9ba      	cbnz	r2, 800b5a0 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800b570:	b960      	cbnz	r0, 800b58c <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 800b572:	8b63      	ldrh	r3, [r4, #26]
 800b574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b578:	8363      	strh	r3, [r4, #26]
 800b57a:	e675      	b.n	800b268 <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b580:	1a5b      	subs	r3, r3, r1
 800b582:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b586:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b588:	440b      	add	r3, r1
 800b58a:	e7bb      	b.n	800b504 <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b58c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800b58e:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b590:	6858      	ldr	r0, [r3, #4]
 800b592:	f7fd fcb4 	bl	8008efe <lwip_htonl>
 800b596:	1a30      	subs	r0, r6, r0
 800b598:	2800      	cmp	r0, #0
 800b59a:	f73f ae65 	bgt.w	800b268 <tcp_receive+0xdc>
 800b59e:	e7e8      	b.n	800b572 <tcp_receive+0x3e6>
 800b5a0:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800b5a2:	68d3      	ldr	r3, [r2, #12]
 800b5a4:	e7f4      	b.n	800b590 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f001 fbd2 	bl	800cd50 <tcp_send_empty_ack>
 800b5ac:	e65c      	b.n	800b268 <tcp_receive+0xdc>
        off -= p->len;
 800b5ae:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800b5b0:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800b5b2:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800b5b4:	b2bf      	uxth	r7, r7
        p = p->next;
 800b5b6:	6836      	ldr	r6, [r6, #0]
 800b5b8:	e6bb      	b.n	800b332 <tcp_receive+0x1a6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b5ba:	1a9b      	subs	r3, r3, r2
 800b5bc:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800b5be:	bfbe      	ittt	lt
 800b5c0:	8b63      	ldrhlt	r3, [r4, #26]
 800b5c2:	f043 0302 	orrlt.w	r3, r3, #2
 800b5c6:	8363      	strhlt	r3, [r4, #26]
 800b5c8:	e6bf      	b.n	800b34a <tcp_receive+0x1be>
        tcp_ack(pcb);
 800b5ca:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800b5ce:	8363      	strh	r3, [r4, #26]
}
 800b5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800b5d2:	4620      	mov	r0, r4
}
 800b5d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800b5d8:	f001 bbba 	b.w	800cd50 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b5dc:	1a99      	subs	r1, r3, r2
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	db05      	blt.n	800b5ee <tcp_receive+0x462>
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	1a9b      	subs	r3, r3, r2
 800b5e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b5e8:	1a9b      	subs	r3, r3, r2
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	ddf0      	ble.n	800b5d0 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 800b5ee:	8b63      	ldrh	r3, [r4, #26]
 800b5f0:	e734      	b.n	800b45c <tcp_receive+0x2d0>
 800b5f2:	bf00      	nop

0800b5f4 <tcp_input>:
{
 800b5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b5f8:	4606      	mov	r6, r0
{
 800b5fa:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b5fc:	b928      	cbnz	r0, 800b60a <tcp_input+0x16>
 800b5fe:	4ba0      	ldr	r3, [pc, #640]	; (800b880 <tcp_input+0x28c>)
 800b600:	49a0      	ldr	r1, [pc, #640]	; (800b884 <tcp_input+0x290>)
 800b602:	48a1      	ldr	r0, [pc, #644]	; (800b888 <tcp_input+0x294>)
 800b604:	2283      	movs	r2, #131	; 0x83
 800b606:	f002 fc45 	bl	800de94 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b60a:	4da0      	ldr	r5, [pc, #640]	; (800b88c <tcp_input+0x298>)
 800b60c:	6873      	ldr	r3, [r6, #4]
 800b60e:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800b610:	8973      	ldrh	r3, [r6, #10]
 800b612:	2b13      	cmp	r3, #19
 800b614:	f240 80a2 	bls.w	800b75c <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b618:	4f9d      	ldr	r7, [pc, #628]	; (800b890 <tcp_input+0x29c>)
 800b61a:	6839      	ldr	r1, [r7, #0]
 800b61c:	6978      	ldr	r0, [r7, #20]
 800b61e:	f7fd f87a 	bl	8008716 <ip4_addr_isbroadcast_u32>
 800b622:	46b8      	mov	r8, r7
 800b624:	4604      	mov	r4, r0
 800b626:	2800      	cmp	r0, #0
 800b628:	f040 8098 	bne.w	800b75c <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b632:	2be0      	cmp	r3, #224	; 0xe0
 800b634:	f000 8092 	beq.w	800b75c <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b638:	68eb      	ldr	r3, [r5, #12]
 800b63a:	8998      	ldrh	r0, [r3, #12]
 800b63c:	f7fd fc5c 	bl	8008ef8 <lwip_htons>
 800b640:	0a81      	lsrs	r1, r0, #10
 800b642:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b646:	2913      	cmp	r1, #19
 800b648:	f240 8088 	bls.w	800b75c <tcp_input+0x168>
 800b64c:	8933      	ldrh	r3, [r6, #8]
 800b64e:	428b      	cmp	r3, r1
 800b650:	b28a      	uxth	r2, r1
 800b652:	f0c0 8083 	bcc.w	800b75c <tcp_input+0x168>
  if (p->len >= hdrlen_bytes) {
 800b656:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800b658:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b65a:	f1a2 0314 	sub.w	r3, r2, #20
 800b65e:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800b660:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b662:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800b664:	d33c      	bcc.n	800b6e0 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b666:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800b668:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b66a:	f7fe f977 	bl	800995c <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b66e:	68ec      	ldr	r4, [r5, #12]
 800b670:	8820      	ldrh	r0, [r4, #0]
 800b672:	f7fd fc41 	bl	8008ef8 <lwip_htons>
 800b676:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b678:	68ec      	ldr	r4, [r5, #12]
 800b67a:	8860      	ldrh	r0, [r4, #2]
 800b67c:	f7fd fc3c 	bl	8008ef8 <lwip_htons>
 800b680:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b682:	68ec      	ldr	r4, [r5, #12]
 800b684:	6860      	ldr	r0, [r4, #4]
 800b686:	f7fd fc3a 	bl	8008efe <lwip_htonl>
 800b68a:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b68c:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b68e:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b690:	68a0      	ldr	r0, [r4, #8]
 800b692:	f7fd fc34 	bl	8008efe <lwip_htonl>
 800b696:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b698:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b69a:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b69c:	89e0      	ldrh	r0, [r4, #14]
 800b69e:	f7fd fc2b 	bl	8008ef8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800b6a2:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b6a4:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b6a6:	8998      	ldrh	r0, [r3, #12]
 800b6a8:	f7fd fc26 	bl	8008ef8 <lwip_htons>
 800b6ac:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800b6b0:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b6b2:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 800b6b4:	8932      	ldrh	r2, [r6, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b6b6:	d14c      	bne.n	800b752 <tcp_input+0x15e>
  tcplen = p->tot_len;
 800b6b8:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6ba:	4b76      	ldr	r3, [pc, #472]	; (800b894 <tcp_input+0x2a0>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b6bc:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b8bc <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6c0:	681c      	ldr	r4, [r3, #0]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b6c2:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800b888 <tcp_input+0x294>
 800b6c6:	4699      	mov	r9, r3
 800b6c8:	4b6d      	ldr	r3, [pc, #436]	; (800b880 <tcp_input+0x28c>)
  prev = NULL;
 800b6ca:	2700      	movs	r7, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6cc:	2c00      	cmp	r4, #0
 800b6ce:	d14b      	bne.n	800b768 <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6d0:	4b71      	ldr	r3, [pc, #452]	; (800b898 <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b6d2:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800b880 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6d6:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b6d8:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800b8c0 <tcp_input+0x2cc>
 800b6dc:	4f6a      	ldr	r7, [pc, #424]	; (800b888 <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6de:	e145      	b.n	800b96c <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b6e0:	6833      	ldr	r3, [r6, #0]
 800b6e2:	b92b      	cbnz	r3, 800b6f0 <tcp_input+0xfc>
 800b6e4:	4b66      	ldr	r3, [pc, #408]	; (800b880 <tcp_input+0x28c>)
 800b6e6:	496d      	ldr	r1, [pc, #436]	; (800b89c <tcp_input+0x2a8>)
 800b6e8:	4867      	ldr	r0, [pc, #412]	; (800b888 <tcp_input+0x294>)
 800b6ea:	22c2      	movs	r2, #194	; 0xc2
 800b6ec:	f002 fbd2 	bl	800de94 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800b6f0:	2114      	movs	r1, #20
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7fe f932 	bl	800995c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b6f8:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b6fa:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    tcphdr_opt1len = p->len;
 800b6fe:	812c      	strh	r4, [r5, #8]
    pbuf_remove_header(p, tcphdr_opt1len);
 800b700:	4621      	mov	r1, r4
 800b702:	4630      	mov	r0, r6
 800b704:	f7fe f92a 	bl	800995c <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b708:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b70a:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 800b70e:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b710:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800b712:	42bb      	cmp	r3, r7
 800b714:	d322      	bcc.n	800b75c <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b716:	6843      	ldr	r3, [r0, #4]
 800b718:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7fe f91e 	bl	800995c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b720:	8933      	ldrh	r3, [r6, #8]
 800b722:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b724:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b726:	eba4 0409 	sub.w	r4, r4, r9
 800b72a:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b72c:	b12b      	cbz	r3, 800b73a <tcp_input+0x146>
 800b72e:	4b54      	ldr	r3, [pc, #336]	; (800b880 <tcp_input+0x28c>)
 800b730:	495b      	ldr	r1, [pc, #364]	; (800b8a0 <tcp_input+0x2ac>)
 800b732:	4855      	ldr	r0, [pc, #340]	; (800b888 <tcp_input+0x294>)
 800b734:	22df      	movs	r2, #223	; 0xdf
 800b736:	f002 fbad 	bl	800de94 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b73a:	6833      	ldr	r3, [r6, #0]
 800b73c:	8932      	ldrh	r2, [r6, #8]
 800b73e:	891b      	ldrh	r3, [r3, #8]
 800b740:	429a      	cmp	r2, r3
 800b742:	d094      	beq.n	800b66e <tcp_input+0x7a>
 800b744:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <tcp_input+0x28c>)
 800b746:	4957      	ldr	r1, [pc, #348]	; (800b8a4 <tcp_input+0x2b0>)
 800b748:	484f      	ldr	r0, [pc, #316]	; (800b888 <tcp_input+0x294>)
 800b74a:	22e0      	movs	r2, #224	; 0xe0
 800b74c:	f002 fba2 	bl	800de94 <iprintf>
 800b750:	e78d      	b.n	800b66e <tcp_input+0x7a>
    tcplen++;
 800b752:	1c53      	adds	r3, r2, #1
 800b754:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800b756:	429a      	cmp	r2, r3
    tcplen++;
 800b758:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800b75a:	d9ae      	bls.n	800b6ba <tcp_input+0xc6>
  pbuf_free(p);
 800b75c:	4630      	mov	r0, r6
}
 800b75e:	b007      	add	sp, #28
 800b760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800b764:	f7fe b92e 	b.w	80099c4 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b768:	7d22      	ldrb	r2, [r4, #20]
 800b76a:	b92a      	cbnz	r2, 800b778 <tcp_input+0x184>
 800b76c:	22fb      	movs	r2, #251	; 0xfb
 800b76e:	4659      	mov	r1, fp
 800b770:	4650      	mov	r0, sl
 800b772:	f002 fb8f 	bl	800de94 <iprintf>
 800b776:	4b42      	ldr	r3, [pc, #264]	; (800b880 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b778:	7d22      	ldrb	r2, [r4, #20]
 800b77a:	2a0a      	cmp	r2, #10
 800b77c:	d105      	bne.n	800b78a <tcp_input+0x196>
 800b77e:	494a      	ldr	r1, [pc, #296]	; (800b8a8 <tcp_input+0x2b4>)
 800b780:	22fc      	movs	r2, #252	; 0xfc
 800b782:	4650      	mov	r0, sl
 800b784:	f002 fb86 	bl	800de94 <iprintf>
 800b788:	4b3d      	ldr	r3, [pc, #244]	; (800b880 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b78a:	7d22      	ldrb	r2, [r4, #20]
 800b78c:	2a01      	cmp	r2, #1
 800b78e:	d105      	bne.n	800b79c <tcp_input+0x1a8>
 800b790:	4946      	ldr	r1, [pc, #280]	; (800b8ac <tcp_input+0x2b8>)
 800b792:	22fd      	movs	r2, #253	; 0xfd
 800b794:	4650      	mov	r0, sl
 800b796:	f002 fb7d 	bl	800de94 <iprintf>
 800b79a:	4b39      	ldr	r3, [pc, #228]	; (800b880 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b79c:	7a20      	ldrb	r0, [r4, #8]
 800b79e:	68e1      	ldr	r1, [r4, #12]
 800b7a0:	b138      	cbz	r0, 800b7b2 <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b7a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800b7a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b7aa:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	4290      	cmp	r0, r2
 800b7b0:	d162      	bne.n	800b878 <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 800b7b2:	68ea      	ldr	r2, [r5, #12]
 800b7b4:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800b7b8:	8810      	ldrh	r0, [r2, #0]
 800b7ba:	4584      	cmp	ip, r0
 800b7bc:	d15c      	bne.n	800b878 <tcp_input+0x284>
 800b7be:	8ae0      	ldrh	r0, [r4, #22]
 800b7c0:	8852      	ldrh	r2, [r2, #2]
 800b7c2:	4290      	cmp	r0, r2
 800b7c4:	d158      	bne.n	800b878 <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 800b7c6:	6860      	ldr	r0, [r4, #4]
 800b7c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b7cc:	4290      	cmp	r0, r2
 800b7ce:	d153      	bne.n	800b878 <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b7d0:	6820      	ldr	r0, [r4, #0]
 800b7d2:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800b7d6:	4290      	cmp	r0, r2
 800b7d8:	d14e      	bne.n	800b878 <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b7da:	42a1      	cmp	r1, r4
 800b7dc:	f040 83f1 	bne.w	800bfc2 <tcp_input+0x9ce>
 800b7e0:	4b27      	ldr	r3, [pc, #156]	; (800b880 <tcp_input+0x28c>)
 800b7e2:	4933      	ldr	r1, [pc, #204]	; (800b8b0 <tcp_input+0x2bc>)
 800b7e4:	4828      	ldr	r0, [pc, #160]	; (800b888 <tcp_input+0x294>)
 800b7e6:	f240 120d 	movw	r2, #269	; 0x10d
 800b7ea:	f002 fb53 	bl	800de94 <iprintf>
      if (prev != NULL) {
 800b7ee:	b137      	cbz	r7, 800b7fe <tcp_input+0x20a>
        prev->next = pcb->next;
 800b7f0:	68e3      	ldr	r3, [r4, #12]
 800b7f2:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800b7f4:	f8d9 3000 	ldr.w	r3, [r9]
 800b7f8:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 800b7fa:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b7fe:	68e3      	ldr	r3, [r4, #12]
 800b800:	42a3      	cmp	r3, r4
 800b802:	d106      	bne.n	800b812 <tcp_input+0x21e>
 800b804:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <tcp_input+0x28c>)
 800b806:	492b      	ldr	r1, [pc, #172]	; (800b8b4 <tcp_input+0x2c0>)
 800b808:	481f      	ldr	r0, [pc, #124]	; (800b888 <tcp_input+0x294>)
 800b80a:	f240 1215 	movw	r2, #277	; 0x115
 800b80e:	f002 fb41 	bl	800de94 <iprintf>
    inseg.len = p->tot_len;
 800b812:	8932      	ldrh	r2, [r6, #8]
 800b814:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800b816:	68ea      	ldr	r2, [r5, #12]
    inseg.p = p;
 800b818:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.next = NULL;
 800b81a:	2300      	movs	r3, #0
    recv_data = NULL;
 800b81c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    inseg.next = NULL;
 800b820:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800b822:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800b824:	82ab      	strh	r3, [r5, #20]
    if (flags & TCP_PSH) {
 800b826:	7f2b      	ldrb	r3, [r5, #28]
 800b828:	071b      	lsls	r3, r3, #28
 800b82a:	d503      	bpl.n	800b834 <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 800b82c:	7b73      	ldrb	r3, [r6, #13]
 800b82e:	f043 0301 	orr.w	r3, r3, #1
 800b832:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800b834:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b836:	4e20      	ldr	r6, [pc, #128]	; (800b8b8 <tcp_input+0x2c4>)
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 8131 	beq.w	800baa0 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b83e:	4620      	mov	r0, r4
 800b840:	f7ff f920 	bl	800aa84 <tcp_process_refused_data>
 800b844:	300d      	adds	r0, #13
 800b846:	d007      	beq.n	800b858 <tcp_input+0x264>
 800b848:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8128 	beq.w	800baa0 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b850:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 8124 	beq.w	800baa0 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800b858:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b85a:	b913      	cbnz	r3, 800b862 <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 800b85c:	4620      	mov	r0, r4
 800b85e:	f001 fa77 	bl	800cd50 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 800b862:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800b864:	2400      	movs	r4, #0
 800b866:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800b868:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800b86a:	b110      	cbz	r0, 800b872 <tcp_input+0x27e>
      pbuf_free(inseg.p);
 800b86c:	f7fe f8aa 	bl	80099c4 <pbuf_free>
      inseg.p = NULL;
 800b870:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800b872:	b007      	add	sp, #28
 800b874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b878:	4627      	mov	r7, r4
 800b87a:	460c      	mov	r4, r1
 800b87c:	e726      	b.n	800b6cc <tcp_input+0xd8>
 800b87e:	bf00      	nop
 800b880:	0801cea9 	.word	0x0801cea9
 800b884:	0801d063 	.word	0x0801d063
 800b888:	0801a4e1 	.word	0x0801a4e1
 800b88c:	200067b4 	.word	0x200067b4
 800b890:	2000e484 	.word	0x2000e484
 800b894:	20014a08 	.word	0x20014a08
 800b898:	20014a18 	.word	0x20014a18
 800b89c:	0801d07b 	.word	0x0801d07b
 800b8a0:	0801d08b 	.word	0x0801d08b
 800b8a4:	0801d097 	.word	0x0801d097
 800b8a8:	0801d0dd 	.word	0x0801d0dd
 800b8ac:	0801d107 	.word	0x0801d107
 800b8b0:	0801d12e 	.word	0x0801d12e
 800b8b4:	0801d159 	.word	0x0801d159
 800b8b8:	20014a1c 	.word	0x20014a1c
 800b8bc:	0801d0b6 	.word	0x0801d0b6
 800b8c0:	0801d183 	.word	0x0801d183
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b8c4:	7d23      	ldrb	r3, [r4, #20]
 800b8c6:	2b0a      	cmp	r3, #10
 800b8c8:	d006      	beq.n	800b8d8 <tcp_input+0x2e4>
 800b8ca:	465b      	mov	r3, fp
 800b8cc:	f240 121f 	movw	r2, #287	; 0x11f
 800b8d0:	4651      	mov	r1, sl
 800b8d2:	4638      	mov	r0, r7
 800b8d4:	f002 fade 	bl	800de94 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8d8:	7a22      	ldrb	r2, [r4, #8]
 800b8da:	b13a      	cbz	r2, 800b8ec <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b8dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b8e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b8e4:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b8e6:	b2db      	uxtb	r3, r3
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d13e      	bne.n	800b96a <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800b8ec:	68eb      	ldr	r3, [r5, #12]
 800b8ee:	8b20      	ldrh	r0, [r4, #24]
 800b8f0:	881a      	ldrh	r2, [r3, #0]
 800b8f2:	4290      	cmp	r0, r2
 800b8f4:	d139      	bne.n	800b96a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b8f6:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800b8f8:	8ae1      	ldrh	r1, [r4, #22]
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d135      	bne.n	800b96a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800b8fe:	6862      	ldr	r2, [r4, #4]
 800b900:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b904:	429a      	cmp	r2, r3
 800b906:	d130      	bne.n	800b96a <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b908:	6822      	ldr	r2, [r4, #0]
 800b90a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d12b      	bne.n	800b96a <tcp_input+0x376>
  if (flags & TCP_RST) {
 800b912:	7f2b      	ldrb	r3, [r5, #28]
 800b914:	075f      	lsls	r7, r3, #29
 800b916:	f53f af21 	bmi.w	800b75c <tcp_input+0x168>
  if (flags & TCP_SYN) {
 800b91a:	079a      	lsls	r2, r3, #30
 800b91c:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800b91e:	d514      	bpl.n	800b94a <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b920:	6a2a      	ldr	r2, [r5, #32]
 800b922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	d415      	bmi.n	800b954 <tcp_input+0x360>
 800b928:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800b92c:	eba3 030c 	sub.w	r3, r3, ip
 800b930:	2b00      	cmp	r3, #0
 800b932:	dc0f      	bgt.n	800b954 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b934:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800b938:	4b89      	ldr	r3, [pc, #548]	; (800bb60 <tcp_input+0x56c>)
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	69a9      	ldr	r1, [r5, #24]
 800b93e:	3304      	adds	r3, #4
 800b940:	443a      	add	r2, r7
 800b942:	4620      	mov	r0, r4
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b944:	f001 f9be 	bl	800ccc4 <tcp_rst>
 800b948:	e708      	b.n	800b75c <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 800b94a:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800b94c:	bf42      	ittt	mi
 800b94e:	4b85      	ldrmi	r3, [pc, #532]	; (800bb64 <tcp_input+0x570>)
 800b950:	681b      	ldrmi	r3, [r3, #0]
 800b952:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800b954:	2f00      	cmp	r7, #0
 800b956:	f43f af01 	beq.w	800b75c <tcp_input+0x168>
    tcp_ack_now(pcb);
 800b95a:	8b63      	ldrh	r3, [r4, #26]
 800b95c:	f043 0302 	orr.w	r3, r3, #2
 800b960:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b962:	4620      	mov	r0, r4
 800b964:	f001 fa26 	bl	800cdb4 <tcp_output>
        pbuf_free(p);
 800b968:	e6f8      	b.n	800b75c <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b96a:	68e4      	ldr	r4, [r4, #12]
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	d1a9      	bne.n	800b8c4 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b970:	4a7d      	ldr	r2, [pc, #500]	; (800bb68 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b972:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b976:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800b978:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b97a:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b97e:	4607      	mov	r7, r0
 800b980:	b98f      	cbnz	r7, 800b9a6 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b982:	8988      	ldrh	r0, [r1, #12]
 800b984:	f7fd fab8 	bl	8008ef8 <lwip_htons>
 800b988:	0742      	lsls	r2, r0, #29
 800b98a:	f53f aee7 	bmi.w	800b75c <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b98e:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b990:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800b992:	8818      	ldrh	r0, [r3, #0]
 800b994:	6a2a      	ldr	r2, [r5, #32]
 800b996:	9002      	str	r0, [sp, #8]
 800b998:	885b      	ldrh	r3, [r3, #2]
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	4b70      	ldr	r3, [pc, #448]	; (800bb60 <tcp_input+0x56c>)
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	440a      	add	r2, r1
 800b9a2:	3304      	adds	r3, #4
 800b9a4:	e30a      	b.n	800bfbc <tcp_input+0x9c8>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b9a6:	f897 c008 	ldrb.w	ip, [r7, #8]
 800b9aa:	f1bc 0f00 	cmp.w	ip, #0
 800b9ae:	d005      	beq.n	800b9bc <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b9b0:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800b9b4:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	459c      	cmp	ip, r3
 800b9ba:	d10b      	bne.n	800b9d4 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800b9bc:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800b9c0:	8afb      	ldrh	r3, [r7, #22]
 800b9c2:	4563      	cmp	r3, ip
 800b9c4:	d106      	bne.n	800b9d4 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	4553      	cmp	r3, sl
 800b9ca:	f000 82e1 	beq.w	800bf90 <tcp_input+0x99c>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 82de 	beq.w	800bf90 <tcp_input+0x99c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b9d4:	463c      	mov	r4, r7
 800b9d6:	68ff      	ldr	r7, [r7, #12]
 800b9d8:	e7d2      	b.n	800b980 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800b9da:	079a      	lsls	r2, r3, #30
 800b9dc:	f57f aebe 	bpl.w	800b75c <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 800b9e0:	7d78      	ldrb	r0, [r7, #21]
 800b9e2:	f7ff f9f3 	bl	800adcc <tcp_alloc>
    if (npcb == NULL) {
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	b948      	cbnz	r0, 800b9fe <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f43f aeb5 	beq.w	800b75c <tcp_input+0x168>
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	6938      	ldr	r0, [r7, #16]
 800b9fa:	4798      	blx	r3
 800b9fc:	e6ae      	b.n	800b75c <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b9fe:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800ba02:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ba04:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ba06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ba0a:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800ba0c:	8afb      	ldrh	r3, [r7, #22]
 800ba0e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800ba10:	7813      	ldrb	r3, [r2, #0]
 800ba12:	7852      	ldrb	r2, [r2, #1]
 800ba14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ba18:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800ba1e:	6a2b      	ldr	r3, [r5, #32]
 800ba20:	3301      	adds	r3, #1
 800ba22:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ba24:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ba26:	f7ff fa6f 	bl	800af08 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ba2a:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800ba2c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ba32:	693b      	ldr	r3, [r7, #16]
    npcb->snd_nxt = iss;
 800ba34:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800ba36:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ba38:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800ba3a:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800ba3c:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ba3e:	7a7b      	ldrb	r3, [r7, #9]
 800ba40:	f003 030c 	and.w	r3, r3, #12
 800ba44:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ba46:	7a3b      	ldrb	r3, [r7, #8]
 800ba48:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800ba4a:	f8d9 3000 	ldr.w	r3, [r9]
 800ba4e:	60e3      	str	r3, [r4, #12]
 800ba50:	f8c9 4000 	str.w	r4, [r9]
 800ba54:	f001 fc84 	bl	800d360 <tcp_timer_needed>
 800ba58:	4b44      	ldr	r3, [pc, #272]	; (800bb6c <tcp_input+0x578>)
 800ba5a:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ba5c:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800ba5e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ba60:	f7ff fac2 	bl	800afe8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ba64:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba66:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800ba68:	89db      	ldrh	r3, [r3, #14]
 800ba6a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba6e:	1d22      	adds	r2, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba74:	4610      	mov	r0, r2
 800ba76:	9205      	str	r2, [sp, #20]
 800ba78:	f7fc fcd0 	bl	800841c <ip4_route>
 800ba7c:	9a05      	ldr	r2, [sp, #20]
 800ba7e:	4601      	mov	r1, r0
 800ba80:	4628      	mov	r0, r5
 800ba82:	f7ff fa5b 	bl	800af3c <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba86:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba88:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 ff9c 	bl	800c9c8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f43f af66 	beq.w	800b962 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800ba96:	4651      	mov	r1, sl
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7ff f8c3 	bl	800ac24 <tcp_abandon>
      return;
 800ba9e:	e65d      	b.n	800b75c <tcp_input+0x168>
  if (flags & TCP_RST) {
 800baa0:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800baa2:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800baa4:	0753      	lsls	r3, r2, #29
 800baa6:	d537      	bpl.n	800bb18 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800baa8:	7d21      	ldrb	r1, [r4, #20]
 800baaa:	2902      	cmp	r1, #2
 800baac:	d11e      	bne.n	800baec <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800baae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bab0:	69ab      	ldr	r3, [r5, #24]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d107      	bne.n	800bac6 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800bab6:	7cab      	ldrb	r3, [r5, #18]
 800bab8:	f043 0308 	orr.w	r3, r3, #8
 800babc:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800babe:	8b63      	ldrh	r3, [r4, #26]
 800bac0:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800bac4:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800bac6:	7cab      	ldrb	r3, [r5, #18]
 800bac8:	0718      	lsls	r0, r3, #28
 800baca:	f140 8200 	bpl.w	800bece <tcp_input+0x8da>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bace:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bad2:	b11b      	cbz	r3, 800badc <tcp_input+0x4e8>
 800bad4:	6920      	ldr	r0, [r4, #16]
 800bad6:	f06f 010d 	mvn.w	r1, #13
 800bada:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800badc:	4824      	ldr	r0, [pc, #144]	; (800bb70 <tcp_input+0x57c>)
 800bade:	4621      	mov	r1, r4
 800bae0:	f7fe fe80 	bl	800a7e4 <tcp_pcb_remove>
        tcp_free(pcb);
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7fe fa73 	bl	8009fd0 <tcp_free>
 800baea:	e6ba      	b.n	800b862 <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 800baec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800baee:	6a2b      	ldr	r3, [r5, #32]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d007      	beq.n	800bb04 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800baf4:	1a9b      	subs	r3, r3, r2
 800baf6:	d4e6      	bmi.n	800bac6 <tcp_input+0x4d2>
 800baf8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bafa:	1a9b      	subs	r3, r3, r2
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dce2      	bgt.n	800bac6 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800bb00:	8b63      	ldrh	r3, [r4, #26]
 800bb02:	e010      	b.n	800bb26 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bb04:	2900      	cmp	r1, #0
 800bb06:	d1d6      	bne.n	800bab6 <tcp_input+0x4c2>
 800bb08:	4b1a      	ldr	r3, [pc, #104]	; (800bb74 <tcp_input+0x580>)
 800bb0a:	491b      	ldr	r1, [pc, #108]	; (800bb78 <tcp_input+0x584>)
 800bb0c:	481b      	ldr	r0, [pc, #108]	; (800bb7c <tcp_input+0x588>)
 800bb0e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bb12:	f002 f9bf 	bl	800de94 <iprintf>
 800bb16:	e7ce      	b.n	800bab6 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bb18:	0797      	lsls	r7, r2, #30
 800bb1a:	8b63      	ldrh	r3, [r4, #26]
 800bb1c:	d506      	bpl.n	800bb2c <tcp_input+0x538>
 800bb1e:	7d22      	ldrb	r2, [r4, #20]
 800bb20:	3a02      	subs	r2, #2
 800bb22:	2a01      	cmp	r2, #1
 800bb24:	d902      	bls.n	800bb2c <tcp_input+0x538>
        tcp_ack_now(pcb);
 800bb26:	f043 0302 	orr.w	r3, r3, #2
 800bb2a:	e7cb      	b.n	800bac4 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bb2c:	06d8      	lsls	r0, r3, #27
    pcb->tmr = tcp_ticks;
 800bb2e:	bf5e      	ittt	pl
 800bb30:	4b0c      	ldrpl	r3, [pc, #48]	; (800bb64 <tcp_input+0x570>)
 800bb32:	681b      	ldrpl	r3, [r3, #0]
 800bb34:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7ff fa53 	bl	800afe8 <tcp_parseopt>
  switch (pcb->state) {
 800bb42:	7d23      	ldrb	r3, [r4, #20]
 800bb44:	3b02      	subs	r3, #2
 800bb46:	2b07      	cmp	r3, #7
 800bb48:	d8bd      	bhi.n	800bac6 <tcp_input+0x4d2>
 800bb4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb4e:	0019      	.short	0x0019
 800bb50:	011400a7 	.word	0x011400a7
 800bb54:	01610119 	.word	0x01610119
 800bb58:	017a0114 	.word	0x017a0114
 800bb5c:	01ab      	.short	0x01ab
 800bb5e:	bf00      	nop
 800bb60:	2000e494 	.word	0x2000e494
 800bb64:	20014a0c 	.word	0x20014a0c
 800bb68:	20014a10 	.word	0x20014a10
 800bb6c:	20014a04 	.word	0x20014a04
 800bb70:	20014a08 	.word	0x20014a08
 800bb74:	0801cea9 	.word	0x0801cea9
 800bb78:	0801d1b0 	.word	0x0801d1b0
 800bb7c:	0801a4e1 	.word	0x0801a4e1
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bb80:	7f2b      	ldrb	r3, [r5, #28]
 800bb82:	f003 0212 	and.w	r2, r3, #18
 800bb86:	2a12      	cmp	r2, #18
 800bb88:	d16b      	bne.n	800bc62 <tcp_input+0x66e>
          && (ackno == pcb->lastack + 1)) {
 800bb8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bb8c:	69a9      	ldr	r1, [r5, #24]
 800bb8e:	3201      	adds	r2, #1
 800bb90:	428a      	cmp	r2, r1
 800bb92:	d166      	bne.n	800bc62 <tcp_input+0x66e>
        pcb->rcv_nxt = seqno + 1;
 800bb94:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800bb96:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800bb98:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800bb9a:	68ea      	ldr	r2, [r5, #12]
        pcb->rcv_nxt = seqno + 1;
 800bb9c:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bb9e:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bba0:	3b01      	subs	r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800bba2:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bba4:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bba6:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800bba8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bbac:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bbb0:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800bbb2:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 800bbb8:	9205      	str	r2, [sp, #20]
 800bbba:	f7fc fc2f 	bl	800841c <ip4_route>
 800bbbe:	9a05      	ldr	r2, [sp, #20]
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7ff f9ba 	bl	800af3c <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bbc8:	f241 131c 	movw	r3, #4380	; 0x111c
 800bbcc:	0042      	lsls	r2, r0, #1
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	4617      	mov	r7, r2
 800bbd2:	bf38      	it	cc
 800bbd4:	461f      	movcc	r7, r3
 800bbd6:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bbda:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bbdc:	ea4f 0180 	mov.w	r1, r0, lsl #2
 800bbe0:	d933      	bls.n	800bc4a <tcp_input+0x656>
 800bbe2:	b28b      	uxth	r3, r1
 800bbe4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bbe8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bbec:	b933      	cbnz	r3, 800bbfc <tcp_input+0x608>
 800bbee:	4ba4      	ldr	r3, [pc, #656]	; (800be80 <tcp_input+0x88c>)
 800bbf0:	49a4      	ldr	r1, [pc, #656]	; (800be84 <tcp_input+0x890>)
 800bbf2:	48a5      	ldr	r0, [pc, #660]	; (800be88 <tcp_input+0x894>)
 800bbf4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bbf8:	f002 f94c 	bl	800de94 <iprintf>
        --pcb->snd_queuelen;
 800bbfc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800bc00:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800bc02:	3b01      	subs	r3, #1
 800bc04:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800bc08:	bb1f      	cbnz	r7, 800bc52 <tcp_input+0x65e>
          rseg = pcb->unsent;
 800bc0a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bc0c:	b937      	cbnz	r7, 800bc1c <tcp_input+0x628>
 800bc0e:	4b9c      	ldr	r3, [pc, #624]	; (800be80 <tcp_input+0x88c>)
 800bc10:	499e      	ldr	r1, [pc, #632]	; (800be8c <tcp_input+0x898>)
 800bc12:	489d      	ldr	r0, [pc, #628]	; (800be88 <tcp_input+0x894>)
 800bc14:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bc18:	f002 f93c 	bl	800de94 <iprintf>
          pcb->unsent = rseg->next;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800bc20:	4638      	mov	r0, r7
 800bc22:	f7fe fb1d 	bl	800a260 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800bc26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc28:	b9b3      	cbnz	r3, 800bc58 <tcp_input+0x664>
          pcb->rtime = -1;
 800bc2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc2e:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bc30:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f43f af63 	beq.w	800bb00 <tcp_input+0x50c>
 800bc3a:	6920      	ldr	r0, [r4, #16]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800bc42:	300d      	adds	r0, #13
 800bc44:	f47f af5c 	bne.w	800bb00 <tcp_input+0x50c>
 800bc48:	e60b      	b.n	800b862 <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	bf88      	it	hi
 800bc4e:	b293      	uxthhi	r3, r2
 800bc50:	e7c8      	b.n	800bbe4 <tcp_input+0x5f0>
          pcb->unacked = rseg->next;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	6723      	str	r3, [r4, #112]	; 0x70
 800bc56:	e7e3      	b.n	800bc20 <tcp_input+0x62c>
          pcb->rtime = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800bc5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc60:	e7e6      	b.n	800bc30 <tcp_input+0x63c>
      else if (flags & TCP_ACK) {
 800bc62:	06d9      	lsls	r1, r3, #27
 800bc64:	f57f af2f 	bpl.w	800bac6 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc68:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc6a:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800bc6c:	8818      	ldrh	r0, [r3, #0]
 800bc6e:	6a2a      	ldr	r2, [r5, #32]
 800bc70:	9002      	str	r0, [sp, #8]
 800bc72:	885b      	ldrh	r3, [r3, #2]
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	4b86      	ldr	r3, [pc, #536]	; (800be90 <tcp_input+0x89c>)
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	440a      	add	r2, r1
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	69a9      	ldr	r1, [r5, #24]
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 f81f 	bl	800ccc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bc86:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bc8a:	2b05      	cmp	r3, #5
 800bc8c:	f63f af1b 	bhi.w	800bac6 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bc94:	4620      	mov	r0, r4
 800bc96:	f001 fa53 	bl	800d140 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800bc9a:	e714      	b.n	800bac6 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800bc9c:	7f2b      	ldrb	r3, [r5, #28]
 800bc9e:	06da      	lsls	r2, r3, #27
 800bca0:	d55c      	bpl.n	800bd5c <tcp_input+0x768>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bca4:	69a9      	ldr	r1, [r5, #24]
 800bca6:	43db      	mvns	r3, r3
 800bca8:	42cb      	cmn	r3, r1
 800bcaa:	d448      	bmi.n	800bd3e <tcp_input+0x74a>
 800bcac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bcae:	1acb      	subs	r3, r1, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	dc44      	bgt.n	800bd3e <tcp_input+0x74a>
          pcb->state = ESTABLISHED;
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800bcb8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bcba:	b91b      	cbnz	r3, 800bcc4 <tcp_input+0x6d0>
            tcp_abort(pcb);
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7ff f82f 	bl	800ad20 <tcp_abort>
            goto aborted;
 800bcc2:	e5ce      	b.n	800b862 <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	b933      	cbnz	r3, 800bcd6 <tcp_input+0x6e2>
 800bcc8:	4b6d      	ldr	r3, [pc, #436]	; (800be80 <tcp_input+0x88c>)
 800bcca:	4972      	ldr	r1, [pc, #456]	; (800be94 <tcp_input+0x8a0>)
 800bccc:	486e      	ldr	r0, [pc, #440]	; (800be88 <tcp_input+0x894>)
 800bcce:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800bcd2:	f002 f8df 	bl	800de94 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bcd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0ee      	beq.n	800bcbc <tcp_input+0x6c8>
 800bcde:	6920      	ldr	r0, [r4, #16]
 800bce0:	2200      	movs	r2, #0
 800bce2:	4621      	mov	r1, r4
 800bce4:	4798      	blx	r3
          if (err != ERR_OK) {
 800bce6:	b118      	cbz	r0, 800bcf0 <tcp_input+0x6fc>
            if (err != ERR_ABRT) {
 800bce8:	300d      	adds	r0, #13
 800bcea:	f43f adba 	beq.w	800b862 <tcp_input+0x26e>
 800bcee:	e7e5      	b.n	800bcbc <tcp_input+0x6c8>
          tcp_receive(pcb);
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f7ff fa4b 	bl	800b18c <tcp_receive>
          if (recv_acked != 0) {
 800bcf6:	4a68      	ldr	r2, [pc, #416]	; (800be98 <tcp_input+0x8a4>)
 800bcf8:	8a93      	ldrh	r3, [r2, #20]
 800bcfa:	b10b      	cbz	r3, 800bd00 <tcp_input+0x70c>
            recv_acked--;
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd00:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800bd02:	f241 131c 	movw	r3, #4380	; 0x111c
 800bd06:	0041      	lsls	r1, r0, #1
 800bd08:	4299      	cmp	r1, r3
 800bd0a:	468c      	mov	ip, r1
 800bd0c:	bf38      	it	cc
 800bd0e:	469c      	movcc	ip, r3
 800bd10:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800bd14:	ea4f 0780 	mov.w	r7, r0, lsl #2
 800bd18:	d90d      	bls.n	800bd36 <tcp_input+0x742>
 800bd1a:	b2bb      	uxth	r3, r7
 800bd1c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800bd20:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bd22:	0698      	lsls	r0, r3, #26
 800bd24:	f57f aecf 	bpl.w	800bac6 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800bd28:	8b63      	ldrh	r3, [r4, #26]
 800bd2a:	f043 0302 	orr.w	r3, r3, #2
 800bd2e:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800bd30:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800bd32:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800bd34:	e6c7      	b.n	800bac6 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bd36:	4299      	cmp	r1, r3
 800bd38:	bf88      	it	hi
 800bd3a:	b28b      	uxthhi	r3, r1
 800bd3c:	e7ee      	b.n	800bd1c <tcp_input+0x728>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd3e:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd40:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800bd42:	881f      	ldrh	r7, [r3, #0]
 800bd44:	6a2a      	ldr	r2, [r5, #32]
 800bd46:	9702      	str	r7, [sp, #8]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	4b50      	ldr	r3, [pc, #320]	; (800be90 <tcp_input+0x89c>)
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	4402      	add	r2, r0
 800bd52:	3304      	adds	r3, #4
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 ffb5 	bl	800ccc4 <tcp_rst>
    if (err != ERR_ABRT) {
 800bd5a:	e6b4      	b.n	800bac6 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bd5c:	079f      	lsls	r7, r3, #30
 800bd5e:	f57f aeb2 	bpl.w	800bac6 <tcp_input+0x4d2>
 800bd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd64:	6a2a      	ldr	r2, [r5, #32]
 800bd66:	3b01      	subs	r3, #1
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	f47f aeac 	bne.w	800bac6 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 ff32 	bl	800cbd8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800bd74:	e6a7      	b.n	800bac6 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800bd76:	4620      	mov	r0, r4
 800bd78:	f7ff fa08 	bl	800b18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bd7c:	7cab      	ldrb	r3, [r5, #18]
 800bd7e:	e7d0      	b.n	800bd22 <tcp_input+0x72e>
      tcp_receive(pcb);
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff fa03 	bl	800b18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bd86:	7cab      	ldrb	r3, [r5, #18]
 800bd88:	f013 0f20 	tst.w	r3, #32
 800bd8c:	7f2b      	ldrb	r3, [r5, #28]
 800bd8e:	d031      	beq.n	800bdf4 <tcp_input+0x800>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bd90:	f013 0f10 	tst.w	r3, #16
 800bd94:	8b63      	ldrh	r3, [r4, #26]
 800bd96:	d028      	beq.n	800bdea <tcp_input+0x7f6>
 800bd98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bd9a:	69aa      	ldr	r2, [r5, #24]
 800bd9c:	4291      	cmp	r1, r2
 800bd9e:	d124      	bne.n	800bdea <tcp_input+0x7f6>
 800bda0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800bda2:	bb12      	cbnz	r2, 800bdea <tcp_input+0x7f6>
          tcp_ack_now(pcb);
 800bda4:	f043 0302 	orr.w	r3, r3, #2
 800bda8:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f7fe fae2 	bl	800a374 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bdb0:	f8d9 3000 	ldr.w	r3, [r9]
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	d10a      	bne.n	800bdce <tcp_input+0x7da>
        TCP_RMV_ACTIVE(pcb);
 800bdb8:	68e3      	ldr	r3, [r4, #12]
 800bdba:	f8c9 3000 	str.w	r3, [r9]
 800bdbe:	e008      	b.n	800bdd2 <tcp_input+0x7de>
          TCP_RMV_ACTIVE(pcb);
 800bdc0:	68da      	ldr	r2, [r3, #12]
 800bdc2:	4294      	cmp	r4, r2
 800bdc4:	d102      	bne.n	800bdcc <tcp_input+0x7d8>
        TCP_RMV_ACTIVE(pcb);
 800bdc6:	68e2      	ldr	r2, [r4, #12]
 800bdc8:	60da      	str	r2, [r3, #12]
 800bdca:	e002      	b.n	800bdd2 <tcp_input+0x7de>
 800bdcc:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f6      	bne.n	800bdc0 <tcp_input+0x7cc>
        TCP_RMV_ACTIVE(pcb);
 800bdd2:	4b32      	ldr	r3, [pc, #200]	; (800be9c <tcp_input+0x8a8>)
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bdd8:	230a      	movs	r3, #10
 800bdda:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bddc:	4b30      	ldr	r3, [pc, #192]	; (800bea0 <tcp_input+0x8ac>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	60e2      	str	r2, [r4, #12]
 800bde2:	601c      	str	r4, [r3, #0]
 800bde4:	f001 fabc 	bl	800d360 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800bde8:	e66d      	b.n	800bac6 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800bdea:	f043 0302 	orr.w	r3, r3, #2
 800bdee:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800bdf0:	2308      	movs	r3, #8
 800bdf2:	e79e      	b.n	800bd32 <tcp_input+0x73e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bdf4:	06d9      	lsls	r1, r3, #27
 800bdf6:	f57f ae66 	bpl.w	800bac6 <tcp_input+0x4d2>
 800bdfa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bdfc:	69ab      	ldr	r3, [r5, #24]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	f47f ae61 	bne.w	800bac6 <tcp_input+0x4d2>
 800be04:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be06:	2b00      	cmp	r3, #0
 800be08:	f47f ae5d 	bne.w	800bac6 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800be0c:	2306      	movs	r3, #6
 800be0e:	e790      	b.n	800bd32 <tcp_input+0x73e>
      tcp_receive(pcb);
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff f9bb 	bl	800b18c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800be16:	7cab      	ldrb	r3, [r5, #18]
 800be18:	069a      	lsls	r2, r3, #26
 800be1a:	f57f ae54 	bpl.w	800bac6 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800be1e:	8b63      	ldrh	r3, [r4, #26]
 800be20:	f043 0302 	orr.w	r3, r3, #2
 800be24:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800be26:	4620      	mov	r0, r4
 800be28:	f7fe faa4 	bl	800a374 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800be2c:	f8d9 3000 	ldr.w	r3, [r9]
 800be30:	429c      	cmp	r4, r3
 800be32:	d0c1      	beq.n	800bdb8 <tcp_input+0x7c4>
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0cc      	beq.n	800bdd2 <tcp_input+0x7de>
 800be38:	68da      	ldr	r2, [r3, #12]
 800be3a:	4294      	cmp	r4, r2
 800be3c:	d0c3      	beq.n	800bdc6 <tcp_input+0x7d2>
 800be3e:	4613      	mov	r3, r2
 800be40:	e7f8      	b.n	800be34 <tcp_input+0x840>
      tcp_receive(pcb);
 800be42:	4620      	mov	r0, r4
 800be44:	f7ff f9a2 	bl	800b18c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800be48:	7f2b      	ldrb	r3, [r5, #28]
 800be4a:	06db      	lsls	r3, r3, #27
 800be4c:	f57f ae3b 	bpl.w	800bac6 <tcp_input+0x4d2>
 800be50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800be52:	69ab      	ldr	r3, [r5, #24]
 800be54:	429a      	cmp	r2, r3
 800be56:	f47f ae36 	bne.w	800bac6 <tcp_input+0x4d2>
 800be5a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f47f ae32 	bne.w	800bac6 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800be62:	4620      	mov	r0, r4
 800be64:	f7fe fa86 	bl	800a374 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800be68:	f8d9 3000 	ldr.w	r3, [r9]
 800be6c:	429c      	cmp	r4, r3
 800be6e:	d0a3      	beq.n	800bdb8 <tcp_input+0x7c4>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0ae      	beq.n	800bdd2 <tcp_input+0x7de>
 800be74:	68da      	ldr	r2, [r3, #12]
 800be76:	4294      	cmp	r4, r2
 800be78:	d0a5      	beq.n	800bdc6 <tcp_input+0x7d2>
 800be7a:	4613      	mov	r3, r2
 800be7c:	e7f8      	b.n	800be70 <tcp_input+0x87c>
 800be7e:	bf00      	nop
 800be80:	0801cea9 	.word	0x0801cea9
 800be84:	0801d1d0 	.word	0x0801d1d0
 800be88:	0801a4e1 	.word	0x0801a4e1
 800be8c:	0801d1e6 	.word	0x0801d1e6
 800be90:	2000e494 	.word	0x2000e494
 800be94:	0801d1f9 	.word	0x0801d1f9
 800be98:	200067b4 	.word	0x200067b4
 800be9c:	20014a04 	.word	0x20014a04
 800bea0:	20014a18 	.word	0x20014a18
      tcp_receive(pcb);
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7ff f971 	bl	800b18c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800beaa:	7f2b      	ldrb	r3, [r5, #28]
 800beac:	06df      	lsls	r7, r3, #27
 800beae:	f57f ae0a 	bpl.w	800bac6 <tcp_input+0x4d2>
 800beb2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800beb4:	69ab      	ldr	r3, [r5, #24]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	f47f ae05 	bne.w	800bac6 <tcp_input+0x4d2>
 800bebc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f47f ae01 	bne.w	800bac6 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800bec4:	7cab      	ldrb	r3, [r5, #18]
 800bec6:	f043 0310 	orr.w	r3, r3, #16
 800beca:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800becc:	e5fb      	b.n	800bac6 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800bece:	8aaa      	ldrh	r2, [r5, #20]
 800bed0:	b11a      	cbz	r2, 800beda <tcp_input+0x8e6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bed2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800bed4:	b9db      	cbnz	r3, 800bf0e <tcp_input+0x91a>
          recv_acked = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800beda:	4620      	mov	r0, r4
 800bedc:	f7ff f8ce 	bl	800b07c <tcp_input_delayed_close>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	f47f acbe 	bne.w	800b862 <tcp_input+0x26e>
        if (recv_data != NULL) {
 800bee6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bee8:	b323      	cbz	r3, 800bf34 <tcp_input+0x940>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800beea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800beec:	b133      	cbz	r3, 800befc <tcp_input+0x908>
 800beee:	4b37      	ldr	r3, [pc, #220]	; (800bfcc <tcp_input+0x9d8>)
 800bef0:	4937      	ldr	r1, [pc, #220]	; (800bfd0 <tcp_input+0x9dc>)
 800bef2:	4838      	ldr	r0, [pc, #224]	; (800bfd4 <tcp_input+0x9e0>)
 800bef4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bef8:	f001 ffcc 	bl	800de94 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800befc:	8b63      	ldrh	r3, [r4, #26]
 800befe:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800bf00:	f013 0310 	ands.w	r3, r3, #16
 800bf04:	d009      	beq.n	800bf1a <tcp_input+0x926>
            pbuf_free(recv_data);
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7fd fd5c 	bl	80099c4 <pbuf_free>
 800bf0c:	e6d6      	b.n	800bcbc <tcp_input+0x6c8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bf0e:	6920      	ldr	r0, [r4, #16]
 800bf10:	4621      	mov	r1, r4
 800bf12:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800bf14:	300d      	adds	r0, #13
 800bf16:	d1de      	bne.n	800bed6 <tcp_input+0x8e2>
 800bf18:	e4a3      	b.n	800b862 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf1a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800bf1e:	b1f7      	cbz	r7, 800bf5e <tcp_input+0x96a>
 800bf20:	6920      	ldr	r0, [r4, #16]
 800bf22:	4621      	mov	r1, r4
 800bf24:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800bf26:	f110 0f0d 	cmn.w	r0, #13
 800bf2a:	f43f ac9a 	beq.w	800b862 <tcp_input+0x26e>
          if (err != ERR_OK) {
 800bf2e:	b108      	cbz	r0, 800bf34 <tcp_input+0x940>
            pcb->refused_data = recv_data;
 800bf30:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800bf32:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800bf34:	7cab      	ldrb	r3, [r5, #18]
 800bf36:	0699      	lsls	r1, r3, #26
 800bf38:	d505      	bpl.n	800bf46 <tcp_input+0x952>
          if (pcb->refused_data != NULL) {
 800bf3a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bf3c:	b1ab      	cbz	r3, 800bf6a <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bf3e:	7b5a      	ldrb	r2, [r3, #13]
 800bf40:	f042 0220 	orr.w	r2, r2, #32
 800bf44:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800bf46:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800bf48:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800bf4a:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bf4c:	f7ff f896 	bl	800b07c <tcp_input_delayed_close>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f47f ac86 	bne.w	800b862 <tcp_input+0x26e>
        tcp_output(pcb);
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 ff2c 	bl	800cdb4 <tcp_output>
 800bf5c:	e481      	b.n	800b862 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf5e:	463b      	mov	r3, r7
 800bf60:	4621      	mov	r1, r4
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7fe fd6a 	bl	800aa3c <tcp_recv_null>
 800bf68:	e7dd      	b.n	800bf26 <tcp_input+0x932>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800bf6c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf70:	f640 3268 	movw	r2, #2920	; 0xb68
 800bf74:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800bf76:	bf1c      	itt	ne
 800bf78:	3301      	addne	r3, #1
 800bf7a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800bf7c:	2f00      	cmp	r7, #0
 800bf7e:	d0e2      	beq.n	800bf46 <tcp_input+0x952>
 800bf80:	2300      	movs	r3, #0
 800bf82:	6920      	ldr	r0, [r4, #16]
 800bf84:	461a      	mov	r2, r3
 800bf86:	4621      	mov	r1, r4
 800bf88:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800bf8a:	300d      	adds	r0, #13
 800bf8c:	d1db      	bne.n	800bf46 <tcp_input+0x952>
 800bf8e:	e468      	b.n	800b862 <tcp_input+0x26e>
      if (prev != NULL) {
 800bf90:	b11c      	cbz	r4, 800bf9a <tcp_input+0x9a6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bf96:	6017      	str	r7, [r2, #0]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bf98:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 800bf9a:	7f2b      	ldrb	r3, [r5, #28]
 800bf9c:	0758      	lsls	r0, r3, #29
 800bf9e:	f53f abdd 	bmi.w	800b75c <tcp_input+0x168>
  if (flags & TCP_ACK) {
 800bfa2:	f013 0a10 	ands.w	sl, r3, #16
 800bfa6:	f43f ad18 	beq.w	800b9da <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bfaa:	880b      	ldrh	r3, [r1, #0]
 800bfac:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800bfae:	6a2a      	ldr	r2, [r5, #32]
 800bfb0:	e9cd c301 	strd	ip, r3, [sp, #4]
 800bfb4:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <tcp_input+0x9e4>)
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	4402      	add	r2, r0
 800bfba:	3304      	adds	r3, #4
 800bfbc:	69a9      	ldr	r1, [r5, #24]
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	e4c0      	b.n	800b944 <tcp_input+0x350>
      if (prev != NULL) {
 800bfc2:	2f00      	cmp	r7, #0
 800bfc4:	f47f ac14 	bne.w	800b7f0 <tcp_input+0x1fc>
 800bfc8:	e423      	b.n	800b812 <tcp_input+0x21e>
 800bfca:	bf00      	nop
 800bfcc:	0801cea9 	.word	0x0801cea9
 800bfd0:	0801d217 	.word	0x0801d217
 800bfd4:	0801a4e1 	.word	0x0801a4e1
 800bfd8:	2000e494 	.word	0x2000e494

0800bfdc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800bfdc:	4a02      	ldr	r2, [pc, #8]	; (800bfe8 <tcp_trigger_input_pcb_close+0xc>)
 800bfde:	7c93      	ldrb	r3, [r2, #18]
 800bfe0:	f043 0310 	orr.w	r3, r3, #16
 800bfe4:	7493      	strb	r3, [r2, #18]
}
 800bfe6:	4770      	bx	lr
 800bfe8:	200067b4 	.word	0x200067b4

0800bfec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bfec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bfee:	4604      	mov	r4, r0
 800bff0:	b930      	cbnz	r0, 800c000 <tcp_output_segment_busy+0x14>
 800bff2:	4b06      	ldr	r3, [pc, #24]	; (800c00c <tcp_output_segment_busy+0x20>)
 800bff4:	4906      	ldr	r1, [pc, #24]	; (800c010 <tcp_output_segment_busy+0x24>)
 800bff6:	4807      	ldr	r0, [pc, #28]	; (800c014 <tcp_output_segment_busy+0x28>)
 800bff8:	f240 529a 	movw	r2, #1434	; 0x59a
 800bffc:	f001 ff4a 	bl	800de94 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c000:	6863      	ldr	r3, [r4, #4]
 800c002:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800c004:	3801      	subs	r0, #1
 800c006:	bf18      	it	ne
 800c008:	2001      	movne	r0, #1
 800c00a:	bd10      	pop	{r4, pc}
 800c00c:	0801d231 	.word	0x0801d231
 800c010:	0801d2ae 	.word	0x0801d2ae
 800c014:	0801a4e1 	.word	0x0801a4e1

0800c018 <tcp_pbuf_prealloc>:
{
 800c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c01c:	9d08      	ldr	r5, [sp, #32]
 800c01e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800c022:	4680      	mov	r8, r0
 800c024:	460c      	mov	r4, r1
 800c026:	4617      	mov	r7, r2
 800c028:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c02a:	b92d      	cbnz	r5, 800c038 <tcp_pbuf_prealloc+0x20>
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <tcp_pbuf_prealloc+0x88>)
 800c02e:	491d      	ldr	r1, [pc, #116]	; (800c0a4 <tcp_pbuf_prealloc+0x8c>)
 800c030:	481d      	ldr	r0, [pc, #116]	; (800c0a8 <tcp_pbuf_prealloc+0x90>)
 800c032:	22e9      	movs	r2, #233	; 0xe9
 800c034:	f001 ff2e 	bl	800de94 <iprintf>
  if (length < max_length) {
 800c038:	42bc      	cmp	r4, r7
 800c03a:	d22e      	bcs.n	800c09a <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c03c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c040:	079a      	lsls	r2, r3, #30
 800c042:	d409      	bmi.n	800c058 <tcp_pbuf_prealloc+0x40>
 800c044:	8b6b      	ldrh	r3, [r5, #26]
 800c046:	065b      	lsls	r3, r3, #25
 800c048:	d427      	bmi.n	800c09a <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800c04a:	f1b9 0f00 	cmp.w	r9, #0
 800c04e:	d003      	beq.n	800c058 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800c050:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c052:	b90b      	cbnz	r3, 800c058 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800c054:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c056:	b303      	cbz	r3, 800c09a <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c058:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800c05c:	f025 0103 	bic.w	r1, r5, #3
 800c060:	42b9      	cmp	r1, r7
 800c062:	460a      	mov	r2, r1
 800c064:	bf28      	it	cs
 800c066:	463a      	movcs	r2, r7
 800c068:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c06a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c06e:	4640      	mov	r0, r8
 800c070:	f7fd fd10 	bl	8009a94 <pbuf_alloc>
  if (p == NULL) {
 800c074:	4605      	mov	r5, r0
 800c076:	b168      	cbz	r0, 800c094 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c078:	6803      	ldr	r3, [r0, #0]
 800c07a:	b133      	cbz	r3, 800c08a <tcp_pbuf_prealloc+0x72>
 800c07c:	4b08      	ldr	r3, [pc, #32]	; (800c0a0 <tcp_pbuf_prealloc+0x88>)
 800c07e:	490b      	ldr	r1, [pc, #44]	; (800c0ac <tcp_pbuf_prealloc+0x94>)
 800c080:	4809      	ldr	r0, [pc, #36]	; (800c0a8 <tcp_pbuf_prealloc+0x90>)
 800c082:	f240 120b 	movw	r2, #267	; 0x10b
 800c086:	f001 ff05 	bl	800de94 <iprintf>
  *oversize = p->len - length;
 800c08a:	896b      	ldrh	r3, [r5, #10]
 800c08c:	1b1b      	subs	r3, r3, r4
 800c08e:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800c090:	812c      	strh	r4, [r5, #8]
 800c092:	816c      	strh	r4, [r5, #10]
}
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09a:	4621      	mov	r1, r4
 800c09c:	e7e5      	b.n	800c06a <tcp_pbuf_prealloc+0x52>
 800c09e:	bf00      	nop
 800c0a0:	0801d231 	.word	0x0801d231
 800c0a4:	0801d2d3 	.word	0x0801d2d3
 800c0a8:	0801a4e1 	.word	0x0801a4e1
 800c0ac:	0801d2f2 	.word	0x0801d2f2

0800c0b0 <tcp_create_segment>:
{
 800c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b4:	460e      	mov	r6, r1
 800c0b6:	f89d a020 	ldrb.w	sl, [sp, #32]
 800c0ba:	4690      	mov	r8, r2
 800c0bc:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c0be:	4607      	mov	r7, r0
 800c0c0:	b928      	cbnz	r0, 800c0ce <tcp_create_segment+0x1e>
 800c0c2:	4b2e      	ldr	r3, [pc, #184]	; (800c17c <tcp_create_segment+0xcc>)
 800c0c4:	492e      	ldr	r1, [pc, #184]	; (800c180 <tcp_create_segment+0xd0>)
 800c0c6:	482f      	ldr	r0, [pc, #188]	; (800c184 <tcp_create_segment+0xd4>)
 800c0c8:	22a3      	movs	r2, #163	; 0xa3
 800c0ca:	f001 fee3 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c0ce:	b92e      	cbnz	r6, 800c0dc <tcp_create_segment+0x2c>
 800c0d0:	4b2a      	ldr	r3, [pc, #168]	; (800c17c <tcp_create_segment+0xcc>)
 800c0d2:	492d      	ldr	r1, [pc, #180]	; (800c188 <tcp_create_segment+0xd8>)
 800c0d4:	482b      	ldr	r0, [pc, #172]	; (800c184 <tcp_create_segment+0xd4>)
 800c0d6:	22a4      	movs	r2, #164	; 0xa4
 800c0d8:	f001 fedc 	bl	800de94 <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c0dc:	2003      	movs	r0, #3
 800c0de:	f7fd fa27 	bl	8009530 <memp_malloc>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c0e2:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800c0e6:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	b928      	cbnz	r0, 800c0fa <tcp_create_segment+0x4a>
    pbuf_free(p);
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	f7fd fc68 	bl	80099c4 <pbuf_free>
}
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800c0fa:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800c0fe:	2300      	movs	r3, #0
  seg->p = p;
 800c100:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c104:	8933      	ldrh	r3, [r6, #8]
 800c106:	42ab      	cmp	r3, r5
 800c108:	fa1f fa85 	uxth.w	sl, r5
 800c10c:	d205      	bcs.n	800c11a <tcp_create_segment+0x6a>
 800c10e:	4b1b      	ldr	r3, [pc, #108]	; (800c17c <tcp_create_segment+0xcc>)
 800c110:	491e      	ldr	r1, [pc, #120]	; (800c18c <tcp_create_segment+0xdc>)
 800c112:	481c      	ldr	r0, [pc, #112]	; (800c184 <tcp_create_segment+0xd4>)
 800c114:	22b0      	movs	r2, #176	; 0xb0
 800c116:	f001 febd 	bl	800de94 <iprintf>
  seg->len = p->tot_len - optlen;
 800c11a:	8933      	ldrh	r3, [r6, #8]
 800c11c:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c120:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 800c122:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c124:	2114      	movs	r1, #20
 800c126:	f7fd fc15 	bl	8009954 <pbuf_add_header>
 800c12a:	4606      	mov	r6, r0
 800c12c:	b120      	cbz	r0, 800c138 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800c12e:	4620      	mov	r0, r4
 800c130:	f7fe f896 	bl	800a260 <tcp_seg_free>
    return NULL;
 800c134:	2400      	movs	r4, #0
 800c136:	e7dd      	b.n	800c0f4 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c138:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c13a:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c13c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800c140:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c144:	f7fc fed8 	bl	8008ef8 <lwip_htons>
 800c148:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c14c:	8b38      	ldrh	r0, [r7, #24]
 800c14e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c152:	f7fc fed1 	bl	8008ef8 <lwip_htons>
 800c156:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c15a:	4648      	mov	r0, r9
 800c15c:	68e7      	ldr	r7, [r4, #12]
 800c15e:	f7fc fece 	bl	8008efe <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c162:	08ad      	lsrs	r5, r5, #2
 800c164:	3505      	adds	r5, #5
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c166:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c168:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 800c16c:	68e7      	ldr	r7, [r4, #12]
 800c16e:	f7fc fec3 	bl	8008ef8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c172:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c174:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800c176:	749e      	strb	r6, [r3, #18]
 800c178:	74de      	strb	r6, [r3, #19]
  return seg;
 800c17a:	e7bb      	b.n	800c0f4 <tcp_create_segment+0x44>
 800c17c:	0801d231 	.word	0x0801d231
 800c180:	0801d306 	.word	0x0801d306
 800c184:	0801a4e1 	.word	0x0801a4e1
 800c188:	0801d326 	.word	0x0801d326
 800c18c:	0801d347 	.word	0x0801d347

0800c190 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c190:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c196:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c198:	4606      	mov	r6, r0
 800c19a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c19c:	2022      	movs	r0, #34	; 0x22
 800c19e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800c1a2:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c1a4:	f7fd fc76 	bl	8009a94 <pbuf_alloc>
  if (p != NULL) {
 800c1a8:	4605      	mov	r5, r0
 800c1aa:	b348      	cbz	r0, 800c200 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c1ac:	8943      	ldrh	r3, [r0, #10]
 800c1ae:	2b13      	cmp	r3, #19
 800c1b0:	d806      	bhi.n	800c1c0 <tcp_output_alloc_header_common.constprop.0+0x30>
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800c1b4:	4915      	ldr	r1, [pc, #84]	; (800c20c <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800c1b6:	4816      	ldr	r0, [pc, #88]	; (800c210 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800c1b8:	f240 7223 	movw	r2, #1827	; 0x723
 800c1bc:	f001 fe6a 	bl	800de94 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800c1c0:	4640      	mov	r0, r8
    tcphdr = (struct tcp_hdr *)p->payload;
 800c1c2:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800c1c4:	f7fc fe98 	bl	8008ef8 <lwip_htons>
 800c1c8:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c1ca:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c1ce:	f7fc fe93 	bl	8008ef8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c1d2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800c1d4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f7fc fe91 	bl	8008efe <lwip_htonl>
 800c1dc:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c1de:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c1e2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800c1e6:	f7fc fe87 	bl	8008ef8 <lwip_htons>
 800c1ea:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c1ec:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800c1f0:	f7fc fe82 	bl	8008ef8 <lwip_htons>
    tcphdr->chksum = 0;
 800c1f4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800c1f6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800c1f8:	7423      	strb	r3, [r4, #16]
 800c1fa:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800c1fc:	74a3      	strb	r3, [r4, #18]
 800c1fe:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800c200:	4628      	mov	r0, r5
 800c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c206:	bf00      	nop
 800c208:	0801d231 	.word	0x0801d231
 800c20c:	0801d35c 	.word	0x0801d35c
 800c210:	0801a4e1 	.word	0x0801a4e1

0800c214 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c216:	460d      	mov	r5, r1
 800c218:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c21a:	4604      	mov	r4, r0
 800c21c:	b930      	cbnz	r0, 800c22c <tcp_output_alloc_header.constprop.0+0x18>
 800c21e:	4b0d      	ldr	r3, [pc, #52]	; (800c254 <tcp_output_alloc_header.constprop.0+0x40>)
 800c220:	490d      	ldr	r1, [pc, #52]	; (800c258 <tcp_output_alloc_header.constprop.0+0x44>)
 800c222:	480e      	ldr	r0, [pc, #56]	; (800c25c <tcp_output_alloc_header.constprop.0+0x48>)
 800c224:	f240 7242 	movw	r2, #1858	; 0x742
 800c228:	f001 fe34 	bl	800de94 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c22c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c22e:	9302      	str	r3, [sp, #8]
 800c230:	2310      	movs	r3, #16
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	8b23      	ldrh	r3, [r4, #24]
 800c236:	9300      	str	r3, [sp, #0]
 800c238:	8ae3      	ldrh	r3, [r4, #22]
 800c23a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c23c:	4632      	mov	r2, r6
 800c23e:	4629      	mov	r1, r5
 800c240:	f7ff ffa6 	bl	800c190 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c244:	b118      	cbz	r0, 800c24e <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c246:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c24a:	4413      	add	r3, r2
 800c24c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800c24e:	b004      	add	sp, #16
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	bf00      	nop
 800c254:	0801d231 	.word	0x0801d231
 800c258:	0801d38a 	.word	0x0801d38a
 800c25c:	0801a4e1 	.word	0x0801a4e1

0800c260 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c260:	b930      	cbnz	r0, 800c270 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800c262:	4b04      	ldr	r3, [pc, #16]	; (800c274 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800c264:	4904      	ldr	r1, [pc, #16]	; (800c278 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800c266:	4805      	ldr	r0, [pc, #20]	; (800c27c <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 800c268:	f240 7256 	movw	r2, #1878	; 0x756
 800c26c:	f001 be12 	b.w	800de94 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	0801d231 	.word	0x0801d231
 800c278:	0801d3af 	.word	0x0801d3af
 800c27c:	0801a4e1 	.word	0x0801a4e1

0800c280 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c280:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c282:	4604      	mov	r4, r0
 800c284:	b085      	sub	sp, #20
 800c286:	4617      	mov	r7, r2
 800c288:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c28a:	460d      	mov	r5, r1
 800c28c:	b931      	cbnz	r1, 800c29c <tcp_output_control_segment+0x1c>
 800c28e:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <tcp_output_control_segment+0x64>)
 800c290:	4915      	ldr	r1, [pc, #84]	; (800c2e8 <tcp_output_control_segment+0x68>)
 800c292:	4816      	ldr	r0, [pc, #88]	; (800c2ec <tcp_output_control_segment+0x6c>)
 800c294:	f240 7287 	movw	r2, #1927	; 0x787
 800c298:	f001 fdfc 	bl	800de94 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c29c:	b164      	cbz	r4, 800c2b8 <tcp_output_control_segment+0x38>
 800c29e:	7a20      	ldrb	r0, [r4, #8]
 800c2a0:	b150      	cbz	r0, 800c2b8 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800c2a2:	f7fd fad5 	bl	8009850 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800c2a6:	b968      	cbnz	r0, 800c2c4 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800c2a8:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f7fd fb89 	bl	80099c4 <pbuf_free>
  return err;
}
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	b005      	add	sp, #20
 800c2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f7fc f8af 	bl	800841c <ip4_route>
  if (netif == NULL) {
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0f2      	beq.n	800c2a8 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800c2c2:	b164      	cbz	r4, 800c2de <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800c2c4:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800c2c6:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2c8:	9002      	str	r0, [sp, #8]
 800c2ca:	2206      	movs	r2, #6
 800c2cc:	e9cd 4200 	strd	r4, r2, [sp]
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7fc fa0d 	bl	80086f4 <ip4_output_if>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	e7e6      	b.n	800c2ac <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800c2de:	23ff      	movs	r3, #255	; 0xff
 800c2e0:	e7f2      	b.n	800c2c8 <tcp_output_control_segment+0x48>
 800c2e2:	bf00      	nop
 800c2e4:	0801d231 	.word	0x0801d231
 800c2e8:	0801d3d5 	.word	0x0801d3d5
 800c2ec:	0801a4e1 	.word	0x0801a4e1

0800c2f0 <tcp_write>:
{
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	ed2d 8b02 	vpush	{d8}
 800c2f8:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2fa:	4604      	mov	r4, r0
{
 800c2fc:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800c2fe:	2300      	movs	r3, #0
{
 800c300:	9107      	str	r1, [sp, #28]
 800c302:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800c304:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c308:	b968      	cbnz	r0, 800c326 <tcp_write+0x36>
 800c30a:	4bab      	ldr	r3, [pc, #684]	; (800c5b8 <tcp_write+0x2c8>)
 800c30c:	49ab      	ldr	r1, [pc, #684]	; (800c5bc <tcp_write+0x2cc>)
 800c30e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c312:	48ab      	ldr	r0, [pc, #684]	; (800c5c0 <tcp_write+0x2d0>)
 800c314:	f001 fdbe 	bl	800de94 <iprintf>
 800c318:	f06f 000f 	mvn.w	r0, #15
}
 800c31c:	b00f      	add	sp, #60	; 0x3c
 800c31e:	ecbd 8b02 	vpop	{d8}
 800c322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c326:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800c32a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800c32c:	085b      	lsrs	r3, r3, #1
 800c32e:	4293      	cmp	r3, r2
 800c330:	bf28      	it	cs
 800c332:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800c334:	2b00      	cmp	r3, #0
 800c336:	bf08      	it	eq
 800c338:	4613      	moveq	r3, r2
 800c33a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	b923      	cbnz	r3, 800c34a <tcp_write+0x5a>
 800c340:	4b9d      	ldr	r3, [pc, #628]	; (800c5b8 <tcp_write+0x2c8>)
 800c342:	49a0      	ldr	r1, [pc, #640]	; (800c5c4 <tcp_write+0x2d4>)
 800c344:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c348:	e7e3      	b.n	800c312 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800c34a:	7d03      	ldrb	r3, [r0, #20]
 800c34c:	2b07      	cmp	r3, #7
 800c34e:	d003      	beq.n	800c358 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800c350:	3b02      	subs	r3, #2
 800c352:	2b02      	cmp	r3, #2
 800c354:	f200 825b 	bhi.w	800c80e <tcp_write+0x51e>
  } else if (len == 0) {
 800c358:	9b04      	ldr	r3, [sp, #16]
 800c35a:	b1db      	cbz	r3, 800c394 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800c35c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c360:	9a04      	ldr	r2, [sp, #16]
 800c362:	4293      	cmp	r3, r2
 800c364:	d206      	bcs.n	800c374 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c366:	8b63      	ldrh	r3, [r4, #26]
 800c368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c36c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800c36e:	f04f 30ff 	mov.w	r0, #4294967295
 800c372:	e7d3      	b.n	800c31c <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c374:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800c378:	2a07      	cmp	r2, #7
 800c37a:	d8f4      	bhi.n	800c366 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 800c37c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c37e:	b302      	cbz	r2, 800c3c2 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c380:	b943      	cbnz	r3, 800c394 <tcp_write+0xa4>
 800c382:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c384:	b933      	cbnz	r3, 800c394 <tcp_write+0xa4>
 800c386:	4b8c      	ldr	r3, [pc, #560]	; (800c5b8 <tcp_write+0x2c8>)
 800c388:	498f      	ldr	r1, [pc, #572]	; (800c5c8 <tcp_write+0x2d8>)
 800c38a:	f240 1255 	movw	r2, #341	; 0x155
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c38e:	488c      	ldr	r0, [pc, #560]	; (800c5c0 <tcp_write+0x2d0>)
 800c390:	f001 fd80 	bl	800de94 <iprintf>
  if (pcb->unsent != NULL) {
 800c394:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800c396:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c39a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800c39c:	b9de      	cbnz	r6, 800c3d6 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c39e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800c3a2:	2f00      	cmp	r7, #0
 800c3a4:	f000 81bc 	beq.w	800c720 <tcp_write+0x430>
 800c3a8:	4b83      	ldr	r3, [pc, #524]	; (800c5b8 <tcp_write+0x2c8>)
 800c3aa:	4988      	ldr	r1, [pc, #544]	; (800c5cc <tcp_write+0x2dc>)
 800c3ac:	4884      	ldr	r0, [pc, #528]	; (800c5c0 <tcp_write+0x2d0>)
 800c3ae:	f240 224a 	movw	r2, #586	; 0x24a
 800c3b2:	f001 fd6f 	bl	800de94 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c3b6:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 800c3b8:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800c3ba:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800c3bc:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800c3be:	4637      	mov	r7, r6
 800c3c0:	e089      	b.n	800c4d6 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c3c2:	b913      	cbnz	r3, 800c3ca <tcp_write+0xda>
 800c3c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0e4      	beq.n	800c394 <tcp_write+0xa4>
 800c3ca:	4b7b      	ldr	r3, [pc, #492]	; (800c5b8 <tcp_write+0x2c8>)
 800c3cc:	4980      	ldr	r1, [pc, #512]	; (800c5d0 <tcp_write+0x2e0>)
 800c3ce:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c3d2:	e7dc      	b.n	800c38e <tcp_write+0x9e>
 800c3d4:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c3d6:	f8d6 a000 	ldr.w	sl, [r6]
 800c3da:	46b0      	mov	r8, r6
 800c3dc:	f1ba 0f00 	cmp.w	sl, #0
 800c3e0:	d1f8      	bne.n	800c3d4 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c3e2:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c3e4:	8933      	ldrh	r3, [r6, #8]
 800c3e6:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c3e8:	00ad      	lsls	r5, r5, #2
 800c3ea:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c3ee:	442b      	add	r3, r5
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	da06      	bge.n	800c402 <tcp_write+0x112>
 800c3f4:	4b70      	ldr	r3, [pc, #448]	; (800c5b8 <tcp_write+0x2c8>)
 800c3f6:	4977      	ldr	r1, [pc, #476]	; (800c5d4 <tcp_write+0x2e4>)
 800c3f8:	4871      	ldr	r0, [pc, #452]	; (800c5c0 <tcp_write+0x2d0>)
 800c3fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c3fe:	f001 fd49 	bl	800de94 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c402:	8937      	ldrh	r7, [r6, #8]
 800c404:	9b06      	ldr	r3, [sp, #24]
 800c406:	1bdf      	subs	r7, r3, r7
 800c408:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800c40a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 800c40e:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c412:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 800c414:	2d00      	cmp	r5, #0
 800c416:	d067      	beq.n	800c4e8 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c418:	42bd      	cmp	r5, r7
 800c41a:	d906      	bls.n	800c42a <tcp_write+0x13a>
 800c41c:	4b66      	ldr	r3, [pc, #408]	; (800c5b8 <tcp_write+0x2c8>)
 800c41e:	496e      	ldr	r1, [pc, #440]	; (800c5d8 <tcp_write+0x2e8>)
 800c420:	4867      	ldr	r0, [pc, #412]	; (800c5c0 <tcp_write+0x2d0>)
 800c422:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c426:	f001 fd35 	bl	800de94 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c42a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c42e:	9a04      	ldr	r2, [sp, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	bf28      	it	cs
 800c434:	461a      	movcs	r2, r3
 800c436:	42ba      	cmp	r2, r7
 800c438:	4615      	mov	r5, r2
 800c43a:	bf28      	it	cs
 800c43c:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800c43e:	1b5b      	subs	r3, r3, r5
 800c440:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800c442:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800c444:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 800c448:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c44a:	b153      	cbz	r3, 800c462 <tcp_write+0x172>
 800c44c:	9b04      	ldr	r3, [sp, #16]
 800c44e:	42ab      	cmp	r3, r5
 800c450:	f000 816b 	beq.w	800c72a <tcp_write+0x43a>
 800c454:	4b58      	ldr	r3, [pc, #352]	; (800c5b8 <tcp_write+0x2c8>)
 800c456:	4961      	ldr	r1, [pc, #388]	; (800c5dc <tcp_write+0x2ec>)
 800c458:	4859      	ldr	r0, [pc, #356]	; (800c5c0 <tcp_write+0x2d0>)
 800c45a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c45e:	f001 fd19 	bl	800de94 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c462:	9b04      	ldr	r3, [sp, #16]
 800c464:	429d      	cmp	r5, r3
 800c466:	f080 8160 	bcs.w	800c72a <tcp_write+0x43a>
 800c46a:	2f00      	cmp	r7, #0
 800c46c:	f000 8155 	beq.w	800c71a <tcp_write+0x42a>
 800c470:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800c474:	f1b9 0f00 	cmp.w	r9, #0
 800c478:	f000 8150 	beq.w	800c71c <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c47c:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c480:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c482:	45b9      	cmp	r9, r7
 800c484:	bfa8      	it	ge
 800c486:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c488:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c48a:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c48e:	d52d      	bpl.n	800c4ec <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c490:	2301      	movs	r3, #1
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	9b08      	ldr	r3, [sp, #32]
 800c496:	463a      	mov	r2, r7
 800c498:	e9cd 4300 	strd	r4, r3, [sp]
 800c49c:	4631      	mov	r1, r6
 800c49e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c4a2:	2000      	movs	r0, #0
 800c4a4:	f7ff fdb8 	bl	800c018 <tcp_pbuf_prealloc>
 800c4a8:	4683      	mov	fp, r0
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f000 81ac 	beq.w	800c808 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c4b0:	9b07      	ldr	r3, [sp, #28]
 800c4b2:	6840      	ldr	r0, [r0, #4]
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	1959      	adds	r1, r3, r5
 800c4b8:	f001 fcbc 	bl	800de34 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800c4bc:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800c4be:	f7fd fbd5 	bl	8009c6c <pbuf_clen>
 800c4c2:	9b05      	ldr	r3, [sp, #20]
 800c4c4:	4403      	add	r3, r0
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	9305      	str	r3, [sp, #20]
  u16_t extendlen = 0;
 800c4ca:	f04f 0900 	mov.w	r9, #0
      pos += seglen;
 800c4ce:	19af      	adds	r7, r5, r6
 800c4d0:	b2bf      	uxth	r7, r7
 800c4d2:	4646      	mov	r6, r8
 800c4d4:	46da      	mov	sl, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c4d6:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800c4d8:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c4dc:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800c4e0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c4e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e6:	e0e7      	b.n	800c6b8 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c4e8:	462e      	mov	r6, r5
 800c4ea:	e7ba      	b.n	800c462 <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c4ec:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c4f0:	465a      	mov	r2, fp
 800c4f2:	f8db b000 	ldr.w	fp, [fp]
 800c4f6:	f1bb 0f00 	cmp.w	fp, #0
 800c4fa:	d1f9      	bne.n	800c4f0 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c4fc:	7b13      	ldrb	r3, [r2, #12]
 800c4fe:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800c502:	d10f      	bne.n	800c524 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c504:	8951      	ldrh	r1, [r2, #10]
 800c506:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c508:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c50a:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d109      	bne.n	800c524 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c510:	b135      	cbz	r5, 800c520 <tcp_write+0x230>
 800c512:	4b29      	ldr	r3, [pc, #164]	; (800c5b8 <tcp_write+0x2c8>)
 800c514:	4932      	ldr	r1, [pc, #200]	; (800c5e0 <tcp_write+0x2f0>)
 800c516:	482a      	ldr	r0, [pc, #168]	; (800c5c0 <tcp_write+0x2d0>)
 800c518:	f240 2231 	movw	r2, #561	; 0x231
 800c51c:	f001 fcba 	bl	800de94 <iprintf>
          extendlen = seglen;
 800c520:	46b1      	mov	r9, r6
 800c522:	e7d4      	b.n	800c4ce <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c524:	2201      	movs	r2, #1
 800c526:	4631      	mov	r1, r6
 800c528:	2000      	movs	r0, #0
 800c52a:	f7fd fab3 	bl	8009a94 <pbuf_alloc>
 800c52e:	4683      	mov	fp, r0
 800c530:	2800      	cmp	r0, #0
 800c532:	f000 8169 	beq.w	800c808 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c536:	9b07      	ldr	r3, [sp, #28]
 800c538:	442b      	add	r3, r5
 800c53a:	6043      	str	r3, [r0, #4]
 800c53c:	e7bf      	b.n	800c4be <tcp_write+0x1ce>
    u16_t left = len - pos;
 800c53e:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c540:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800c542:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800c544:	b29b      	uxth	r3, r3
 800c546:	4293      	cmp	r3, r2
 800c548:	bf28      	it	cs
 800c54a:	4613      	movcs	r3, r2
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c554:	2b00      	cmp	r3, #0
 800c556:	d047      	beq.n	800c5e8 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c558:	fabb f38b 	clz	r3, fp
 800c55c:	095b      	lsrs	r3, r3, #5
 800c55e:	9302      	str	r3, [sp, #8]
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	ee18 1a10 	vmov	r1, s16
 800c566:	e9cd 4300 	strd	r4, r3, [sp]
 800c56a:	2036      	movs	r0, #54	; 0x36
 800c56c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c570:	f7ff fd52 	bl	800c018 <tcp_pbuf_prealloc>
 800c574:	4606      	mov	r6, r0
 800c576:	2800      	cmp	r0, #0
 800c578:	d057      	beq.n	800c62a <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c57a:	8943      	ldrh	r3, [r0, #10]
 800c57c:	ee18 2a10 	vmov	r2, s16
 800c580:	4293      	cmp	r3, r2
 800c582:	d206      	bcs.n	800c592 <tcp_write+0x2a2>
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <tcp_write+0x2c8>)
 800c586:	4917      	ldr	r1, [pc, #92]	; (800c5e4 <tcp_write+0x2f4>)
 800c588:	480d      	ldr	r0, [pc, #52]	; (800c5c0 <tcp_write+0x2d0>)
 800c58a:	f240 2266 	movw	r2, #614	; 0x266
 800c58e:	f001 fc81 	bl	800de94 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c592:	9b07      	ldr	r3, [sp, #28]
 800c594:	6870      	ldr	r0, [r6, #4]
 800c596:	ee18 2a10 	vmov	r2, s16
 800c59a:	19d9      	adds	r1, r3, r7
 800c59c:	f001 fc4a 	bl	800de34 <memcpy>
    queuelen += pbuf_clen(p);
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7fd fb63 	bl	8009c6c <pbuf_clen>
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	4403      	add	r3, r0
 800c5aa:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c5ac:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800c5ae:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c5b0:	d964      	bls.n	800c67c <tcp_write+0x38c>
      pbuf_free(p);
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	e037      	b.n	800c626 <tcp_write+0x336>
 800c5b6:	bf00      	nop
 800c5b8:	0801d231 	.word	0x0801d231
 800c5bc:	0801d3fe 	.word	0x0801d3fe
 800c5c0:	0801a4e1 	.word	0x0801a4e1
 800c5c4:	0801d415 	.word	0x0801d415
 800c5c8:	0801d446 	.word	0x0801d446
 800c5cc:	0801d530 	.word	0x0801d530
 800c5d0:	0801d480 	.word	0x0801d480
 800c5d4:	0801d4b2 	.word	0x0801d4b2
 800c5d8:	0801d4c9 	.word	0x0801d4c9
 800c5dc:	0801d4e9 	.word	0x0801d4e9
 800c5e0:	0801d507 	.word	0x0801d507
 800c5e4:	0801d55f 	.word	0x0801d55f
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c5e8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c5ec:	b133      	cbz	r3, 800c5fc <tcp_write+0x30c>
 800c5ee:	4b89      	ldr	r3, [pc, #548]	; (800c814 <tcp_write+0x524>)
 800c5f0:	4989      	ldr	r1, [pc, #548]	; (800c818 <tcp_write+0x528>)
 800c5f2:	488a      	ldr	r0, [pc, #552]	; (800c81c <tcp_write+0x52c>)
 800c5f4:	f240 2271 	movw	r2, #625	; 0x271
 800c5f8:	f001 fc4c 	bl	800de94 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c5fc:	ee18 1a10 	vmov	r1, s16
 800c600:	2201      	movs	r2, #1
 800c602:	2036      	movs	r0, #54	; 0x36
 800c604:	f7fd fa46 	bl	8009a94 <pbuf_alloc>
 800c608:	b178      	cbz	r0, 800c62a <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c60a:	9a07      	ldr	r2, [sp, #28]
 800c60c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c60e:	443a      	add	r2, r7
 800c610:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c612:	2100      	movs	r1, #0
 800c614:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c618:	2036      	movs	r0, #54	; 0x36
 800c61a:	f7fd fa3b 	bl	8009a94 <pbuf_alloc>
 800c61e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c620:	4606      	mov	r6, r0
 800c622:	bb38      	cbnz	r0, 800c674 <tcp_write+0x384>
        pbuf_free(p2);
 800c624:	4618      	mov	r0, r3
      pbuf_free(p);
 800c626:	f7fd f9cd 	bl	80099c4 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c62a:	8b63      	ldrh	r3, [r4, #26]
 800c62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c630:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800c632:	f1ba 0f00 	cmp.w	sl, #0
 800c636:	d002      	beq.n	800c63e <tcp_write+0x34e>
    pbuf_free(concat_p);
 800c638:	4650      	mov	r0, sl
 800c63a:	f7fd f9c3 	bl	80099c4 <pbuf_free>
  if (queue != NULL) {
 800c63e:	f1bb 0f00 	cmp.w	fp, #0
 800c642:	d002      	beq.n	800c64a <tcp_write+0x35a>
    tcp_segs_free(queue);
 800c644:	4658      	mov	r0, fp
 800c646:	f7fd fe19 	bl	800a27c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800c64a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f43f ae8d 	beq.w	800c36e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c654:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c656:	2b00      	cmp	r3, #0
 800c658:	f47f ae89 	bne.w	800c36e <tcp_write+0x7e>
 800c65c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f47f ae85 	bne.w	800c36e <tcp_write+0x7e>
 800c664:	4b6b      	ldr	r3, [pc, #428]	; (800c814 <tcp_write+0x524>)
 800c666:	496e      	ldr	r1, [pc, #440]	; (800c820 <tcp_write+0x530>)
 800c668:	486c      	ldr	r0, [pc, #432]	; (800c81c <tcp_write+0x52c>)
 800c66a:	f240 3227 	movw	r2, #807	; 0x327
 800c66e:	f001 fc11 	bl	800de94 <iprintf>
 800c672:	e67c      	b.n	800c36e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800c674:	4619      	mov	r1, r3
 800c676:	f7fd fb1d 	bl	8009cb4 <pbuf_cat>
 800c67a:	e791      	b.n	800c5a0 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c67c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c67e:	2200      	movs	r2, #0
 800c680:	4631      	mov	r1, r6
 800c682:	9200      	str	r2, [sp, #0]
 800c684:	443b      	add	r3, r7
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff fd12 	bl	800c0b0 <tcp_create_segment>
 800c68c:	4606      	mov	r6, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0cb      	beq.n	800c62a <tcp_write+0x33a>
    if (queue == NULL) {
 800c692:	f1bb 0f00 	cmp.w	fp, #0
 800c696:	d03e      	beq.n	800c716 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c69a:	b933      	cbnz	r3, 800c6aa <tcp_write+0x3ba>
 800c69c:	4b5d      	ldr	r3, [pc, #372]	; (800c814 <tcp_write+0x524>)
 800c69e:	4961      	ldr	r1, [pc, #388]	; (800c824 <tcp_write+0x534>)
 800c6a0:	485e      	ldr	r0, [pc, #376]	; (800c81c <tcp_write+0x52c>)
 800c6a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c6a6:	f001 fbf5 	bl	800de94 <iprintf>
      prev_seg->next = seg;
 800c6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ac:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800c6ae:	ee18 3a10 	vmov	r3, s16
 800c6b2:	441f      	add	r7, r3
 800c6b4:	b2bf      	uxth	r7, r7
 800c6b6:	9609      	str	r6, [sp, #36]	; 0x24
  while (pos < len) {
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	429f      	cmp	r7, r3
 800c6bc:	f4ff af3f 	bcc.w	800c53e <tcp_write+0x24e>
 800c6c0:	4657      	mov	r7, sl
 800c6c2:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800c6c4:	b14d      	cbz	r5, 800c6da <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 800c6c6:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c6ca:	f1bb 0f00 	cmp.w	fp, #0
 800c6ce:	d12f      	bne.n	800c730 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 800c6d0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c6d4:	441d      	add	r5, r3
 800c6d6:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800c6da:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c6de:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800c6e2:	2f00      	cmp	r7, #0
 800c6e4:	d03d      	beq.n	800c762 <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c6e6:	f1b8 0f00 	cmp.w	r8, #0
 800c6ea:	d106      	bne.n	800c6fa <tcp_write+0x40a>
 800c6ec:	4b49      	ldr	r3, [pc, #292]	; (800c814 <tcp_write+0x524>)
 800c6ee:	494e      	ldr	r1, [pc, #312]	; (800c828 <tcp_write+0x538>)
 800c6f0:	484a      	ldr	r0, [pc, #296]	; (800c81c <tcp_write+0x52c>)
 800c6f2:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c6f6:	f001 fbcd 	bl	800de94 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800c6fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c6fe:	4639      	mov	r1, r7
 800c700:	f7fd fad8 	bl	8009cb4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c704:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c708:	893a      	ldrh	r2, [r7, #8]
 800c70a:	4413      	add	r3, r2
 800c70c:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800c710:	f8c8 a000 	str.w	sl, [r8]
 800c714:	e04d      	b.n	800c7b2 <tcp_write+0x4c2>
 800c716:	4683      	mov	fp, r0
 800c718:	e7c9      	b.n	800c6ae <tcp_write+0x3be>
  u16_t extendlen = 0;
 800c71a:	46b9      	mov	r9, r7
 800c71c:	462f      	mov	r7, r5
 800c71e:	e6da      	b.n	800c4d6 <tcp_write+0x1e6>
 800c720:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800c722:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c724:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800c726:	46ba      	mov	sl, r7
 800c728:	e6d5      	b.n	800c4d6 <tcp_write+0x1e6>
 800c72a:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800c72c:	46b9      	mov	r9, r7
 800c72e:	e7c9      	b.n	800c6c4 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 800c730:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800c734:	442b      	add	r3, r5
 800c736:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800c73a:	f8db 3000 	ldr.w	r3, [fp]
 800c73e:	b96b      	cbnz	r3, 800c75c <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c740:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c744:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800c748:	9907      	ldr	r1, [sp, #28]
 800c74a:	4418      	add	r0, r3
 800c74c:	462a      	mov	r2, r5
 800c74e:	f001 fb71 	bl	800de34 <memcpy>
        p->len += oversize_used;
 800c752:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800c756:	442b      	add	r3, r5
 800c758:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c75c:	f8db b000 	ldr.w	fp, [fp]
 800c760:	e7b3      	b.n	800c6ca <tcp_write+0x3da>
  } else if (extendlen > 0) {
 800c762:	f1b9 0f00 	cmp.w	r9, #0
 800c766:	d01f      	beq.n	800c7a8 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c768:	f1b8 0f00 	cmp.w	r8, #0
 800c76c:	d002      	beq.n	800c774 <tcp_write+0x484>
 800c76e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c772:	b933      	cbnz	r3, 800c782 <tcp_write+0x492>
 800c774:	4b27      	ldr	r3, [pc, #156]	; (800c814 <tcp_write+0x524>)
 800c776:	492d      	ldr	r1, [pc, #180]	; (800c82c <tcp_write+0x53c>)
 800c778:	4828      	ldr	r0, [pc, #160]	; (800c81c <tcp_write+0x52c>)
 800c77a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c77e:	f001 fb89 	bl	800de94 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c782:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c786:	891a      	ldrh	r2, [r3, #8]
 800c788:	6819      	ldr	r1, [r3, #0]
 800c78a:	444a      	add	r2, r9
 800c78c:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800c78e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c790:	b941      	cbnz	r1, 800c7a4 <tcp_write+0x4b4>
    p->len += extendlen;
 800c792:	895a      	ldrh	r2, [r3, #10]
 800c794:	444a      	add	r2, r9
 800c796:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c798:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c79c:	4499      	add	r9, r3
 800c79e:	f8a8 9008 	strh.w	r9, [r8, #8]
 800c7a2:	e7b5      	b.n	800c710 <tcp_write+0x420>
      p->tot_len += extendlen;
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	e7ee      	b.n	800c786 <tcp_write+0x496>
  if (last_unsent == NULL) {
 800c7a8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ac:	d1b0      	bne.n	800c710 <tcp_write+0x420>
    pcb->unsent = queue;
 800c7ae:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800c7b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c7b4:	9a04      	ldr	r2, [sp, #16]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c7ba:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800c7be:	9b04      	ldr	r3, [sp, #16]
 800c7c0:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800c7c2:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800c7c4:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c7c8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c7cc:	b153      	cbz	r3, 800c7e4 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c7ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c7d0:	b943      	cbnz	r3, 800c7e4 <tcp_write+0x4f4>
 800c7d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c7d4:	b933      	cbnz	r3, 800c7e4 <tcp_write+0x4f4>
 800c7d6:	4b0f      	ldr	r3, [pc, #60]	; (800c814 <tcp_write+0x524>)
 800c7d8:	4911      	ldr	r1, [pc, #68]	; (800c820 <tcp_write+0x530>)
 800c7da:	4810      	ldr	r0, [pc, #64]	; (800c81c <tcp_write+0x52c>)
 800c7dc:	f240 3212 	movw	r2, #786	; 0x312
 800c7e0:	f001 fb58 	bl	800de94 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c7e4:	b176      	cbz	r6, 800c804 <tcp_write+0x514>
 800c7e6:	68f0      	ldr	r0, [r6, #12]
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f43f ad97 	beq.w	800c31c <tcp_write+0x2c>
 800c7ee:	9b08      	ldr	r3, [sp, #32]
 800c7f0:	f013 0402 	ands.w	r4, r3, #2
 800c7f4:	d106      	bne.n	800c804 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c7f6:	8985      	ldrh	r5, [r0, #12]
 800c7f8:	2008      	movs	r0, #8
 800c7fa:	f7fc fb7d 	bl	8008ef8 <lwip_htons>
 800c7fe:	68f3      	ldr	r3, [r6, #12]
 800c800:	4328      	orrs	r0, r5
 800c802:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800c804:	2000      	movs	r0, #0
 800c806:	e589      	b.n	800c31c <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c808:	f04f 0b00 	mov.w	fp, #0
 800c80c:	e70d      	b.n	800c62a <tcp_write+0x33a>
    return ERR_CONN;
 800c80e:	f06f 000a 	mvn.w	r0, #10
 800c812:	e583      	b.n	800c31c <tcp_write+0x2c>
 800c814:	0801d231 	.word	0x0801d231
 800c818:	0801d59d 	.word	0x0801d59d
 800c81c:	0801a4e1 	.word	0x0801a4e1
 800c820:	0801d629 	.word	0x0801d629
 800c824:	0801d5ab 	.word	0x0801d5ab
 800c828:	0801d5bc 	.word	0x0801d5bc
 800c82c:	0801d5f4 	.word	0x0801d5f4

0800c830 <tcp_split_unsent_seg>:
{
 800c830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c836:	4606      	mov	r6, r0
 800c838:	b930      	cbnz	r0, 800c848 <tcp_split_unsent_seg+0x18>
 800c83a:	4b5d      	ldr	r3, [pc, #372]	; (800c9b0 <tcp_split_unsent_seg+0x180>)
 800c83c:	495d      	ldr	r1, [pc, #372]	; (800c9b4 <tcp_split_unsent_seg+0x184>)
 800c83e:	485e      	ldr	r0, [pc, #376]	; (800c9b8 <tcp_split_unsent_seg+0x188>)
 800c840:	f240 324b 	movw	r2, #843	; 0x34b
 800c844:	f001 fb26 	bl	800de94 <iprintf>
  useg = pcb->unsent;
 800c848:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800c84a:	b914      	cbnz	r4, 800c852 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295
 800c850:	e009      	b.n	800c866 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800c852:	b95d      	cbnz	r5, 800c86c <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c854:	4b56      	ldr	r3, [pc, #344]	; (800c9b0 <tcp_split_unsent_seg+0x180>)
 800c856:	4959      	ldr	r1, [pc, #356]	; (800c9bc <tcp_split_unsent_seg+0x18c>)
 800c858:	4857      	ldr	r0, [pc, #348]	; (800c9b8 <tcp_split_unsent_seg+0x188>)
 800c85a:	f240 3253 	movw	r2, #851	; 0x353
 800c85e:	f001 fb19 	bl	800de94 <iprintf>
    return ERR_VAL;
 800c862:	f06f 0005 	mvn.w	r0, #5
}
 800c866:	b003      	add	sp, #12
 800c868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800c86c:	8923      	ldrh	r3, [r4, #8]
 800c86e:	42ab      	cmp	r3, r5
 800c870:	d801      	bhi.n	800c876 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800c872:	2000      	movs	r0, #0
 800c874:	e7f7      	b.n	800c866 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c876:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800c878:	42ab      	cmp	r3, r5
 800c87a:	d206      	bcs.n	800c88a <tcp_split_unsent_seg+0x5a>
 800c87c:	4b4c      	ldr	r3, [pc, #304]	; (800c9b0 <tcp_split_unsent_seg+0x180>)
 800c87e:	4950      	ldr	r1, [pc, #320]	; (800c9c0 <tcp_split_unsent_seg+0x190>)
 800c880:	484d      	ldr	r0, [pc, #308]	; (800c9b8 <tcp_split_unsent_seg+0x188>)
 800c882:	f240 325b 	movw	r2, #859	; 0x35b
 800c886:	f001 fb05 	bl	800de94 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c88a:	8923      	ldrh	r3, [r4, #8]
 800c88c:	b933      	cbnz	r3, 800c89c <tcp_split_unsent_seg+0x6c>
 800c88e:	4b48      	ldr	r3, [pc, #288]	; (800c9b0 <tcp_split_unsent_seg+0x180>)
 800c890:	494c      	ldr	r1, [pc, #304]	; (800c9c4 <tcp_split_unsent_seg+0x194>)
 800c892:	4849      	ldr	r0, [pc, #292]	; (800c9b8 <tcp_split_unsent_seg+0x188>)
 800c894:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c898:	f001 fafc 	bl	800de94 <iprintf>
  optflags = useg->flags;
 800c89c:	f894 b00a 	ldrb.w	fp, [r4, #10]
  remainder = useg->len - split;
 800c8a0:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c8a4:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800c8a8:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c8ac:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800c8b0:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c8b4:	fa17 f181 	uxtah	r1, r7, r1
 800c8b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c8bc:	b289      	uxth	r1, r1
 800c8be:	2036      	movs	r0, #54	; 0x36
 800c8c0:	f7fd f8e8 	bl	8009a94 <pbuf_alloc>
  if (p == NULL) {
 800c8c4:	4681      	mov	r9, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d0c0      	beq.n	800c84c <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800c8ca:	6860      	ldr	r0, [r4, #4]
 800c8cc:	8922      	ldrh	r2, [r4, #8]
 800c8ce:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c8d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800c8d4:	1a9b      	subs	r3, r3, r2
 800c8d6:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4642      	mov	r2, r8
 800c8dc:	4439      	add	r1, r7
 800c8de:	f7fd faaf 	bl	8009e40 <pbuf_copy_partial>
 800c8e2:	4540      	cmp	r0, r8
 800c8e4:	d15f      	bne.n	800c9a6 <tcp_split_unsent_seg+0x176>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c8e6:	68e3      	ldr	r3, [r4, #12]
 800c8e8:	8998      	ldrh	r0, [r3, #12]
 800c8ea:	f7fc fb05 	bl	8008ef8 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800c8ee:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c8f2:	b2c7      	uxtb	r7, r0
 800c8f4:	bf0e      	itee	eq
 800c8f6:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c8fa:	f007 0737 	andne.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c8fe:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800c902:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c904:	68e3      	ldr	r3, [r4, #12]
 800c906:	6858      	ldr	r0, [r3, #4]
    remainder_flags |= TCP_FIN;
 800c908:	bf44      	itt	mi
 800c90a:	f048 0801 	orrmi.w	r8, r8, #1
    split_flags &= ~TCP_FIN;
 800c90e:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c912:	f7fc faf4 	bl	8008efe <lwip_htonl>
 800c916:	4642      	mov	r2, r8
 800c918:	182b      	adds	r3, r5, r0
 800c91a:	f8cd b000 	str.w	fp, [sp]
 800c91e:	4649      	mov	r1, r9
 800c920:	4630      	mov	r0, r6
 800c922:	f7ff fbc5 	bl	800c0b0 <tcp_create_segment>
  if (seg == NULL) {
 800c926:	4680      	mov	r8, r0
 800c928:	2800      	cmp	r0, #0
 800c92a:	d03c      	beq.n	800c9a6 <tcp_split_unsent_seg+0x176>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c92c:	6860      	ldr	r0, [r4, #4]
 800c92e:	f7fd f99d 	bl	8009c6c <pbuf_clen>
 800c932:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c936:	1a18      	subs	r0, r3, r0
 800c938:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c93c:	6860      	ldr	r0, [r4, #4]
 800c93e:	8901      	ldrh	r1, [r0, #8]
 800c940:	eba5 050a 	sub.w	r5, r5, sl
 800c944:	fa11 f185 	uxtah	r1, r1, r5
 800c948:	b289      	uxth	r1, r1
 800c94a:	f7fd f91f 	bl	8009b8c <pbuf_realloc>
  useg->len -= remainder;
 800c94e:	8923      	ldrh	r3, [r4, #8]
 800c950:	fa1f f985 	uxth.w	r9, r5
 800c954:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c956:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800c958:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c95c:	4638      	mov	r0, r7
 800c95e:	899d      	ldrh	r5, [r3, #12]
 800c960:	f7fc faca 	bl	8008ef8 <lwip_htons>
 800c964:	68e3      	ldr	r3, [r4, #12]
 800c966:	4328      	orrs	r0, r5
 800c968:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c96a:	6860      	ldr	r0, [r4, #4]
 800c96c:	f7fd f97e 	bl	8009c6c <pbuf_clen>
 800c970:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c974:	4418      	add	r0, r3
 800c976:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c97a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c97e:	f7fd f975 	bl	8009c6c <pbuf_clen>
 800c982:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c986:	4418      	add	r0, r3
  seg->next = useg->next;
 800c988:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c98a:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800c98e:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800c992:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800c996:	f8d8 0000 	ldr.w	r0, [r8]
 800c99a:	2800      	cmp	r0, #0
 800c99c:	f47f af69 	bne.w	800c872 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800c9a0:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800c9a4:	e75f      	b.n	800c866 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	f7fd f80c 	bl	80099c4 <pbuf_free>
 800c9ac:	e74e      	b.n	800c84c <tcp_split_unsent_seg+0x1c>
 800c9ae:	bf00      	nop
 800c9b0:	0801d231 	.word	0x0801d231
 800c9b4:	0801d647 	.word	0x0801d647
 800c9b8:	0801a4e1 	.word	0x0801a4e1
 800c9bc:	0801d669 	.word	0x0801d669
 800c9c0:	0801d68b 	.word	0x0801d68b
 800c9c4:	0801d698 	.word	0x0801d698

0800c9c8 <tcp_enqueue_flags>:
{
 800c9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c9cc:	f011 0803 	ands.w	r8, r1, #3
{
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c9d4:	d106      	bne.n	800c9e4 <tcp_enqueue_flags+0x1c>
 800c9d6:	4b3e      	ldr	r3, [pc, #248]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800c9d8:	493e      	ldr	r1, [pc, #248]	; (800cad4 <tcp_enqueue_flags+0x10c>)
 800c9da:	483f      	ldr	r0, [pc, #252]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800c9dc:	f240 4211 	movw	r2, #1041	; 0x411
 800c9e0:	f001 fa58 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c9e4:	b934      	cbnz	r4, 800c9f4 <tcp_enqueue_flags+0x2c>
 800c9e6:	4b3a      	ldr	r3, [pc, #232]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800c9e8:	493c      	ldr	r1, [pc, #240]	; (800cadc <tcp_enqueue_flags+0x114>)
 800c9ea:	483b      	ldr	r0, [pc, #236]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800c9ec:	f240 4213 	movw	r2, #1043	; 0x413
 800c9f0:	f001 fa50 	bl	800de94 <iprintf>
  if (flags & TCP_SYN) {
 800c9f4:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c9f8:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800c9fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca00:	4649      	mov	r1, r9
 800ca02:	2036      	movs	r0, #54	; 0x36
 800ca04:	f7fd f846 	bl	8009a94 <pbuf_alloc>
 800ca08:	4605      	mov	r5, r0
 800ca0a:	b940      	cbnz	r0, 800ca1e <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca0c:	8b63      	ldrh	r3, [r4, #26]
 800ca0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca12:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ca18:	b003      	add	sp, #12
 800ca1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ca1e:	8943      	ldrh	r3, [r0, #10]
 800ca20:	454b      	cmp	r3, r9
 800ca22:	d206      	bcs.n	800ca32 <tcp_enqueue_flags+0x6a>
 800ca24:	4b2a      	ldr	r3, [pc, #168]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800ca26:	492e      	ldr	r1, [pc, #184]	; (800cae0 <tcp_enqueue_flags+0x118>)
 800ca28:	482b      	ldr	r0, [pc, #172]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800ca2a:	f240 4239 	movw	r2, #1081	; 0x439
 800ca2e:	f001 fa31 	bl	800de94 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ca32:	9700      	str	r7, [sp, #0]
 800ca34:	4629      	mov	r1, r5
 800ca36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ca38:	4632      	mov	r2, r6
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f7ff fb38 	bl	800c0b0 <tcp_create_segment>
 800ca40:	4605      	mov	r5, r0
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d0e2      	beq.n	800ca0c <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ca46:	68c3      	ldr	r3, [r0, #12]
 800ca48:	079a      	lsls	r2, r3, #30
 800ca4a:	d006      	beq.n	800ca5a <tcp_enqueue_flags+0x92>
 800ca4c:	4b20      	ldr	r3, [pc, #128]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800ca4e:	4925      	ldr	r1, [pc, #148]	; (800cae4 <tcp_enqueue_flags+0x11c>)
 800ca50:	4821      	ldr	r0, [pc, #132]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800ca52:	f240 4242 	movw	r2, #1090	; 0x442
 800ca56:	f001 fa1d 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ca5a:	892b      	ldrh	r3, [r5, #8]
 800ca5c:	b133      	cbz	r3, 800ca6c <tcp_enqueue_flags+0xa4>
 800ca5e:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800ca60:	4921      	ldr	r1, [pc, #132]	; (800cae8 <tcp_enqueue_flags+0x120>)
 800ca62:	481d      	ldr	r0, [pc, #116]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800ca64:	f240 4243 	movw	r2, #1091	; 0x443
 800ca68:	f001 fa14 	bl	800de94 <iprintf>
  if (pcb->unsent == NULL) {
 800ca6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca6e:	bb4b      	cbnz	r3, 800cac4 <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 800ca70:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ca78:	f1b8 0f00 	cmp.w	r8, #0
 800ca7c:	d002      	beq.n	800ca84 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800ca7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ca80:	3301      	adds	r3, #1
 800ca82:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800ca84:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 800ca86:	bf48      	it	mi
 800ca88:	8b63      	ldrhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca8a:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800ca8c:	bf44      	itt	mi
 800ca8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ca92:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ca94:	f7fd f8ea 	bl	8009c6c <pbuf_clen>
 800ca98:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800ca9c:	4418      	add	r0, r3
 800ca9e:	b280      	uxth	r0, r0
 800caa0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d0b7      	beq.n	800ca18 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800caa8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800caaa:	b948      	cbnz	r0, 800cac0 <tcp_enqueue_flags+0xf8>
 800caac:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800caae:	2c00      	cmp	r4, #0
 800cab0:	d1b2      	bne.n	800ca18 <tcp_enqueue_flags+0x50>
 800cab2:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <tcp_enqueue_flags+0x108>)
 800cab4:	490d      	ldr	r1, [pc, #52]	; (800caec <tcp_enqueue_flags+0x124>)
 800cab6:	4808      	ldr	r0, [pc, #32]	; (800cad8 <tcp_enqueue_flags+0x110>)
 800cab8:	f240 4265 	movw	r2, #1125	; 0x465
 800cabc:	f001 f9ea 	bl	800de94 <iprintf>
  return ERR_OK;
 800cac0:	2000      	movs	r0, #0
 800cac2:	e7a9      	b.n	800ca18 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cac4:	461a      	mov	r2, r3
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1fb      	bne.n	800cac4 <tcp_enqueue_flags+0xfc>
    useg->next = seg;
 800cacc:	6015      	str	r5, [r2, #0]
 800cace:	e7d0      	b.n	800ca72 <tcp_enqueue_flags+0xaa>
 800cad0:	0801d231 	.word	0x0801d231
 800cad4:	0801d6a6 	.word	0x0801d6a6
 800cad8:	0801a4e1 	.word	0x0801a4e1
 800cadc:	0801d6fb 	.word	0x0801d6fb
 800cae0:	0801d71a 	.word	0x0801d71a
 800cae4:	0801d753 	.word	0x0801d753
 800cae8:	0801d76b 	.word	0x0801d76b
 800caec:	0801d795 	.word	0x0801d795

0800caf0 <tcp_send_fin>:
{
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800caf2:	4604      	mov	r4, r0
 800caf4:	b930      	cbnz	r0, 800cb04 <tcp_send_fin+0x14>
 800caf6:	4b13      	ldr	r3, [pc, #76]	; (800cb44 <tcp_send_fin+0x54>)
 800caf8:	4913      	ldr	r1, [pc, #76]	; (800cb48 <tcp_send_fin+0x58>)
 800cafa:	4814      	ldr	r0, [pc, #80]	; (800cb4c <tcp_send_fin+0x5c>)
 800cafc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cb00:	f001 f9c8 	bl	800de94 <iprintf>
  if (pcb->unsent != NULL) {
 800cb04:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800cb06:	b14d      	cbz	r5, 800cb1c <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cb08:	462f      	mov	r7, r5
 800cb0a:	682d      	ldr	r5, [r5, #0]
 800cb0c:	2d00      	cmp	r5, #0
 800cb0e:	d1fb      	bne.n	800cb08 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	8998      	ldrh	r0, [r3, #12]
 800cb14:	f7fc f9f0 	bl	8008ef8 <lwip_htons>
 800cb18:	0743      	lsls	r3, r0, #29
 800cb1a:	d005      	beq.n	800cb28 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	2101      	movs	r1, #1
}
 800cb20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cb24:	f7ff bf50 	b.w	800c9c8 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	899e      	ldrh	r6, [r3, #12]
 800cb2e:	f7fc f9e3 	bl	8008ef8 <lwip_htons>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	4330      	orrs	r0, r6
 800cb36:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cb38:	8b63      	ldrh	r3, [r4, #26]
 800cb3a:	f043 0320 	orr.w	r3, r3, #32
 800cb3e:	8363      	strh	r3, [r4, #26]
}
 800cb40:	4628      	mov	r0, r5
 800cb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb44:	0801d231 	.word	0x0801d231
 800cb48:	0801d7bd 	.word	0x0801d7bd
 800cb4c:	0801a4e1 	.word	0x0801a4e1

0800cb50 <tcp_rexmit_rto_prepare>:
{
 800cb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cb54:	4604      	mov	r4, r0
 800cb56:	b930      	cbnz	r0, 800cb66 <tcp_rexmit_rto_prepare+0x16>
 800cb58:	4b1c      	ldr	r3, [pc, #112]	; (800cbcc <tcp_rexmit_rto_prepare+0x7c>)
 800cb5a:	491d      	ldr	r1, [pc, #116]	; (800cbd0 <tcp_rexmit_rto_prepare+0x80>)
 800cb5c:	481d      	ldr	r0, [pc, #116]	; (800cbd4 <tcp_rexmit_rto_prepare+0x84>)
 800cb5e:	f240 6263 	movw	r2, #1635	; 0x663
 800cb62:	f001 f997 	bl	800de94 <iprintf>
  if (pcb->unacked == NULL) {
 800cb66:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800cb68:	b945      	cbnz	r5, 800cb7c <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800cb6a:	f06f 0005 	mvn.w	r0, #5
}
 800cb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800cb72:	f7ff fa3b 	bl	800bfec <tcp_output_segment_busy>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d1f7      	bne.n	800cb6a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cb7a:	682d      	ldr	r5, [r5, #0]
 800cb7c:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800cb7e:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1f6      	bne.n	800cb72 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800cb84:	f7ff fa32 	bl	800bfec <tcp_output_segment_busy>
 800cb88:	4606      	mov	r6, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1ed      	bne.n	800cb6a <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800cb8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cb90:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800cb92:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800cb94:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800cb98:	8b63      	ldrh	r3, [r4, #26]
 800cb9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb9e:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cba0:	68eb      	ldr	r3, [r5, #12]
 800cba2:	6858      	ldr	r0, [r3, #4]
 800cba4:	f7fc f9ab 	bl	8008efe <lwip_htonl>
 800cba8:	68eb      	ldr	r3, [r5, #12]
 800cbaa:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800cbae:	4607      	mov	r7, r0
 800cbb0:	8998      	ldrh	r0, [r3, #12]
 800cbb2:	f7fc f9a1 	bl	8008ef8 <lwip_htons>
 800cbb6:	f010 0303 	ands.w	r3, r0, #3
 800cbba:	bf18      	it	ne
 800cbbc:	2301      	movne	r3, #1
 800cbbe:	4447      	add	r7, r8
 800cbc0:	443b      	add	r3, r7
 800cbc2:	64e3      	str	r3, [r4, #76]	; 0x4c
  pcb->rttest = 0;
 800cbc4:	6366      	str	r6, [r4, #52]	; 0x34
  return ERR_OK;
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	e7d1      	b.n	800cb6e <tcp_rexmit_rto_prepare+0x1e>
 800cbca:	bf00      	nop
 800cbcc:	0801d231 	.word	0x0801d231
 800cbd0:	0801d7d7 	.word	0x0801d7d7
 800cbd4:	0801a4e1 	.word	0x0801a4e1

0800cbd8 <tcp_rexmit>:
{
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cbda:	4604      	mov	r4, r0
 800cbdc:	b930      	cbnz	r0, 800cbec <tcp_rexmit+0x14>
 800cbde:	4b1c      	ldr	r3, [pc, #112]	; (800cc50 <tcp_rexmit+0x78>)
 800cbe0:	491c      	ldr	r1, [pc, #112]	; (800cc54 <tcp_rexmit+0x7c>)
 800cbe2:	481d      	ldr	r0, [pc, #116]	; (800cc58 <tcp_rexmit+0x80>)
 800cbe4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cbe8:	f001 f954 	bl	800de94 <iprintf>
  if (pcb->unacked == NULL) {
 800cbec:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800cbee:	b915      	cbnz	r5, 800cbf6 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800cbf0:	f06f 0005 	mvn.w	r0, #5
}
 800cbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7ff f9f8 	bl	800bfec <tcp_output_segment_busy>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d1f7      	bne.n	800cbf0 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	6723      	str	r3, [r4, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800cc04:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  while (*cur_seg &&
 800cc08:	6833      	ldr	r3, [r6, #0]
 800cc0a:	b993      	cbnz	r3, 800cc32 <tcp_rexmit+0x5a>
  seg->next = *cur_seg;
 800cc0c:	6833      	ldr	r3, [r6, #0]
 800cc0e:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800cc10:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	b90b      	cbnz	r3, 800cc1a <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800cc16:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800cc1a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800cc1e:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800cc20:	bf18      	it	ne
 800cc22:	3301      	addne	r3, #1
  pcb->rttest = 0;
 800cc24:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
 800cc28:	bf18      	it	ne
 800cc2a:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800cc2e:	6360      	str	r0, [r4, #52]	; 0x34
  return ERR_OK;
 800cc30:	e7e0      	b.n	800cbf4 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	6858      	ldr	r0, [r3, #4]
 800cc36:	f7fc f962 	bl	8008efe <lwip_htonl>
 800cc3a:	68eb      	ldr	r3, [r5, #12]
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	6858      	ldr	r0, [r3, #4]
 800cc40:	f7fc f95d 	bl	8008efe <lwip_htonl>
 800cc44:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800cc46:	2800      	cmp	r0, #0
 800cc48:	dae0      	bge.n	800cc0c <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800cc4a:	6836      	ldr	r6, [r6, #0]
 800cc4c:	e7dc      	b.n	800cc08 <tcp_rexmit+0x30>
 800cc4e:	bf00      	nop
 800cc50:	0801d231 	.word	0x0801d231
 800cc54:	0801d7fb 	.word	0x0801d7fb
 800cc58:	0801a4e1 	.word	0x0801a4e1

0800cc5c <tcp_rexmit_fast>:
{
 800cc5c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cc5e:	4604      	mov	r4, r0
 800cc60:	b930      	cbnz	r0, 800cc70 <tcp_rexmit_fast+0x14>
 800cc62:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <tcp_rexmit_fast+0x5c>)
 800cc64:	4915      	ldr	r1, [pc, #84]	; (800ccbc <tcp_rexmit_fast+0x60>)
 800cc66:	4816      	ldr	r0, [pc, #88]	; (800ccc0 <tcp_rexmit_fast+0x64>)
 800cc68:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cc6c:	f001 f912 	bl	800de94 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cc70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cc72:	b303      	cbz	r3, 800ccb6 <tcp_rexmit_fast+0x5a>
 800cc74:	8b63      	ldrh	r3, [r4, #26]
 800cc76:	075b      	lsls	r3, r3, #29
 800cc78:	d41d      	bmi.n	800ccb6 <tcp_rexmit_fast+0x5a>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f7ff ffac 	bl	800cbd8 <tcp_rexmit>
 800cc80:	b9c8      	cbnz	r0, 800ccb6 <tcp_rexmit_fast+0x5a>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cc82:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800cc86:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800cc8a:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	bf28      	it	cs
 800cc90:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cc92:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800cc94:	005d      	lsls	r5, r3, #1
        pcb->ssthresh = 2 * pcb->mss;
 800cc96:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cc9a:	ea4f 0261 	mov.w	r2, r1, asr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cc9e:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800cca0:	bf88      	it	hi
 800cca2:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cca4:	4413      	add	r3, r2
 800cca6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ccaa:	8b63      	ldrh	r3, [r4, #26]
        pcb->ssthresh = 2 * pcb->mss;
 800ccac:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800ccb0:	f043 0304 	orr.w	r3, r3, #4
 800ccb4:	8363      	strh	r3, [r4, #26]
}
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	0801d231 	.word	0x0801d231
 800ccbc:	0801d813 	.word	0x0801d813
 800ccc0:	0801a4e1 	.word	0x0801a4e1

0800ccc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ccc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cccc:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800ccd0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	460f      	mov	r7, r1
 800ccd8:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ccda:	461d      	mov	r5, r3
 800ccdc:	b933      	cbnz	r3, 800ccec <tcp_rst+0x28>
 800ccde:	4b18      	ldr	r3, [pc, #96]	; (800cd40 <tcp_rst+0x7c>)
 800cce0:	4918      	ldr	r1, [pc, #96]	; (800cd44 <tcp_rst+0x80>)
 800cce2:	4819      	ldr	r0, [pc, #100]	; (800cd48 <tcp_rst+0x84>)
 800cce4:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cce8:	f001 f8d4 	bl	800de94 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ccec:	f1b8 0f00 	cmp.w	r8, #0
 800ccf0:	d106      	bne.n	800cd00 <tcp_rst+0x3c>
 800ccf2:	4b13      	ldr	r3, [pc, #76]	; (800cd40 <tcp_rst+0x7c>)
 800ccf4:	4915      	ldr	r1, [pc, #84]	; (800cd4c <tcp_rst+0x88>)
 800ccf6:	4814      	ldr	r0, [pc, #80]	; (800cd48 <tcp_rst+0x84>)
 800ccf8:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ccfc:	f001 f8ca 	bl	800de94 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cd00:	4638      	mov	r0, r7
 800cd02:	f7fc f8fc 	bl	8008efe <lwip_htonl>
 800cd06:	2314      	movs	r3, #20
 800cd08:	f646 010b 	movw	r1, #26635	; 0x680b
 800cd0c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800cd10:	4602      	mov	r2, r0
 800cd12:	f8cd a000 	str.w	sl, [sp]
 800cd16:	4620      	mov	r0, r4
 800cd18:	464b      	mov	r3, r9
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	f7ff fa38 	bl	800c190 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cd20:	4604      	mov	r4, r0
 800cd22:	b150      	cbz	r0, 800cd3a <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd24:	f7ff fa9c 	bl	800c260 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cd28:	4643      	mov	r3, r8
 800cd2a:	462a      	mov	r2, r5
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cd30:	b004      	add	sp, #16
 800cd32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cd36:	f7ff baa3 	b.w	800c280 <tcp_output_control_segment>
}
 800cd3a:	b004      	add	sp, #16
 800cd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd40:	0801d231 	.word	0x0801d231
 800cd44:	0801d830 	.word	0x0801d830
 800cd48:	0801a4e1 	.word	0x0801a4e1
 800cd4c:	0801d84a 	.word	0x0801d84a

0800cd50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cd50:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cd52:	4604      	mov	r4, r0
 800cd54:	b930      	cbnz	r0, 800cd64 <tcp_send_empty_ack+0x14>
 800cd56:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <tcp_send_empty_ack+0x58>)
 800cd58:	4914      	ldr	r1, [pc, #80]	; (800cdac <tcp_send_empty_ack+0x5c>)
 800cd5a:	4815      	ldr	r0, [pc, #84]	; (800cdb0 <tcp_send_empty_ack+0x60>)
 800cd5c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cd60:	f001 f898 	bl	800de94 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cd64:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800cd66:	f7fc f8ca 	bl	8008efe <lwip_htonl>
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7ff fa50 	bl	800c214 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800cd74:	4605      	mov	r5, r0
 800cd76:	b930      	cbnz	r0, 800cd86 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd78:	8b63      	ldrh	r3, [r4, #26]
 800cd7a:	f043 0303 	orr.w	r3, r3, #3
 800cd7e:	8363      	strh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cd80:	f06f 0001 	mvn.w	r0, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cd86:	f7ff fa6b 	bl	800c260 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd8a:	1d23      	adds	r3, r4, #4
 800cd8c:	4622      	mov	r2, r4
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4620      	mov	r0, r4
 800cd92:	f7ff fa75 	bl	800c280 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800cd96:	8b63      	ldrh	r3, [r4, #26]
 800cd98:	b118      	cbz	r0, 800cda2 <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd9a:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd9e:	8363      	strh	r3, [r4, #26]
 800cda0:	e7f0      	b.n	800cd84 <tcp_send_empty_ack+0x34>
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	e7fa      	b.n	800cd9e <tcp_send_empty_ack+0x4e>
 800cda8:	0801d231 	.word	0x0801d231
 800cdac:	0801d865 	.word	0x0801d865
 800cdb0:	0801a4e1 	.word	0x0801a4e1

0800cdb4 <tcp_output>:
{
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cdb8:	4604      	mov	r4, r0
{
 800cdba:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cdbc:	b930      	cbnz	r0, 800cdcc <tcp_output+0x18>
 800cdbe:	4b8f      	ldr	r3, [pc, #572]	; (800cffc <tcp_output+0x248>)
 800cdc0:	498f      	ldr	r1, [pc, #572]	; (800d000 <tcp_output+0x24c>)
 800cdc2:	4890      	ldr	r0, [pc, #576]	; (800d004 <tcp_output+0x250>)
 800cdc4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800cdc8:	f001 f864 	bl	800de94 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cdcc:	7d23      	ldrb	r3, [r4, #20]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d106      	bne.n	800cde0 <tcp_output+0x2c>
 800cdd2:	4b8a      	ldr	r3, [pc, #552]	; (800cffc <tcp_output+0x248>)
 800cdd4:	498c      	ldr	r1, [pc, #560]	; (800d008 <tcp_output+0x254>)
 800cdd6:	488b      	ldr	r0, [pc, #556]	; (800d004 <tcp_output+0x250>)
 800cdd8:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800cddc:	f001 f85a 	bl	800de94 <iprintf>
  if (tcp_input_pcb == pcb) {
 800cde0:	4b8a      	ldr	r3, [pc, #552]	; (800d00c <tcp_output+0x258>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	42a3      	cmp	r3, r4
 800cde6:	f000 8171 	beq.w	800d0cc <tcp_output+0x318>
  seg = pcb->unsent;
 800cdea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800cdec:	b94d      	cbnz	r5, 800ce02 <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800cdee:	8b63      	ldrh	r3, [r4, #26]
 800cdf0:	0798      	lsls	r0, r3, #30
 800cdf2:	f140 8167 	bpl.w	800d0c4 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800cdf6:	4620      	mov	r0, r4
}
 800cdf8:	b007      	add	sp, #28
 800cdfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800cdfe:	f7ff bfa7 	b.w	800cd50 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ce02:	7a20      	ldrb	r0, [r4, #8]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce04:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800ce08:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ce0c:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ce10:	b340      	cbz	r0, 800ce64 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800ce12:	f7fc fd1d 	bl	8009850 <netif_get_by_index>
    return ip_route(src, dst);
 800ce16:	4607      	mov	r7, r0
  if (netif == NULL) {
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f000 8170 	beq.w	800d0fe <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	b90b      	cbnz	r3, 800ce26 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ce22:	6843      	ldr	r3, [r0, #4]
 800ce24:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce26:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce28:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce2a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ce2c:	bf28      	it	cs
 800ce2e:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ce30:	f7fc f865 	bl	8008efe <lwip_htonl>
 800ce34:	892b      	ldrh	r3, [r5, #8]
 800ce36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ce38:	1a9b      	subs	r3, r3, r2
 800ce3a:	4418      	add	r0, r3
 800ce3c:	4540      	cmp	r0, r8
 800ce3e:	d915      	bls.n	800ce6c <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ce40:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800ce44:	4543      	cmp	r3, r8
 800ce46:	d1d2      	bne.n	800cdee <tcp_output+0x3a>
 800ce48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1cf      	bne.n	800cdee <tcp_output+0x3a>
 800ce4e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1cb      	bne.n	800cdee <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800ce56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce5a:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
      pcb->persist_probe = 0;
 800ce5e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800ce62:	e7c4      	b.n	800cdee <tcp_output+0x3a>
    return ip_route(src, dst);
 800ce64:	4648      	mov	r0, r9
 800ce66:	f7fb fad9 	bl	800841c <ip4_route>
 800ce6a:	e7d4      	b.n	800ce16 <tcp_output+0x62>
  useg = pcb->unacked;
 800ce6c:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800ce74:	b126      	cbz	r6, 800ce80 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800ce76:	4633      	mov	r3, r6
 800ce78:	6836      	ldr	r6, [r6, #0]
 800ce7a:	2e00      	cmp	r6, #0
 800ce7c:	d1fb      	bne.n	800ce76 <tcp_output+0xc2>
 800ce7e:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800ce80:	f8df a178 	ldr.w	sl, [pc, #376]	; 800cffc <tcp_output+0x248>
 800ce84:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800d004 <tcp_output+0x250>
 800ce88:	e0de      	b.n	800d048 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800ce8a:	7d23      	ldrb	r3, [r4, #20]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d009      	beq.n	800cea4 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ce90:	68eb      	ldr	r3, [r5, #12]
 800ce92:	2010      	movs	r0, #16
 800ce94:	899b      	ldrh	r3, [r3, #12]
 800ce96:	9304      	str	r3, [sp, #16]
 800ce98:	f7fc f82e 	bl	8008ef8 <lwip_htons>
 800ce9c:	9b04      	ldr	r3, [sp, #16]
 800ce9e:	68ea      	ldr	r2, [r5, #12]
 800cea0:	4318      	orrs	r0, r3
 800cea2:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800cea4:	4628      	mov	r0, r5
 800cea6:	f7ff f8a1 	bl	800bfec <tcp_output_segment_busy>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d16f      	bne.n	800cf8e <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ceae:	68eb      	ldr	r3, [r5, #12]
 800ceb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	f7fc f823 	bl	8008efe <lwip_htonl>
 800ceb8:	9b04      	ldr	r3, [sp, #16]
 800ceba:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cebc:	68eb      	ldr	r3, [r5, #12]
 800cebe:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	f7fc f819 	bl	8008ef8 <lwip_htons>
 800cec6:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cec8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ceca:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cece:	4413      	add	r3, r2
 800ced0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ced2:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ced4:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ced6:	07d2      	lsls	r2, r2, #31
 800ced8:	d449      	bmi.n	800cf6e <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ceda:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800cede:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800cee2:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800cee4:	bfbc      	itt	lt
 800cee6:	2300      	movlt	r3, #0
 800cee8:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800ceea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceec:	b94b      	cbnz	r3, 800cf02 <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800ceee:	4948      	ldr	r1, [pc, #288]	; (800d010 <tcp_output+0x25c>)
 800cef0:	68eb      	ldr	r3, [r5, #12]
 800cef2:	6809      	ldr	r1, [r1, #0]
 800cef4:	9204      	str	r2, [sp, #16]
 800cef6:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cef8:	6858      	ldr	r0, [r3, #4]
 800cefa:	f7fc f800 	bl	8008efe <lwip_htonl>
 800cefe:	9a04      	ldr	r2, [sp, #16]
 800cf00:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cf02:	6869      	ldr	r1, [r5, #4]
 800cf04:	68eb      	ldr	r3, [r5, #12]
 800cf06:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800cf08:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  seg->p->payload = seg->tcphdr;
 800cf0c:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cf0e:	1a18      	subs	r0, r3, r0
 800cf10:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800cf12:	ebac 0c00 	sub.w	ip, ip, r0
 800cf16:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800cf1a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800cf1e:	ebac 0000 	sub.w	r0, ip, r0
 800cf22:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800cf24:	2100      	movs	r1, #0
 800cf26:	7419      	strb	r1, [r3, #16]
 800cf28:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cf2a:	7aa9      	ldrb	r1, [r5, #10]
 800cf2c:	0089      	lsls	r1, r1, #2
 800cf2e:	f001 0104 	and.w	r1, r1, #4
 800cf32:	3114      	adds	r1, #20
 800cf34:	440b      	add	r3, r1
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d006      	beq.n	800cf48 <tcp_output+0x194>
 800cf3a:	4936      	ldr	r1, [pc, #216]	; (800d014 <tcp_output+0x260>)
 800cf3c:	4653      	mov	r3, sl
 800cf3e:	f240 621c 	movw	r2, #1564	; 0x61c
 800cf42:	4658      	mov	r0, fp
 800cf44:	f000 ffa6 	bl	800de94 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cf48:	2306      	movs	r3, #6
 800cf4a:	9702      	str	r7, [sp, #8]
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	7aa3      	ldrb	r3, [r4, #10]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	7ae3      	ldrb	r3, [r4, #11]
 800cf54:	6868      	ldr	r0, [r5, #4]
 800cf56:	464a      	mov	r2, r9
 800cf58:	4621      	mov	r1, r4
 800cf5a:	f7fb fbcb 	bl	80086f4 <ip4_output_if>
    if (err != ERR_OK) {
 800cf5e:	b1b0      	cbz	r0, 800cf8e <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf60:	8b63      	ldrh	r3, [r4, #26]
 800cf62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf66:	8363      	strh	r3, [r4, #26]
}
 800cf68:	b007      	add	sp, #28
 800cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cf6e:	464a      	mov	r2, r9
 800cf70:	4639      	mov	r1, r7
 800cf72:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	f7fd ffe0 	bl	800af3c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cf7c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800cf80:	f7fb ffbd 	bl	8008efe <lwip_htonl>
 800cf84:	9b04      	ldr	r3, [sp, #16]
 800cf86:	6158      	str	r0, [r3, #20]
    opts += 1;
 800cf88:	f103 0218 	add.w	r2, r3, #24
 800cf8c:	e7a7      	b.n	800cede <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800cf92:	7d23      	ldrb	r3, [r4, #20]
 800cf94:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf96:	bf1e      	ittt	ne
 800cf98:	8b63      	ldrhne	r3, [r4, #26]
 800cf9a:	f023 0303 	bicne.w	r3, r3, #3
 800cf9e:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cfa0:	68eb      	ldr	r3, [r5, #12]
 800cfa2:	6858      	ldr	r0, [r3, #4]
 800cfa4:	f7fb ffab 	bl	8008efe <lwip_htonl>
 800cfa8:	8929      	ldrh	r1, [r5, #8]
 800cfaa:	68eb      	ldr	r3, [r5, #12]
 800cfac:	9104      	str	r1, [sp, #16]
 800cfae:	9005      	str	r0, [sp, #20]
 800cfb0:	8998      	ldrh	r0, [r3, #12]
 800cfb2:	f7fb ffa1 	bl	8008ef8 <lwip_htons>
 800cfb6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800cfba:	f010 0303 	ands.w	r3, r0, #3
 800cfbe:	440a      	add	r2, r1
 800cfc0:	bf18      	it	ne
 800cfc2:	2301      	movne	r3, #1
 800cfc4:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cfc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cfc8:	1ad2      	subs	r2, r2, r3
 800cfca:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800cfcc:	bfb8      	it	lt
 800cfce:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800cfd0:	68ea      	ldr	r2, [r5, #12]
 800cfd2:	892b      	ldrh	r3, [r5, #8]
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	8990      	ldrh	r0, [r2, #12]
 800cfd8:	f7fb ff8e 	bl	8008ef8 <lwip_htons>
 800cfdc:	9b04      	ldr	r3, [sp, #16]
 800cfde:	f010 0003 	ands.w	r0, r0, #3
 800cfe2:	bf18      	it	ne
 800cfe4:	2001      	movne	r0, #1
 800cfe6:	42d8      	cmn	r0, r3
 800cfe8:	f000 8085 	beq.w	800d0f6 <tcp_output+0x342>
      seg->next = NULL;
 800cfec:	2300      	movs	r3, #0
 800cfee:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800cff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cff2:	b98b      	cbnz	r3, 800d018 <tcp_output+0x264>
        pcb->unacked = seg;
 800cff4:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800cff6:	462e      	mov	r6, r5
 800cff8:	e023      	b.n	800d042 <tcp_output+0x28e>
 800cffa:	bf00      	nop
 800cffc:	0801d231 	.word	0x0801d231
 800d000:	0801d885 	.word	0x0801d885
 800d004:	0801a4e1 	.word	0x0801a4e1
 800d008:	0801d89d 	.word	0x0801d89d
 800d00c:	20014a1c 	.word	0x20014a1c
 800d010:	20014a0c 	.word	0x20014a0c
 800d014:	0801d8da 	.word	0x0801d8da
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d018:	68eb      	ldr	r3, [r5, #12]
 800d01a:	6858      	ldr	r0, [r3, #4]
 800d01c:	f7fb ff6f 	bl	8008efe <lwip_htonl>
 800d020:	68f2      	ldr	r2, [r6, #12]
 800d022:	9004      	str	r0, [sp, #16]
 800d024:	6850      	ldr	r0, [r2, #4]
 800d026:	f7fb ff6a 	bl	8008efe <lwip_htonl>
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	1a18      	subs	r0, r3, r0
 800d02e:	2800      	cmp	r0, #0
 800d030:	da5f      	bge.n	800d0f2 <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d032:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d149      	bne.n	800d0d0 <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800d040:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800d042:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800d044:	2d00      	cmp	r5, #0
 800d046:	d03a      	beq.n	800d0be <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d048:	68eb      	ldr	r3, [r5, #12]
 800d04a:	6858      	ldr	r0, [r3, #4]
 800d04c:	f7fb ff57 	bl	8008efe <lwip_htonl>
 800d050:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d052:	1ac0      	subs	r0, r0, r3
 800d054:	892b      	ldrh	r3, [r5, #8]
 800d056:	4418      	add	r0, r3
  while (seg != NULL &&
 800d058:	4540      	cmp	r0, r8
 800d05a:	d82e      	bhi.n	800d0ba <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800d05c:	68eb      	ldr	r3, [r5, #12]
 800d05e:	8998      	ldrh	r0, [r3, #12]
 800d060:	f7fb ff4a 	bl	8008ef8 <lwip_htons>
 800d064:	0741      	lsls	r1, r0, #29
 800d066:	d506      	bpl.n	800d076 <tcp_output+0x2c2>
 800d068:	4926      	ldr	r1, [pc, #152]	; (800d104 <tcp_output+0x350>)
 800d06a:	4653      	mov	r3, sl
 800d06c:	f240 5236 	movw	r2, #1334	; 0x536
 800d070:	4658      	mov	r0, fp
 800d072:	f000 ff0f 	bl	800de94 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d076:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f43f af06 	beq.w	800ce8a <tcp_output+0xd6>
 800d07e:	8b62      	ldrh	r2, [r4, #26]
 800d080:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d084:	f47f af01 	bne.w	800ce8a <tcp_output+0xd6>
 800d088:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d08a:	b143      	cbz	r3, 800d09e <tcp_output+0x2ea>
 800d08c:	6819      	ldr	r1, [r3, #0]
 800d08e:	2900      	cmp	r1, #0
 800d090:	f47f aefb 	bne.w	800ce8a <tcp_output+0xd6>
 800d094:	8919      	ldrh	r1, [r3, #8]
 800d096:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d098:	4299      	cmp	r1, r3
 800d09a:	f4bf aef6 	bcs.w	800ce8a <tcp_output+0xd6>
 800d09e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f43f aef1 	beq.w	800ce8a <tcp_output+0xd6>
 800d0a8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d0ac:	2b07      	cmp	r3, #7
 800d0ae:	f63f aeec 	bhi.w	800ce8a <tcp_output+0xd6>
 800d0b2:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800d0b6:	f47f aee8 	bne.w	800ce8a <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800d0ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d0bc:	b913      	cbnz	r3, 800d0c4 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d0c4:	8b63      	ldrh	r3, [r4, #26]
 800d0c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ca:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e74b      	b.n	800cf68 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d0d0:	68d2      	ldr	r2, [r2, #12]
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	6850      	ldr	r0, [r2, #4]
 800d0d6:	f7fb ff12 	bl	8008efe <lwip_htonl>
 800d0da:	68e9      	ldr	r1, [r5, #12]
 800d0dc:	9004      	str	r0, [sp, #16]
 800d0de:	6848      	ldr	r0, [r1, #4]
 800d0e0:	f7fb ff0d 	bl	8008efe <lwip_htonl>
 800d0e4:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800d0e6:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d0e8:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	daa6      	bge.n	800d03c <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	e7a1      	b.n	800d036 <tcp_output+0x282>
          useg->next = seg;
 800d0f2:	6035      	str	r5, [r6, #0]
 800d0f4:	e77f      	b.n	800cff6 <tcp_output+0x242>
      tcp_seg_free(seg);
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f7fd f8b2 	bl	800a260 <tcp_seg_free>
 800d0fc:	e7a1      	b.n	800d042 <tcp_output+0x28e>
    return ERR_RTE;
 800d0fe:	f06f 0003 	mvn.w	r0, #3
 800d102:	e731      	b.n	800cf68 <tcp_output+0x1b4>
 800d104:	0801d8c3 	.word	0x0801d8c3

0800d108 <tcp_rexmit_rto_commit>:
{
 800d108:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d10a:	4604      	mov	r4, r0
 800d10c:	b930      	cbnz	r0, 800d11c <tcp_rexmit_rto_commit+0x14>
 800d10e:	4b09      	ldr	r3, [pc, #36]	; (800d134 <tcp_rexmit_rto_commit+0x2c>)
 800d110:	4909      	ldr	r1, [pc, #36]	; (800d138 <tcp_rexmit_rto_commit+0x30>)
 800d112:	480a      	ldr	r0, [pc, #40]	; (800d13c <tcp_rexmit_rto_commit+0x34>)
 800d114:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d118:	f000 febc 	bl	800de94 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800d11c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d120:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d122:	bf1c      	itt	ne
 800d124:	3301      	addne	r3, #1
 800d126:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800d12a:	4620      	mov	r0, r4
}
 800d12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800d130:	f7ff be40 	b.w	800cdb4 <tcp_output>
 800d134:	0801d231 	.word	0x0801d231
 800d138:	0801d8ed 	.word	0x0801d8ed
 800d13c:	0801a4e1 	.word	0x0801a4e1

0800d140 <tcp_rexmit_rto>:
{
 800d140:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d142:	4604      	mov	r4, r0
 800d144:	b930      	cbnz	r0, 800d154 <tcp_rexmit_rto+0x14>
 800d146:	4b08      	ldr	r3, [pc, #32]	; (800d168 <tcp_rexmit_rto+0x28>)
 800d148:	4908      	ldr	r1, [pc, #32]	; (800d16c <tcp_rexmit_rto+0x2c>)
 800d14a:	4809      	ldr	r0, [pc, #36]	; (800d170 <tcp_rexmit_rto+0x30>)
 800d14c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d150:	f000 fea0 	bl	800de94 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d154:	4620      	mov	r0, r4
 800d156:	f7ff fcfb 	bl	800cb50 <tcp_rexmit_rto_prepare>
 800d15a:	b920      	cbnz	r0, 800d166 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800d15c:	4620      	mov	r0, r4
}
 800d15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800d162:	f7ff bfd1 	b.w	800d108 <tcp_rexmit_rto_commit>
}
 800d166:	bd10      	pop	{r4, pc}
 800d168:	0801d231 	.word	0x0801d231
 800d16c:	0801d910 	.word	0x0801d910
 800d170:	0801a4e1 	.word	0x0801a4e1

0800d174 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d174:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d176:	4604      	mov	r4, r0
 800d178:	b930      	cbnz	r0, 800d188 <tcp_keepalive+0x14>
 800d17a:	4b0f      	ldr	r3, [pc, #60]	; (800d1b8 <tcp_keepalive+0x44>)
 800d17c:	490f      	ldr	r1, [pc, #60]	; (800d1bc <tcp_keepalive+0x48>)
 800d17e:	4810      	ldr	r0, [pc, #64]	; (800d1c0 <tcp_keepalive+0x4c>)
 800d180:	f640 0224 	movw	r2, #2084	; 0x824
 800d184:	f000 fe86 	bl	800de94 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d188:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d18a:	3801      	subs	r0, #1
 800d18c:	f7fb feb7 	bl	8008efe <lwip_htonl>
 800d190:	2100      	movs	r1, #0
 800d192:	4602      	mov	r2, r0
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff f83d 	bl	800c214 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d19a:	4605      	mov	r5, r0
 800d19c:	b148      	cbz	r0, 800d1b2 <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d19e:	f7ff f85f 	bl	800c260 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1a2:	1d23      	adds	r3, r4, #4
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d1aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1ae:	f7ff b867 	b.w	800c280 <tcp_output_control_segment>
}
 800d1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}
 800d1b8:	0801d231 	.word	0x0801d231
 800d1bc:	0801d92c 	.word	0x0801d92c
 800d1c0:	0801a4e1 	.word	0x0801a4e1

0800d1c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	b930      	cbnz	r0, 800d1da <tcp_zero_window_probe+0x16>
 800d1cc:	4b2c      	ldr	r3, [pc, #176]	; (800d280 <tcp_zero_window_probe+0xbc>)
 800d1ce:	492d      	ldr	r1, [pc, #180]	; (800d284 <tcp_zero_window_probe+0xc0>)
 800d1d0:	482d      	ldr	r0, [pc, #180]	; (800d288 <tcp_zero_window_probe+0xc4>)
 800d1d2:	f640 024f 	movw	r2, #2127	; 0x84f
 800d1d6:	f000 fe5d 	bl	800de94 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d1da:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	d048      	beq.n	800d272 <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d1e0:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800d1e4:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800d1e6:	bf1c      	itt	ne
 800d1e8:	3301      	addne	r3, #1
 800d1ea:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d1ee:	68eb      	ldr	r3, [r5, #12]
 800d1f0:	8998      	ldrh	r0, [r3, #12]
 800d1f2:	f7fb fe81 	bl	8008ef8 <lwip_htons>
 800d1f6:	f010 0401 	ands.w	r4, r0, #1
 800d1fa:	bf18      	it	ne
 800d1fc:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d1fe:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d200:	bf1c      	itt	ne
 800d202:	fab4 f484 	clzne	r4, r4
 800d206:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d208:	685a      	ldr	r2, [r3, #4]
 800d20a:	f084 0101 	eor.w	r1, r4, #1
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff f800 	bl	800c214 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d214:	4607      	mov	r7, r0
 800d216:	b378      	cbz	r0, 800d278 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d218:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d21c:	b1f4      	cbz	r4, 800d25c <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d21e:	2011      	movs	r0, #17
 800d220:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800d224:	f7fb fe68 	bl	8008ef8 <lwip_htons>
 800d228:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800d22c:	4320      	orrs	r0, r4
 800d22e:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d232:	68eb      	ldr	r3, [r5, #12]
 800d234:	6858      	ldr	r0, [r3, #4]
 800d236:	f7fb fe62 	bl	8008efe <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d23a:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d23c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d23e:	1a1b      	subs	r3, r3, r0
 800d240:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800d242:	bfb8      	it	lt
 800d244:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d246:	4638      	mov	r0, r7
 800d248:	f7ff f80a 	bl	800c260 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d24c:	1d33      	adds	r3, r6, #4
 800d24e:	4632      	mov	r2, r6
 800d250:	4639      	mov	r1, r7
 800d252:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d258:	f7ff b812 	b.w	800c280 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d25c:	6868      	ldr	r0, [r5, #4]
 800d25e:	892a      	ldrh	r2, [r5, #8]
 800d260:	8903      	ldrh	r3, [r0, #8]
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	b29b      	uxth	r3, r3
 800d266:	2201      	movs	r2, #1
 800d268:	f108 0114 	add.w	r1, r8, #20
 800d26c:	f7fc fde8 	bl	8009e40 <pbuf_copy_partial>
 800d270:	e7df      	b.n	800d232 <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800d272:	4628      	mov	r0, r5
}
 800d274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800d278:	f04f 30ff 	mov.w	r0, #4294967295
 800d27c:	e7fa      	b.n	800d274 <tcp_zero_window_probe+0xb0>
 800d27e:	bf00      	nop
 800d280:	0801d231 	.word	0x0801d231
 800d284:	0801d947 	.word	0x0801d947
 800d288:	0801a4e1 	.word	0x0801a4e1

0800d28c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d28c:	b570      	push	{r4, r5, r6, lr}
 800d28e:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d290:	200a      	movs	r0, #10
{
 800d292:	460e      	mov	r6, r1
 800d294:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d296:	f7fc f94b 	bl	8009530 <memp_malloc>
  if (timeout == NULL) {
 800d29a:	b938      	cbnz	r0, 800d2ac <sys_timeout_abs+0x20>
        t->next = timeout;
        break;
      }
    }
  }
}
 800d29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <sys_timeout_abs+0x54>)
 800d2a2:	4910      	ldr	r1, [pc, #64]	; (800d2e4 <sys_timeout_abs+0x58>)
 800d2a4:	4810      	ldr	r0, [pc, #64]	; (800d2e8 <sys_timeout_abs+0x5c>)
 800d2a6:	22be      	movs	r2, #190	; 0xbe
 800d2a8:	f000 bdf4 	b.w	800de94 <iprintf>
  if (next_timeout == NULL) {
 800d2ac:	4a0f      	ldr	r2, [pc, #60]	; (800d2ec <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800d2ae:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800d2b4:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800d2b6:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800d2ba:	b90b      	cbnz	r3, 800d2c0 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800d2bc:	6010      	str	r0, [r2, #0]
}
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d2c0:	6859      	ldr	r1, [r3, #4]
 800d2c2:	1a61      	subs	r1, r4, r1
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	da01      	bge.n	800d2cc <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800d2c8:	6003      	str	r3, [r0, #0]
 800d2ca:	e7f7      	b.n	800d2bc <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	b11b      	cbz	r3, 800d2da <sys_timeout_abs+0x4e>
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	1aa2      	subs	r2, r4, r2
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	daf8      	bge.n	800d2cc <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800d2da:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800d2dc:	6008      	str	r0, [r1, #0]
        break;
 800d2de:	e7ee      	b.n	800d2be <sys_timeout_abs+0x32>
 800d2e0:	0801d96a 	.word	0x0801d96a
 800d2e4:	0801d9e8 	.word	0x0801d9e8
 800d2e8:	0801a4e1 	.word	0x0801a4e1
 800d2ec:	200067f0 	.word	0x200067f0

0800d2f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d2f0:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d2f2:	6843      	ldr	r3, [r0, #4]
{
 800d2f4:	4604      	mov	r4, r0
  cyclic->handler();
 800d2f6:	4798      	blx	r3

  now = sys_now();
 800d2f8:	f7f3 fc62 	bl	8000bc0 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d2fc:	4b07      	ldr	r3, [pc, #28]	; (800d31c <lwip_cyclic_timer+0x2c>)
 800d2fe:	6825      	ldr	r5, [r4, #0]
 800d300:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d302:	4907      	ldr	r1, [pc, #28]	; (800d320 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d304:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d306:	1a1a      	subs	r2, r3, r0
 800d308:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d30a:	bfb8      	it	lt
 800d30c:	1940      	addlt	r0, r0, r5
 800d30e:	4622      	mov	r2, r4
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d310:	bfa8      	it	ge
 800d312:	4618      	movge	r0, r3
#endif
  }
}
 800d314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d318:	f7ff bfb8 	b.w	800d28c <sys_timeout_abs>
 800d31c:	200067f0 	.word	0x200067f0
 800d320:	0800d2f1 	.word	0x0800d2f1

0800d324 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d324:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	4604      	mov	r4, r0
 800d32c:	460d      	mov	r5, r1
 800d32e:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d330:	d306      	bcc.n	800d340 <sys_timeout+0x1c>
 800d332:	4b08      	ldr	r3, [pc, #32]	; (800d354 <sys_timeout+0x30>)
 800d334:	4908      	ldr	r1, [pc, #32]	; (800d358 <sys_timeout+0x34>)
 800d336:	4809      	ldr	r0, [pc, #36]	; (800d35c <sys_timeout+0x38>)
 800d338:	f240 1229 	movw	r2, #297	; 0x129
 800d33c:	f000 fdaa 	bl	800de94 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d340:	f7f3 fc3e 	bl	8000bc0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d344:	4632      	mov	r2, r6
 800d346:	4629      	mov	r1, r5
 800d348:	4420      	add	r0, r4
#endif
}
 800d34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d34e:	f7ff bf9d 	b.w	800d28c <sys_timeout_abs>
 800d352:	bf00      	nop
 800d354:	0801d96a 	.word	0x0801d96a
 800d358:	0801da25 	.word	0x0801da25
 800d35c:	0801a4e1 	.word	0x0801a4e1

0800d360 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d360:	4b08      	ldr	r3, [pc, #32]	; (800d384 <tcp_timer_needed+0x24>)
 800d362:	689a      	ldr	r2, [r3, #8]
 800d364:	b962      	cbnz	r2, 800d380 <tcp_timer_needed+0x20>
 800d366:	4a08      	ldr	r2, [pc, #32]	; (800d388 <tcp_timer_needed+0x28>)
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	b912      	cbnz	r2, 800d372 <tcp_timer_needed+0x12>
 800d36c:	4a07      	ldr	r2, [pc, #28]	; (800d38c <tcp_timer_needed+0x2c>)
 800d36e:	6812      	ldr	r2, [r2, #0]
 800d370:	b132      	cbz	r2, 800d380 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800d372:	2201      	movs	r2, #1
 800d374:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d376:	4906      	ldr	r1, [pc, #24]	; (800d390 <tcp_timer_needed+0x30>)
 800d378:	2200      	movs	r2, #0
 800d37a:	20fa      	movs	r0, #250	; 0xfa
 800d37c:	f7ff bfd2 	b.w	800d324 <sys_timeout>
}
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	200067f0 	.word	0x200067f0
 800d388:	20014a08 	.word	0x20014a08
 800d38c:	20014a18 	.word	0x20014a18
 800d390:	0800d395 	.word	0x0800d395

0800d394 <tcpip_tcp_timer>:
{
 800d394:	b508      	push	{r3, lr}
  tcp_tmr();
 800d396:	f7fd fbfb 	bl	800ab90 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d39a:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <tcpip_tcp_timer+0x28>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	b913      	cbnz	r3, 800d3a6 <tcpip_tcp_timer+0x12>
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <tcpip_tcp_timer+0x2c>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	b133      	cbz	r3, 800d3b4 <tcpip_tcp_timer+0x20>
}
 800d3a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3aa:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <tcpip_tcp_timer+0x30>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	20fa      	movs	r0, #250	; 0xfa
 800d3b0:	f7ff bfb8 	b.w	800d324 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800d3b4:	4a04      	ldr	r2, [pc, #16]	; (800d3c8 <tcpip_tcp_timer+0x34>)
 800d3b6:	6093      	str	r3, [r2, #8]
}
 800d3b8:	bd08      	pop	{r3, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20014a08 	.word	0x20014a08
 800d3c0:	20014a18 	.word	0x20014a18
 800d3c4:	0800d395 	.word	0x0800d395
 800d3c8:	200067f0 	.word	0x200067f0

0800d3cc <sys_timeouts_init>:
{
 800d3cc:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d3ce:	4c0f      	ldr	r4, [pc, #60]	; (800d40c <sys_timeouts_init+0x40>)
 800d3d0:	490f      	ldr	r1, [pc, #60]	; (800d410 <sys_timeouts_init+0x44>)
 800d3d2:	f104 0208 	add.w	r2, r4, #8
 800d3d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d3da:	f7ff ffa3 	bl	800d324 <sys_timeout>
 800d3de:	f104 0210 	add.w	r2, r4, #16
 800d3e2:	490b      	ldr	r1, [pc, #44]	; (800d410 <sys_timeouts_init+0x44>)
 800d3e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d3e8:	f7ff ff9c 	bl	800d324 <sys_timeout>
 800d3ec:	f104 0218 	add.w	r2, r4, #24
 800d3f0:	4907      	ldr	r1, [pc, #28]	; (800d410 <sys_timeouts_init+0x44>)
 800d3f2:	f64e 2060 	movw	r0, #60000	; 0xea60
 800d3f6:	f7ff ff95 	bl	800d324 <sys_timeout>
 800d3fa:	f104 0220 	add.w	r2, r4, #32
 800d3fe:	4904      	ldr	r1, [pc, #16]	; (800d410 <sys_timeouts_init+0x44>)
}
 800d400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d408:	f7ff bf8c 	b.w	800d324 <sys_timeout>
 800d40c:	0800fac0 	.word	0x0800fac0
 800d410:	0800d2f1 	.word	0x0800d2f1

0800d414 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d416:	f7f3 fbd3 	bl	8000bc0 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800d41a:	4d0b      	ldr	r5, [pc, #44]	; (800d448 <sys_check_timeouts+0x34>)
  now = sys_now();
 800d41c:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800d41e:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800d420:	b181      	cbz	r1, 800d444 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d422:	684b      	ldr	r3, [r1, #4]
 800d424:	1ae2      	subs	r2, r4, r3
 800d426:	2a00      	cmp	r2, #0
 800d428:	db0c      	blt.n	800d444 <sys_check_timeouts+0x30>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
 800d42a:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    next_timeout = tmptimeout->next;
 800d42e:	680a      	ldr	r2, [r1, #0]
 800d430:	602a      	str	r2, [r5, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d432:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800d434:	606b      	str	r3, [r5, #4]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d436:	f7fc f897 	bl	8009568 <memp_free>
    if (handler != NULL) {
 800d43a:	2e00      	cmp	r6, #0
 800d43c:	d0ef      	beq.n	800d41e <sys_check_timeouts+0xa>
      handler(arg);
 800d43e:	4638      	mov	r0, r7
 800d440:	47b0      	blx	r6
 800d442:	e7ec      	b.n	800d41e <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d446:	bf00      	nop
 800d448:	200067f0 	.word	0x200067f0

0800d44c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800d44c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800d44e:	4c07      	ldr	r4, [pc, #28]	; (800d46c <sys_timeouts_sleeptime+0x20>)
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	b13b      	cbz	r3, 800d464 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800d454:	f7f3 fbb4 	bl	8000bc0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	1a18      	subs	r0, r3, r0
    return 0;
 800d45e:	bf48      	it	mi
 800d460:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800d462:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800d464:	f04f 30ff 	mov.w	r0, #4294967295
 800d468:	e7fb      	b.n	800d462 <sys_timeouts_sleeptime+0x16>
 800d46a:	bf00      	nop
 800d46c:	200067f0 	.word	0x200067f0

0800d470 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d470:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d472:	f000 fd27 	bl	800dec4 <rand>
 800d476:	4b03      	ldr	r3, [pc, #12]	; (800d484 <udp_init+0x14>)
 800d478:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d47c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d480:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800d482:	bd08      	pop	{r3, pc}
 800d484:	20000040 	.word	0x20000040

0800d488 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	4688      	mov	r8, r1
 800d48e:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d490:	4607      	mov	r7, r0
 800d492:	b928      	cbnz	r0, 800d4a0 <udp_input+0x18>
 800d494:	4b5f      	ldr	r3, [pc, #380]	; (800d614 <udp_input+0x18c>)
 800d496:	4960      	ldr	r1, [pc, #384]	; (800d618 <udp_input+0x190>)
 800d498:	4860      	ldr	r0, [pc, #384]	; (800d61c <udp_input+0x194>)
 800d49a:	22cf      	movs	r2, #207	; 0xcf
 800d49c:	f000 fcfa 	bl	800de94 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d4a0:	f1b8 0f00 	cmp.w	r8, #0
 800d4a4:	d105      	bne.n	800d4b2 <udp_input+0x2a>
 800d4a6:	4b5b      	ldr	r3, [pc, #364]	; (800d614 <udp_input+0x18c>)
 800d4a8:	495d      	ldr	r1, [pc, #372]	; (800d620 <udp_input+0x198>)
 800d4aa:	485c      	ldr	r0, [pc, #368]	; (800d61c <udp_input+0x194>)
 800d4ac:	22d0      	movs	r2, #208	; 0xd0
 800d4ae:	f000 fcf1 	bl	800de94 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d4b2:	897b      	ldrh	r3, [r7, #10]
 800d4b4:	2b07      	cmp	r3, #7
 800d4b6:	d805      	bhi.n	800d4c4 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d4b8:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d4ba:	b005      	add	sp, #20
 800d4bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d4c0:	f7fc ba80 	b.w	80099c4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d4c4:	4e57      	ldr	r6, [pc, #348]	; (800d624 <udp_input+0x19c>)
  udphdr = (struct udp_hdr *)p->payload;
 800d4c6:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d4c8:	6831      	ldr	r1, [r6, #0]
 800d4ca:	6970      	ldr	r0, [r6, #20]
 800d4cc:	f7fb f923 	bl	8008716 <ip4_addr_isbroadcast_u32>
 800d4d0:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800d4d2:	8820      	ldrh	r0, [r4, #0]
 800d4d4:	f7fb fd10 	bl	8008ef8 <lwip_htons>
 800d4d8:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800d4da:	8860      	ldrh	r0, [r4, #2]
 800d4dc:	f7fb fd0c 	bl	8008ef8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4e0:	4b51      	ldr	r3, [pc, #324]	; (800d628 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d4e2:	f8df c130 	ldr.w	ip, [pc, #304]	; 800d614 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4e6:	681c      	ldr	r4, [r3, #0]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d4e8:	4950      	ldr	r1, [pc, #320]	; (800d62c <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 800d4ea:	9003      	str	r0, [sp, #12]
  uncon_pcb = NULL;
 800d4ec:	2500      	movs	r5, #0
  prev = NULL;
 800d4ee:	46ab      	mov	fp, r5
 800d4f0:	469a      	mov	sl, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4f2:	b99c      	cbnz	r4, 800d51c <udp_input+0x94>
  if (pcb != NULL) {
 800d4f4:	b925      	cbnz	r5, 800d500 <udp_input+0x78>
  if (for_us) {
 800d4f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800d4fa:	6973      	ldr	r3, [r6, #20]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d1db      	bne.n	800d4b8 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d500:	2108      	movs	r1, #8
 800d502:	4638      	mov	r0, r7
 800d504:	f7fc fa2a 	bl	800995c <pbuf_remove_header>
 800d508:	2800      	cmp	r0, #0
 800d50a:	d05e      	beq.n	800d5ca <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d50c:	4b41      	ldr	r3, [pc, #260]	; (800d614 <udp_input+0x18c>)
 800d50e:	4948      	ldr	r1, [pc, #288]	; (800d630 <udp_input+0x1a8>)
 800d510:	4842      	ldr	r0, [pc, #264]	; (800d61c <udp_input+0x194>)
 800d512:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d516:	f000 fcbd 	bl	800de94 <iprintf>
 800d51a:	e7cd      	b.n	800d4b8 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800d51c:	8a62      	ldrh	r2, [r4, #18]
 800d51e:	9803      	ldr	r0, [sp, #12]
 800d520:	4282      	cmp	r2, r0
 800d522:	d14d      	bne.n	800d5c0 <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d524:	f1b8 0f00 	cmp.w	r8, #0
 800d528:	d107      	bne.n	800d53a <udp_input+0xb2>
 800d52a:	4663      	mov	r3, ip
 800d52c:	483b      	ldr	r0, [pc, #236]	; (800d61c <udp_input+0x194>)
 800d52e:	2288      	movs	r2, #136	; 0x88
 800d530:	f000 fcb0 	bl	800de94 <iprintf>
 800d534:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800d614 <udp_input+0x18c>
 800d538:	493c      	ldr	r1, [pc, #240]	; (800d62c <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d53a:	7a20      	ldrb	r0, [r4, #8]
 800d53c:	b130      	cbz	r0, 800d54c <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d53e:	6872      	ldr	r2, [r6, #4]
 800d540:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800d544:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d546:	b2d2      	uxtb	r2, r2
 800d548:	4290      	cmp	r0, r2
 800d54a:	d139      	bne.n	800d5c0 <udp_input+0x138>
    if (broadcast != 0) {
 800d54c:	6822      	ldr	r2, [r4, #0]
 800d54e:	f1b9 0f00 	cmp.w	r9, #0
 800d552:	d030      	beq.n	800d5b6 <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d554:	b13a      	cbz	r2, 800d566 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d556:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d004      	beq.n	800d566 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d55c:	f8d8 3008 	ldr.w	r3, [r8, #8]
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d560:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d562:	4218      	tst	r0, r3
 800d564:	d12c      	bne.n	800d5c0 <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d566:	7c20      	ldrb	r0, [r4, #16]
 800d568:	0743      	lsls	r3, r0, #29
 800d56a:	d40e      	bmi.n	800d58a <udp_input+0x102>
        if (uncon_pcb == NULL) {
 800d56c:	b35d      	cbz	r5, 800d5c6 <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d56e:	f1b9 0f00 	cmp.w	r9, #0
 800d572:	d00a      	beq.n	800d58a <udp_input+0x102>
 800d574:	6970      	ldr	r0, [r6, #20]
 800d576:	3001      	adds	r0, #1
 800d578:	d107      	bne.n	800d58a <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d57a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	4283      	cmp	r3, r0
 800d582:	d002      	beq.n	800d58a <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d584:	4290      	cmp	r0, r2
 800d586:	bf08      	it	eq
 800d588:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800d58a:	8aa2      	ldrh	r2, [r4, #20]
 800d58c:	9b02      	ldr	r3, [sp, #8]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d116      	bne.n	800d5c0 <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d592:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800d594:	b112      	cbz	r2, 800d59c <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d596:	6930      	ldr	r0, [r6, #16]
 800d598:	4282      	cmp	r2, r0
 800d59a:	d111      	bne.n	800d5c0 <udp_input+0x138>
        if (prev != NULL) {
 800d59c:	f1bb 0f00 	cmp.w	fp, #0
 800d5a0:	d007      	beq.n	800d5b2 <udp_input+0x12a>
          prev->next = pcb->next;
 800d5a2:	68e3      	ldr	r3, [r4, #12]
 800d5a4:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800d5a8:	f8da 3000 	ldr.w	r3, [sl]
 800d5ac:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800d5ae:	f8ca 4000 	str.w	r4, [sl]
 800d5b2:	4625      	mov	r5, r4
 800d5b4:	e7a4      	b.n	800d500 <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d5b6:	2a00      	cmp	r2, #0
 800d5b8:	d0d5      	beq.n	800d566 <udp_input+0xde>
 800d5ba:	6970      	ldr	r0, [r6, #20]
 800d5bc:	4290      	cmp	r0, r2
 800d5be:	d0d2      	beq.n	800d566 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5c0:	46a3      	mov	fp, r4
 800d5c2:	68e4      	ldr	r4, [r4, #12]
 800d5c4:	e795      	b.n	800d4f2 <udp_input+0x6a>
 800d5c6:	4625      	mov	r5, r4
 800d5c8:	e7df      	b.n	800d58a <udp_input+0x102>
    if (pcb != NULL) {
 800d5ca:	b16d      	cbz	r5, 800d5e8 <udp_input+0x160>
      if (pcb->recv != NULL) {
 800d5cc:	69ac      	ldr	r4, [r5, #24]
 800d5ce:	2c00      	cmp	r4, #0
 800d5d0:	f43f af72 	beq.w	800d4b8 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d5d4:	9b02      	ldr	r3, [sp, #8]
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	69e8      	ldr	r0, [r5, #28]
 800d5da:	4b16      	ldr	r3, [pc, #88]	; (800d634 <udp_input+0x1ac>)
 800d5dc:	463a      	mov	r2, r7
 800d5de:	4629      	mov	r1, r5
 800d5e0:	47a0      	blx	r4
}
 800d5e2:	b005      	add	sp, #20
 800d5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d5e8:	f1b9 0f00 	cmp.w	r9, #0
 800d5ec:	f47f af64 	bne.w	800d4b8 <udp_input+0x30>
 800d5f0:	6973      	ldr	r3, [r6, #20]
 800d5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5f6:	2be0      	cmp	r3, #224	; 0xe0
 800d5f8:	f43f af5e 	beq.w	800d4b8 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d5fc:	89b1      	ldrh	r1, [r6, #12]
 800d5fe:	3108      	adds	r1, #8
 800d600:	b209      	sxth	r1, r1
 800d602:	4638      	mov	r0, r7
 800d604:	f7fc f9d6 	bl	80099b4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d608:	2103      	movs	r1, #3
 800d60a:	4638      	mov	r0, r7
 800d60c:	f7fa fee2 	bl	80083d4 <icmp_dest_unreach>
 800d610:	e752      	b.n	800d4b8 <udp_input+0x30>
 800d612:	bf00      	nop
 800d614:	0801da5b 	.word	0x0801da5b
 800d618:	0801dad4 	.word	0x0801dad4
 800d61c:	0801a4e1 	.word	0x0801a4e1
 800d620:	0801daec 	.word	0x0801daec
 800d624:	2000e484 	.word	0x2000e484
 800d628:	20014a20 	.word	0x20014a20
 800d62c:	0801db05 	.word	0x0801db05
 800d630:	0801db2a 	.word	0x0801db2a
 800d634:	2000e494 	.word	0x2000e494

0800d638 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d638:	4b2d      	ldr	r3, [pc, #180]	; (800d6f0 <udp_bind+0xb8>)
{
 800d63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800d63e:	2900      	cmp	r1, #0
 800d640:	bf08      	it	eq
 800d642:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d644:	b950      	cbnz	r0, 800d65c <udp_bind+0x24>
 800d646:	4b2b      	ldr	r3, [pc, #172]	; (800d6f4 <udp_bind+0xbc>)
 800d648:	492b      	ldr	r1, [pc, #172]	; (800d6f8 <udp_bind+0xc0>)
 800d64a:	482c      	ldr	r0, [pc, #176]	; (800d6fc <udp_bind+0xc4>)
 800d64c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d650:	f000 fc20 	bl	800de94 <iprintf>
 800d654:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800d658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d65c:	4f28      	ldr	r7, [pc, #160]	; (800d700 <udp_bind+0xc8>)
 800d65e:	683e      	ldr	r6, [r7, #0]
 800d660:	4635      	mov	r5, r6
 800d662:	b9d5      	cbnz	r5, 800d69a <udp_bind+0x62>
  if (port == 0) {
 800d664:	2a00      	cmp	r2, #0
 800d666:	d140      	bne.n	800d6ea <udp_bind+0xb2>
 800d668:	4b26      	ldr	r3, [pc, #152]	; (800d704 <udp_bind+0xcc>)
 800d66a:	881a      	ldrh	r2, [r3, #0]
 800d66c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d670:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800d674:	4572      	cmp	r2, lr
 800d676:	bf1a      	itte	ne
 800d678:	3201      	addne	r2, #1
 800d67a:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d67c:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d680:	46b4      	mov	ip, r6
 800d682:	f1bc 0f00 	cmp.w	ip, #0
 800d686:	d10e      	bne.n	800d6a6 <udp_bind+0x6e>
 800d688:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d68a:	680b      	ldr	r3, [r1, #0]
 800d68c:	6003      	str	r3, [r0, #0]
  pcb->local_port = port;
 800d68e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 800d690:	b90d      	cbnz	r5, 800d696 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800d692:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800d694:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800d696:	2000      	movs	r0, #0
 800d698:	e7de      	b.n	800d658 <udp_bind+0x20>
    if (pcb == ipcb) {
 800d69a:	4285      	cmp	r5, r0
 800d69c:	d001      	beq.n	800d6a2 <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d69e:	68ed      	ldr	r5, [r5, #12]
 800d6a0:	e7df      	b.n	800d662 <udp_bind+0x2a>
      rebind = 1;
 800d6a2:	2501      	movs	r5, #1
 800d6a4:	e7de      	b.n	800d664 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800d6a6:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800d6aa:	4590      	cmp	r8, r2
 800d6ac:	d107      	bne.n	800d6be <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d6ae:	3c01      	subs	r4, #1
 800d6b0:	b2a4      	uxth	r4, r4
 800d6b2:	2c00      	cmp	r4, #0
 800d6b4:	d1de      	bne.n	800d674 <udp_bind+0x3c>
 800d6b6:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800d6b8:	f06f 0007 	mvn.w	r0, #7
 800d6bc:	e7cc      	b.n	800d658 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6be:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800d6c2:	e7de      	b.n	800d682 <udp_bind+0x4a>
      if (pcb != ipcb) {
 800d6c4:	4283      	cmp	r3, r0
 800d6c6:	d00c      	beq.n	800d6e2 <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800d6c8:	8a5c      	ldrh	r4, [r3, #18]
 800d6ca:	4294      	cmp	r4, r2
 800d6cc:	d109      	bne.n	800d6e2 <udp_bind+0xaa>
 800d6ce:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d6d2:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d6d4:	4564      	cmp	r4, ip
 800d6d6:	d0ef      	beq.n	800d6b8 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d6d8:	f1bc 0f00 	cmp.w	ip, #0
 800d6dc:	d0ec      	beq.n	800d6b8 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800d6de:	2c00      	cmp	r4, #0
 800d6e0:	d0ea      	beq.n	800d6b8 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1ed      	bne.n	800d6c4 <udp_bind+0x8c>
 800d6e8:	e7cf      	b.n	800d68a <udp_bind+0x52>
 800d6ea:	4633      	mov	r3, r6
 800d6ec:	e7fa      	b.n	800d6e4 <udp_bind+0xac>
 800d6ee:	bf00      	nop
 800d6f0:	0800f99c 	.word	0x0800f99c
 800d6f4:	0801da5b 	.word	0x0801da5b
 800d6f8:	0801db45 	.word	0x0801db45
 800d6fc:	0801a4e1 	.word	0x0801a4e1
 800d700:	20014a20 	.word	0x20014a20
 800d704:	20000040 	.word	0x20000040

0800d708 <udp_sendto_if_src>:
{
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	b085      	sub	sp, #20
 800d70e:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
 800d712:	460e      	mov	r6, r1
 800d714:	4690      	mov	r8, r2
 800d716:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d718:	4607      	mov	r7, r0
 800d71a:	b960      	cbnz	r0, 800d736 <udp_sendto_if_src+0x2e>
 800d71c:	4b3e      	ldr	r3, [pc, #248]	; (800d818 <udp_sendto_if_src+0x110>)
 800d71e:	493f      	ldr	r1, [pc, #252]	; (800d81c <udp_sendto_if_src+0x114>)
 800d720:	f240 22d1 	movw	r2, #721	; 0x2d1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d724:	483e      	ldr	r0, [pc, #248]	; (800d820 <udp_sendto_if_src+0x118>)
 800d726:	f000 fbb5 	bl	800de94 <iprintf>
 800d72a:	f06f 040f 	mvn.w	r4, #15
}
 800d72e:	4620      	mov	r0, r4
 800d730:	b005      	add	sp, #20
 800d732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d736:	b921      	cbnz	r1, 800d742 <udp_sendto_if_src+0x3a>
 800d738:	4b37      	ldr	r3, [pc, #220]	; (800d818 <udp_sendto_if_src+0x110>)
 800d73a:	493a      	ldr	r1, [pc, #232]	; (800d824 <udp_sendto_if_src+0x11c>)
 800d73c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d740:	e7f0      	b.n	800d724 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d742:	b922      	cbnz	r2, 800d74e <udp_sendto_if_src+0x46>
 800d744:	4b34      	ldr	r3, [pc, #208]	; (800d818 <udp_sendto_if_src+0x110>)
 800d746:	4938      	ldr	r1, [pc, #224]	; (800d828 <udp_sendto_if_src+0x120>)
 800d748:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d74c:	e7ea      	b.n	800d724 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d74e:	f1ba 0f00 	cmp.w	sl, #0
 800d752:	d104      	bne.n	800d75e <udp_sendto_if_src+0x56>
 800d754:	4b30      	ldr	r3, [pc, #192]	; (800d818 <udp_sendto_if_src+0x110>)
 800d756:	4935      	ldr	r1, [pc, #212]	; (800d82c <udp_sendto_if_src+0x124>)
 800d758:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d75c:	e7e2      	b.n	800d724 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d75e:	f1bb 0f00 	cmp.w	fp, #0
 800d762:	d104      	bne.n	800d76e <udp_sendto_if_src+0x66>
 800d764:	4b2c      	ldr	r3, [pc, #176]	; (800d818 <udp_sendto_if_src+0x110>)
 800d766:	4932      	ldr	r1, [pc, #200]	; (800d830 <udp_sendto_if_src+0x128>)
 800d768:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d76c:	e7da      	b.n	800d724 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800d76e:	8a42      	ldrh	r2, [r0, #18]
 800d770:	b13a      	cbz	r2, 800d782 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d772:	8932      	ldrh	r2, [r6, #8]
 800d774:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800d778:	429a      	cmp	r2, r3
 800d77a:	d909      	bls.n	800d790 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800d77c:	f04f 34ff 	mov.w	r4, #4294967295
 800d780:	e7d5      	b.n	800d72e <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d782:	4601      	mov	r1, r0
 800d784:	f7ff ff58 	bl	800d638 <udp_bind>
    if (err != ERR_OK) {
 800d788:	4604      	mov	r4, r0
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d0f1      	beq.n	800d772 <udp_sendto_if_src+0x6a>
 800d78e:	e7ce      	b.n	800d72e <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d790:	2108      	movs	r1, #8
 800d792:	4630      	mov	r0, r6
 800d794:	f7fc f8de 	bl	8009954 <pbuf_add_header>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d03a      	beq.n	800d812 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d79c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d7a0:	2108      	movs	r1, #8
 800d7a2:	2022      	movs	r0, #34	; 0x22
 800d7a4:	f7fc f976 	bl	8009a94 <pbuf_alloc>
    if (q == NULL) {
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d0e6      	beq.n	800d77c <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800d7ae:	8933      	ldrh	r3, [r6, #8]
 800d7b0:	b113      	cbz	r3, 800d7b8 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	f7fc fab8 	bl	8009d28 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d7b8:	896b      	ldrh	r3, [r5, #10]
 800d7ba:	2b07      	cmp	r3, #7
 800d7bc:	d806      	bhi.n	800d7cc <udp_sendto_if_src+0xc4>
 800d7be:	4b16      	ldr	r3, [pc, #88]	; (800d818 <udp_sendto_if_src+0x110>)
 800d7c0:	491c      	ldr	r1, [pc, #112]	; (800d834 <udp_sendto_if_src+0x12c>)
 800d7c2:	4817      	ldr	r0, [pc, #92]	; (800d820 <udp_sendto_if_src+0x118>)
 800d7c4:	f240 320d 	movw	r2, #781	; 0x30d
 800d7c8:	f000 fb64 	bl	800de94 <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 800d7cc:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 800d7ce:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d7d0:	f7fb fb92 	bl	8008ef8 <lwip_htons>
 800d7d4:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f7fb fb8e 	bl	8008ef8 <lwip_htons>
  udphdr->chksum = 0x0000;
 800d7dc:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800d7de:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800d7e0:	71a3      	strb	r3, [r4, #6]
 800d7e2:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800d7e4:	8928      	ldrh	r0, [r5, #8]
 800d7e6:	f7fb fb87 	bl	8008ef8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7ea:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800d7ec:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7ee:	f8cd b008 	str.w	fp, [sp, #8]
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	7abb      	ldrb	r3, [r7, #10]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	7afb      	ldrb	r3, [r7, #11]
 800d7fa:	4642      	mov	r2, r8
 800d7fc:	4651      	mov	r1, sl
 800d7fe:	4628      	mov	r0, r5
 800d800:	f7fa fefe 	bl	8008600 <ip4_output_if_src>
  if (q != p) {
 800d804:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d806:	4604      	mov	r4, r0
  if (q != p) {
 800d808:	d091      	beq.n	800d72e <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7fc f8da 	bl	80099c4 <pbuf_free>
    q = NULL;
 800d810:	e78d      	b.n	800d72e <udp_sendto_if_src+0x26>
 800d812:	4635      	mov	r5, r6
 800d814:	e7d0      	b.n	800d7b8 <udp_sendto_if_src+0xb0>
 800d816:	bf00      	nop
 800d818:	0801da5b 	.word	0x0801da5b
 800d81c:	0801db5b 	.word	0x0801db5b
 800d820:	0801a4e1 	.word	0x0801a4e1
 800d824:	0801db7a 	.word	0x0801db7a
 800d828:	0801db9a 	.word	0x0801db9a
 800d82c:	0801dbbc 	.word	0x0801dbbc
 800d830:	0801dbde 	.word	0x0801dbde
 800d834:	0801dbff 	.word	0x0801dbff

0800d838 <udp_sendto_if>:
{
 800d838:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d83a:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d83c:	b950      	cbnz	r0, 800d854 <udp_sendto_if+0x1c>
 800d83e:	4b18      	ldr	r3, [pc, #96]	; (800d8a0 <udp_sendto_if+0x68>)
 800d840:	4918      	ldr	r1, [pc, #96]	; (800d8a4 <udp_sendto_if+0x6c>)
 800d842:	f44f 7220 	mov.w	r2, #640	; 0x280
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d846:	4818      	ldr	r0, [pc, #96]	; (800d8a8 <udp_sendto_if+0x70>)
 800d848:	f000 fb24 	bl	800de94 <iprintf>
 800d84c:	f06f 000f 	mvn.w	r0, #15
}
 800d850:	b002      	add	sp, #8
 800d852:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d854:	b921      	cbnz	r1, 800d860 <udp_sendto_if+0x28>
 800d856:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <udp_sendto_if+0x68>)
 800d858:	4914      	ldr	r1, [pc, #80]	; (800d8ac <udp_sendto_if+0x74>)
 800d85a:	f240 2281 	movw	r2, #641	; 0x281
 800d85e:	e7f2      	b.n	800d846 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d860:	b922      	cbnz	r2, 800d86c <udp_sendto_if+0x34>
 800d862:	4b0f      	ldr	r3, [pc, #60]	; (800d8a0 <udp_sendto_if+0x68>)
 800d864:	4912      	ldr	r1, [pc, #72]	; (800d8b0 <udp_sendto_if+0x78>)
 800d866:	f240 2282 	movw	r2, #642	; 0x282
 800d86a:	e7ec      	b.n	800d846 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d86c:	b924      	cbnz	r4, 800d878 <udp_sendto_if+0x40>
 800d86e:	4b0c      	ldr	r3, [pc, #48]	; (800d8a0 <udp_sendto_if+0x68>)
 800d870:	4910      	ldr	r1, [pc, #64]	; (800d8b4 <udp_sendto_if+0x7c>)
 800d872:	f240 2283 	movw	r2, #643	; 0x283
 800d876:	e7e6      	b.n	800d846 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d878:	6805      	ldr	r5, [r0, #0]
 800d87a:	b11d      	cbz	r5, 800d884 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d87c:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d880:	2ee0      	cmp	r6, #224	; 0xe0
 800d882:	d105      	bne.n	800d890 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800d884:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d886:	e9cd 4500 	strd	r4, r5, [sp]
 800d88a:	f7ff ff3d 	bl	800d708 <udp_sendto_if_src>
 800d88e:	e7df      	b.n	800d850 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d890:	6866      	ldr	r6, [r4, #4]
 800d892:	42b5      	cmp	r5, r6
 800d894:	d101      	bne.n	800d89a <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d896:	4605      	mov	r5, r0
 800d898:	e7f5      	b.n	800d886 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800d89a:	f06f 0003 	mvn.w	r0, #3
 800d89e:	e7d7      	b.n	800d850 <udp_sendto_if+0x18>
 800d8a0:	0801da5b 	.word	0x0801da5b
 800d8a4:	0801dc2d 	.word	0x0801dc2d
 800d8a8:	0801a4e1 	.word	0x0801a4e1
 800d8ac:	0801dc48 	.word	0x0801dc48
 800d8b0:	0801dc64 	.word	0x0801dc64
 800d8b4:	0801dc82 	.word	0x0801dc82

0800d8b8 <udp_sendto>:
{
 800d8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ba:	460e      	mov	r6, r1
 800d8bc:	4615      	mov	r5, r2
 800d8be:	461f      	mov	r7, r3
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	b950      	cbnz	r0, 800d8da <udp_sendto+0x22>
 800d8c4:	4b15      	ldr	r3, [pc, #84]	; (800d91c <udp_sendto+0x64>)
 800d8c6:	4916      	ldr	r1, [pc, #88]	; (800d920 <udp_sendto+0x68>)
 800d8c8:	f44f 7206 	mov.w	r2, #536	; 0x218
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d8cc:	4815      	ldr	r0, [pc, #84]	; (800d924 <udp_sendto+0x6c>)
 800d8ce:	f000 fae1 	bl	800de94 <iprintf>
 800d8d2:	f06f 000f 	mvn.w	r0, #15
}
 800d8d6:	b003      	add	sp, #12
 800d8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d8da:	b921      	cbnz	r1, 800d8e6 <udp_sendto+0x2e>
 800d8dc:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <udp_sendto+0x64>)
 800d8de:	4912      	ldr	r1, [pc, #72]	; (800d928 <udp_sendto+0x70>)
 800d8e0:	f240 2219 	movw	r2, #537	; 0x219
 800d8e4:	e7f2      	b.n	800d8cc <udp_sendto+0x14>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d8e6:	b922      	cbnz	r2, 800d8f2 <udp_sendto+0x3a>
 800d8e8:	4b0c      	ldr	r3, [pc, #48]	; (800d91c <udp_sendto+0x64>)
 800d8ea:	4910      	ldr	r1, [pc, #64]	; (800d92c <udp_sendto+0x74>)
 800d8ec:	f240 221a 	movw	r2, #538	; 0x21a
 800d8f0:	e7ec      	b.n	800d8cc <udp_sendto+0x14>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d8f2:	7a00      	ldrb	r0, [r0, #8]
 800d8f4:	b150      	cbz	r0, 800d90c <udp_sendto+0x54>
    netif = netif_get_by_index(pcb->netif_idx);
 800d8f6:	f7fb ffab 	bl	8009850 <netif_get_by_index>
  if (netif == NULL) {
 800d8fa:	b158      	cbz	r0, 800d914 <udp_sendto+0x5c>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d8fc:	9000      	str	r0, [sp, #0]
 800d8fe:	463b      	mov	r3, r7
 800d900:	462a      	mov	r2, r5
 800d902:	4631      	mov	r1, r6
 800d904:	4620      	mov	r0, r4
 800d906:	f7ff ff97 	bl	800d838 <udp_sendto_if>
 800d90a:	e7e4      	b.n	800d8d6 <udp_sendto+0x1e>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d90c:	4610      	mov	r0, r2
 800d90e:	f7fa fd85 	bl	800841c <ip4_route>
 800d912:	e7f2      	b.n	800d8fa <udp_sendto+0x42>
    return ERR_RTE;
 800d914:	f06f 0003 	mvn.w	r0, #3
 800d918:	e7dd      	b.n	800d8d6 <udp_sendto+0x1e>
 800d91a:	bf00      	nop
 800d91c:	0801da5b 	.word	0x0801da5b
 800d920:	0801dc9f 	.word	0x0801dc9f
 800d924:	0801a4e1 	.word	0x0801a4e1
 800d928:	0801dcb7 	.word	0x0801dcb7
 800d92c:	0801dcd0 	.word	0x0801dcd0

0800d930 <udp_send>:
{
 800d930:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800d932:	4602      	mov	r2, r0
 800d934:	b948      	cbnz	r0, 800d94a <udp_send+0x1a>
 800d936:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <udp_send+0x34>)
 800d938:	490b      	ldr	r1, [pc, #44]	; (800d968 <udp_send+0x38>)
 800d93a:	f240 12d5 	movw	r2, #469	; 0x1d5
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d93e:	480b      	ldr	r0, [pc, #44]	; (800d96c <udp_send+0x3c>)
 800d940:	f000 faa8 	bl	800de94 <iprintf>
}
 800d944:	f06f 000f 	mvn.w	r0, #15
 800d948:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800d94a:	b921      	cbnz	r1, 800d956 <udp_send+0x26>
 800d94c:	4b05      	ldr	r3, [pc, #20]	; (800d964 <udp_send+0x34>)
 800d94e:	4908      	ldr	r1, [pc, #32]	; (800d970 <udp_send+0x40>)
 800d950:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800d954:	e7f3      	b.n	800d93e <udp_send+0xe>
}
 800d956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800d95a:	8a83      	ldrh	r3, [r0, #20]
 800d95c:	3204      	adds	r2, #4
 800d95e:	f7ff bfab 	b.w	800d8b8 <udp_sendto>
 800d962:	bf00      	nop
 800d964:	0801da5b 	.word	0x0801da5b
 800d968:	0801dceb 	.word	0x0801dceb
 800d96c:	0801a4e1 	.word	0x0801a4e1
 800d970:	0801dd01 	.word	0x0801dd01

0800d974 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	460d      	mov	r5, r1
 800d978:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d97a:	4604      	mov	r4, r0
 800d97c:	b948      	cbnz	r0, 800d992 <udp_connect+0x1e>
 800d97e:	4b16      	ldr	r3, [pc, #88]	; (800d9d8 <udp_connect+0x64>)
 800d980:	4916      	ldr	r1, [pc, #88]	; (800d9dc <udp_connect+0x68>)
 800d982:	f240 4235 	movw	r2, #1077	; 0x435
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d986:	4816      	ldr	r0, [pc, #88]	; (800d9e0 <udp_connect+0x6c>)
 800d988:	f000 fa84 	bl	800de94 <iprintf>
 800d98c:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800d990:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d992:	b921      	cbnz	r1, 800d99e <udp_connect+0x2a>
 800d994:	4b10      	ldr	r3, [pc, #64]	; (800d9d8 <udp_connect+0x64>)
 800d996:	4913      	ldr	r1, [pc, #76]	; (800d9e4 <udp_connect+0x70>)
 800d998:	f240 4236 	movw	r2, #1078	; 0x436
 800d99c:	e7f3      	b.n	800d986 <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800d99e:	8a42      	ldrh	r2, [r0, #18]
 800d9a0:	b16a      	cbz	r2, 800d9be <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d9a2:	682b      	ldr	r3, [r5, #0]
 800d9a4:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d9a6:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 800d9a8:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d9aa:	f043 0304 	orr.w	r3, r3, #4
 800d9ae:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9b0:	4b0d      	ldr	r3, [pc, #52]	; (800d9e8 <udp_connect+0x74>)
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	b940      	cbnz	r0, 800d9ca <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800d9b8:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800d9ba:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d9bc:	e7e8      	b.n	800d990 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9be:	4601      	mov	r1, r0
 800d9c0:	f7ff fe3a 	bl	800d638 <udp_bind>
    if (err != ERR_OK) {
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d0ec      	beq.n	800d9a2 <udp_connect+0x2e>
 800d9c8:	e7e2      	b.n	800d990 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800d9ca:	42a0      	cmp	r0, r4
 800d9cc:	d001      	beq.n	800d9d2 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d9ce:	68c0      	ldr	r0, [r0, #12]
 800d9d0:	e7f1      	b.n	800d9b6 <udp_connect+0x42>
      return ERR_OK;
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e7dc      	b.n	800d990 <udp_connect+0x1c>
 800d9d6:	bf00      	nop
 800d9d8:	0801da5b 	.word	0x0801da5b
 800d9dc:	0801dd18 	.word	0x0801dd18
 800d9e0:	0801a4e1 	.word	0x0801a4e1
 800d9e4:	0801dd31 	.word	0x0801dd31
 800d9e8:	20014a20 	.word	0x20014a20

0800d9ec <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d9ec:	b930      	cbnz	r0, 800d9fc <udp_recv+0x10>
 800d9ee:	4b05      	ldr	r3, [pc, #20]	; (800da04 <udp_recv+0x18>)
 800d9f0:	4905      	ldr	r1, [pc, #20]	; (800da08 <udp_recv+0x1c>)
 800d9f2:	4806      	ldr	r0, [pc, #24]	; (800da0c <udp_recv+0x20>)
 800d9f4:	f240 428a 	movw	r2, #1162	; 0x48a
 800d9f8:	f000 ba4c 	b.w	800de94 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800d9fc:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	0801da5b 	.word	0x0801da5b
 800da08:	0801dd69 	.word	0x0801dd69
 800da0c:	0801a4e1 	.word	0x0801a4e1

0800da10 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da10:	4601      	mov	r1, r0
 800da12:	b930      	cbnz	r0, 800da22 <udp_remove+0x12>
 800da14:	4b0d      	ldr	r3, [pc, #52]	; (800da4c <udp_remove+0x3c>)
 800da16:	490e      	ldr	r1, [pc, #56]	; (800da50 <udp_remove+0x40>)
 800da18:	480e      	ldr	r0, [pc, #56]	; (800da54 <udp_remove+0x44>)
 800da1a:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800da1e:	f000 ba39 	b.w	800de94 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da22:	4a0d      	ldr	r2, [pc, #52]	; (800da58 <udp_remove+0x48>)
 800da24:	6813      	ldr	r3, [r2, #0]
 800da26:	4283      	cmp	r3, r0
 800da28:	d105      	bne.n	800da36 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da2a:	68c3      	ldr	r3, [r0, #12]
 800da2c:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800da2e:	2000      	movs	r0, #0
 800da30:	f7fb bd9a 	b.w	8009568 <memp_free>
 800da34:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da36:	2b00      	cmp	r3, #0
 800da38:	d0f9      	beq.n	800da2e <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d0f6      	beq.n	800da2e <udp_remove+0x1e>
 800da40:	428a      	cmp	r2, r1
 800da42:	d1f7      	bne.n	800da34 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800da44:	68ca      	ldr	r2, [r1, #12]
 800da46:	60da      	str	r2, [r3, #12]
        break;
 800da48:	e7f1      	b.n	800da2e <udp_remove+0x1e>
 800da4a:	bf00      	nop
 800da4c:	0801da5b 	.word	0x0801da5b
 800da50:	0801dd7f 	.word	0x0801dd7f
 800da54:	0801a4e1 	.word	0x0801a4e1
 800da58:	20014a20 	.word	0x20014a20

0800da5c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800da5c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800da5e:	2000      	movs	r0, #0
 800da60:	f7fb fd66 	bl	8009530 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800da64:	4604      	mov	r4, r0
 800da66:	b128      	cbz	r0, 800da74 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800da68:	2220      	movs	r2, #32
 800da6a:	2100      	movs	r1, #0
 800da6c:	f000 fa0a 	bl	800de84 <memset>
    pcb->ttl = UDP_TTL;
 800da70:	23ff      	movs	r3, #255	; 0xff
 800da72:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800da74:	4620      	mov	r0, r4
 800da76:	bd10      	pop	{r4, pc}

0800da78 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800da78:	f7ff bff0 	b.w	800da5c <udp_new>

0800da7c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da7c:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800da7e:	b138      	cbz	r0, 800da90 <udp_netif_ip_addr_changed+0x14>
 800da80:	6803      	ldr	r3, [r0, #0]
 800da82:	b12b      	cbz	r3, 800da90 <udp_netif_ip_addr_changed+0x14>
 800da84:	b121      	cbz	r1, 800da90 <udp_netif_ip_addr_changed+0x14>
 800da86:	680b      	ldr	r3, [r1, #0]
 800da88:	b113      	cbz	r3, 800da90 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800da8a:	4b06      	ldr	r3, [pc, #24]	; (800daa4 <udp_netif_ip_addr_changed+0x28>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	b903      	cbnz	r3, 800da92 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800da90:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800da92:	681c      	ldr	r4, [r3, #0]
 800da94:	6802      	ldr	r2, [r0, #0]
 800da96:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800da98:	bf04      	itt	eq
 800da9a:	680a      	ldreq	r2, [r1, #0]
 800da9c:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	e7f5      	b.n	800da8e <udp_netif_ip_addr_changed+0x12>
 800daa2:	bf00      	nop
 800daa4:	20014a20 	.word	0x20014a20

0800daa8 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800daa8:	8943      	ldrh	r3, [r0, #10]
 800daaa:	2b0e      	cmp	r3, #14
{
 800daac:	b570      	push	{r4, r5, r6, lr}
 800daae:	4604      	mov	r4, r0
 800dab0:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800dab2:	d91a      	bls.n	800daea <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dab4:	7bc3      	ldrb	r3, [r0, #15]
 800dab6:	b91b      	cbnz	r3, 800dac0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800dab8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800dabc:	3301      	adds	r3, #1
 800dabe:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dac0:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dac2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800dac4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800dac6:	07d9      	lsls	r1, r3, #31
 800dac8:	d50a      	bpl.n	800dae0 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d111      	bne.n	800daf2 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dace:	7843      	ldrb	r3, [r0, #1]
 800dad0:	b933      	cbnz	r3, 800dae0 <ethernet_input+0x38>
 800dad2:	7883      	ldrb	r3, [r0, #2]
 800dad4:	2b5e      	cmp	r3, #94	; 0x5e
 800dad6:	d103      	bne.n	800dae0 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dad8:	7b63      	ldrb	r3, [r4, #13]
 800dada:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dade:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800dae0:	2e08      	cmp	r6, #8
 800dae2:	d010      	beq.n	800db06 <ethernet_input+0x5e>
 800dae4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800dae8:	d01d      	beq.n	800db26 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800daea:	4620      	mov	r0, r4
 800daec:	f7fb ff6a 	bl	80099c4 <pbuf_free>
  return ERR_OK;
 800daf0:	e017      	b.n	800db22 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800daf2:	4914      	ldr	r1, [pc, #80]	; (800db44 <ethernet_input+0x9c>)
 800daf4:	2206      	movs	r2, #6
 800daf6:	f000 f98f 	bl	800de18 <memcmp>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d1f0      	bne.n	800dae0 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800dafe:	7b63      	ldrb	r3, [r4, #13]
 800db00:	f043 0308 	orr.w	r3, r3, #8
 800db04:	e7eb      	b.n	800dade <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db06:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800db0a:	071a      	lsls	r2, r3, #28
 800db0c:	d5ed      	bpl.n	800daea <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db0e:	210e      	movs	r1, #14
 800db10:	4620      	mov	r0, r4
 800db12:	f7fb ff23 	bl	800995c <pbuf_remove_header>
 800db16:	2800      	cmp	r0, #0
 800db18:	d1e7      	bne.n	800daea <ethernet_input+0x42>
        ip4_input(p, netif);
 800db1a:	4629      	mov	r1, r5
 800db1c:	4620      	mov	r0, r4
 800db1e:	f7fa fcab 	bl	8008478 <ip4_input>
}
 800db22:	2000      	movs	r0, #0
 800db24:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800db26:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800db2a:	071b      	lsls	r3, r3, #28
 800db2c:	d5dd      	bpl.n	800daea <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800db2e:	210e      	movs	r1, #14
 800db30:	4620      	mov	r0, r4
 800db32:	f7fb ff13 	bl	800995c <pbuf_remove_header>
 800db36:	2800      	cmp	r0, #0
 800db38:	d1d7      	bne.n	800daea <ethernet_input+0x42>
        etharp_input(p, netif);
 800db3a:	4629      	mov	r1, r5
 800db3c:	4620      	mov	r0, r4
 800db3e:	f7fa f8f5 	bl	8007d2c <etharp_input>
      break;
 800db42:	e7ee      	b.n	800db22 <ethernet_input+0x7a>
 800db44:	0800faec 	.word	0x0800faec

0800db48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800db48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db4c:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800db4e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800db52:	460d      	mov	r5, r1
 800db54:	4616      	mov	r6, r2
 800db56:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800db58:	f7fb f9ce 	bl	8008ef8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800db5c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800db5e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800db60:	4628      	mov	r0, r5
 800db62:	f7fb fef7 	bl	8009954 <pbuf_add_header>
 800db66:	b9e0      	cbnz	r0, 800dba2 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800db68:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800db6a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	600b      	str	r3, [r1, #0]
 800db72:	88bb      	ldrh	r3, [r7, #4]
 800db74:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800db76:	6833      	ldr	r3, [r6, #0]
 800db78:	f8c1 3006 	str.w	r3, [r1, #6]
 800db7c:	88b3      	ldrh	r3, [r6, #4]
 800db7e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800db80:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800db84:	2b06      	cmp	r3, #6
 800db86:	d006      	beq.n	800db96 <ethernet_output+0x4e>
 800db88:	4b08      	ldr	r3, [pc, #32]	; (800dbac <ethernet_output+0x64>)
 800db8a:	4909      	ldr	r1, [pc, #36]	; (800dbb0 <ethernet_output+0x68>)
 800db8c:	4809      	ldr	r0, [pc, #36]	; (800dbb4 <ethernet_output+0x6c>)
 800db8e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800db92:	f000 f97f 	bl	800de94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800db96:	69a3      	ldr	r3, [r4, #24]
 800db98:	4629      	mov	r1, r5
 800db9a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800db9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800dba0:	4718      	bx	r3
}
 800dba2:	f06f 0001 	mvn.w	r0, #1
 800dba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbaa:	bf00      	nop
 800dbac:	0801dd97 	.word	0x0801dd97
 800dbb0:	0801de16 	.word	0x0801de16
 800dbb4:	0801a4e1 	.word	0x0801a4e1

0800dbb8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800dbb8:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800dbba:	2304      	movs	r3, #4
{
 800dbbc:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800dbbe:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800dbc0:	4668      	mov	r0, sp
 800dbc2:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800dbc4:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800dbc6:	f7f6 fa3d 	bl	8004044 <osMessageCreate>
 800dbca:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800dbcc:	fab0 f080 	clz	r0, r0
 800dbd0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800dbd2:	4240      	negs	r0, r0
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd10      	pop	{r4, pc}

0800dbd8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800dbdc:	6800      	ldr	r0, [r0, #0]
 800dbde:	f7f6 faa6 	bl	800412e <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800dbe2:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800dbe8:	f7f6 baa8 	b.w	800413c <osMessageDelete>

0800dbec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800dbec:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	6800      	ldr	r0, [r0, #0]
 800dbf2:	f7f6 fa2d 	bl	8004050 <osMessagePut>
 800dbf6:	3800      	subs	r0, #0
 800dbf8:	bf18      	it	ne
 800dbfa:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800dbfc:	4240      	negs	r0, r0
 800dbfe:	bd08      	pop	{r3, pc}

0800dc00 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800dc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc02:	b085      	sub	sp, #20
 800dc04:	4606      	mov	r6, r0
 800dc06:	460d      	mov	r5, r1
 800dc08:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800dc0a:	f7f6 f958 	bl	8003ebe <osKernelSysTick>
 800dc0e:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800dc10:	b177      	cbz	r7, 800dc30 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800dc12:	6831      	ldr	r1, [r6, #0]
 800dc14:	463a      	mov	r2, r7
 800dc16:	a801      	add	r0, sp, #4
 800dc18:	f7f6 fa42 	bl	80040a0 <osMessageGet>

    if(event.status == osEventMessage)
 800dc1c:	9b01      	ldr	r3, [sp, #4]
 800dc1e:	2b10      	cmp	r3, #16
 800dc20:	d10d      	bne.n	800dc3e <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800dc26:	f7f6 f94a 	bl	8003ebe <osKernelSysTick>
 800dc2a:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800dc2c:	b005      	add	sp, #20
 800dc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800dc30:	6831      	ldr	r1, [r6, #0]
 800dc32:	f04f 32ff 	mov.w	r2, #4294967295
 800dc36:	a801      	add	r0, sp, #4
 800dc38:	f7f6 fa32 	bl	80040a0 <osMessageGet>
 800dc3c:	e7f1      	b.n	800dc22 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	e7f3      	b.n	800dc2c <sys_arch_mbox_fetch+0x2c>

0800dc44 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800dc44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc46:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800dc48:	2200      	movs	r2, #0
 800dc4a:	6801      	ldr	r1, [r0, #0]
 800dc4c:	a801      	add	r0, sp, #4
 800dc4e:	f7f6 fa27 	bl	80040a0 <osMessageGet>

  if(event.status == osEventMessage)
 800dc52:	9b01      	ldr	r3, [sp, #4]
 800dc54:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800dc56:	bf03      	ittte	eq
 800dc58:	9b02      	ldreq	r3, [sp, #8]
 800dc5a:	6023      	streq	r3, [r4, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800dc5c:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800dc5e:	f04f 30ff 	movne.w	r0, #4294967295
  }
}
 800dc62:	b004      	add	sp, #16
 800dc64:	bd10      	pop	{r4, pc}

0800dc66 <sys_mbox_valid>:
 800dc66:	6800      	ldr	r0, [r0, #0]
 800dc68:	3800      	subs	r0, #0
 800dc6a:	bf18      	it	ne
 800dc6c:	2001      	movne	r0, #1
 800dc6e:	4770      	bx	lr

0800dc70 <sys_mbox_set_invalid>:
 800dc70:	2300      	movs	r3, #0
 800dc72:	6003      	str	r3, [r0, #0]
 800dc74:	4770      	bx	lr

0800dc76 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800dc76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc78:	4606      	mov	r6, r0
 800dc7a:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800dc7c:	2400      	movs	r4, #0
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800dc7e:	2101      	movs	r1, #1
 800dc80:	a801      	add	r0, sp, #4
  osSemaphoreDef(SEM);
 800dc82:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800dc84:	f7f6 f99e 	bl	8003fc4 <osSemaphoreCreate>
 800dc88:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800dc8a:	b130      	cbz	r0, 800dc9a <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800dc8c:	b945      	cbnz	r5, 800dca0 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7f6 f9ae 	bl	8003ff0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800dc94:	4628      	mov	r0, r5
}
 800dc96:	b002      	add	sp, #8
 800dc98:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800dc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc9e:	e7fa      	b.n	800dc96 <sys_sem_new+0x20>
  return ERR_OK;
 800dca0:	4620      	mov	r0, r4
 800dca2:	e7f8      	b.n	800dc96 <sys_sem_new+0x20>

0800dca4 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	4605      	mov	r5, r0
 800dca8:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800dcaa:	f7f6 f908 	bl	8003ebe <osKernelSysTick>
 800dcae:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800dcb0:	b146      	cbz	r6, 800dcc4 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800dcb2:	6828      	ldr	r0, [r5, #0]
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	f7f6 f99b 	bl	8003ff0 <osSemaphoreWait>
 800dcba:	b958      	cbnz	r0, 800dcd4 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800dcbc:	f7f6 f8ff 	bl	8003ebe <osKernelSysTick>
 800dcc0:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800dcc4:	6828      	ldr	r0, [r5, #0]
 800dcc6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcca:	f7f6 f991 	bl	8003ff0 <osSemaphoreWait>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d1f8      	bne.n	800dcc4 <sys_arch_sem_wait+0x20>
 800dcd2:	e7f3      	b.n	800dcbc <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800dcd4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd8:	e7f3      	b.n	800dcc2 <sys_arch_sem_wait+0x1e>

0800dcda <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800dcda:	6800      	ldr	r0, [r0, #0]
 800dcdc:	f7f6 b9ae 	b.w	800403c <osSemaphoreRelease>

0800dce0 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800dce0:	6800      	ldr	r0, [r0, #0]
 800dce2:	f7f6 b9ad 	b.w	8004040 <osSemaphoreDelete>

0800dce6 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800dce6:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800dce8:	3800      	subs	r0, #0
 800dcea:	bf18      	it	ne
 800dcec:	2001      	movne	r0, #1
 800dcee:	4770      	bx	lr

0800dcf0 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	6003      	str	r3, [r0, #0]
}
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800dcf8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800dcfa:	4803      	ldr	r0, [pc, #12]	; (800dd08 <sys_init+0x10>)
 800dcfc:	f7f6 f90b 	bl	8003f16 <osMutexCreate>
 800dd00:	4b02      	ldr	r3, [pc, #8]	; (800dd0c <sys_init+0x14>)
 800dd02:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800dd04:	bd08      	pop	{r3, pc}
 800dd06:	bf00      	nop
 800dd08:	0800faf8 	.word	0x0800faf8
 800dd0c:	20014a28 	.word	0x20014a28

0800dd10 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800dd10:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800dd12:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800dd14:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800dd16:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800dd18:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800dd1a:	f7f6 f8fc 	bl	8003f16 <osMutexCreate>
 800dd1e:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800dd20:	fab0 f080 	clz	r0, r0
 800dd24:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800dd26:	4240      	negs	r0, r0
 800dd28:	b002      	add	sp, #8
 800dd2a:	bd10      	pop	{r4, pc}

0800dd2c <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800dd2c:	6800      	ldr	r0, [r0, #0]
 800dd2e:	f04f 31ff 	mov.w	r1, #4294967295
 800dd32:	f7f6 b8f3 	b.w	8003f1c <osMutexWait>

0800dd36 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800dd36:	6800      	ldr	r0, [r0, #0]
 800dd38:	f7f6 b916 	b.w	8003f68 <osMutexRelease>

0800dd3c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800dd3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800dd3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800dd42:	9908      	ldr	r1, [sp, #32]
 800dd44:	f8ad 100c 	strh.w	r1, [sp, #12]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800dd4e:	a801      	add	r0, sp, #4
 800dd50:	4611      	mov	r1, r2
 800dd52:	f7f6 f8bb 	bl	8003ecc <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800dd56:	b007      	add	sp, #28
 800dd58:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd5c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800dd5c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800dd5e:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <sys_arch_protect+0x14>)
 800dd60:	f04f 31ff 	mov.w	r1, #4294967295
 800dd64:	6818      	ldr	r0, [r3, #0]
 800dd66:	f7f6 f8d9 	bl	8003f1c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	bd08      	pop	{r3, pc}
 800dd6e:	bf00      	nop
 800dd70:	20014a28 	.word	0x20014a28

0800dd74 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800dd74:	4b01      	ldr	r3, [pc, #4]	; (800dd7c <sys_arch_unprotect+0x8>)
 800dd76:	6818      	ldr	r0, [r3, #0]
 800dd78:	f7f6 b8f6 	b.w	8003f68 <osMutexRelease>
 800dd7c:	20014a28 	.word	0x20014a28

0800dd80 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800dd80:	b570      	push	{r4, r5, r6, lr}
 800dd82:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800dd84:	4604      	mov	r4, r0
 800dd86:	b1a8      	cbz	r0, 800ddb4 <fs_open+0x34>
 800dd88:	b1a1      	cbz	r1, 800ddb4 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800dd8a:	4d0c      	ldr	r5, [pc, #48]	; (800ddbc <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800dd8c:	6869      	ldr	r1, [r5, #4]
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7f2 fa1e 	bl	80001d0 <strcmp>
 800dd94:	b940      	cbnz	r0, 800dda8 <fs_open+0x28>
      file->data = (const char *)f->data;
 800dd96:	68ab      	ldr	r3, [r5, #8]
 800dd98:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800dd9a:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800dd9c:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800dd9e:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800dda2:	7c2b      	ldrb	r3, [r5, #16]
 800dda4:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800dda8:	682d      	ldr	r5, [r5, #0]
 800ddaa:	2d00      	cmp	r5, #0
 800ddac:	d1ee      	bne.n	800dd8c <fs_open+0xc>
  return ERR_VAL;
 800ddae:	f06f 0005 	mvn.w	r0, #5
 800ddb2:	e7f8      	b.n	800dda6 <fs_open+0x26>
    return ERR_ARG;
 800ddb4:	f06f 000f 	mvn.w	r0, #15
 800ddb8:	e7f5      	b.n	800dda6 <fs_open+0x26>
 800ddba:	bf00      	nop
 800ddbc:	0800fafc 	.word	0x0800fafc

0800ddc0 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <__errno>:
 800ddc4:	4b01      	ldr	r3, [pc, #4]	; (800ddcc <__errno+0x8>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	20000044 	.word	0x20000044

0800ddd0 <__libc_init_array>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	4d0d      	ldr	r5, [pc, #52]	; (800de08 <__libc_init_array+0x38>)
 800ddd4:	4c0d      	ldr	r4, [pc, #52]	; (800de0c <__libc_init_array+0x3c>)
 800ddd6:	1b64      	subs	r4, r4, r5
 800ddd8:	10a4      	asrs	r4, r4, #2
 800ddda:	2600      	movs	r6, #0
 800dddc:	42a6      	cmp	r6, r4
 800ddde:	d109      	bne.n	800ddf4 <__libc_init_array+0x24>
 800dde0:	4d0b      	ldr	r5, [pc, #44]	; (800de10 <__libc_init_array+0x40>)
 800dde2:	4c0c      	ldr	r4, [pc, #48]	; (800de14 <__libc_init_array+0x44>)
 800dde4:	f001 fa44 	bl	800f270 <_init>
 800dde8:	1b64      	subs	r4, r4, r5
 800ddea:	10a4      	asrs	r4, r4, #2
 800ddec:	2600      	movs	r6, #0
 800ddee:	42a6      	cmp	r6, r4
 800ddf0:	d105      	bne.n	800ddfe <__libc_init_array+0x2e>
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}
 800ddf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddf8:	4798      	blx	r3
 800ddfa:	3601      	adds	r6, #1
 800ddfc:	e7ee      	b.n	800dddc <__libc_init_array+0xc>
 800ddfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800de02:	4798      	blx	r3
 800de04:	3601      	adds	r6, #1
 800de06:	e7f2      	b.n	800ddee <__libc_init_array+0x1e>
 800de08:	0801df9c 	.word	0x0801df9c
 800de0c:	0801df9c 	.word	0x0801df9c
 800de10:	0801df9c 	.word	0x0801df9c
 800de14:	0801dfa0 	.word	0x0801dfa0

0800de18 <memcmp>:
 800de18:	b530      	push	{r4, r5, lr}
 800de1a:	3901      	subs	r1, #1
 800de1c:	2400      	movs	r4, #0
 800de1e:	42a2      	cmp	r2, r4
 800de20:	d101      	bne.n	800de26 <memcmp+0xe>
 800de22:	2000      	movs	r0, #0
 800de24:	e005      	b.n	800de32 <memcmp+0x1a>
 800de26:	5d03      	ldrb	r3, [r0, r4]
 800de28:	3401      	adds	r4, #1
 800de2a:	5d0d      	ldrb	r5, [r1, r4]
 800de2c:	42ab      	cmp	r3, r5
 800de2e:	d0f6      	beq.n	800de1e <memcmp+0x6>
 800de30:	1b58      	subs	r0, r3, r5
 800de32:	bd30      	pop	{r4, r5, pc}

0800de34 <memcpy>:
 800de34:	440a      	add	r2, r1
 800de36:	4291      	cmp	r1, r2
 800de38:	f100 33ff 	add.w	r3, r0, #4294967295
 800de3c:	d100      	bne.n	800de40 <memcpy+0xc>
 800de3e:	4770      	bx	lr
 800de40:	b510      	push	{r4, lr}
 800de42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de4a:	4291      	cmp	r1, r2
 800de4c:	d1f9      	bne.n	800de42 <memcpy+0xe>
 800de4e:	bd10      	pop	{r4, pc}

0800de50 <memmove>:
 800de50:	4288      	cmp	r0, r1
 800de52:	b510      	push	{r4, lr}
 800de54:	eb01 0402 	add.w	r4, r1, r2
 800de58:	d902      	bls.n	800de60 <memmove+0x10>
 800de5a:	4284      	cmp	r4, r0
 800de5c:	4623      	mov	r3, r4
 800de5e:	d807      	bhi.n	800de70 <memmove+0x20>
 800de60:	1e43      	subs	r3, r0, #1
 800de62:	42a1      	cmp	r1, r4
 800de64:	d008      	beq.n	800de78 <memmove+0x28>
 800de66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de6e:	e7f8      	b.n	800de62 <memmove+0x12>
 800de70:	4402      	add	r2, r0
 800de72:	4601      	mov	r1, r0
 800de74:	428a      	cmp	r2, r1
 800de76:	d100      	bne.n	800de7a <memmove+0x2a>
 800de78:	bd10      	pop	{r4, pc}
 800de7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de82:	e7f7      	b.n	800de74 <memmove+0x24>

0800de84 <memset>:
 800de84:	4402      	add	r2, r0
 800de86:	4603      	mov	r3, r0
 800de88:	4293      	cmp	r3, r2
 800de8a:	d100      	bne.n	800de8e <memset+0xa>
 800de8c:	4770      	bx	lr
 800de8e:	f803 1b01 	strb.w	r1, [r3], #1
 800de92:	e7f9      	b.n	800de88 <memset+0x4>

0800de94 <iprintf>:
 800de94:	b40f      	push	{r0, r1, r2, r3}
 800de96:	4b0a      	ldr	r3, [pc, #40]	; (800dec0 <iprintf+0x2c>)
 800de98:	b513      	push	{r0, r1, r4, lr}
 800de9a:	681c      	ldr	r4, [r3, #0]
 800de9c:	b124      	cbz	r4, 800dea8 <iprintf+0x14>
 800de9e:	69a3      	ldr	r3, [r4, #24]
 800dea0:	b913      	cbnz	r3, 800dea8 <iprintf+0x14>
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 f90e 	bl	800e0c4 <__sinit>
 800dea8:	ab05      	add	r3, sp, #20
 800deaa:	9a04      	ldr	r2, [sp, #16]
 800deac:	68a1      	ldr	r1, [r4, #8]
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	4620      	mov	r0, r4
 800deb2:	f000 fbf1 	bl	800e698 <_vfiprintf_r>
 800deb6:	b002      	add	sp, #8
 800deb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800debc:	b004      	add	sp, #16
 800debe:	4770      	bx	lr
 800dec0:	20000044 	.word	0x20000044

0800dec4 <rand>:
 800dec4:	4b17      	ldr	r3, [pc, #92]	; (800df24 <rand+0x60>)
 800dec6:	b510      	push	{r4, lr}
 800dec8:	681c      	ldr	r4, [r3, #0]
 800deca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800decc:	b9b3      	cbnz	r3, 800defc <rand+0x38>
 800dece:	2018      	movs	r0, #24
 800ded0:	f000 f9aa 	bl	800e228 <malloc>
 800ded4:	63a0      	str	r0, [r4, #56]	; 0x38
 800ded6:	b928      	cbnz	r0, 800dee4 <rand+0x20>
 800ded8:	4602      	mov	r2, r0
 800deda:	4b13      	ldr	r3, [pc, #76]	; (800df28 <rand+0x64>)
 800dedc:	4813      	ldr	r0, [pc, #76]	; (800df2c <rand+0x68>)
 800dede:	214e      	movs	r1, #78	; 0x4e
 800dee0:	f000 f87a 	bl	800dfd8 <__assert_func>
 800dee4:	4a12      	ldr	r2, [pc, #72]	; (800df30 <rand+0x6c>)
 800dee6:	4b13      	ldr	r3, [pc, #76]	; (800df34 <rand+0x70>)
 800dee8:	e9c0 2300 	strd	r2, r3, [r0]
 800deec:	4b12      	ldr	r3, [pc, #72]	; (800df38 <rand+0x74>)
 800deee:	6083      	str	r3, [r0, #8]
 800def0:	230b      	movs	r3, #11
 800def2:	8183      	strh	r3, [r0, #12]
 800def4:	2201      	movs	r2, #1
 800def6:	2300      	movs	r3, #0
 800def8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800defc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800defe:	480f      	ldr	r0, [pc, #60]	; (800df3c <rand+0x78>)
 800df00:	690a      	ldr	r2, [r1, #16]
 800df02:	694b      	ldr	r3, [r1, #20]
 800df04:	4c0e      	ldr	r4, [pc, #56]	; (800df40 <rand+0x7c>)
 800df06:	4350      	muls	r0, r2
 800df08:	fb04 0003 	mla	r0, r4, r3, r0
 800df0c:	fba2 3404 	umull	r3, r4, r2, r4
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	4404      	add	r4, r0
 800df14:	f144 0000 	adc.w	r0, r4, #0
 800df18:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800df1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df20:	bd10      	pop	{r4, pc}
 800df22:	bf00      	nop
 800df24:	20000044 	.word	0x20000044
 800df28:	0801de4c 	.word	0x0801de4c
 800df2c:	0801de63 	.word	0x0801de63
 800df30:	abcd330e 	.word	0xabcd330e
 800df34:	e66d1234 	.word	0xe66d1234
 800df38:	0005deec 	.word	0x0005deec
 800df3c:	5851f42d 	.word	0x5851f42d
 800df40:	4c957f2d 	.word	0x4c957f2d

0800df44 <siprintf>:
 800df44:	b40e      	push	{r1, r2, r3}
 800df46:	b500      	push	{lr}
 800df48:	b09c      	sub	sp, #112	; 0x70
 800df4a:	ab1d      	add	r3, sp, #116	; 0x74
 800df4c:	9002      	str	r0, [sp, #8]
 800df4e:	9006      	str	r0, [sp, #24]
 800df50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df54:	4809      	ldr	r0, [pc, #36]	; (800df7c <siprintf+0x38>)
 800df56:	9107      	str	r1, [sp, #28]
 800df58:	9104      	str	r1, [sp, #16]
 800df5a:	4909      	ldr	r1, [pc, #36]	; (800df80 <siprintf+0x3c>)
 800df5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800df60:	9105      	str	r1, [sp, #20]
 800df62:	6800      	ldr	r0, [r0, #0]
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	a902      	add	r1, sp, #8
 800df68:	f000 fa6c 	bl	800e444 <_svfiprintf_r>
 800df6c:	9b02      	ldr	r3, [sp, #8]
 800df6e:	2200      	movs	r2, #0
 800df70:	701a      	strb	r2, [r3, #0]
 800df72:	b01c      	add	sp, #112	; 0x70
 800df74:	f85d eb04 	ldr.w	lr, [sp], #4
 800df78:	b003      	add	sp, #12
 800df7a:	4770      	bx	lr
 800df7c:	20000044 	.word	0x20000044
 800df80:	ffff0208 	.word	0xffff0208

0800df84 <strcat>:
 800df84:	b510      	push	{r4, lr}
 800df86:	4602      	mov	r2, r0
 800df88:	7814      	ldrb	r4, [r2, #0]
 800df8a:	4613      	mov	r3, r2
 800df8c:	3201      	adds	r2, #1
 800df8e:	2c00      	cmp	r4, #0
 800df90:	d1fa      	bne.n	800df88 <strcat+0x4>
 800df92:	3b01      	subs	r3, #1
 800df94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df9c:	2a00      	cmp	r2, #0
 800df9e:	d1f9      	bne.n	800df94 <strcat+0x10>
 800dfa0:	bd10      	pop	{r4, pc}

0800dfa2 <strcpy>:
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfa8:	f803 2b01 	strb.w	r2, [r3], #1
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	d1f9      	bne.n	800dfa4 <strcpy+0x2>
 800dfb0:	4770      	bx	lr

0800dfb2 <strncmp>:
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	b16a      	cbz	r2, 800dfd2 <strncmp+0x20>
 800dfb6:	3901      	subs	r1, #1
 800dfb8:	1884      	adds	r4, r0, r2
 800dfba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dfbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d103      	bne.n	800dfce <strncmp+0x1c>
 800dfc6:	42a0      	cmp	r0, r4
 800dfc8:	d001      	beq.n	800dfce <strncmp+0x1c>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1f5      	bne.n	800dfba <strncmp+0x8>
 800dfce:	1a98      	subs	r0, r3, r2
 800dfd0:	bd10      	pop	{r4, pc}
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	e7fc      	b.n	800dfd0 <strncmp+0x1e>
	...

0800dfd8 <__assert_func>:
 800dfd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfda:	4614      	mov	r4, r2
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4b09      	ldr	r3, [pc, #36]	; (800e004 <__assert_func+0x2c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	68d8      	ldr	r0, [r3, #12]
 800dfe6:	b14c      	cbz	r4, 800dffc <__assert_func+0x24>
 800dfe8:	4b07      	ldr	r3, [pc, #28]	; (800e008 <__assert_func+0x30>)
 800dfea:	9100      	str	r1, [sp, #0]
 800dfec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dff0:	4906      	ldr	r1, [pc, #24]	; (800e00c <__assert_func+0x34>)
 800dff2:	462b      	mov	r3, r5
 800dff4:	f000 f8e4 	bl	800e1c0 <fiprintf>
 800dff8:	f000 ff38 	bl	800ee6c <abort>
 800dffc:	4b04      	ldr	r3, [pc, #16]	; (800e010 <__assert_func+0x38>)
 800dffe:	461c      	mov	r4, r3
 800e000:	e7f3      	b.n	800dfea <__assert_func+0x12>
 800e002:	bf00      	nop
 800e004:	20000044 	.word	0x20000044
 800e008:	0801dec2 	.word	0x0801dec2
 800e00c:	0801decf 	.word	0x0801decf
 800e010:	0801a6a1 	.word	0x0801a6a1

0800e014 <std>:
 800e014:	2300      	movs	r3, #0
 800e016:	b510      	push	{r4, lr}
 800e018:	4604      	mov	r4, r0
 800e01a:	e9c0 3300 	strd	r3, r3, [r0]
 800e01e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e022:	6083      	str	r3, [r0, #8]
 800e024:	8181      	strh	r1, [r0, #12]
 800e026:	6643      	str	r3, [r0, #100]	; 0x64
 800e028:	81c2      	strh	r2, [r0, #14]
 800e02a:	6183      	str	r3, [r0, #24]
 800e02c:	4619      	mov	r1, r3
 800e02e:	2208      	movs	r2, #8
 800e030:	305c      	adds	r0, #92	; 0x5c
 800e032:	f7ff ff27 	bl	800de84 <memset>
 800e036:	4b05      	ldr	r3, [pc, #20]	; (800e04c <std+0x38>)
 800e038:	6263      	str	r3, [r4, #36]	; 0x24
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <std+0x3c>)
 800e03c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e03e:	4b05      	ldr	r3, [pc, #20]	; (800e054 <std+0x40>)
 800e040:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e042:	4b05      	ldr	r3, [pc, #20]	; (800e058 <std+0x44>)
 800e044:	6224      	str	r4, [r4, #32]
 800e046:	6323      	str	r3, [r4, #48]	; 0x30
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	bf00      	nop
 800e04c:	0800ec41 	.word	0x0800ec41
 800e050:	0800ec63 	.word	0x0800ec63
 800e054:	0800ec9b 	.word	0x0800ec9b
 800e058:	0800ecbf 	.word	0x0800ecbf

0800e05c <_cleanup_r>:
 800e05c:	4901      	ldr	r1, [pc, #4]	; (800e064 <_cleanup_r+0x8>)
 800e05e:	f000 b8c1 	b.w	800e1e4 <_fwalk_reent>
 800e062:	bf00      	nop
 800e064:	0800efa9 	.word	0x0800efa9

0800e068 <__sfmoreglue>:
 800e068:	b570      	push	{r4, r5, r6, lr}
 800e06a:	1e4a      	subs	r2, r1, #1
 800e06c:	2568      	movs	r5, #104	; 0x68
 800e06e:	4355      	muls	r5, r2
 800e070:	460e      	mov	r6, r1
 800e072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e076:	f000 f92f 	bl	800e2d8 <_malloc_r>
 800e07a:	4604      	mov	r4, r0
 800e07c:	b140      	cbz	r0, 800e090 <__sfmoreglue+0x28>
 800e07e:	2100      	movs	r1, #0
 800e080:	e9c0 1600 	strd	r1, r6, [r0]
 800e084:	300c      	adds	r0, #12
 800e086:	60a0      	str	r0, [r4, #8]
 800e088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e08c:	f7ff fefa 	bl	800de84 <memset>
 800e090:	4620      	mov	r0, r4
 800e092:	bd70      	pop	{r4, r5, r6, pc}

0800e094 <__sfp_lock_acquire>:
 800e094:	4801      	ldr	r0, [pc, #4]	; (800e09c <__sfp_lock_acquire+0x8>)
 800e096:	f000 b8c5 	b.w	800e224 <__retarget_lock_acquire_recursive>
 800e09a:	bf00      	nop
 800e09c:	20014a34 	.word	0x20014a34

0800e0a0 <__sfp_lock_release>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	; (800e0a8 <__sfp_lock_release+0x8>)
 800e0a2:	f000 b8c0 	b.w	800e226 <__retarget_lock_release_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	20014a34 	.word	0x20014a34

0800e0ac <__sinit_lock_acquire>:
 800e0ac:	4801      	ldr	r0, [pc, #4]	; (800e0b4 <__sinit_lock_acquire+0x8>)
 800e0ae:	f000 b8b9 	b.w	800e224 <__retarget_lock_acquire_recursive>
 800e0b2:	bf00      	nop
 800e0b4:	20014a2f 	.word	0x20014a2f

0800e0b8 <__sinit_lock_release>:
 800e0b8:	4801      	ldr	r0, [pc, #4]	; (800e0c0 <__sinit_lock_release+0x8>)
 800e0ba:	f000 b8b4 	b.w	800e226 <__retarget_lock_release_recursive>
 800e0be:	bf00      	nop
 800e0c0:	20014a2f 	.word	0x20014a2f

0800e0c4 <__sinit>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	f7ff fff0 	bl	800e0ac <__sinit_lock_acquire>
 800e0cc:	69a3      	ldr	r3, [r4, #24]
 800e0ce:	b11b      	cbz	r3, 800e0d8 <__sinit+0x14>
 800e0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0d4:	f7ff bff0 	b.w	800e0b8 <__sinit_lock_release>
 800e0d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0dc:	6523      	str	r3, [r4, #80]	; 0x50
 800e0de:	4b13      	ldr	r3, [pc, #76]	; (800e12c <__sinit+0x68>)
 800e0e0:	4a13      	ldr	r2, [pc, #76]	; (800e130 <__sinit+0x6c>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0e6:	42a3      	cmp	r3, r4
 800e0e8:	bf04      	itt	eq
 800e0ea:	2301      	moveq	r3, #1
 800e0ec:	61a3      	streq	r3, [r4, #24]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 f820 	bl	800e134 <__sfp>
 800e0f4:	6060      	str	r0, [r4, #4]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 f81c 	bl	800e134 <__sfp>
 800e0fc:	60a0      	str	r0, [r4, #8]
 800e0fe:	4620      	mov	r0, r4
 800e100:	f000 f818 	bl	800e134 <__sfp>
 800e104:	2200      	movs	r2, #0
 800e106:	60e0      	str	r0, [r4, #12]
 800e108:	2104      	movs	r1, #4
 800e10a:	6860      	ldr	r0, [r4, #4]
 800e10c:	f7ff ff82 	bl	800e014 <std>
 800e110:	68a0      	ldr	r0, [r4, #8]
 800e112:	2201      	movs	r2, #1
 800e114:	2109      	movs	r1, #9
 800e116:	f7ff ff7d 	bl	800e014 <std>
 800e11a:	68e0      	ldr	r0, [r4, #12]
 800e11c:	2202      	movs	r2, #2
 800e11e:	2112      	movs	r1, #18
 800e120:	f7ff ff78 	bl	800e014 <std>
 800e124:	2301      	movs	r3, #1
 800e126:	61a3      	str	r3, [r4, #24]
 800e128:	e7d2      	b.n	800e0d0 <__sinit+0xc>
 800e12a:	bf00      	nop
 800e12c:	0801de48 	.word	0x0801de48
 800e130:	0800e05d 	.word	0x0800e05d

0800e134 <__sfp>:
 800e134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e136:	4607      	mov	r7, r0
 800e138:	f7ff ffac 	bl	800e094 <__sfp_lock_acquire>
 800e13c:	4b1e      	ldr	r3, [pc, #120]	; (800e1b8 <__sfp+0x84>)
 800e13e:	681e      	ldr	r6, [r3, #0]
 800e140:	69b3      	ldr	r3, [r6, #24]
 800e142:	b913      	cbnz	r3, 800e14a <__sfp+0x16>
 800e144:	4630      	mov	r0, r6
 800e146:	f7ff ffbd 	bl	800e0c4 <__sinit>
 800e14a:	3648      	adds	r6, #72	; 0x48
 800e14c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e150:	3b01      	subs	r3, #1
 800e152:	d503      	bpl.n	800e15c <__sfp+0x28>
 800e154:	6833      	ldr	r3, [r6, #0]
 800e156:	b30b      	cbz	r3, 800e19c <__sfp+0x68>
 800e158:	6836      	ldr	r6, [r6, #0]
 800e15a:	e7f7      	b.n	800e14c <__sfp+0x18>
 800e15c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e160:	b9d5      	cbnz	r5, 800e198 <__sfp+0x64>
 800e162:	4b16      	ldr	r3, [pc, #88]	; (800e1bc <__sfp+0x88>)
 800e164:	60e3      	str	r3, [r4, #12]
 800e166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e16a:	6665      	str	r5, [r4, #100]	; 0x64
 800e16c:	f000 f859 	bl	800e222 <__retarget_lock_init_recursive>
 800e170:	f7ff ff96 	bl	800e0a0 <__sfp_lock_release>
 800e174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e17c:	6025      	str	r5, [r4, #0]
 800e17e:	61a5      	str	r5, [r4, #24]
 800e180:	2208      	movs	r2, #8
 800e182:	4629      	mov	r1, r5
 800e184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e188:	f7ff fe7c 	bl	800de84 <memset>
 800e18c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e194:	4620      	mov	r0, r4
 800e196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e198:	3468      	adds	r4, #104	; 0x68
 800e19a:	e7d9      	b.n	800e150 <__sfp+0x1c>
 800e19c:	2104      	movs	r1, #4
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7ff ff62 	bl	800e068 <__sfmoreglue>
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	6030      	str	r0, [r6, #0]
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d1d5      	bne.n	800e158 <__sfp+0x24>
 800e1ac:	f7ff ff78 	bl	800e0a0 <__sfp_lock_release>
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	603b      	str	r3, [r7, #0]
 800e1b4:	e7ee      	b.n	800e194 <__sfp+0x60>
 800e1b6:	bf00      	nop
 800e1b8:	0801de48 	.word	0x0801de48
 800e1bc:	ffff0001 	.word	0xffff0001

0800e1c0 <fiprintf>:
 800e1c0:	b40e      	push	{r1, r2, r3}
 800e1c2:	b503      	push	{r0, r1, lr}
 800e1c4:	4601      	mov	r1, r0
 800e1c6:	ab03      	add	r3, sp, #12
 800e1c8:	4805      	ldr	r0, [pc, #20]	; (800e1e0 <fiprintf+0x20>)
 800e1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1ce:	6800      	ldr	r0, [r0, #0]
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	f000 fa61 	bl	800e698 <_vfiprintf_r>
 800e1d6:	b002      	add	sp, #8
 800e1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1dc:	b003      	add	sp, #12
 800e1de:	4770      	bx	lr
 800e1e0:	20000044 	.word	0x20000044

0800e1e4 <_fwalk_reent>:
 800e1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	4688      	mov	r8, r1
 800e1ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1f0:	2700      	movs	r7, #0
 800e1f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1f6:	f1b9 0901 	subs.w	r9, r9, #1
 800e1fa:	d505      	bpl.n	800e208 <_fwalk_reent+0x24>
 800e1fc:	6824      	ldr	r4, [r4, #0]
 800e1fe:	2c00      	cmp	r4, #0
 800e200:	d1f7      	bne.n	800e1f2 <_fwalk_reent+0xe>
 800e202:	4638      	mov	r0, r7
 800e204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e208:	89ab      	ldrh	r3, [r5, #12]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d907      	bls.n	800e21e <_fwalk_reent+0x3a>
 800e20e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e212:	3301      	adds	r3, #1
 800e214:	d003      	beq.n	800e21e <_fwalk_reent+0x3a>
 800e216:	4629      	mov	r1, r5
 800e218:	4630      	mov	r0, r6
 800e21a:	47c0      	blx	r8
 800e21c:	4307      	orrs	r7, r0
 800e21e:	3568      	adds	r5, #104	; 0x68
 800e220:	e7e9      	b.n	800e1f6 <_fwalk_reent+0x12>

0800e222 <__retarget_lock_init_recursive>:
 800e222:	4770      	bx	lr

0800e224 <__retarget_lock_acquire_recursive>:
 800e224:	4770      	bx	lr

0800e226 <__retarget_lock_release_recursive>:
 800e226:	4770      	bx	lr

0800e228 <malloc>:
 800e228:	4b02      	ldr	r3, [pc, #8]	; (800e234 <malloc+0xc>)
 800e22a:	4601      	mov	r1, r0
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f000 b853 	b.w	800e2d8 <_malloc_r>
 800e232:	bf00      	nop
 800e234:	20000044 	.word	0x20000044

0800e238 <_free_r>:
 800e238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e23a:	2900      	cmp	r1, #0
 800e23c:	d048      	beq.n	800e2d0 <_free_r+0x98>
 800e23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e242:	9001      	str	r0, [sp, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f1a1 0404 	sub.w	r4, r1, #4
 800e24a:	bfb8      	it	lt
 800e24c:	18e4      	addlt	r4, r4, r3
 800e24e:	f000 ff5d 	bl	800f10c <__malloc_lock>
 800e252:	4a20      	ldr	r2, [pc, #128]	; (800e2d4 <_free_r+0x9c>)
 800e254:	9801      	ldr	r0, [sp, #4]
 800e256:	6813      	ldr	r3, [r2, #0]
 800e258:	4615      	mov	r5, r2
 800e25a:	b933      	cbnz	r3, 800e26a <_free_r+0x32>
 800e25c:	6063      	str	r3, [r4, #4]
 800e25e:	6014      	str	r4, [r2, #0]
 800e260:	b003      	add	sp, #12
 800e262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e266:	f000 bf57 	b.w	800f118 <__malloc_unlock>
 800e26a:	42a3      	cmp	r3, r4
 800e26c:	d90b      	bls.n	800e286 <_free_r+0x4e>
 800e26e:	6821      	ldr	r1, [r4, #0]
 800e270:	1862      	adds	r2, r4, r1
 800e272:	4293      	cmp	r3, r2
 800e274:	bf04      	itt	eq
 800e276:	681a      	ldreq	r2, [r3, #0]
 800e278:	685b      	ldreq	r3, [r3, #4]
 800e27a:	6063      	str	r3, [r4, #4]
 800e27c:	bf04      	itt	eq
 800e27e:	1852      	addeq	r2, r2, r1
 800e280:	6022      	streq	r2, [r4, #0]
 800e282:	602c      	str	r4, [r5, #0]
 800e284:	e7ec      	b.n	800e260 <_free_r+0x28>
 800e286:	461a      	mov	r2, r3
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	b10b      	cbz	r3, 800e290 <_free_r+0x58>
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	d9fa      	bls.n	800e286 <_free_r+0x4e>
 800e290:	6811      	ldr	r1, [r2, #0]
 800e292:	1855      	adds	r5, r2, r1
 800e294:	42a5      	cmp	r5, r4
 800e296:	d10b      	bne.n	800e2b0 <_free_r+0x78>
 800e298:	6824      	ldr	r4, [r4, #0]
 800e29a:	4421      	add	r1, r4
 800e29c:	1854      	adds	r4, r2, r1
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	6011      	str	r1, [r2, #0]
 800e2a2:	d1dd      	bne.n	800e260 <_free_r+0x28>
 800e2a4:	681c      	ldr	r4, [r3, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	6053      	str	r3, [r2, #4]
 800e2aa:	4421      	add	r1, r4
 800e2ac:	6011      	str	r1, [r2, #0]
 800e2ae:	e7d7      	b.n	800e260 <_free_r+0x28>
 800e2b0:	d902      	bls.n	800e2b8 <_free_r+0x80>
 800e2b2:	230c      	movs	r3, #12
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	e7d3      	b.n	800e260 <_free_r+0x28>
 800e2b8:	6825      	ldr	r5, [r4, #0]
 800e2ba:	1961      	adds	r1, r4, r5
 800e2bc:	428b      	cmp	r3, r1
 800e2be:	bf04      	itt	eq
 800e2c0:	6819      	ldreq	r1, [r3, #0]
 800e2c2:	685b      	ldreq	r3, [r3, #4]
 800e2c4:	6063      	str	r3, [r4, #4]
 800e2c6:	bf04      	itt	eq
 800e2c8:	1949      	addeq	r1, r1, r5
 800e2ca:	6021      	streq	r1, [r4, #0]
 800e2cc:	6054      	str	r4, [r2, #4]
 800e2ce:	e7c7      	b.n	800e260 <_free_r+0x28>
 800e2d0:	b003      	add	sp, #12
 800e2d2:	bd30      	pop	{r4, r5, pc}
 800e2d4:	200067fc 	.word	0x200067fc

0800e2d8 <_malloc_r>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	1ccd      	adds	r5, r1, #3
 800e2dc:	f025 0503 	bic.w	r5, r5, #3
 800e2e0:	3508      	adds	r5, #8
 800e2e2:	2d0c      	cmp	r5, #12
 800e2e4:	bf38      	it	cc
 800e2e6:	250c      	movcc	r5, #12
 800e2e8:	2d00      	cmp	r5, #0
 800e2ea:	4606      	mov	r6, r0
 800e2ec:	db01      	blt.n	800e2f2 <_malloc_r+0x1a>
 800e2ee:	42a9      	cmp	r1, r5
 800e2f0:	d903      	bls.n	800e2fa <_malloc_r+0x22>
 800e2f2:	230c      	movs	r3, #12
 800e2f4:	6033      	str	r3, [r6, #0]
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2fa:	f000 ff07 	bl	800f10c <__malloc_lock>
 800e2fe:	4921      	ldr	r1, [pc, #132]	; (800e384 <_malloc_r+0xac>)
 800e300:	680a      	ldr	r2, [r1, #0]
 800e302:	4614      	mov	r4, r2
 800e304:	b99c      	cbnz	r4, 800e32e <_malloc_r+0x56>
 800e306:	4f20      	ldr	r7, [pc, #128]	; (800e388 <_malloc_r+0xb0>)
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	b923      	cbnz	r3, 800e316 <_malloc_r+0x3e>
 800e30c:	4621      	mov	r1, r4
 800e30e:	4630      	mov	r0, r6
 800e310:	f000 fc86 	bl	800ec20 <_sbrk_r>
 800e314:	6038      	str	r0, [r7, #0]
 800e316:	4629      	mov	r1, r5
 800e318:	4630      	mov	r0, r6
 800e31a:	f000 fc81 	bl	800ec20 <_sbrk_r>
 800e31e:	1c43      	adds	r3, r0, #1
 800e320:	d123      	bne.n	800e36a <_malloc_r+0x92>
 800e322:	230c      	movs	r3, #12
 800e324:	6033      	str	r3, [r6, #0]
 800e326:	4630      	mov	r0, r6
 800e328:	f000 fef6 	bl	800f118 <__malloc_unlock>
 800e32c:	e7e3      	b.n	800e2f6 <_malloc_r+0x1e>
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	1b5b      	subs	r3, r3, r5
 800e332:	d417      	bmi.n	800e364 <_malloc_r+0x8c>
 800e334:	2b0b      	cmp	r3, #11
 800e336:	d903      	bls.n	800e340 <_malloc_r+0x68>
 800e338:	6023      	str	r3, [r4, #0]
 800e33a:	441c      	add	r4, r3
 800e33c:	6025      	str	r5, [r4, #0]
 800e33e:	e004      	b.n	800e34a <_malloc_r+0x72>
 800e340:	6863      	ldr	r3, [r4, #4]
 800e342:	42a2      	cmp	r2, r4
 800e344:	bf0c      	ite	eq
 800e346:	600b      	streq	r3, [r1, #0]
 800e348:	6053      	strne	r3, [r2, #4]
 800e34a:	4630      	mov	r0, r6
 800e34c:	f000 fee4 	bl	800f118 <__malloc_unlock>
 800e350:	f104 000b 	add.w	r0, r4, #11
 800e354:	1d23      	adds	r3, r4, #4
 800e356:	f020 0007 	bic.w	r0, r0, #7
 800e35a:	1ac2      	subs	r2, r0, r3
 800e35c:	d0cc      	beq.n	800e2f8 <_malloc_r+0x20>
 800e35e:	1a1b      	subs	r3, r3, r0
 800e360:	50a3      	str	r3, [r4, r2]
 800e362:	e7c9      	b.n	800e2f8 <_malloc_r+0x20>
 800e364:	4622      	mov	r2, r4
 800e366:	6864      	ldr	r4, [r4, #4]
 800e368:	e7cc      	b.n	800e304 <_malloc_r+0x2c>
 800e36a:	1cc4      	adds	r4, r0, #3
 800e36c:	f024 0403 	bic.w	r4, r4, #3
 800e370:	42a0      	cmp	r0, r4
 800e372:	d0e3      	beq.n	800e33c <_malloc_r+0x64>
 800e374:	1a21      	subs	r1, r4, r0
 800e376:	4630      	mov	r0, r6
 800e378:	f000 fc52 	bl	800ec20 <_sbrk_r>
 800e37c:	3001      	adds	r0, #1
 800e37e:	d1dd      	bne.n	800e33c <_malloc_r+0x64>
 800e380:	e7cf      	b.n	800e322 <_malloc_r+0x4a>
 800e382:	bf00      	nop
 800e384:	200067fc 	.word	0x200067fc
 800e388:	20006800 	.word	0x20006800

0800e38c <__ssputs_r>:
 800e38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e390:	688e      	ldr	r6, [r1, #8]
 800e392:	429e      	cmp	r6, r3
 800e394:	4682      	mov	sl, r0
 800e396:	460c      	mov	r4, r1
 800e398:	4690      	mov	r8, r2
 800e39a:	461f      	mov	r7, r3
 800e39c:	d838      	bhi.n	800e410 <__ssputs_r+0x84>
 800e39e:	898a      	ldrh	r2, [r1, #12]
 800e3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3a4:	d032      	beq.n	800e40c <__ssputs_r+0x80>
 800e3a6:	6825      	ldr	r5, [r4, #0]
 800e3a8:	6909      	ldr	r1, [r1, #16]
 800e3aa:	eba5 0901 	sub.w	r9, r5, r1
 800e3ae:	6965      	ldr	r5, [r4, #20]
 800e3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	444b      	add	r3, r9
 800e3bc:	106d      	asrs	r5, r5, #1
 800e3be:	429d      	cmp	r5, r3
 800e3c0:	bf38      	it	cc
 800e3c2:	461d      	movcc	r5, r3
 800e3c4:	0553      	lsls	r3, r2, #21
 800e3c6:	d531      	bpl.n	800e42c <__ssputs_r+0xa0>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7ff ff85 	bl	800e2d8 <_malloc_r>
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	b950      	cbnz	r0, 800e3e8 <__ssputs_r+0x5c>
 800e3d2:	230c      	movs	r3, #12
 800e3d4:	f8ca 3000 	str.w	r3, [sl]
 800e3d8:	89a3      	ldrh	r3, [r4, #12]
 800e3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e8:	6921      	ldr	r1, [r4, #16]
 800e3ea:	464a      	mov	r2, r9
 800e3ec:	f7ff fd22 	bl	800de34 <memcpy>
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3fa:	81a3      	strh	r3, [r4, #12]
 800e3fc:	6126      	str	r6, [r4, #16]
 800e3fe:	6165      	str	r5, [r4, #20]
 800e400:	444e      	add	r6, r9
 800e402:	eba5 0509 	sub.w	r5, r5, r9
 800e406:	6026      	str	r6, [r4, #0]
 800e408:	60a5      	str	r5, [r4, #8]
 800e40a:	463e      	mov	r6, r7
 800e40c:	42be      	cmp	r6, r7
 800e40e:	d900      	bls.n	800e412 <__ssputs_r+0x86>
 800e410:	463e      	mov	r6, r7
 800e412:	4632      	mov	r2, r6
 800e414:	6820      	ldr	r0, [r4, #0]
 800e416:	4641      	mov	r1, r8
 800e418:	f7ff fd1a 	bl	800de50 <memmove>
 800e41c:	68a3      	ldr	r3, [r4, #8]
 800e41e:	6822      	ldr	r2, [r4, #0]
 800e420:	1b9b      	subs	r3, r3, r6
 800e422:	4432      	add	r2, r6
 800e424:	60a3      	str	r3, [r4, #8]
 800e426:	6022      	str	r2, [r4, #0]
 800e428:	2000      	movs	r0, #0
 800e42a:	e7db      	b.n	800e3e4 <__ssputs_r+0x58>
 800e42c:	462a      	mov	r2, r5
 800e42e:	f000 fe79 	bl	800f124 <_realloc_r>
 800e432:	4606      	mov	r6, r0
 800e434:	2800      	cmp	r0, #0
 800e436:	d1e1      	bne.n	800e3fc <__ssputs_r+0x70>
 800e438:	6921      	ldr	r1, [r4, #16]
 800e43a:	4650      	mov	r0, sl
 800e43c:	f7ff fefc 	bl	800e238 <_free_r>
 800e440:	e7c7      	b.n	800e3d2 <__ssputs_r+0x46>
	...

0800e444 <_svfiprintf_r>:
 800e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	4698      	mov	r8, r3
 800e44a:	898b      	ldrh	r3, [r1, #12]
 800e44c:	061b      	lsls	r3, r3, #24
 800e44e:	b09d      	sub	sp, #116	; 0x74
 800e450:	4607      	mov	r7, r0
 800e452:	460d      	mov	r5, r1
 800e454:	4614      	mov	r4, r2
 800e456:	d50e      	bpl.n	800e476 <_svfiprintf_r+0x32>
 800e458:	690b      	ldr	r3, [r1, #16]
 800e45a:	b963      	cbnz	r3, 800e476 <_svfiprintf_r+0x32>
 800e45c:	2140      	movs	r1, #64	; 0x40
 800e45e:	f7ff ff3b 	bl	800e2d8 <_malloc_r>
 800e462:	6028      	str	r0, [r5, #0]
 800e464:	6128      	str	r0, [r5, #16]
 800e466:	b920      	cbnz	r0, 800e472 <_svfiprintf_r+0x2e>
 800e468:	230c      	movs	r3, #12
 800e46a:	603b      	str	r3, [r7, #0]
 800e46c:	f04f 30ff 	mov.w	r0, #4294967295
 800e470:	e0d1      	b.n	800e616 <_svfiprintf_r+0x1d2>
 800e472:	2340      	movs	r3, #64	; 0x40
 800e474:	616b      	str	r3, [r5, #20]
 800e476:	2300      	movs	r3, #0
 800e478:	9309      	str	r3, [sp, #36]	; 0x24
 800e47a:	2320      	movs	r3, #32
 800e47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e480:	f8cd 800c 	str.w	r8, [sp, #12]
 800e484:	2330      	movs	r3, #48	; 0x30
 800e486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e630 <_svfiprintf_r+0x1ec>
 800e48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e48e:	f04f 0901 	mov.w	r9, #1
 800e492:	4623      	mov	r3, r4
 800e494:	469a      	mov	sl, r3
 800e496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e49a:	b10a      	cbz	r2, 800e4a0 <_svfiprintf_r+0x5c>
 800e49c:	2a25      	cmp	r2, #37	; 0x25
 800e49e:	d1f9      	bne.n	800e494 <_svfiprintf_r+0x50>
 800e4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e4a4:	d00b      	beq.n	800e4be <_svfiprintf_r+0x7a>
 800e4a6:	465b      	mov	r3, fp
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	f7ff ff6d 	bl	800e38c <__ssputs_r>
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	f000 80aa 	beq.w	800e60c <_svfiprintf_r+0x1c8>
 800e4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ba:	445a      	add	r2, fp
 800e4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e4be:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 80a2 	beq.w	800e60c <_svfiprintf_r+0x1c8>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4d2:	f10a 0a01 	add.w	sl, sl, #1
 800e4d6:	9304      	str	r3, [sp, #16]
 800e4d8:	9307      	str	r3, [sp, #28]
 800e4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4de:	931a      	str	r3, [sp, #104]	; 0x68
 800e4e0:	4654      	mov	r4, sl
 800e4e2:	2205      	movs	r2, #5
 800e4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e8:	4851      	ldr	r0, [pc, #324]	; (800e630 <_svfiprintf_r+0x1ec>)
 800e4ea:	f7f1 fe89 	bl	8000200 <memchr>
 800e4ee:	9a04      	ldr	r2, [sp, #16]
 800e4f0:	b9d8      	cbnz	r0, 800e52a <_svfiprintf_r+0xe6>
 800e4f2:	06d0      	lsls	r0, r2, #27
 800e4f4:	bf44      	itt	mi
 800e4f6:	2320      	movmi	r3, #32
 800e4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4fc:	0711      	lsls	r1, r2, #28
 800e4fe:	bf44      	itt	mi
 800e500:	232b      	movmi	r3, #43	; 0x2b
 800e502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e506:	f89a 3000 	ldrb.w	r3, [sl]
 800e50a:	2b2a      	cmp	r3, #42	; 0x2a
 800e50c:	d015      	beq.n	800e53a <_svfiprintf_r+0xf6>
 800e50e:	9a07      	ldr	r2, [sp, #28]
 800e510:	4654      	mov	r4, sl
 800e512:	2000      	movs	r0, #0
 800e514:	f04f 0c0a 	mov.w	ip, #10
 800e518:	4621      	mov	r1, r4
 800e51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e51e:	3b30      	subs	r3, #48	; 0x30
 800e520:	2b09      	cmp	r3, #9
 800e522:	d94e      	bls.n	800e5c2 <_svfiprintf_r+0x17e>
 800e524:	b1b0      	cbz	r0, 800e554 <_svfiprintf_r+0x110>
 800e526:	9207      	str	r2, [sp, #28]
 800e528:	e014      	b.n	800e554 <_svfiprintf_r+0x110>
 800e52a:	eba0 0308 	sub.w	r3, r0, r8
 800e52e:	fa09 f303 	lsl.w	r3, r9, r3
 800e532:	4313      	orrs	r3, r2
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	46a2      	mov	sl, r4
 800e538:	e7d2      	b.n	800e4e0 <_svfiprintf_r+0x9c>
 800e53a:	9b03      	ldr	r3, [sp, #12]
 800e53c:	1d19      	adds	r1, r3, #4
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	9103      	str	r1, [sp, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	bfbb      	ittet	lt
 800e546:	425b      	neglt	r3, r3
 800e548:	f042 0202 	orrlt.w	r2, r2, #2
 800e54c:	9307      	strge	r3, [sp, #28]
 800e54e:	9307      	strlt	r3, [sp, #28]
 800e550:	bfb8      	it	lt
 800e552:	9204      	strlt	r2, [sp, #16]
 800e554:	7823      	ldrb	r3, [r4, #0]
 800e556:	2b2e      	cmp	r3, #46	; 0x2e
 800e558:	d10c      	bne.n	800e574 <_svfiprintf_r+0x130>
 800e55a:	7863      	ldrb	r3, [r4, #1]
 800e55c:	2b2a      	cmp	r3, #42	; 0x2a
 800e55e:	d135      	bne.n	800e5cc <_svfiprintf_r+0x188>
 800e560:	9b03      	ldr	r3, [sp, #12]
 800e562:	1d1a      	adds	r2, r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	9203      	str	r2, [sp, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfb8      	it	lt
 800e56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e570:	3402      	adds	r4, #2
 800e572:	9305      	str	r3, [sp, #20]
 800e574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e640 <_svfiprintf_r+0x1fc>
 800e578:	7821      	ldrb	r1, [r4, #0]
 800e57a:	2203      	movs	r2, #3
 800e57c:	4650      	mov	r0, sl
 800e57e:	f7f1 fe3f 	bl	8000200 <memchr>
 800e582:	b140      	cbz	r0, 800e596 <_svfiprintf_r+0x152>
 800e584:	2340      	movs	r3, #64	; 0x40
 800e586:	eba0 000a 	sub.w	r0, r0, sl
 800e58a:	fa03 f000 	lsl.w	r0, r3, r0
 800e58e:	9b04      	ldr	r3, [sp, #16]
 800e590:	4303      	orrs	r3, r0
 800e592:	3401      	adds	r4, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e59a:	4826      	ldr	r0, [pc, #152]	; (800e634 <_svfiprintf_r+0x1f0>)
 800e59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5a0:	2206      	movs	r2, #6
 800e5a2:	f7f1 fe2d 	bl	8000200 <memchr>
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d038      	beq.n	800e61c <_svfiprintf_r+0x1d8>
 800e5aa:	4b23      	ldr	r3, [pc, #140]	; (800e638 <_svfiprintf_r+0x1f4>)
 800e5ac:	bb1b      	cbnz	r3, 800e5f6 <_svfiprintf_r+0x1b2>
 800e5ae:	9b03      	ldr	r3, [sp, #12]
 800e5b0:	3307      	adds	r3, #7
 800e5b2:	f023 0307 	bic.w	r3, r3, #7
 800e5b6:	3308      	adds	r3, #8
 800e5b8:	9303      	str	r3, [sp, #12]
 800e5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5bc:	4433      	add	r3, r6
 800e5be:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c0:	e767      	b.n	800e492 <_svfiprintf_r+0x4e>
 800e5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5c6:	460c      	mov	r4, r1
 800e5c8:	2001      	movs	r0, #1
 800e5ca:	e7a5      	b.n	800e518 <_svfiprintf_r+0xd4>
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	3401      	adds	r4, #1
 800e5d0:	9305      	str	r3, [sp, #20]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	f04f 0c0a 	mov.w	ip, #10
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5de:	3a30      	subs	r2, #48	; 0x30
 800e5e0:	2a09      	cmp	r2, #9
 800e5e2:	d903      	bls.n	800e5ec <_svfiprintf_r+0x1a8>
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d0c5      	beq.n	800e574 <_svfiprintf_r+0x130>
 800e5e8:	9105      	str	r1, [sp, #20]
 800e5ea:	e7c3      	b.n	800e574 <_svfiprintf_r+0x130>
 800e5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e7f0      	b.n	800e5d8 <_svfiprintf_r+0x194>
 800e5f6:	ab03      	add	r3, sp, #12
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	462a      	mov	r2, r5
 800e5fc:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <_svfiprintf_r+0x1f8>)
 800e5fe:	a904      	add	r1, sp, #16
 800e600:	4638      	mov	r0, r7
 800e602:	f3af 8000 	nop.w
 800e606:	1c42      	adds	r2, r0, #1
 800e608:	4606      	mov	r6, r0
 800e60a:	d1d6      	bne.n	800e5ba <_svfiprintf_r+0x176>
 800e60c:	89ab      	ldrh	r3, [r5, #12]
 800e60e:	065b      	lsls	r3, r3, #25
 800e610:	f53f af2c 	bmi.w	800e46c <_svfiprintf_r+0x28>
 800e614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e616:	b01d      	add	sp, #116	; 0x74
 800e618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61c:	ab03      	add	r3, sp, #12
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	462a      	mov	r2, r5
 800e622:	4b06      	ldr	r3, [pc, #24]	; (800e63c <_svfiprintf_r+0x1f8>)
 800e624:	a904      	add	r1, sp, #16
 800e626:	4638      	mov	r0, r7
 800e628:	f000 f9d4 	bl	800e9d4 <_printf_i>
 800e62c:	e7eb      	b.n	800e606 <_svfiprintf_r+0x1c2>
 800e62e:	bf00      	nop
 800e630:	0801df60 	.word	0x0801df60
 800e634:	0801df6a 	.word	0x0801df6a
 800e638:	00000000 	.word	0x00000000
 800e63c:	0800e38d 	.word	0x0800e38d
 800e640:	0801df66 	.word	0x0801df66

0800e644 <__sfputc_r>:
 800e644:	6893      	ldr	r3, [r2, #8]
 800e646:	3b01      	subs	r3, #1
 800e648:	2b00      	cmp	r3, #0
 800e64a:	b410      	push	{r4}
 800e64c:	6093      	str	r3, [r2, #8]
 800e64e:	da08      	bge.n	800e662 <__sfputc_r+0x1e>
 800e650:	6994      	ldr	r4, [r2, #24]
 800e652:	42a3      	cmp	r3, r4
 800e654:	db01      	blt.n	800e65a <__sfputc_r+0x16>
 800e656:	290a      	cmp	r1, #10
 800e658:	d103      	bne.n	800e662 <__sfputc_r+0x1e>
 800e65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65e:	f000 bb33 	b.w	800ecc8 <__swbuf_r>
 800e662:	6813      	ldr	r3, [r2, #0]
 800e664:	1c58      	adds	r0, r3, #1
 800e666:	6010      	str	r0, [r2, #0]
 800e668:	7019      	strb	r1, [r3, #0]
 800e66a:	4608      	mov	r0, r1
 800e66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <__sfputs_r>:
 800e672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e674:	4606      	mov	r6, r0
 800e676:	460f      	mov	r7, r1
 800e678:	4614      	mov	r4, r2
 800e67a:	18d5      	adds	r5, r2, r3
 800e67c:	42ac      	cmp	r4, r5
 800e67e:	d101      	bne.n	800e684 <__sfputs_r+0x12>
 800e680:	2000      	movs	r0, #0
 800e682:	e007      	b.n	800e694 <__sfputs_r+0x22>
 800e684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e688:	463a      	mov	r2, r7
 800e68a:	4630      	mov	r0, r6
 800e68c:	f7ff ffda 	bl	800e644 <__sfputc_r>
 800e690:	1c43      	adds	r3, r0, #1
 800e692:	d1f3      	bne.n	800e67c <__sfputs_r+0xa>
 800e694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e698 <_vfiprintf_r>:
 800e698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e69c:	460d      	mov	r5, r1
 800e69e:	b09d      	sub	sp, #116	; 0x74
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	4698      	mov	r8, r3
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	b118      	cbz	r0, 800e6b0 <_vfiprintf_r+0x18>
 800e6a8:	6983      	ldr	r3, [r0, #24]
 800e6aa:	b90b      	cbnz	r3, 800e6b0 <_vfiprintf_r+0x18>
 800e6ac:	f7ff fd0a 	bl	800e0c4 <__sinit>
 800e6b0:	4b89      	ldr	r3, [pc, #548]	; (800e8d8 <_vfiprintf_r+0x240>)
 800e6b2:	429d      	cmp	r5, r3
 800e6b4:	d11b      	bne.n	800e6ee <_vfiprintf_r+0x56>
 800e6b6:	6875      	ldr	r5, [r6, #4]
 800e6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6ba:	07d9      	lsls	r1, r3, #31
 800e6bc:	d405      	bmi.n	800e6ca <_vfiprintf_r+0x32>
 800e6be:	89ab      	ldrh	r3, [r5, #12]
 800e6c0:	059a      	lsls	r2, r3, #22
 800e6c2:	d402      	bmi.n	800e6ca <_vfiprintf_r+0x32>
 800e6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6c6:	f7ff fdad 	bl	800e224 <__retarget_lock_acquire_recursive>
 800e6ca:	89ab      	ldrh	r3, [r5, #12]
 800e6cc:	071b      	lsls	r3, r3, #28
 800e6ce:	d501      	bpl.n	800e6d4 <_vfiprintf_r+0x3c>
 800e6d0:	692b      	ldr	r3, [r5, #16]
 800e6d2:	b9eb      	cbnz	r3, 800e710 <_vfiprintf_r+0x78>
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	f000 fb5a 	bl	800ed90 <__swsetup_r>
 800e6dc:	b1c0      	cbz	r0, 800e710 <_vfiprintf_r+0x78>
 800e6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6e0:	07dc      	lsls	r4, r3, #31
 800e6e2:	d50e      	bpl.n	800e702 <_vfiprintf_r+0x6a>
 800e6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e8:	b01d      	add	sp, #116	; 0x74
 800e6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ee:	4b7b      	ldr	r3, [pc, #492]	; (800e8dc <_vfiprintf_r+0x244>)
 800e6f0:	429d      	cmp	r5, r3
 800e6f2:	d101      	bne.n	800e6f8 <_vfiprintf_r+0x60>
 800e6f4:	68b5      	ldr	r5, [r6, #8]
 800e6f6:	e7df      	b.n	800e6b8 <_vfiprintf_r+0x20>
 800e6f8:	4b79      	ldr	r3, [pc, #484]	; (800e8e0 <_vfiprintf_r+0x248>)
 800e6fa:	429d      	cmp	r5, r3
 800e6fc:	bf08      	it	eq
 800e6fe:	68f5      	ldreq	r5, [r6, #12]
 800e700:	e7da      	b.n	800e6b8 <_vfiprintf_r+0x20>
 800e702:	89ab      	ldrh	r3, [r5, #12]
 800e704:	0598      	lsls	r0, r3, #22
 800e706:	d4ed      	bmi.n	800e6e4 <_vfiprintf_r+0x4c>
 800e708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e70a:	f7ff fd8c 	bl	800e226 <__retarget_lock_release_recursive>
 800e70e:	e7e9      	b.n	800e6e4 <_vfiprintf_r+0x4c>
 800e710:	2300      	movs	r3, #0
 800e712:	9309      	str	r3, [sp, #36]	; 0x24
 800e714:	2320      	movs	r3, #32
 800e716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e71e:	2330      	movs	r3, #48	; 0x30
 800e720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e8e4 <_vfiprintf_r+0x24c>
 800e724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e728:	f04f 0901 	mov.w	r9, #1
 800e72c:	4623      	mov	r3, r4
 800e72e:	469a      	mov	sl, r3
 800e730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e734:	b10a      	cbz	r2, 800e73a <_vfiprintf_r+0xa2>
 800e736:	2a25      	cmp	r2, #37	; 0x25
 800e738:	d1f9      	bne.n	800e72e <_vfiprintf_r+0x96>
 800e73a:	ebba 0b04 	subs.w	fp, sl, r4
 800e73e:	d00b      	beq.n	800e758 <_vfiprintf_r+0xc0>
 800e740:	465b      	mov	r3, fp
 800e742:	4622      	mov	r2, r4
 800e744:	4629      	mov	r1, r5
 800e746:	4630      	mov	r0, r6
 800e748:	f7ff ff93 	bl	800e672 <__sfputs_r>
 800e74c:	3001      	adds	r0, #1
 800e74e:	f000 80aa 	beq.w	800e8a6 <_vfiprintf_r+0x20e>
 800e752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e754:	445a      	add	r2, fp
 800e756:	9209      	str	r2, [sp, #36]	; 0x24
 800e758:	f89a 3000 	ldrb.w	r3, [sl]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f000 80a2 	beq.w	800e8a6 <_vfiprintf_r+0x20e>
 800e762:	2300      	movs	r3, #0
 800e764:	f04f 32ff 	mov.w	r2, #4294967295
 800e768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e76c:	f10a 0a01 	add.w	sl, sl, #1
 800e770:	9304      	str	r3, [sp, #16]
 800e772:	9307      	str	r3, [sp, #28]
 800e774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e778:	931a      	str	r3, [sp, #104]	; 0x68
 800e77a:	4654      	mov	r4, sl
 800e77c:	2205      	movs	r2, #5
 800e77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e782:	4858      	ldr	r0, [pc, #352]	; (800e8e4 <_vfiprintf_r+0x24c>)
 800e784:	f7f1 fd3c 	bl	8000200 <memchr>
 800e788:	9a04      	ldr	r2, [sp, #16]
 800e78a:	b9d8      	cbnz	r0, 800e7c4 <_vfiprintf_r+0x12c>
 800e78c:	06d1      	lsls	r1, r2, #27
 800e78e:	bf44      	itt	mi
 800e790:	2320      	movmi	r3, #32
 800e792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e796:	0713      	lsls	r3, r2, #28
 800e798:	bf44      	itt	mi
 800e79a:	232b      	movmi	r3, #43	; 0x2b
 800e79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e7a6:	d015      	beq.n	800e7d4 <_vfiprintf_r+0x13c>
 800e7a8:	9a07      	ldr	r2, [sp, #28]
 800e7aa:	4654      	mov	r4, sl
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	f04f 0c0a 	mov.w	ip, #10
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7b8:	3b30      	subs	r3, #48	; 0x30
 800e7ba:	2b09      	cmp	r3, #9
 800e7bc:	d94e      	bls.n	800e85c <_vfiprintf_r+0x1c4>
 800e7be:	b1b0      	cbz	r0, 800e7ee <_vfiprintf_r+0x156>
 800e7c0:	9207      	str	r2, [sp, #28]
 800e7c2:	e014      	b.n	800e7ee <_vfiprintf_r+0x156>
 800e7c4:	eba0 0308 	sub.w	r3, r0, r8
 800e7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	9304      	str	r3, [sp, #16]
 800e7d0:	46a2      	mov	sl, r4
 800e7d2:	e7d2      	b.n	800e77a <_vfiprintf_r+0xe2>
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	1d19      	adds	r1, r3, #4
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	9103      	str	r1, [sp, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	bfbb      	ittet	lt
 800e7e0:	425b      	neglt	r3, r3
 800e7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e7e6:	9307      	strge	r3, [sp, #28]
 800e7e8:	9307      	strlt	r3, [sp, #28]
 800e7ea:	bfb8      	it	lt
 800e7ec:	9204      	strlt	r2, [sp, #16]
 800e7ee:	7823      	ldrb	r3, [r4, #0]
 800e7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e7f2:	d10c      	bne.n	800e80e <_vfiprintf_r+0x176>
 800e7f4:	7863      	ldrb	r3, [r4, #1]
 800e7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e7f8:	d135      	bne.n	800e866 <_vfiprintf_r+0x1ce>
 800e7fa:	9b03      	ldr	r3, [sp, #12]
 800e7fc:	1d1a      	adds	r2, r3, #4
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	9203      	str	r2, [sp, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	bfb8      	it	lt
 800e806:	f04f 33ff 	movlt.w	r3, #4294967295
 800e80a:	3402      	adds	r4, #2
 800e80c:	9305      	str	r3, [sp, #20]
 800e80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8f4 <_vfiprintf_r+0x25c>
 800e812:	7821      	ldrb	r1, [r4, #0]
 800e814:	2203      	movs	r2, #3
 800e816:	4650      	mov	r0, sl
 800e818:	f7f1 fcf2 	bl	8000200 <memchr>
 800e81c:	b140      	cbz	r0, 800e830 <_vfiprintf_r+0x198>
 800e81e:	2340      	movs	r3, #64	; 0x40
 800e820:	eba0 000a 	sub.w	r0, r0, sl
 800e824:	fa03 f000 	lsl.w	r0, r3, r0
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	4303      	orrs	r3, r0
 800e82c:	3401      	adds	r4, #1
 800e82e:	9304      	str	r3, [sp, #16]
 800e830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e834:	482c      	ldr	r0, [pc, #176]	; (800e8e8 <_vfiprintf_r+0x250>)
 800e836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e83a:	2206      	movs	r2, #6
 800e83c:	f7f1 fce0 	bl	8000200 <memchr>
 800e840:	2800      	cmp	r0, #0
 800e842:	d03f      	beq.n	800e8c4 <_vfiprintf_r+0x22c>
 800e844:	4b29      	ldr	r3, [pc, #164]	; (800e8ec <_vfiprintf_r+0x254>)
 800e846:	bb1b      	cbnz	r3, 800e890 <_vfiprintf_r+0x1f8>
 800e848:	9b03      	ldr	r3, [sp, #12]
 800e84a:	3307      	adds	r3, #7
 800e84c:	f023 0307 	bic.w	r3, r3, #7
 800e850:	3308      	adds	r3, #8
 800e852:	9303      	str	r3, [sp, #12]
 800e854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e856:	443b      	add	r3, r7
 800e858:	9309      	str	r3, [sp, #36]	; 0x24
 800e85a:	e767      	b.n	800e72c <_vfiprintf_r+0x94>
 800e85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e860:	460c      	mov	r4, r1
 800e862:	2001      	movs	r0, #1
 800e864:	e7a5      	b.n	800e7b2 <_vfiprintf_r+0x11a>
 800e866:	2300      	movs	r3, #0
 800e868:	3401      	adds	r4, #1
 800e86a:	9305      	str	r3, [sp, #20]
 800e86c:	4619      	mov	r1, r3
 800e86e:	f04f 0c0a 	mov.w	ip, #10
 800e872:	4620      	mov	r0, r4
 800e874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e878:	3a30      	subs	r2, #48	; 0x30
 800e87a:	2a09      	cmp	r2, #9
 800e87c:	d903      	bls.n	800e886 <_vfiprintf_r+0x1ee>
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0c5      	beq.n	800e80e <_vfiprintf_r+0x176>
 800e882:	9105      	str	r1, [sp, #20]
 800e884:	e7c3      	b.n	800e80e <_vfiprintf_r+0x176>
 800e886:	fb0c 2101 	mla	r1, ip, r1, r2
 800e88a:	4604      	mov	r4, r0
 800e88c:	2301      	movs	r3, #1
 800e88e:	e7f0      	b.n	800e872 <_vfiprintf_r+0x1da>
 800e890:	ab03      	add	r3, sp, #12
 800e892:	9300      	str	r3, [sp, #0]
 800e894:	462a      	mov	r2, r5
 800e896:	4b16      	ldr	r3, [pc, #88]	; (800e8f0 <_vfiprintf_r+0x258>)
 800e898:	a904      	add	r1, sp, #16
 800e89a:	4630      	mov	r0, r6
 800e89c:	f3af 8000 	nop.w
 800e8a0:	4607      	mov	r7, r0
 800e8a2:	1c78      	adds	r0, r7, #1
 800e8a4:	d1d6      	bne.n	800e854 <_vfiprintf_r+0x1bc>
 800e8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8a8:	07d9      	lsls	r1, r3, #31
 800e8aa:	d405      	bmi.n	800e8b8 <_vfiprintf_r+0x220>
 800e8ac:	89ab      	ldrh	r3, [r5, #12]
 800e8ae:	059a      	lsls	r2, r3, #22
 800e8b0:	d402      	bmi.n	800e8b8 <_vfiprintf_r+0x220>
 800e8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8b4:	f7ff fcb7 	bl	800e226 <__retarget_lock_release_recursive>
 800e8b8:	89ab      	ldrh	r3, [r5, #12]
 800e8ba:	065b      	lsls	r3, r3, #25
 800e8bc:	f53f af12 	bmi.w	800e6e4 <_vfiprintf_r+0x4c>
 800e8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8c2:	e711      	b.n	800e6e8 <_vfiprintf_r+0x50>
 800e8c4:	ab03      	add	r3, sp, #12
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	462a      	mov	r2, r5
 800e8ca:	4b09      	ldr	r3, [pc, #36]	; (800e8f0 <_vfiprintf_r+0x258>)
 800e8cc:	a904      	add	r1, sp, #16
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f000 f880 	bl	800e9d4 <_printf_i>
 800e8d4:	e7e4      	b.n	800e8a0 <_vfiprintf_r+0x208>
 800e8d6:	bf00      	nop
 800e8d8:	0801df20 	.word	0x0801df20
 800e8dc:	0801df40 	.word	0x0801df40
 800e8e0:	0801df00 	.word	0x0801df00
 800e8e4:	0801df60 	.word	0x0801df60
 800e8e8:	0801df6a 	.word	0x0801df6a
 800e8ec:	00000000 	.word	0x00000000
 800e8f0:	0800e673 	.word	0x0800e673
 800e8f4:	0801df66 	.word	0x0801df66

0800e8f8 <_printf_common>:
 800e8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8fc:	4616      	mov	r6, r2
 800e8fe:	4699      	mov	r9, r3
 800e900:	688a      	ldr	r2, [r1, #8]
 800e902:	690b      	ldr	r3, [r1, #16]
 800e904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e908:	4293      	cmp	r3, r2
 800e90a:	bfb8      	it	lt
 800e90c:	4613      	movlt	r3, r2
 800e90e:	6033      	str	r3, [r6, #0]
 800e910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e914:	4607      	mov	r7, r0
 800e916:	460c      	mov	r4, r1
 800e918:	b10a      	cbz	r2, 800e91e <_printf_common+0x26>
 800e91a:	3301      	adds	r3, #1
 800e91c:	6033      	str	r3, [r6, #0]
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	0699      	lsls	r1, r3, #26
 800e922:	bf42      	ittt	mi
 800e924:	6833      	ldrmi	r3, [r6, #0]
 800e926:	3302      	addmi	r3, #2
 800e928:	6033      	strmi	r3, [r6, #0]
 800e92a:	6825      	ldr	r5, [r4, #0]
 800e92c:	f015 0506 	ands.w	r5, r5, #6
 800e930:	d106      	bne.n	800e940 <_printf_common+0x48>
 800e932:	f104 0a19 	add.w	sl, r4, #25
 800e936:	68e3      	ldr	r3, [r4, #12]
 800e938:	6832      	ldr	r2, [r6, #0]
 800e93a:	1a9b      	subs	r3, r3, r2
 800e93c:	42ab      	cmp	r3, r5
 800e93e:	dc26      	bgt.n	800e98e <_printf_common+0x96>
 800e940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e944:	1e13      	subs	r3, r2, #0
 800e946:	6822      	ldr	r2, [r4, #0]
 800e948:	bf18      	it	ne
 800e94a:	2301      	movne	r3, #1
 800e94c:	0692      	lsls	r2, r2, #26
 800e94e:	d42b      	bmi.n	800e9a8 <_printf_common+0xb0>
 800e950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e954:	4649      	mov	r1, r9
 800e956:	4638      	mov	r0, r7
 800e958:	47c0      	blx	r8
 800e95a:	3001      	adds	r0, #1
 800e95c:	d01e      	beq.n	800e99c <_printf_common+0xa4>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	68e5      	ldr	r5, [r4, #12]
 800e962:	6832      	ldr	r2, [r6, #0]
 800e964:	f003 0306 	and.w	r3, r3, #6
 800e968:	2b04      	cmp	r3, #4
 800e96a:	bf08      	it	eq
 800e96c:	1aad      	subeq	r5, r5, r2
 800e96e:	68a3      	ldr	r3, [r4, #8]
 800e970:	6922      	ldr	r2, [r4, #16]
 800e972:	bf0c      	ite	eq
 800e974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e978:	2500      	movne	r5, #0
 800e97a:	4293      	cmp	r3, r2
 800e97c:	bfc4      	itt	gt
 800e97e:	1a9b      	subgt	r3, r3, r2
 800e980:	18ed      	addgt	r5, r5, r3
 800e982:	2600      	movs	r6, #0
 800e984:	341a      	adds	r4, #26
 800e986:	42b5      	cmp	r5, r6
 800e988:	d11a      	bne.n	800e9c0 <_printf_common+0xc8>
 800e98a:	2000      	movs	r0, #0
 800e98c:	e008      	b.n	800e9a0 <_printf_common+0xa8>
 800e98e:	2301      	movs	r3, #1
 800e990:	4652      	mov	r2, sl
 800e992:	4649      	mov	r1, r9
 800e994:	4638      	mov	r0, r7
 800e996:	47c0      	blx	r8
 800e998:	3001      	adds	r0, #1
 800e99a:	d103      	bne.n	800e9a4 <_printf_common+0xac>
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a4:	3501      	adds	r5, #1
 800e9a6:	e7c6      	b.n	800e936 <_printf_common+0x3e>
 800e9a8:	18e1      	adds	r1, r4, r3
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	2030      	movs	r0, #48	; 0x30
 800e9ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9b2:	4422      	add	r2, r4
 800e9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9bc:	3302      	adds	r3, #2
 800e9be:	e7c7      	b.n	800e950 <_printf_common+0x58>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	47c0      	blx	r8
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d0e6      	beq.n	800e99c <_printf_common+0xa4>
 800e9ce:	3601      	adds	r6, #1
 800e9d0:	e7d9      	b.n	800e986 <_printf_common+0x8e>
	...

0800e9d4 <_printf_i>:
 800e9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d8:	460c      	mov	r4, r1
 800e9da:	4691      	mov	r9, r2
 800e9dc:	7e27      	ldrb	r7, [r4, #24]
 800e9de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e9e0:	2f78      	cmp	r7, #120	; 0x78
 800e9e2:	4680      	mov	r8, r0
 800e9e4:	469a      	mov	sl, r3
 800e9e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9ea:	d807      	bhi.n	800e9fc <_printf_i+0x28>
 800e9ec:	2f62      	cmp	r7, #98	; 0x62
 800e9ee:	d80a      	bhi.n	800ea06 <_printf_i+0x32>
 800e9f0:	2f00      	cmp	r7, #0
 800e9f2:	f000 80d8 	beq.w	800eba6 <_printf_i+0x1d2>
 800e9f6:	2f58      	cmp	r7, #88	; 0x58
 800e9f8:	f000 80a3 	beq.w	800eb42 <_printf_i+0x16e>
 800e9fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea04:	e03a      	b.n	800ea7c <_printf_i+0xa8>
 800ea06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea0a:	2b15      	cmp	r3, #21
 800ea0c:	d8f6      	bhi.n	800e9fc <_printf_i+0x28>
 800ea0e:	a001      	add	r0, pc, #4	; (adr r0, 800ea14 <_printf_i+0x40>)
 800ea10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ea14:	0800ea6d 	.word	0x0800ea6d
 800ea18:	0800ea81 	.word	0x0800ea81
 800ea1c:	0800e9fd 	.word	0x0800e9fd
 800ea20:	0800e9fd 	.word	0x0800e9fd
 800ea24:	0800e9fd 	.word	0x0800e9fd
 800ea28:	0800e9fd 	.word	0x0800e9fd
 800ea2c:	0800ea81 	.word	0x0800ea81
 800ea30:	0800e9fd 	.word	0x0800e9fd
 800ea34:	0800e9fd 	.word	0x0800e9fd
 800ea38:	0800e9fd 	.word	0x0800e9fd
 800ea3c:	0800e9fd 	.word	0x0800e9fd
 800ea40:	0800eb8d 	.word	0x0800eb8d
 800ea44:	0800eab1 	.word	0x0800eab1
 800ea48:	0800eb6f 	.word	0x0800eb6f
 800ea4c:	0800e9fd 	.word	0x0800e9fd
 800ea50:	0800e9fd 	.word	0x0800e9fd
 800ea54:	0800ebaf 	.word	0x0800ebaf
 800ea58:	0800e9fd 	.word	0x0800e9fd
 800ea5c:	0800eab1 	.word	0x0800eab1
 800ea60:	0800e9fd 	.word	0x0800e9fd
 800ea64:	0800e9fd 	.word	0x0800e9fd
 800ea68:	0800eb77 	.word	0x0800eb77
 800ea6c:	680b      	ldr	r3, [r1, #0]
 800ea6e:	1d1a      	adds	r2, r3, #4
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	600a      	str	r2, [r1, #0]
 800ea74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ea78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e0a3      	b.n	800ebc8 <_printf_i+0x1f4>
 800ea80:	6825      	ldr	r5, [r4, #0]
 800ea82:	6808      	ldr	r0, [r1, #0]
 800ea84:	062e      	lsls	r6, r5, #24
 800ea86:	f100 0304 	add.w	r3, r0, #4
 800ea8a:	d50a      	bpl.n	800eaa2 <_printf_i+0xce>
 800ea8c:	6805      	ldr	r5, [r0, #0]
 800ea8e:	600b      	str	r3, [r1, #0]
 800ea90:	2d00      	cmp	r5, #0
 800ea92:	da03      	bge.n	800ea9c <_printf_i+0xc8>
 800ea94:	232d      	movs	r3, #45	; 0x2d
 800ea96:	426d      	negs	r5, r5
 800ea98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea9c:	485e      	ldr	r0, [pc, #376]	; (800ec18 <_printf_i+0x244>)
 800ea9e:	230a      	movs	r3, #10
 800eaa0:	e019      	b.n	800ead6 <_printf_i+0x102>
 800eaa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eaa6:	6805      	ldr	r5, [r0, #0]
 800eaa8:	600b      	str	r3, [r1, #0]
 800eaaa:	bf18      	it	ne
 800eaac:	b22d      	sxthne	r5, r5
 800eaae:	e7ef      	b.n	800ea90 <_printf_i+0xbc>
 800eab0:	680b      	ldr	r3, [r1, #0]
 800eab2:	6825      	ldr	r5, [r4, #0]
 800eab4:	1d18      	adds	r0, r3, #4
 800eab6:	6008      	str	r0, [r1, #0]
 800eab8:	0628      	lsls	r0, r5, #24
 800eaba:	d501      	bpl.n	800eac0 <_printf_i+0xec>
 800eabc:	681d      	ldr	r5, [r3, #0]
 800eabe:	e002      	b.n	800eac6 <_printf_i+0xf2>
 800eac0:	0669      	lsls	r1, r5, #25
 800eac2:	d5fb      	bpl.n	800eabc <_printf_i+0xe8>
 800eac4:	881d      	ldrh	r5, [r3, #0]
 800eac6:	4854      	ldr	r0, [pc, #336]	; (800ec18 <_printf_i+0x244>)
 800eac8:	2f6f      	cmp	r7, #111	; 0x6f
 800eaca:	bf0c      	ite	eq
 800eacc:	2308      	moveq	r3, #8
 800eace:	230a      	movne	r3, #10
 800ead0:	2100      	movs	r1, #0
 800ead2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ead6:	6866      	ldr	r6, [r4, #4]
 800ead8:	60a6      	str	r6, [r4, #8]
 800eada:	2e00      	cmp	r6, #0
 800eadc:	bfa2      	ittt	ge
 800eade:	6821      	ldrge	r1, [r4, #0]
 800eae0:	f021 0104 	bicge.w	r1, r1, #4
 800eae4:	6021      	strge	r1, [r4, #0]
 800eae6:	b90d      	cbnz	r5, 800eaec <_printf_i+0x118>
 800eae8:	2e00      	cmp	r6, #0
 800eaea:	d04d      	beq.n	800eb88 <_printf_i+0x1b4>
 800eaec:	4616      	mov	r6, r2
 800eaee:	fbb5 f1f3 	udiv	r1, r5, r3
 800eaf2:	fb03 5711 	mls	r7, r3, r1, r5
 800eaf6:	5dc7      	ldrb	r7, [r0, r7]
 800eaf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eafc:	462f      	mov	r7, r5
 800eafe:	42bb      	cmp	r3, r7
 800eb00:	460d      	mov	r5, r1
 800eb02:	d9f4      	bls.n	800eaee <_printf_i+0x11a>
 800eb04:	2b08      	cmp	r3, #8
 800eb06:	d10b      	bne.n	800eb20 <_printf_i+0x14c>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	07df      	lsls	r7, r3, #31
 800eb0c:	d508      	bpl.n	800eb20 <_printf_i+0x14c>
 800eb0e:	6923      	ldr	r3, [r4, #16]
 800eb10:	6861      	ldr	r1, [r4, #4]
 800eb12:	4299      	cmp	r1, r3
 800eb14:	bfde      	ittt	le
 800eb16:	2330      	movle	r3, #48	; 0x30
 800eb18:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb20:	1b92      	subs	r2, r2, r6
 800eb22:	6122      	str	r2, [r4, #16]
 800eb24:	f8cd a000 	str.w	sl, [sp]
 800eb28:	464b      	mov	r3, r9
 800eb2a:	aa03      	add	r2, sp, #12
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	4640      	mov	r0, r8
 800eb30:	f7ff fee2 	bl	800e8f8 <_printf_common>
 800eb34:	3001      	adds	r0, #1
 800eb36:	d14c      	bne.n	800ebd2 <_printf_i+0x1fe>
 800eb38:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3c:	b004      	add	sp, #16
 800eb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb42:	4835      	ldr	r0, [pc, #212]	; (800ec18 <_printf_i+0x244>)
 800eb44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	680e      	ldr	r6, [r1, #0]
 800eb4c:	061f      	lsls	r7, r3, #24
 800eb4e:	f856 5b04 	ldr.w	r5, [r6], #4
 800eb52:	600e      	str	r6, [r1, #0]
 800eb54:	d514      	bpl.n	800eb80 <_printf_i+0x1ac>
 800eb56:	07d9      	lsls	r1, r3, #31
 800eb58:	bf44      	itt	mi
 800eb5a:	f043 0320 	orrmi.w	r3, r3, #32
 800eb5e:	6023      	strmi	r3, [r4, #0]
 800eb60:	b91d      	cbnz	r5, 800eb6a <_printf_i+0x196>
 800eb62:	6823      	ldr	r3, [r4, #0]
 800eb64:	f023 0320 	bic.w	r3, r3, #32
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	2310      	movs	r3, #16
 800eb6c:	e7b0      	b.n	800ead0 <_printf_i+0xfc>
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	f043 0320 	orr.w	r3, r3, #32
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	2378      	movs	r3, #120	; 0x78
 800eb78:	4828      	ldr	r0, [pc, #160]	; (800ec1c <_printf_i+0x248>)
 800eb7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb7e:	e7e3      	b.n	800eb48 <_printf_i+0x174>
 800eb80:	065e      	lsls	r6, r3, #25
 800eb82:	bf48      	it	mi
 800eb84:	b2ad      	uxthmi	r5, r5
 800eb86:	e7e6      	b.n	800eb56 <_printf_i+0x182>
 800eb88:	4616      	mov	r6, r2
 800eb8a:	e7bb      	b.n	800eb04 <_printf_i+0x130>
 800eb8c:	680b      	ldr	r3, [r1, #0]
 800eb8e:	6826      	ldr	r6, [r4, #0]
 800eb90:	6960      	ldr	r0, [r4, #20]
 800eb92:	1d1d      	adds	r5, r3, #4
 800eb94:	600d      	str	r5, [r1, #0]
 800eb96:	0635      	lsls	r5, r6, #24
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	d501      	bpl.n	800eba0 <_printf_i+0x1cc>
 800eb9c:	6018      	str	r0, [r3, #0]
 800eb9e:	e002      	b.n	800eba6 <_printf_i+0x1d2>
 800eba0:	0671      	lsls	r1, r6, #25
 800eba2:	d5fb      	bpl.n	800eb9c <_printf_i+0x1c8>
 800eba4:	8018      	strh	r0, [r3, #0]
 800eba6:	2300      	movs	r3, #0
 800eba8:	6123      	str	r3, [r4, #16]
 800ebaa:	4616      	mov	r6, r2
 800ebac:	e7ba      	b.n	800eb24 <_printf_i+0x150>
 800ebae:	680b      	ldr	r3, [r1, #0]
 800ebb0:	1d1a      	adds	r2, r3, #4
 800ebb2:	600a      	str	r2, [r1, #0]
 800ebb4:	681e      	ldr	r6, [r3, #0]
 800ebb6:	6862      	ldr	r2, [r4, #4]
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f7f1 fb20 	bl	8000200 <memchr>
 800ebc0:	b108      	cbz	r0, 800ebc6 <_printf_i+0x1f2>
 800ebc2:	1b80      	subs	r0, r0, r6
 800ebc4:	6060      	str	r0, [r4, #4]
 800ebc6:	6863      	ldr	r3, [r4, #4]
 800ebc8:	6123      	str	r3, [r4, #16]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd0:	e7a8      	b.n	800eb24 <_printf_i+0x150>
 800ebd2:	6923      	ldr	r3, [r4, #16]
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	4640      	mov	r0, r8
 800ebda:	47d0      	blx	sl
 800ebdc:	3001      	adds	r0, #1
 800ebde:	d0ab      	beq.n	800eb38 <_printf_i+0x164>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	079b      	lsls	r3, r3, #30
 800ebe4:	d413      	bmi.n	800ec0e <_printf_i+0x23a>
 800ebe6:	68e0      	ldr	r0, [r4, #12]
 800ebe8:	9b03      	ldr	r3, [sp, #12]
 800ebea:	4298      	cmp	r0, r3
 800ebec:	bfb8      	it	lt
 800ebee:	4618      	movlt	r0, r3
 800ebf0:	e7a4      	b.n	800eb3c <_printf_i+0x168>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	4640      	mov	r0, r8
 800ebfa:	47d0      	blx	sl
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d09b      	beq.n	800eb38 <_printf_i+0x164>
 800ec00:	3501      	adds	r5, #1
 800ec02:	68e3      	ldr	r3, [r4, #12]
 800ec04:	9903      	ldr	r1, [sp, #12]
 800ec06:	1a5b      	subs	r3, r3, r1
 800ec08:	42ab      	cmp	r3, r5
 800ec0a:	dcf2      	bgt.n	800ebf2 <_printf_i+0x21e>
 800ec0c:	e7eb      	b.n	800ebe6 <_printf_i+0x212>
 800ec0e:	2500      	movs	r5, #0
 800ec10:	f104 0619 	add.w	r6, r4, #25
 800ec14:	e7f5      	b.n	800ec02 <_printf_i+0x22e>
 800ec16:	bf00      	nop
 800ec18:	0801df71 	.word	0x0801df71
 800ec1c:	0801df82 	.word	0x0801df82

0800ec20 <_sbrk_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4d06      	ldr	r5, [pc, #24]	; (800ec3c <_sbrk_r+0x1c>)
 800ec24:	2300      	movs	r3, #0
 800ec26:	4604      	mov	r4, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	602b      	str	r3, [r5, #0]
 800ec2c:	f7f1 fcde 	bl	80005ec <_sbrk>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_sbrk_r+0x1a>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_sbrk_r+0x1a>
 800ec38:	6023      	str	r3, [r4, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	20014a24 	.word	0x20014a24

0800ec40 <__sread>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	460c      	mov	r4, r1
 800ec44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec48:	f000 fa92 	bl	800f170 <_read_r>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	bfab      	itete	ge
 800ec50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec52:	89a3      	ldrhlt	r3, [r4, #12]
 800ec54:	181b      	addge	r3, r3, r0
 800ec56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec5a:	bfac      	ite	ge
 800ec5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec5e:	81a3      	strhlt	r3, [r4, #12]
 800ec60:	bd10      	pop	{r4, pc}

0800ec62 <__swrite>:
 800ec62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec66:	461f      	mov	r7, r3
 800ec68:	898b      	ldrh	r3, [r1, #12]
 800ec6a:	05db      	lsls	r3, r3, #23
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4616      	mov	r6, r2
 800ec72:	d505      	bpl.n	800ec80 <__swrite+0x1e>
 800ec74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec78:	2302      	movs	r3, #2
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f000 f9d0 	bl	800f020 <_lseek_r>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	4632      	mov	r2, r6
 800ec8e:	463b      	mov	r3, r7
 800ec90:	4628      	mov	r0, r5
 800ec92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec96:	f000 b869 	b.w	800ed6c <_write_r>

0800ec9a <__sseek>:
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca2:	f000 f9bd 	bl	800f020 <_lseek_r>
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	bf15      	itete	ne
 800ecac:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecb6:	81a3      	strheq	r3, [r4, #12]
 800ecb8:	bf18      	it	ne
 800ecba:	81a3      	strhne	r3, [r4, #12]
 800ecbc:	bd10      	pop	{r4, pc}

0800ecbe <__sclose>:
 800ecbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc2:	f000 b8db 	b.w	800ee7c <_close_r>
	...

0800ecc8 <__swbuf_r>:
 800ecc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecca:	460e      	mov	r6, r1
 800eccc:	4614      	mov	r4, r2
 800ecce:	4605      	mov	r5, r0
 800ecd0:	b118      	cbz	r0, 800ecda <__swbuf_r+0x12>
 800ecd2:	6983      	ldr	r3, [r0, #24]
 800ecd4:	b90b      	cbnz	r3, 800ecda <__swbuf_r+0x12>
 800ecd6:	f7ff f9f5 	bl	800e0c4 <__sinit>
 800ecda:	4b21      	ldr	r3, [pc, #132]	; (800ed60 <__swbuf_r+0x98>)
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	d12b      	bne.n	800ed38 <__swbuf_r+0x70>
 800ece0:	686c      	ldr	r4, [r5, #4]
 800ece2:	69a3      	ldr	r3, [r4, #24]
 800ece4:	60a3      	str	r3, [r4, #8]
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	071a      	lsls	r2, r3, #28
 800ecea:	d52f      	bpl.n	800ed4c <__swbuf_r+0x84>
 800ecec:	6923      	ldr	r3, [r4, #16]
 800ecee:	b36b      	cbz	r3, 800ed4c <__swbuf_r+0x84>
 800ecf0:	6923      	ldr	r3, [r4, #16]
 800ecf2:	6820      	ldr	r0, [r4, #0]
 800ecf4:	1ac0      	subs	r0, r0, r3
 800ecf6:	6963      	ldr	r3, [r4, #20]
 800ecf8:	b2f6      	uxtb	r6, r6
 800ecfa:	4283      	cmp	r3, r0
 800ecfc:	4637      	mov	r7, r6
 800ecfe:	dc04      	bgt.n	800ed0a <__swbuf_r+0x42>
 800ed00:	4621      	mov	r1, r4
 800ed02:	4628      	mov	r0, r5
 800ed04:	f000 f950 	bl	800efa8 <_fflush_r>
 800ed08:	bb30      	cbnz	r0, 800ed58 <__swbuf_r+0x90>
 800ed0a:	68a3      	ldr	r3, [r4, #8]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	60a3      	str	r3, [r4, #8]
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	6022      	str	r2, [r4, #0]
 800ed16:	701e      	strb	r6, [r3, #0]
 800ed18:	6963      	ldr	r3, [r4, #20]
 800ed1a:	3001      	adds	r0, #1
 800ed1c:	4283      	cmp	r3, r0
 800ed1e:	d004      	beq.n	800ed2a <__swbuf_r+0x62>
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	07db      	lsls	r3, r3, #31
 800ed24:	d506      	bpl.n	800ed34 <__swbuf_r+0x6c>
 800ed26:	2e0a      	cmp	r6, #10
 800ed28:	d104      	bne.n	800ed34 <__swbuf_r+0x6c>
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f000 f93b 	bl	800efa8 <_fflush_r>
 800ed32:	b988      	cbnz	r0, 800ed58 <__swbuf_r+0x90>
 800ed34:	4638      	mov	r0, r7
 800ed36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed38:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <__swbuf_r+0x9c>)
 800ed3a:	429c      	cmp	r4, r3
 800ed3c:	d101      	bne.n	800ed42 <__swbuf_r+0x7a>
 800ed3e:	68ac      	ldr	r4, [r5, #8]
 800ed40:	e7cf      	b.n	800ece2 <__swbuf_r+0x1a>
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <__swbuf_r+0xa0>)
 800ed44:	429c      	cmp	r4, r3
 800ed46:	bf08      	it	eq
 800ed48:	68ec      	ldreq	r4, [r5, #12]
 800ed4a:	e7ca      	b.n	800ece2 <__swbuf_r+0x1a>
 800ed4c:	4621      	mov	r1, r4
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f000 f81e 	bl	800ed90 <__swsetup_r>
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d0cb      	beq.n	800ecf0 <__swbuf_r+0x28>
 800ed58:	f04f 37ff 	mov.w	r7, #4294967295
 800ed5c:	e7ea      	b.n	800ed34 <__swbuf_r+0x6c>
 800ed5e:	bf00      	nop
 800ed60:	0801df20 	.word	0x0801df20
 800ed64:	0801df40 	.word	0x0801df40
 800ed68:	0801df00 	.word	0x0801df00

0800ed6c <_write_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d07      	ldr	r5, [pc, #28]	; (800ed8c <_write_r+0x20>)
 800ed70:	4604      	mov	r4, r0
 800ed72:	4608      	mov	r0, r1
 800ed74:	4611      	mov	r1, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	602a      	str	r2, [r5, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f7f1 fc66 	bl	800064c <_write>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_write_r+0x1e>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_write_r+0x1e>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	20014a24 	.word	0x20014a24

0800ed90 <__swsetup_r>:
 800ed90:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <__swsetup_r+0xcc>)
 800ed92:	b570      	push	{r4, r5, r6, lr}
 800ed94:	681d      	ldr	r5, [r3, #0]
 800ed96:	4606      	mov	r6, r0
 800ed98:	460c      	mov	r4, r1
 800ed9a:	b125      	cbz	r5, 800eda6 <__swsetup_r+0x16>
 800ed9c:	69ab      	ldr	r3, [r5, #24]
 800ed9e:	b913      	cbnz	r3, 800eda6 <__swsetup_r+0x16>
 800eda0:	4628      	mov	r0, r5
 800eda2:	f7ff f98f 	bl	800e0c4 <__sinit>
 800eda6:	4b2e      	ldr	r3, [pc, #184]	; (800ee60 <__swsetup_r+0xd0>)
 800eda8:	429c      	cmp	r4, r3
 800edaa:	d10f      	bne.n	800edcc <__swsetup_r+0x3c>
 800edac:	686c      	ldr	r4, [r5, #4]
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edb4:	0719      	lsls	r1, r3, #28
 800edb6:	d42c      	bmi.n	800ee12 <__swsetup_r+0x82>
 800edb8:	06dd      	lsls	r5, r3, #27
 800edba:	d411      	bmi.n	800ede0 <__swsetup_r+0x50>
 800edbc:	2309      	movs	r3, #9
 800edbe:	6033      	str	r3, [r6, #0]
 800edc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edc4:	81a3      	strh	r3, [r4, #12]
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	e03e      	b.n	800ee4a <__swsetup_r+0xba>
 800edcc:	4b25      	ldr	r3, [pc, #148]	; (800ee64 <__swsetup_r+0xd4>)
 800edce:	429c      	cmp	r4, r3
 800edd0:	d101      	bne.n	800edd6 <__swsetup_r+0x46>
 800edd2:	68ac      	ldr	r4, [r5, #8]
 800edd4:	e7eb      	b.n	800edae <__swsetup_r+0x1e>
 800edd6:	4b24      	ldr	r3, [pc, #144]	; (800ee68 <__swsetup_r+0xd8>)
 800edd8:	429c      	cmp	r4, r3
 800edda:	bf08      	it	eq
 800eddc:	68ec      	ldreq	r4, [r5, #12]
 800edde:	e7e6      	b.n	800edae <__swsetup_r+0x1e>
 800ede0:	0758      	lsls	r0, r3, #29
 800ede2:	d512      	bpl.n	800ee0a <__swsetup_r+0x7a>
 800ede4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ede6:	b141      	cbz	r1, 800edfa <__swsetup_r+0x6a>
 800ede8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edec:	4299      	cmp	r1, r3
 800edee:	d002      	beq.n	800edf6 <__swsetup_r+0x66>
 800edf0:	4630      	mov	r0, r6
 800edf2:	f7ff fa21 	bl	800e238 <_free_r>
 800edf6:	2300      	movs	r3, #0
 800edf8:	6363      	str	r3, [r4, #52]	; 0x34
 800edfa:	89a3      	ldrh	r3, [r4, #12]
 800edfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee00:	81a3      	strh	r3, [r4, #12]
 800ee02:	2300      	movs	r3, #0
 800ee04:	6063      	str	r3, [r4, #4]
 800ee06:	6923      	ldr	r3, [r4, #16]
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	89a3      	ldrh	r3, [r4, #12]
 800ee0c:	f043 0308 	orr.w	r3, r3, #8
 800ee10:	81a3      	strh	r3, [r4, #12]
 800ee12:	6923      	ldr	r3, [r4, #16]
 800ee14:	b94b      	cbnz	r3, 800ee2a <__swsetup_r+0x9a>
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee20:	d003      	beq.n	800ee2a <__swsetup_r+0x9a>
 800ee22:	4621      	mov	r1, r4
 800ee24:	4630      	mov	r0, r6
 800ee26:	f000 f931 	bl	800f08c <__smakebuf_r>
 800ee2a:	89a0      	ldrh	r0, [r4, #12]
 800ee2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee30:	f010 0301 	ands.w	r3, r0, #1
 800ee34:	d00a      	beq.n	800ee4c <__swsetup_r+0xbc>
 800ee36:	2300      	movs	r3, #0
 800ee38:	60a3      	str	r3, [r4, #8]
 800ee3a:	6963      	ldr	r3, [r4, #20]
 800ee3c:	425b      	negs	r3, r3
 800ee3e:	61a3      	str	r3, [r4, #24]
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	b943      	cbnz	r3, 800ee56 <__swsetup_r+0xc6>
 800ee44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee48:	d1ba      	bne.n	800edc0 <__swsetup_r+0x30>
 800ee4a:	bd70      	pop	{r4, r5, r6, pc}
 800ee4c:	0781      	lsls	r1, r0, #30
 800ee4e:	bf58      	it	pl
 800ee50:	6963      	ldrpl	r3, [r4, #20]
 800ee52:	60a3      	str	r3, [r4, #8]
 800ee54:	e7f4      	b.n	800ee40 <__swsetup_r+0xb0>
 800ee56:	2000      	movs	r0, #0
 800ee58:	e7f7      	b.n	800ee4a <__swsetup_r+0xba>
 800ee5a:	bf00      	nop
 800ee5c:	20000044 	.word	0x20000044
 800ee60:	0801df20 	.word	0x0801df20
 800ee64:	0801df40 	.word	0x0801df40
 800ee68:	0801df00 	.word	0x0801df00

0800ee6c <abort>:
 800ee6c:	b508      	push	{r3, lr}
 800ee6e:	2006      	movs	r0, #6
 800ee70:	f000 f9b8 	bl	800f1e4 <raise>
 800ee74:	2001      	movs	r0, #1
 800ee76:	f7f1 fbe3 	bl	8000640 <_exit>
	...

0800ee7c <_close_r>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4d06      	ldr	r5, [pc, #24]	; (800ee98 <_close_r+0x1c>)
 800ee80:	2300      	movs	r3, #0
 800ee82:	4604      	mov	r4, r0
 800ee84:	4608      	mov	r0, r1
 800ee86:	602b      	str	r3, [r5, #0]
 800ee88:	f7f1 fbed 	bl	8000666 <_close>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d102      	bne.n	800ee96 <_close_r+0x1a>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	b103      	cbz	r3, 800ee96 <_close_r+0x1a>
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	20014a24 	.word	0x20014a24

0800ee9c <__sflush_r>:
 800ee9c:	898a      	ldrh	r2, [r1, #12]
 800ee9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea2:	4605      	mov	r5, r0
 800eea4:	0710      	lsls	r0, r2, #28
 800eea6:	460c      	mov	r4, r1
 800eea8:	d458      	bmi.n	800ef5c <__sflush_r+0xc0>
 800eeaa:	684b      	ldr	r3, [r1, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dc05      	bgt.n	800eebc <__sflush_r+0x20>
 800eeb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	dc02      	bgt.n	800eebc <__sflush_r+0x20>
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	d0f9      	beq.n	800eeb6 <__sflush_r+0x1a>
 800eec2:	2300      	movs	r3, #0
 800eec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eec8:	682f      	ldr	r7, [r5, #0]
 800eeca:	602b      	str	r3, [r5, #0]
 800eecc:	d032      	beq.n	800ef34 <__sflush_r+0x98>
 800eece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	075a      	lsls	r2, r3, #29
 800eed4:	d505      	bpl.n	800eee2 <__sflush_r+0x46>
 800eed6:	6863      	ldr	r3, [r4, #4]
 800eed8:	1ac0      	subs	r0, r0, r3
 800eeda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eedc:	b10b      	cbz	r3, 800eee2 <__sflush_r+0x46>
 800eede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eee0:	1ac0      	subs	r0, r0, r3
 800eee2:	2300      	movs	r3, #0
 800eee4:	4602      	mov	r2, r0
 800eee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eee8:	6a21      	ldr	r1, [r4, #32]
 800eeea:	4628      	mov	r0, r5
 800eeec:	47b0      	blx	r6
 800eeee:	1c43      	adds	r3, r0, #1
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	d106      	bne.n	800ef02 <__sflush_r+0x66>
 800eef4:	6829      	ldr	r1, [r5, #0]
 800eef6:	291d      	cmp	r1, #29
 800eef8:	d82c      	bhi.n	800ef54 <__sflush_r+0xb8>
 800eefa:	4a2a      	ldr	r2, [pc, #168]	; (800efa4 <__sflush_r+0x108>)
 800eefc:	40ca      	lsrs	r2, r1
 800eefe:	07d6      	lsls	r6, r2, #31
 800ef00:	d528      	bpl.n	800ef54 <__sflush_r+0xb8>
 800ef02:	2200      	movs	r2, #0
 800ef04:	6062      	str	r2, [r4, #4]
 800ef06:	04d9      	lsls	r1, r3, #19
 800ef08:	6922      	ldr	r2, [r4, #16]
 800ef0a:	6022      	str	r2, [r4, #0]
 800ef0c:	d504      	bpl.n	800ef18 <__sflush_r+0x7c>
 800ef0e:	1c42      	adds	r2, r0, #1
 800ef10:	d101      	bne.n	800ef16 <__sflush_r+0x7a>
 800ef12:	682b      	ldr	r3, [r5, #0]
 800ef14:	b903      	cbnz	r3, 800ef18 <__sflush_r+0x7c>
 800ef16:	6560      	str	r0, [r4, #84]	; 0x54
 800ef18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef1a:	602f      	str	r7, [r5, #0]
 800ef1c:	2900      	cmp	r1, #0
 800ef1e:	d0ca      	beq.n	800eeb6 <__sflush_r+0x1a>
 800ef20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef24:	4299      	cmp	r1, r3
 800ef26:	d002      	beq.n	800ef2e <__sflush_r+0x92>
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f7ff f985 	bl	800e238 <_free_r>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	6360      	str	r0, [r4, #52]	; 0x34
 800ef32:	e7c1      	b.n	800eeb8 <__sflush_r+0x1c>
 800ef34:	6a21      	ldr	r1, [r4, #32]
 800ef36:	2301      	movs	r3, #1
 800ef38:	4628      	mov	r0, r5
 800ef3a:	47b0      	blx	r6
 800ef3c:	1c41      	adds	r1, r0, #1
 800ef3e:	d1c7      	bne.n	800eed0 <__sflush_r+0x34>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0c4      	beq.n	800eed0 <__sflush_r+0x34>
 800ef46:	2b1d      	cmp	r3, #29
 800ef48:	d001      	beq.n	800ef4e <__sflush_r+0xb2>
 800ef4a:	2b16      	cmp	r3, #22
 800ef4c:	d101      	bne.n	800ef52 <__sflush_r+0xb6>
 800ef4e:	602f      	str	r7, [r5, #0]
 800ef50:	e7b1      	b.n	800eeb6 <__sflush_r+0x1a>
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef58:	81a3      	strh	r3, [r4, #12]
 800ef5a:	e7ad      	b.n	800eeb8 <__sflush_r+0x1c>
 800ef5c:	690f      	ldr	r7, [r1, #16]
 800ef5e:	2f00      	cmp	r7, #0
 800ef60:	d0a9      	beq.n	800eeb6 <__sflush_r+0x1a>
 800ef62:	0793      	lsls	r3, r2, #30
 800ef64:	680e      	ldr	r6, [r1, #0]
 800ef66:	bf08      	it	eq
 800ef68:	694b      	ldreq	r3, [r1, #20]
 800ef6a:	600f      	str	r7, [r1, #0]
 800ef6c:	bf18      	it	ne
 800ef6e:	2300      	movne	r3, #0
 800ef70:	eba6 0807 	sub.w	r8, r6, r7
 800ef74:	608b      	str	r3, [r1, #8]
 800ef76:	f1b8 0f00 	cmp.w	r8, #0
 800ef7a:	dd9c      	ble.n	800eeb6 <__sflush_r+0x1a>
 800ef7c:	6a21      	ldr	r1, [r4, #32]
 800ef7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef80:	4643      	mov	r3, r8
 800ef82:	463a      	mov	r2, r7
 800ef84:	4628      	mov	r0, r5
 800ef86:	47b0      	blx	r6
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	dc06      	bgt.n	800ef9a <__sflush_r+0xfe>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	e78e      	b.n	800eeb8 <__sflush_r+0x1c>
 800ef9a:	4407      	add	r7, r0
 800ef9c:	eba8 0800 	sub.w	r8, r8, r0
 800efa0:	e7e9      	b.n	800ef76 <__sflush_r+0xda>
 800efa2:	bf00      	nop
 800efa4:	20400001 	.word	0x20400001

0800efa8 <_fflush_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	690b      	ldr	r3, [r1, #16]
 800efac:	4605      	mov	r5, r0
 800efae:	460c      	mov	r4, r1
 800efb0:	b913      	cbnz	r3, 800efb8 <_fflush_r+0x10>
 800efb2:	2500      	movs	r5, #0
 800efb4:	4628      	mov	r0, r5
 800efb6:	bd38      	pop	{r3, r4, r5, pc}
 800efb8:	b118      	cbz	r0, 800efc2 <_fflush_r+0x1a>
 800efba:	6983      	ldr	r3, [r0, #24]
 800efbc:	b90b      	cbnz	r3, 800efc2 <_fflush_r+0x1a>
 800efbe:	f7ff f881 	bl	800e0c4 <__sinit>
 800efc2:	4b14      	ldr	r3, [pc, #80]	; (800f014 <_fflush_r+0x6c>)
 800efc4:	429c      	cmp	r4, r3
 800efc6:	d11b      	bne.n	800f000 <_fflush_r+0x58>
 800efc8:	686c      	ldr	r4, [r5, #4]
 800efca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d0ef      	beq.n	800efb2 <_fflush_r+0xa>
 800efd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efd4:	07d0      	lsls	r0, r2, #31
 800efd6:	d404      	bmi.n	800efe2 <_fflush_r+0x3a>
 800efd8:	0599      	lsls	r1, r3, #22
 800efda:	d402      	bmi.n	800efe2 <_fflush_r+0x3a>
 800efdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efde:	f7ff f921 	bl	800e224 <__retarget_lock_acquire_recursive>
 800efe2:	4628      	mov	r0, r5
 800efe4:	4621      	mov	r1, r4
 800efe6:	f7ff ff59 	bl	800ee9c <__sflush_r>
 800efea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efec:	07da      	lsls	r2, r3, #31
 800efee:	4605      	mov	r5, r0
 800eff0:	d4e0      	bmi.n	800efb4 <_fflush_r+0xc>
 800eff2:	89a3      	ldrh	r3, [r4, #12]
 800eff4:	059b      	lsls	r3, r3, #22
 800eff6:	d4dd      	bmi.n	800efb4 <_fflush_r+0xc>
 800eff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800effa:	f7ff f914 	bl	800e226 <__retarget_lock_release_recursive>
 800effe:	e7d9      	b.n	800efb4 <_fflush_r+0xc>
 800f000:	4b05      	ldr	r3, [pc, #20]	; (800f018 <_fflush_r+0x70>)
 800f002:	429c      	cmp	r4, r3
 800f004:	d101      	bne.n	800f00a <_fflush_r+0x62>
 800f006:	68ac      	ldr	r4, [r5, #8]
 800f008:	e7df      	b.n	800efca <_fflush_r+0x22>
 800f00a:	4b04      	ldr	r3, [pc, #16]	; (800f01c <_fflush_r+0x74>)
 800f00c:	429c      	cmp	r4, r3
 800f00e:	bf08      	it	eq
 800f010:	68ec      	ldreq	r4, [r5, #12]
 800f012:	e7da      	b.n	800efca <_fflush_r+0x22>
 800f014:	0801df20 	.word	0x0801df20
 800f018:	0801df40 	.word	0x0801df40
 800f01c:	0801df00 	.word	0x0801df00

0800f020 <_lseek_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d07      	ldr	r5, [pc, #28]	; (800f040 <_lseek_r+0x20>)
 800f024:	4604      	mov	r4, r0
 800f026:	4608      	mov	r0, r1
 800f028:	4611      	mov	r1, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	602a      	str	r2, [r5, #0]
 800f02e:	461a      	mov	r2, r3
 800f030:	f7f1 fb23 	bl	800067a <_lseek>
 800f034:	1c43      	adds	r3, r0, #1
 800f036:	d102      	bne.n	800f03e <_lseek_r+0x1e>
 800f038:	682b      	ldr	r3, [r5, #0]
 800f03a:	b103      	cbz	r3, 800f03e <_lseek_r+0x1e>
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	bd38      	pop	{r3, r4, r5, pc}
 800f040:	20014a24 	.word	0x20014a24

0800f044 <__swhatbuf_r>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	460e      	mov	r6, r1
 800f048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04c:	2900      	cmp	r1, #0
 800f04e:	b096      	sub	sp, #88	; 0x58
 800f050:	4614      	mov	r4, r2
 800f052:	461d      	mov	r5, r3
 800f054:	da07      	bge.n	800f066 <__swhatbuf_r+0x22>
 800f056:	2300      	movs	r3, #0
 800f058:	602b      	str	r3, [r5, #0]
 800f05a:	89b3      	ldrh	r3, [r6, #12]
 800f05c:	061a      	lsls	r2, r3, #24
 800f05e:	d410      	bmi.n	800f082 <__swhatbuf_r+0x3e>
 800f060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f064:	e00e      	b.n	800f084 <__swhatbuf_r+0x40>
 800f066:	466a      	mov	r2, sp
 800f068:	f000 f8d8 	bl	800f21c <_fstat_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	dbf2      	blt.n	800f056 <__swhatbuf_r+0x12>
 800f070:	9a01      	ldr	r2, [sp, #4]
 800f072:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f076:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f07a:	425a      	negs	r2, r3
 800f07c:	415a      	adcs	r2, r3
 800f07e:	602a      	str	r2, [r5, #0]
 800f080:	e7ee      	b.n	800f060 <__swhatbuf_r+0x1c>
 800f082:	2340      	movs	r3, #64	; 0x40
 800f084:	2000      	movs	r0, #0
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	b016      	add	sp, #88	; 0x58
 800f08a:	bd70      	pop	{r4, r5, r6, pc}

0800f08c <__smakebuf_r>:
 800f08c:	898b      	ldrh	r3, [r1, #12]
 800f08e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f090:	079d      	lsls	r5, r3, #30
 800f092:	4606      	mov	r6, r0
 800f094:	460c      	mov	r4, r1
 800f096:	d507      	bpl.n	800f0a8 <__smakebuf_r+0x1c>
 800f098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	6123      	str	r3, [r4, #16]
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	6163      	str	r3, [r4, #20]
 800f0a4:	b002      	add	sp, #8
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	ab01      	add	r3, sp, #4
 800f0aa:	466a      	mov	r2, sp
 800f0ac:	f7ff ffca 	bl	800f044 <__swhatbuf_r>
 800f0b0:	9900      	ldr	r1, [sp, #0]
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f7ff f90f 	bl	800e2d8 <_malloc_r>
 800f0ba:	b948      	cbnz	r0, 800f0d0 <__smakebuf_r+0x44>
 800f0bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c0:	059a      	lsls	r2, r3, #22
 800f0c2:	d4ef      	bmi.n	800f0a4 <__smakebuf_r+0x18>
 800f0c4:	f023 0303 	bic.w	r3, r3, #3
 800f0c8:	f043 0302 	orr.w	r3, r3, #2
 800f0cc:	81a3      	strh	r3, [r4, #12]
 800f0ce:	e7e3      	b.n	800f098 <__smakebuf_r+0xc>
 800f0d0:	4b0d      	ldr	r3, [pc, #52]	; (800f108 <__smakebuf_r+0x7c>)
 800f0d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	6020      	str	r0, [r4, #0]
 800f0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0dc:	81a3      	strh	r3, [r4, #12]
 800f0de:	9b00      	ldr	r3, [sp, #0]
 800f0e0:	6163      	str	r3, [r4, #20]
 800f0e2:	9b01      	ldr	r3, [sp, #4]
 800f0e4:	6120      	str	r0, [r4, #16]
 800f0e6:	b15b      	cbz	r3, 800f100 <__smakebuf_r+0x74>
 800f0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 f8a7 	bl	800f240 <_isatty_r>
 800f0f2:	b128      	cbz	r0, 800f100 <__smakebuf_r+0x74>
 800f0f4:	89a3      	ldrh	r3, [r4, #12]
 800f0f6:	f023 0303 	bic.w	r3, r3, #3
 800f0fa:	f043 0301 	orr.w	r3, r3, #1
 800f0fe:	81a3      	strh	r3, [r4, #12]
 800f100:	89a0      	ldrh	r0, [r4, #12]
 800f102:	4305      	orrs	r5, r0
 800f104:	81a5      	strh	r5, [r4, #12]
 800f106:	e7cd      	b.n	800f0a4 <__smakebuf_r+0x18>
 800f108:	0800e05d 	.word	0x0800e05d

0800f10c <__malloc_lock>:
 800f10c:	4801      	ldr	r0, [pc, #4]	; (800f114 <__malloc_lock+0x8>)
 800f10e:	f7ff b889 	b.w	800e224 <__retarget_lock_acquire_recursive>
 800f112:	bf00      	nop
 800f114:	20014a30 	.word	0x20014a30

0800f118 <__malloc_unlock>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__malloc_unlock+0x8>)
 800f11a:	f7ff b884 	b.w	800e226 <__retarget_lock_release_recursive>
 800f11e:	bf00      	nop
 800f120:	20014a30 	.word	0x20014a30

0800f124 <_realloc_r>:
 800f124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f126:	4607      	mov	r7, r0
 800f128:	4614      	mov	r4, r2
 800f12a:	460e      	mov	r6, r1
 800f12c:	b921      	cbnz	r1, 800f138 <_realloc_r+0x14>
 800f12e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f132:	4611      	mov	r1, r2
 800f134:	f7ff b8d0 	b.w	800e2d8 <_malloc_r>
 800f138:	b922      	cbnz	r2, 800f144 <_realloc_r+0x20>
 800f13a:	f7ff f87d 	bl	800e238 <_free_r>
 800f13e:	4625      	mov	r5, r4
 800f140:	4628      	mov	r0, r5
 800f142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f144:	f000 f88c 	bl	800f260 <_malloc_usable_size_r>
 800f148:	42a0      	cmp	r0, r4
 800f14a:	d20f      	bcs.n	800f16c <_realloc_r+0x48>
 800f14c:	4621      	mov	r1, r4
 800f14e:	4638      	mov	r0, r7
 800f150:	f7ff f8c2 	bl	800e2d8 <_malloc_r>
 800f154:	4605      	mov	r5, r0
 800f156:	2800      	cmp	r0, #0
 800f158:	d0f2      	beq.n	800f140 <_realloc_r+0x1c>
 800f15a:	4631      	mov	r1, r6
 800f15c:	4622      	mov	r2, r4
 800f15e:	f7fe fe69 	bl	800de34 <memcpy>
 800f162:	4631      	mov	r1, r6
 800f164:	4638      	mov	r0, r7
 800f166:	f7ff f867 	bl	800e238 <_free_r>
 800f16a:	e7e9      	b.n	800f140 <_realloc_r+0x1c>
 800f16c:	4635      	mov	r5, r6
 800f16e:	e7e7      	b.n	800f140 <_realloc_r+0x1c>

0800f170 <_read_r>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	4d07      	ldr	r5, [pc, #28]	; (800f190 <_read_r+0x20>)
 800f174:	4604      	mov	r4, r0
 800f176:	4608      	mov	r0, r1
 800f178:	4611      	mov	r1, r2
 800f17a:	2200      	movs	r2, #0
 800f17c:	602a      	str	r2, [r5, #0]
 800f17e:	461a      	mov	r2, r3
 800f180:	f7f1 fa7d 	bl	800067e <_read>
 800f184:	1c43      	adds	r3, r0, #1
 800f186:	d102      	bne.n	800f18e <_read_r+0x1e>
 800f188:	682b      	ldr	r3, [r5, #0]
 800f18a:	b103      	cbz	r3, 800f18e <_read_r+0x1e>
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	bd38      	pop	{r3, r4, r5, pc}
 800f190:	20014a24 	.word	0x20014a24

0800f194 <_raise_r>:
 800f194:	291f      	cmp	r1, #31
 800f196:	b538      	push	{r3, r4, r5, lr}
 800f198:	4604      	mov	r4, r0
 800f19a:	460d      	mov	r5, r1
 800f19c:	d904      	bls.n	800f1a8 <_raise_r+0x14>
 800f19e:	2316      	movs	r3, #22
 800f1a0:	6003      	str	r3, [r0, #0]
 800f1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f1aa:	b112      	cbz	r2, 800f1b2 <_raise_r+0x1e>
 800f1ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f1b0:	b94b      	cbnz	r3, 800f1c6 <_raise_r+0x32>
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 f830 	bl	800f218 <_getpid_r>
 800f1b8:	462a      	mov	r2, r5
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	4620      	mov	r0, r4
 800f1be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1c2:	f000 b817 	b.w	800f1f4 <_kill_r>
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d00a      	beq.n	800f1e0 <_raise_r+0x4c>
 800f1ca:	1c59      	adds	r1, r3, #1
 800f1cc:	d103      	bne.n	800f1d6 <_raise_r+0x42>
 800f1ce:	2316      	movs	r3, #22
 800f1d0:	6003      	str	r3, [r0, #0]
 800f1d2:	2001      	movs	r0, #1
 800f1d4:	e7e7      	b.n	800f1a6 <_raise_r+0x12>
 800f1d6:	2400      	movs	r4, #0
 800f1d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f1dc:	4628      	mov	r0, r5
 800f1de:	4798      	blx	r3
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	e7e0      	b.n	800f1a6 <_raise_r+0x12>

0800f1e4 <raise>:
 800f1e4:	4b02      	ldr	r3, [pc, #8]	; (800f1f0 <raise+0xc>)
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	f7ff bfd3 	b.w	800f194 <_raise_r>
 800f1ee:	bf00      	nop
 800f1f0:	20000044 	.word	0x20000044

0800f1f4 <_kill_r>:
 800f1f4:	b538      	push	{r3, r4, r5, lr}
 800f1f6:	4d07      	ldr	r5, [pc, #28]	; (800f214 <_kill_r+0x20>)
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	4608      	mov	r0, r1
 800f1fe:	4611      	mov	r1, r2
 800f200:	602b      	str	r3, [r5, #0]
 800f202:	f7f1 fa15 	bl	8000630 <_kill>
 800f206:	1c43      	adds	r3, r0, #1
 800f208:	d102      	bne.n	800f210 <_kill_r+0x1c>
 800f20a:	682b      	ldr	r3, [r5, #0]
 800f20c:	b103      	cbz	r3, 800f210 <_kill_r+0x1c>
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	bd38      	pop	{r3, r4, r5, pc}
 800f212:	bf00      	nop
 800f214:	20014a24 	.word	0x20014a24

0800f218 <_getpid_r>:
 800f218:	f7f1 ba08 	b.w	800062c <_getpid>

0800f21c <_fstat_r>:
 800f21c:	b538      	push	{r3, r4, r5, lr}
 800f21e:	4d07      	ldr	r5, [pc, #28]	; (800f23c <_fstat_r+0x20>)
 800f220:	2300      	movs	r3, #0
 800f222:	4604      	mov	r4, r0
 800f224:	4608      	mov	r0, r1
 800f226:	4611      	mov	r1, r2
 800f228:	602b      	str	r3, [r5, #0]
 800f22a:	f7f1 fa1f 	bl	800066c <_fstat>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	d102      	bne.n	800f238 <_fstat_r+0x1c>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	b103      	cbz	r3, 800f238 <_fstat_r+0x1c>
 800f236:	6023      	str	r3, [r4, #0]
 800f238:	bd38      	pop	{r3, r4, r5, pc}
 800f23a:	bf00      	nop
 800f23c:	20014a24 	.word	0x20014a24

0800f240 <_isatty_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d06      	ldr	r5, [pc, #24]	; (800f25c <_isatty_r+0x1c>)
 800f244:	2300      	movs	r3, #0
 800f246:	4604      	mov	r4, r0
 800f248:	4608      	mov	r0, r1
 800f24a:	602b      	str	r3, [r5, #0]
 800f24c:	f7f1 fa13 	bl	8000676 <_isatty>
 800f250:	1c43      	adds	r3, r0, #1
 800f252:	d102      	bne.n	800f25a <_isatty_r+0x1a>
 800f254:	682b      	ldr	r3, [r5, #0]
 800f256:	b103      	cbz	r3, 800f25a <_isatty_r+0x1a>
 800f258:	6023      	str	r3, [r4, #0]
 800f25a:	bd38      	pop	{r3, r4, r5, pc}
 800f25c:	20014a24 	.word	0x20014a24

0800f260 <_malloc_usable_size_r>:
 800f260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f264:	1f18      	subs	r0, r3, #4
 800f266:	2b00      	cmp	r3, #0
 800f268:	bfbc      	itt	lt
 800f26a:	580b      	ldrlt	r3, [r1, r0]
 800f26c:	18c0      	addlt	r0, r0, r3
 800f26e:	4770      	bx	lr

0800f270 <_init>:
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f272:	bf00      	nop
 800f274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f276:	bc08      	pop	{r3}
 800f278:	469e      	mov	lr, r3
 800f27a:	4770      	bx	lr

0800f27c <_fini>:
 800f27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27e:	bf00      	nop
 800f280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f282:	bc08      	pop	{r3}
 800f284:	469e      	mov	lr, r3
 800f286:	4770      	bx	lr
