
STM324xG_EVAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fb74  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b97c  0801b97c  0002b97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b984  0801b984  0002b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b988  0801b988  0002b988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  0801b98c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000300b0  2**0
                  CONTENTS
  8 .bss          0000e404  200000b0  200000b0  000300b0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000e4b4  2000e4b4  000300b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 11 .debug_line   0002c1d7  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000414b9  00000000  00000000  0005c2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000089d5  00000000  00000000  0009d770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000a6148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000f4b36  00000000  00000000  000a7420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002288  00000000  00000000  0019bf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00017925  00000000  00000000  0019e1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f67e  00000000  00000000  001b5b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e5183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  001e51d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bdf0 	.word	0x0800bdf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800bdf0 	.word	0x0800bdf0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96e 	b.w	8000ba0 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468c      	mov	ip, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8083 	bne.w	80009f2 <__udivmoddi4+0x116>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4617      	mov	r7, r2
 80008f0:	d947      	bls.n	8000982 <__udivmoddi4+0xa6>
 80008f2:	fab2 f282 	clz	r2, r2
 80008f6:	b142      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f8:	f1c2 0020 	rsb	r0, r2, #32
 80008fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000900:	4091      	lsls	r1, r2
 8000902:	4097      	lsls	r7, r2
 8000904:	ea40 0c01 	orr.w	ip, r0, r1
 8000908:	4094      	lsls	r4, r2
 800090a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800090e:	0c23      	lsrs	r3, r4, #16
 8000910:	fbbc f6f8 	udiv	r6, ip, r8
 8000914:	fa1f fe87 	uxth.w	lr, r7
 8000918:	fb08 c116 	mls	r1, r8, r6, ip
 800091c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000920:	fb06 f10e 	mul.w	r1, r6, lr
 8000924:	4299      	cmp	r1, r3
 8000926:	d909      	bls.n	800093c <__udivmoddi4+0x60>
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	f106 30ff 	add.w	r0, r6, #4294967295
 800092e:	f080 8119 	bcs.w	8000b64 <__udivmoddi4+0x288>
 8000932:	4299      	cmp	r1, r3
 8000934:	f240 8116 	bls.w	8000b64 <__udivmoddi4+0x288>
 8000938:	3e02      	subs	r6, #2
 800093a:	443b      	add	r3, r7
 800093c:	1a5b      	subs	r3, r3, r1
 800093e:	b2a4      	uxth	r4, r4
 8000940:	fbb3 f0f8 	udiv	r0, r3, r8
 8000944:	fb08 3310 	mls	r3, r8, r0, r3
 8000948:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800094c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000950:	45a6      	cmp	lr, r4
 8000952:	d909      	bls.n	8000968 <__udivmoddi4+0x8c>
 8000954:	193c      	adds	r4, r7, r4
 8000956:	f100 33ff 	add.w	r3, r0, #4294967295
 800095a:	f080 8105 	bcs.w	8000b68 <__udivmoddi4+0x28c>
 800095e:	45a6      	cmp	lr, r4
 8000960:	f240 8102 	bls.w	8000b68 <__udivmoddi4+0x28c>
 8000964:	3802      	subs	r0, #2
 8000966:	443c      	add	r4, r7
 8000968:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096c:	eba4 040e 	sub.w	r4, r4, lr
 8000970:	2600      	movs	r6, #0
 8000972:	b11d      	cbz	r5, 800097c <__udivmoddi4+0xa0>
 8000974:	40d4      	lsrs	r4, r2
 8000976:	2300      	movs	r3, #0
 8000978:	e9c5 4300 	strd	r4, r3, [r5]
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	b902      	cbnz	r2, 8000986 <__udivmoddi4+0xaa>
 8000984:	deff      	udf	#255	; 0xff
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	2a00      	cmp	r2, #0
 800098c:	d150      	bne.n	8000a30 <__udivmoddi4+0x154>
 800098e:	1bcb      	subs	r3, r1, r7
 8000990:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000994:	fa1f f887 	uxth.w	r8, r7
 8000998:	2601      	movs	r6, #1
 800099a:	fbb3 fcfe 	udiv	ip, r3, lr
 800099e:	0c21      	lsrs	r1, r4, #16
 80009a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d907      	bls.n	80009c0 <__udivmoddi4+0xe4>
 80009b0:	1879      	adds	r1, r7, r1
 80009b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009b6:	d202      	bcs.n	80009be <__udivmoddi4+0xe2>
 80009b8:	428b      	cmp	r3, r1
 80009ba:	f200 80e9 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009be:	4684      	mov	ip, r0
 80009c0:	1ac9      	subs	r1, r1, r3
 80009c2:	b2a3      	uxth	r3, r4
 80009c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009d0:	fb08 f800 	mul.w	r8, r8, r0
 80009d4:	45a0      	cmp	r8, r4
 80009d6:	d907      	bls.n	80009e8 <__udivmoddi4+0x10c>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f100 33ff 	add.w	r3, r0, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x10a>
 80009e0:	45a0      	cmp	r8, r4
 80009e2:	f200 80d9 	bhi.w	8000b98 <__udivmoddi4+0x2bc>
 80009e6:	4618      	mov	r0, r3
 80009e8:	eba4 0408 	sub.w	r4, r4, r8
 80009ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009f0:	e7bf      	b.n	8000972 <__udivmoddi4+0x96>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0x12e>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80b1 	beq.w	8000b5e <__udivmoddi4+0x282>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x1cc>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0x140>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80b8 	bhi.w	8000b8c <__udivmoddi4+0x2b0>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	468c      	mov	ip, r1
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0a8      	beq.n	800097c <__udivmoddi4+0xa0>
 8000a2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a2e:	e7a5      	b.n	800097c <__udivmoddi4+0xa0>
 8000a30:	f1c2 0320 	rsb	r3, r2, #32
 8000a34:	fa20 f603 	lsr.w	r6, r0, r3
 8000a38:	4097      	lsls	r7, r2
 8000a3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a42:	40d9      	lsrs	r1, r3
 8000a44:	4330      	orrs	r0, r6
 8000a46:	0c03      	lsrs	r3, r0, #16
 8000a48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a4c:	fa1f f887 	uxth.w	r8, r7
 8000a50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a58:	fb06 f108 	mul.w	r1, r6, r8
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x19c>
 8000a64:	18fb      	adds	r3, r7, r3
 8000a66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a6a:	f080 808d 	bcs.w	8000b88 <__udivmoddi4+0x2ac>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 808a 	bls.w	8000b88 <__udivmoddi4+0x2ac>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	443b      	add	r3, r7
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b281      	uxth	r1, r0
 8000a7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a88:	fb00 f308 	mul.w	r3, r0, r8
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	d907      	bls.n	8000aa0 <__udivmoddi4+0x1c4>
 8000a90:	1879      	adds	r1, r7, r1
 8000a92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a96:	d273      	bcs.n	8000b80 <__udivmoddi4+0x2a4>
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d971      	bls.n	8000b80 <__udivmoddi4+0x2a4>
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	4439      	add	r1, r7
 8000aa0:	1acb      	subs	r3, r1, r3
 8000aa2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000aa6:	e778      	b.n	800099a <__udivmoddi4+0xbe>
 8000aa8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aac:	fa03 f406 	lsl.w	r4, r3, r6
 8000ab0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ab4:	431c      	orrs	r4, r3
 8000ab6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ac2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ac6:	431f      	orrs	r7, r3
 8000ac8:	0c3b      	lsrs	r3, r7, #16
 8000aca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ace:	fa1f f884 	uxth.w	r8, r4
 8000ad2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ad6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ada:	fb09 fa08 	mul.w	sl, r9, r8
 8000ade:	458a      	cmp	sl, r1
 8000ae0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x220>
 8000aea:	1861      	adds	r1, r4, r1
 8000aec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000af0:	d248      	bcs.n	8000b84 <__udivmoddi4+0x2a8>
 8000af2:	458a      	cmp	sl, r1
 8000af4:	d946      	bls.n	8000b84 <__udivmoddi4+0x2a8>
 8000af6:	f1a9 0902 	sub.w	r9, r9, #2
 8000afa:	4421      	add	r1, r4
 8000afc:	eba1 010a 	sub.w	r1, r1, sl
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b0e:	fb00 f808 	mul.w	r8, r0, r8
 8000b12:	45b8      	cmp	r8, r7
 8000b14:	d907      	bls.n	8000b26 <__udivmoddi4+0x24a>
 8000b16:	19e7      	adds	r7, r4, r7
 8000b18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1c:	d22e      	bcs.n	8000b7c <__udivmoddi4+0x2a0>
 8000b1e:	45b8      	cmp	r8, r7
 8000b20:	d92c      	bls.n	8000b7c <__udivmoddi4+0x2a0>
 8000b22:	3802      	subs	r0, #2
 8000b24:	4427      	add	r7, r4
 8000b26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b2a:	eba7 0708 	sub.w	r7, r7, r8
 8000b2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b32:	454f      	cmp	r7, r9
 8000b34:	46c6      	mov	lr, r8
 8000b36:	4649      	mov	r1, r9
 8000b38:	d31a      	bcc.n	8000b70 <__udivmoddi4+0x294>
 8000b3a:	d017      	beq.n	8000b6c <__udivmoddi4+0x290>
 8000b3c:	b15d      	cbz	r5, 8000b56 <__udivmoddi4+0x27a>
 8000b3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b42:	eb67 0701 	sbc.w	r7, r7, r1
 8000b46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b4a:	40f2      	lsrs	r2, r6
 8000b4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b50:	40f7      	lsrs	r7, r6
 8000b52:	e9c5 2700 	strd	r2, r7, [r5]
 8000b56:	2600      	movs	r6, #0
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e70b      	b.n	800097c <__udivmoddi4+0xa0>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e9      	b.n	800093c <__udivmoddi4+0x60>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6fd      	b.n	8000968 <__udivmoddi4+0x8c>
 8000b6c:	4543      	cmp	r3, r8
 8000b6e:	d2e5      	bcs.n	8000b3c <__udivmoddi4+0x260>
 8000b70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b74:	eb69 0104 	sbc.w	r1, r9, r4
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7df      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e7d2      	b.n	8000b26 <__udivmoddi4+0x24a>
 8000b80:	4660      	mov	r0, ip
 8000b82:	e78d      	b.n	8000aa0 <__udivmoddi4+0x1c4>
 8000b84:	4681      	mov	r9, r0
 8000b86:	e7b9      	b.n	8000afc <__udivmoddi4+0x220>
 8000b88:	4666      	mov	r6, ip
 8000b8a:	e775      	b.n	8000a78 <__udivmoddi4+0x19c>
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	e74a      	b.n	8000a26 <__udivmoddi4+0x14a>
 8000b90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b94:	4439      	add	r1, r7
 8000b96:	e713      	b.n	80009c0 <__udivmoddi4+0xe4>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	e724      	b.n	80009e8 <__udivmoddi4+0x10c>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr  r2, =_sbss
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bce:	f000 febf 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f00a f88b 	bl	800acec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f000 fbcf 	bl	8001378 <main>
  bx  lr    
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000be0:	0801b98c 	.word	0x0801b98c
  ldr  r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be8:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8000bec:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8000bf0:	2000e4b4 	.word	0x2000e4b4

08000bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC_IRQHandler>
	...

08000bf8 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8000bf8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <_sbrk+0x34>)
 8000bfc:	6819      	ldr	r1, [r3, #0]
{
 8000bfe:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000c00:	b909      	cbnz	r1, 8000c06 <_sbrk+0xe>
		heap_end = &end;
 8000c02:	490b      	ldr	r1, [pc, #44]	; (8000c30 <_sbrk+0x38>)
 8000c04:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000c06:	490b      	ldr	r1, [pc, #44]	; (8000c34 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8000c08:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000c0a:	6809      	ldr	r1, [r1, #0]
 8000c0c:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000c0e:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 8000c10:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000c14:	428a      	cmp	r2, r1
 8000c16:	d906      	bls.n	8000c26 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000c18:	f00a f862 	bl	800ace0 <__errno>
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000c24:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000c26:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000c28:	e7fc      	b.n	8000c24 <_sbrk+0x2c>
 8000c2a:	bf00      	nop
 8000c2c:	200000cc 	.word	0x200000cc
 8000c30:	2000e4b8 	.word	0x2000e4b8
 8000c34:	e000ed08 	.word	0xe000ed08

08000c38 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000c38:	2001      	movs	r0, #1
 8000c3a:	4770      	bx	lr

08000c3c <_kill>:

int _kill(int pid, int sig)
{
 8000c3c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c3e:	f00a f84f 	bl	800ace0 <__errno>
 8000c42:	2316      	movs	r3, #22
 8000c44:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000c46:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4a:	bd08      	pop	{r3, pc}

08000c4c <_exit>:

void _exit (int status)
{
 8000c4c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000c4e:	f00a f847 	bl	800ace0 <__errno>
 8000c52:	2316      	movs	r3, #22
 8000c54:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000c56:	e7fe      	b.n	8000c56 <_exit+0xa>

08000c58 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000c58:	b570      	push	{r4, r5, r6, lr}
 8000c5a:	460e      	mov	r6, r1
 8000c5c:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	2500      	movs	r5, #0
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	db01      	blt.n	8000c68 <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000c64:	4620      	mov	r0, r4
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8000c68:	5d70      	ldrb	r0, [r6, r5]
 8000c6a:	f000 fc99 	bl	80015a0 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	3501      	adds	r5, #1
 8000c70:	e7f6      	b.n	8000c60 <_write+0x8>

08000c72 <_close>:

int _close(int file)
{
	return -1;
}
 8000c72:	f04f 30ff 	mov.w	r0, #4294967295
 8000c76:	4770      	bx	lr

08000c78 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	4770      	bx	lr

08000c82 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000c82:	2001      	movs	r0, #1
 8000c84:	4770      	bx	lr

08000c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000c86:	2000      	movs	r0, #0
 8000c88:	4770      	bx	lr

08000c8a <_read>:

int _read(int file, char *ptr, int len)
{
 8000c8a:	b570      	push	{r4, r5, r6, lr}
 8000c8c:	460e      	mov	r6, r1
 8000c8e:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2500      	movs	r5, #0
 8000c92:	42a5      	cmp	r5, r4
 8000c94:	db01      	blt.n	8000c9a <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8000c96:	4620      	mov	r0, r4
 8000c98:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	3501      	adds	r5, #1
 8000ca2:	e7f6      	b.n	8000c92 <_read+0x8>

08000ca4 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 8000ca4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8000ca8:	07db      	lsls	r3, r3, #31
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#else    
    /* Turn On LED 1 to indicate ETH and LwIP init success*/
    BSP_LED_On(LED1);
 8000caa:	bf4c      	ite	mi
 8000cac:	2000      	movmi	r0, #0
#endif  /* USE_DHCP */
#ifdef USE_LCD
   LCD_UsrLog ("The network cable is not connected \n");
#else    
    /* Turn On LED 2 to indicate ETH and LwIP init error */
    BSP_LED_On(LED2);
 8000cae:	2001      	movpl	r0, #1
 8000cb0:	f000 bd64 	b.w	800177c <BSP_LED_On>

08000cb4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000cb4:	b530      	push	{r4, r5, lr}
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;
#endif
  
  if(netif_is_link_up(netif))
 8000cb6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8000cba:	0759      	lsls	r1, r3, #29
{
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 8000cc0:	f3c3 0580 	ubfx	r5, r3, #2, #1
 8000cc4:	d519      	bpl.n	8000cfa <ethernetif_notify_conn_changed+0x46>
  {
#ifdef USE_LCD
    LCD_UsrLog ("The network cable is now connected \n");
#else
    BSP_LED_Off(LED2);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f000 fd66 	bl	8001798 <BSP_LED_Off>
    BSP_LED_On(LED1);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fd55 	bl	800177c <BSP_LED_On>
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    IP_ADDR4(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
    IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <ethernetif_notify_conn_changed+0x58>)
 8000cd4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000cd8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);  
 8000cdc:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 8000ce0:	33c1      	adds	r3, #193	; 0xc1
 8000ce2:	9303      	str	r3, [sp, #12]
    
    netif_set_addr(netif, &ipaddr , &netmask, &gw);  
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	ab03      	add	r3, sp, #12
 8000ce8:	aa02      	add	r2, sp, #8
 8000cea:	a901      	add	r1, sp, #4
 8000cec:	f004 ff90 	bl	8005c10 <netif_set_addr>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
#endif
#endif /* USE_DHCP */   
    
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);     
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f005 f857 	bl	8005da4 <netif_set_up>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* USE_LCD */    
  }
}
 8000cf6:	b005      	add	sp, #20
 8000cf8:	bd30      	pop	{r4, r5, pc}
    netif_set_down(netif);
 8000cfa:	f005 f86d 	bl	8005dd8 <netif_set_down>
    BSP_LED_Off(LED1);
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f000 fd4a 	bl	8001798 <BSP_LED_Off>
    BSP_LED_On(LED2);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f000 fd39 	bl	800177c <BSP_LED_On>
}
 8000d0a:	e7f4      	b.n	8000cf6 <ethernetif_notify_conn_changed+0x42>
 8000d0c:	6e01a8c0 	.word	0x6e01a8c0

08000d10 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8000d14:	4a25      	ldr	r2, [pc, #148]	; (8000dac <low_level_output+0x9c>)
 8000d16:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8000d18:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8000d1c:	68b3      	ldr	r3, [r6, #8]
{
 8000d1e:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8000d20:	4647      	mov	r7, r8
 8000d22:	4691      	mov	r9, r2
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000d24:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 8000d28:	b92c      	cbnz	r4, 8000d36 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8000d2a:	4820      	ldr	r0, [pc, #128]	; (8000dac <low_level_output+0x9c>)
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	f001 fa2b 	bl	8002188 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8000d32:	4620      	mov	r0, r4
 8000d34:	e004      	b.n	8000d40 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d36:	6832      	ldr	r2, [r6, #0]
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	da11      	bge.n	8000d60 <low_level_output+0x50>
        errval = ERR_USE;
 8000d3c:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000d40:	f8d9 3000 	ldr.w	r3, [r9]
 8000d44:	f241 0214 	movw	r2, #4116	; 0x1014
 8000d48:	5899      	ldr	r1, [r3, r2]
 8000d4a:	0689      	lsls	r1, r1, #26
 8000d4c:	d505      	bpl.n	8000d5a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8000d4e:	2120      	movs	r1, #32
 8000d50:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8000d52:	f241 0204 	movw	r2, #4100	; 0x1004
 8000d56:	2100      	movs	r1, #0
 8000d58:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8000d5a:	b003      	add	sp, #12
 8000d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8000d60:	8962      	ldrh	r2, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000d62:	4645      	mov	r5, r8
      payloadoffset = 0;
 8000d64:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000d68:	6861      	ldr	r1, [r4, #4]
 8000d6a:	eb05 0802 	add.w	r8, r5, r2
 8000d6e:	45d8      	cmp	r8, fp
 8000d70:	eb03 0005 	add.w	r0, r3, r5
 8000d74:	4451      	add	r1, sl
 8000d76:	d808      	bhi.n	8000d8a <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000d78:	e9cd 2300 	strd	r2, r3, [sp]
 8000d7c:	f009 ffe8 	bl	800ad50 <memcpy>
      framelength = framelength + byteslefttocopy;
 8000d80:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 8000d82:	6824      	ldr	r4, [r4, #0]
 8000d84:	9b01      	ldr	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8000d86:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 8000d88:	e7ce      	b.n	8000d28 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8000d8a:	ebab 0505 	sub.w	r5, fp, r5
 8000d8e:	462a      	mov	r2, r5
 8000d90:	f009 ffde 	bl	800ad50 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8000d94:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d96:	6833      	ldr	r3, [r6, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	dbcf      	blt.n	8000d3c <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8000d9c:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000d9e:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8000da0:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8000da2:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8000da6:	2500      	movs	r5, #0
 8000da8:	e7de      	b.n	8000d68 <low_level_output+0x58>
 8000daa:	bf00      	nop
 8000dac:	200025b8 	.word	0x200025b8

08000db0 <HAL_ETH_MspInit>:
{
 8000db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(heth->Instance==ETH)
 8000db4:	6802      	ldr	r2, [r0, #0]
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_ETH_MspInit+0x120>)
 8000db8:	429a      	cmp	r2, r3
{
 8000dba:	b08c      	sub	sp, #48	; 0x30
  if(heth->Instance==ETH)
 8000dbc:	f040 8084 	bne.w	8000ec8 <HAL_ETH_MspInit+0x118>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	9400      	str	r4, [sp, #0]
 8000dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dca:	4842      	ldr	r0, [pc, #264]	; (8000ed4 <HAL_ETH_MspInit+0x124>)
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dcc:	f042 0210 	orr.w	r2, r2, #16
 8000dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd4:	f002 0210 	and.w	r2, r2, #16
 8000dd8:	9200      	str	r2, [sp, #0]
 8000dda:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	9401      	str	r4, [sp, #4]
 8000dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de0:	f042 0204 	orr.w	r2, r2, #4
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
 8000de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000de8:	f002 0204 	and.w	r2, r2, #4
 8000dec:	9201      	str	r2, [sp, #4]
 8000dee:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	9402      	str	r4, [sp, #8]
 8000df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000df4:	f042 0201 	orr.w	r2, r2, #1
 8000df8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dfc:	f002 0201 	and.w	r2, r2, #1
 8000e00:	9202      	str	r2, [sp, #8]
 8000e02:	9a02      	ldr	r2, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	9403      	str	r4, [sp, #12]
 8000e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e08:	f042 0202 	orr.w	r2, r2, #2
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e10:	f002 0202 	and.w	r2, r2, #2
 8000e14:	9203      	str	r2, [sp, #12]
 8000e16:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_ETH_CLK_ENABLE();
 8000e18:	9404      	str	r4, [sp, #16]
 8000e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e24:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000e28:	9204      	str	r2, [sp, #16]
 8000e2a:	9a04      	ldr	r2, [sp, #16]
 8000e2c:	9405      	str	r4, [sp, #20]
 8000e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e30:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
 8000e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e38:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8000e3c:	9205      	str	r2, [sp, #20]
 8000e3e:	9a05      	ldr	r2, [sp, #20]
 8000e40:	9406      	str	r4, [sp, #24]
 8000e42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e44:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	9409      	str	r4, [sp, #36]	; 0x24
		__HAL_RCC_ETH_CLK_ENABLE();
 8000e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2602      	movs	r6, #2
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e54:	250b      	movs	r5, #11
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2732      	movs	r7, #50	; 0x32
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e58:	f04f 0803 	mov.w	r8, #3
		__HAL_RCC_ETH_CLK_ENABLE();
 8000e5c:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	e9cd 850a 	strd	r8, r5, [sp, #40]	; 0x28
		__HAL_RCC_ETH_CLK_ENABLE();
 8000e64:	9b06      	ldr	r3, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	e9cd 7607 	strd	r7, r6, [sp, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f001 fcb1 	bl	80027d0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e6e:	2386      	movs	r3, #134	; 0x86
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <HAL_ETH_MspInit+0x128>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	950b      	str	r5, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	e9cd 3607 	strd	r3, r6, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f001 fca7 	bl	80027d0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000e82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <HAL_ETH_MspInit+0x12c>)
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	950b      	str	r5, [sp, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	e9cd 3607 	strd	r3, r6, [sp, #28]
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e90:	2501      	movs	r5, #1
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	e9cd 4809 	strd	r4, r8, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f001 fc9b 	bl	80027d0 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_ETH_MspInit+0x128>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	960a      	str	r6, [sp, #40]	; 0x28
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	a907      	add	r1, sp, #28
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	e9cd 5507 	strd	r5, r5, [sp, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f001 fc94 	bl	80027d0 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_RESET);	
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	4629      	mov	r1, r5
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <HAL_ETH_MspInit+0x128>)
 8000eae:	f001 fdff 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	f000 fdbe 	bl	8001a34 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,GPIO_PIN_SET);	
 8000eb8:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <HAL_ETH_MspInit+0x128>)
 8000eba:	462a      	mov	r2, r5
 8000ebc:	4629      	mov	r1, r5
 8000ebe:	f001 fdf7 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f000 fdb6 	bl	8001a34 <HAL_Delay>
}
 8000ec8:	b00c      	add	sp, #48	; 0x30
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ece:	bf00      	nop
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_ETH_MspDeInit>:
{
 8000ee0:	b508      	push	{r3, lr}
  if(heth->Instance==ETH)
 8000ee2:	6802      	ldr	r2, [r0, #0]
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_ETH_MspDeInit+0x48>)
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d11c      	bne.n	8000f24 <HAL_ETH_MspDeInit+0x44>
    __HAL_RCC_ETH_CLK_DISABLE();
 8000eea:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5);
 8000eee:	480f      	ldr	r0, [pc, #60]	; (8000f2c <HAL_ETH_MspDeInit+0x4c>)
    __HAL_RCC_ETH_CLK_DISABLE();
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efa:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8000efe:	631a      	str	r2, [r3, #48]	; 0x30
 8000f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f02:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5);
 8000f08:	2132      	movs	r1, #50	; 0x32
 8000f0a:	f001 fd3b 	bl	8002984 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7);
 8000f0e:	4808      	ldr	r0, [pc, #32]	; (8000f30 <HAL_ETH_MspDeInit+0x50>)
 8000f10:	2187      	movs	r1, #135	; 0x87
 8000f12:	f001 fd37 	bl	8002984 <HAL_GPIO_DeInit>
}
 8000f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_ETH_MspDeInit+0x54>)
 8000f1c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000f20:	f001 bd30 	b.w	8002984 <HAL_GPIO_DeInit>
}
 8000f24:	bd08      	pop	{r3, pc}
 8000f26:	bf00      	nop
 8000f28:	40028000 	.word	0x40028000
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400

08000f38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
err_t ethernetif_input(struct netif *netif)
{
 8000f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8000f3c:	4c35      	ldr	r4, [pc, #212]	; (8001014 <ethernetif_input+0xdc>)
{
 8000f3e:	4680      	mov	r8, r0
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8000f40:	4620      	mov	r0, r4
 8000f42:	f001 f995 	bl	8002270 <HAL_ETH_GetReceivedFrame>
 8000f46:	4605      	mov	r5, r0
 8000f48:	b128      	cbz	r0, 8000f56 <ethernetif_input+0x1e>
  p = low_level_input(netif);

  /* no packet could be read, silently ignore this */
  if (p == NULL) {
		//NVIC_SystemReset();	
		return ERR_MEM;
 8000f4a:	f04f 34ff 	mov.w	r4, #4294967295
    p = NULL;
  }


  return err;
}
 8000f4e:	4620      	mov	r0, r4
 8000f50:	b003      	add	sp, #12
 8000f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = heth.RxFrameInfos.length;
 8000f56:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  if (len > 0)
 8000f58:	bb11      	cbnz	r1, 8000fa0 <ethernetif_input+0x68>
  struct pbuf *p = NULL;
 8000f5a:	2600      	movs	r6, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8000f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8000f5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f60:	2200      	movs	r2, #0
 8000f62:	4282      	cmp	r2, r0
 8000f64:	d14f      	bne.n	8001006 <ethernetif_input+0xce>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000f66:	f241 0114 	movw	r1, #4116	; 0x1014
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	5858      	ldr	r0, [r3, r1]
 8000f6e:	0600      	lsls	r0, r0, #24
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8000f70:	bf42      	ittt	mi
 8000f72:	2080      	movmi	r0, #128	; 0x80
 8000f74:	5058      	strmi	r0, [r3, r1]
    heth.Instance->DMARPDR = 0;
 8000f76:	f241 0108 	movwmi	r1, #4104	; 0x1008
    heth.RxFrameInfos.SegCount =0;  
 8000f7a:	f04f 0200 	mov.w	r2, #0
    heth.Instance->DMARPDR = 0;
 8000f7e:	bf48      	it	mi
 8000f80:	505a      	strmi	r2, [r3, r1]
    heth.RxFrameInfos.SegCount =0;  
 8000f82:	63a2      	str	r2, [r4, #56]	; 0x38
  if (p == NULL) {
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	d0e0      	beq.n	8000f4a <ethernetif_input+0x12>
  err = netif->input(p, netif);
 8000f88:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000f8c:	4641      	mov	r1, r8
 8000f8e:	4630      	mov	r0, r6
 8000f90:	4798      	blx	r3
  if (err != ERR_OK)
 8000f92:	4604      	mov	r4, r0
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d0da      	beq.n	8000f4e <ethernetif_input+0x16>
    pbuf_free(p);
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f004 fff7 	bl	8005f8c <pbuf_free>
    p = NULL;
 8000f9e:	e7d6      	b.n	8000f4e <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000fa0:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8000fa4:	6c27      	ldr	r7, [r4, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000fa6:	f005 f855 	bl	8006054 <pbuf_alloc>
  if (p != NULL)
 8000faa:	4606      	mov	r6, r0
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d0d4      	beq.n	8000f5a <ethernetif_input+0x22>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8000fb0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8000fb4:	46b9      	mov	r9, r7
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000fb6:	f240 5bf4 	movw	fp, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8000fba:	4607      	mov	r7, r0
      byteslefttocopy = q->len;
 8000fbc:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000fc0:	46ac      	mov	ip, r5
      payloadoffset = 0;
 8000fc2:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	eb0c 050e 	add.w	r5, ip, lr
 8000fca:	455d      	cmp	r5, fp
 8000fcc:	4418      	add	r0, r3
 8000fce:	eb09 010c 	add.w	r1, r9, ip
 8000fd2:	d806      	bhi.n	8000fe2 <ethernetif_input+0xaa>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000fd4:	4672      	mov	r2, lr
 8000fd6:	f009 febb 	bl	800ad50 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8000fda:	683f      	ldr	r7, [r7, #0]
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d1ed      	bne.n	8000fbc <ethernetif_input+0x84>
 8000fe0:	e7bc      	b.n	8000f5c <ethernetif_input+0x24>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000fe2:	ebab 020c 	sub.w	r2, fp, ip
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	9200      	str	r2, [sp, #0]
 8000fea:	f009 feb1 	bl	800ad50 <memcpy>
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000fee:	e9dd 2300 	ldrd	r2, r3, [sp]
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000ff2:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000ff6:	f2a5 5ef4 	subw	lr, r5, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8000ffa:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000ffe:	4413      	add	r3, r2
        bufferoffset = 0;
 8001000:	f04f 0c00 	mov.w	ip, #0
 8001004:	e7de      	b.n	8000fc4 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800100c:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800100e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8001010:	3201      	adds	r2, #1
 8001012:	e7a6      	b.n	8000f62 <ethernetif_input+0x2a>
 8001014:	200025b8 	.word	0x200025b8

08001018 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8001018:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800101a:	4604      	mov	r4, r0
 800101c:	b930      	cbnz	r0, 800102c <ethernetif_init+0x14>
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <ethernetif_init+0xc0>)
 8001020:	492e      	ldr	r1, [pc, #184]	; (80010dc <ethernetif_init+0xc4>)
 8001022:	482f      	ldr	r0, [pc, #188]	; (80010e0 <ethernetif_init+0xc8>)
 8001024:	f240 2243 	movw	r2, #579	; 0x243
 8001028:	f009 fea8 	bl	800ad7c <iprintf>
  /* Initialize interface hostname */
  //netif->hostname = "lwip";
  netif_set_hostname(netif,meter_hostname);
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800102c:	f247 4373 	movw	r3, #29811	; 0x7473
  HAL_ETH_DeInit(&heth);
 8001030:	4d2c      	ldr	r5, [pc, #176]	; (80010e4 <ethernetif_init+0xcc>)
  netif->name[0] = IFNAME0;
 8001032:	8663      	strh	r3, [r4, #50]	; 0x32
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <ethernetif_init+0xd0>)
 8001036:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <ethernetif_init+0xd4>)
 800103a:	61a3      	str	r3, [r4, #24]
  HAL_ETH_DeInit(&heth);
 800103c:	4628      	mov	r0, r5
 800103e:	f001 f895 	bl	800216c <HAL_ETH_DeInit>
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001042:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <ethernetif_init+0xd8>)
  heth.Init.MACAddr = &MACAddr[0];
 8001044:	f8c5 d014 	str.w	sp, [r5, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001048:	2301      	movs	r3, #1
 800104a:	e9c5 2300 	strd	r2, r3, [r5]
  MACAddr[0] = MAC_ADDR0;
 800104e:	2302      	movs	r3, #2
  heth.Init.PhyAddress = 0;
 8001050:	2600      	movs	r6, #0
  MACAddr[0] = MAC_ADDR0;
 8001052:	9300      	str	r3, [sp, #0]
	HAL_ETH_Init(&heth);
 8001054:	4628      	mov	r0, r5
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001056:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800105a:	622b      	str	r3, [r5, #32]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800105c:	e9c5 6606 	strd	r6, r6, [r5, #24]
  heth.Init.PhyAddress = 0;
 8001060:	822e      	strh	r6, [r5, #16]
  MACAddr[4] = MAC_ADDR4;
 8001062:	f8ad 6004 	strh.w	r6, [sp, #4]
	HAL_ETH_Init(&heth);
 8001066:	f001 f9b5 	bl	80023d4 <HAL_ETH_Init>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800106a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <ethernetif_init+0xdc>)
 8001070:	4921      	ldr	r1, [pc, #132]	; (80010f8 <ethernetif_init+0xe0>)
    netif->flags |= NETIF_FLAG_LINK_UP;
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800107a:	4628      	mov	r0, r5
 800107c:	2305      	movs	r3, #5
 800107e:	f000 ffff 	bl	8002080 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8001082:	491e      	ldr	r1, [pc, #120]	; (80010fc <ethernetif_init+0xe4>)
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <ethernetif_init+0xe8>)
 8001086:	2305      	movs	r3, #5
 8001088:	4628      	mov	r0, r5
 800108a:	f001 f835 	bl	80020f8 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800108e:	2306      	movs	r3, #6
 8001090:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8001094:	696b      	ldr	r3, [r5, #20]
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800109c:	785a      	ldrb	r2, [r3, #1]
 800109e:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80010a2:	789a      	ldrb	r2, [r3, #2]
 80010a4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80010a8:	78da      	ldrb	r2, [r3, #3]
 80010aa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80010ae:	791a      	ldrb	r2, [r3, #4]
 80010b0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80010b4:	795b      	ldrb	r3, [r3, #5]
 80010b6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->mtu = 1500;
 80010ba:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80010be:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80010c0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80010c4:	f043 030a 	orr.w	r3, r3, #10
 80010c8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_Start(&heth);
 80010cc:	4628      	mov	r0, r5
 80010ce:	f001 fa7f 	bl	80025d0 <HAL_ETH_Start>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80010d2:	4630      	mov	r0, r6
 80010d4:	b002      	add	sp, #8
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	08018c44 	.word	0x08018c44
 80010dc:	08018f01 	.word	0x08018f01
 80010e0:	08018c9a 	.word	0x08018c9a
 80010e4:	200025b8 	.word	0x200025b8
 80010e8:	08004705 	.word	0x08004705
 80010ec:	08000d11 	.word	0x08000d11
 80010f0:	40028000 	.word	0x40028000
 80010f4:	20002600 	.word	0x20002600
 80010f8:	200006b4 	.word	0x200006b4
 80010fc:	20002518 	.word	0x20002518
 8001100:	20000754 	.word	0x20000754

08001104 <sys_now>:
 8001104:	f000 bc90 	b.w	8001a28 <HAL_GetTick>

08001108 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8001108:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tickstart = 0;
  uint32_t regvalue = 0;
  
  if(netif_is_link_up(netif))
 800110a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  __IO uint32_t tickstart = 0;
 800110e:	2100      	movs	r1, #0
{
 8001110:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 8001112:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8001114:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8001116:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8001118:	d544      	bpl.n	80011a4 <ethernetif_update_config+0x9c>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800111a:	4c24      	ldr	r4, [pc, #144]	; (80011ac <ethernetif_update_config+0xa4>)
 800111c:	6863      	ldr	r3, [r4, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d035      	beq.n	800118e <ethernetif_update_config+0x86>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8001122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001126:	4620      	mov	r0, r4
 8001128:	f001 f91c 	bl	8002364 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800112c:	f000 fc7c 	bl	8001a28 <HAL_GetTick>

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8001130:	4626      	mov	r6, r4
      tickstart = HAL_GetTick();
 8001132:	9000      	str	r0, [sp, #0]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8001134:	aa01      	add	r2, sp, #4
 8001136:	2101      	movs	r1, #1
 8001138:	4630      	mov	r0, r6
 800113a:	f001 f8d8 	bl	80022ee <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800113e:	f000 fc73 	bl	8001a28 <HAL_GetTick>
 8001142:	9b00      	ldr	r3, [sp, #0]
 8001144:	1ac0      	subs	r0, r0, r3
 8001146:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800114a:	d820      	bhi.n	800118e <ethernetif_update_config+0x86>
        {
          /* In case of timeout */
          goto error;
        }

      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	069a      	lsls	r2, r3, #26
 8001150:	d5f0      	bpl.n	8001134 <ethernetif_update_config+0x2c>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8001152:	aa01      	add	r2, sp, #4
 8001154:	4815      	ldr	r0, [pc, #84]	; (80011ac <ethernetif_update_config+0xa4>)
 8001156:	211f      	movs	r1, #31
 8001158:	f001 f8c9 	bl	80022ee <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800115c:	9b01      	ldr	r3, [sp, #4]
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
    	  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800115e:	f013 0210 	ands.w	r2, r3, #16
 8001162:	bf18      	it	ne
 8001164:	f44f 6200 	movne.w	r2, #2048	; 0x800
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8001168:	075b      	lsls	r3, r3, #29
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800116a:	bf4c      	ite	mi
 800116c:	2300      	movmi	r3, #0
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800116e:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8001172:	60e2      	str	r2, [r4, #12]
 8001174:	60a3      	str	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <ethernetif_update_config+0xa4>)
 8001178:	2100      	movs	r1, #0
 800117a:	f001 fa9d 	bl	80026b8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <ethernetif_update_config+0xa4>)
 8001180:	f001 fa26 	bl	80025d0 <HAL_ETH_Start>
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
  }

  ethernetif_notify_conn_changed(netif);
 8001184:	4628      	mov	r0, r5
 8001186:	f7ff fd95 	bl	8000cb4 <ethernetif_notify_conn_changed>
}
 800118a:	b002      	add	sp, #8
 800118c:	bd70      	pop	{r4, r5, r6, pc}
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 800118e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001192:	0852      	lsrs	r2, r2, #1
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8001194:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8001198:	b292      	uxth	r2, r2
 800119a:	2100      	movs	r1, #0
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <ethernetif_update_config+0xa4>)
 800119e:	f001 f8e1 	bl	8002364 <HAL_ETH_WritePHYRegister>
 80011a2:	e7e8      	b.n	8001176 <ethernetif_update_config+0x6e>
    HAL_ETH_Stop(&heth);
 80011a4:	4801      	ldr	r0, [pc, #4]	; (80011ac <ethernetif_update_config+0xa4>)
 80011a6:	f001 fa4d 	bl	8002644 <HAL_ETH_Stop>
 80011aa:	e7eb      	b.n	8001184 <ethernetif_update_config+0x7c>
 80011ac:	200025b8 	.word	0x200025b8

080011b0 <ADC_Handler>:

/**
  * @brief  ADC_Handler : SSI handler for ADC page 
  */
u16_t ADC_Handler(int iIndex, char *pcInsert, int iInsertLen)
{
 80011b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80011b4:	460c      	mov	r4, r1
  /* We have only one SSI handler iIndex = 0 */
  if (iIndex ==0)
 80011b6:	4606      	mov	r6, r0
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d162      	bne.n	8001282 <ADC_Handler+0xd2>
  {  
    char Digit1=0, Digit2=0, Digit3=0, Digit4=0; 
    uint32_t ADCVal = 0;        

     /* configure ADC if not yet configured */
     if (ADC_not_configured ==1)       
 80011bc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001298 <ADC_Handler+0xe8>
 80011c0:	f8d8 7000 	ldr.w	r7, [r8]
 80011c4:	2f01      	cmp	r7, #1
 80011c6:	d11c      	bne.n	8001202 <ADC_Handler+0x52>
  hadc.Instance = ADC3;
 80011c8:	4d31      	ldr	r5, [pc, #196]	; (8001290 <ADC_Handler+0xe0>)
 80011ca:	4b32      	ldr	r3, [pc, #200]	; (8001294 <ADC_Handler+0xe4>)
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80011cc:	60a8      	str	r0, [r5, #8]
  hadc.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80011ce:	e9c5 3000 	strd	r3, r0, [r5]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1; 
 80011d2:	e9c5 000a 	strd	r0, r0, [r5, #40]	; 0x28
  hadc.Init.ScanConvMode = DISABLE;
 80011d6:	6128      	str	r0, [r5, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011d8:	60e8      	str	r0, [r5, #12]
  HAL_ADC_Init(&hadc);
 80011da:	4628      	mov	r0, r5
  hadc.Init.ContinuousConvMode = ENABLE;
 80011dc:	762f      	strb	r7, [r5, #24]
  hadc.Init.NbrOfConversion = 1;
 80011de:	61ef      	str	r7, [r5, #28]
  HAL_ADC_Init(&hadc);
 80011e0:	f000 fc42 	bl	8001a68 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 80011e4:	2307      	movs	r3, #7
  sConfig.Rank = 1;
 80011e6:	e9cd 3700 	strd	r3, r7, [sp]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80011ea:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80011ec:	2303      	movs	r3, #3
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80011ee:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 80011f0:	e9cd 3602 	strd	r3, r6, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80011f4:	f000 fdb8 	bl	8001d68 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc);
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 fcdb 	bl	8001bb4 <HAL_ADC_Start>
     {
        ADC_Configuration();
        ADC_not_configured=0;
 80011fe:	f8c8 6000 	str.w	r6, [r8]
     }
     
     HAL_ADC_PollForConversion(&hadc, 10);
 8001202:	210a      	movs	r1, #10
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <ADC_Handler+0xe0>)
 8001206:	f000 fd59 	bl	8001cbc <HAL_ADC_PollForConversion>
     /* get ADC conversion value */
     ADCVal =  HAL_ADC_GetValue(&hadc);
 800120a:	4821      	ldr	r0, [pc, #132]	; (8001290 <ADC_Handler+0xe0>)
 800120c:	f000 fda9 	bl	8001d62 <HAL_ADC_GetValue>
     
     /* convert to Voltage,  step = 0.8 mV */
     ADCVal = (uint32_t)(ADCVal * 0.8);  
 8001210:	f7ff fab2 	bl	8000778 <__aeabi_ui2d>
 8001214:	a31c      	add	r3, pc, #112	; (adr r3, 8001288 <ADC_Handler+0xd8>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f841 	bl	80002a0 <__aeabi_dmul>
 800121e:	f7ff fb25 	bl	800086c <__aeabi_d2uiz>
     
     /* get digits to display */
     
     Digit1= ADCVal/1000;
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb0 f1f3 	udiv	r1, r0, r3
 800122a:	b2c9      	uxtb	r1, r1
     Digit2= (ADCVal-(Digit1*1000))/100;
 800122c:	fb03 f501 	mul.w	r5, r3, r1
 8001230:	1b42      	subs	r2, r0, r5
 8001232:	2364      	movs	r3, #100	; 0x64
 8001234:	fbb2 f2f3 	udiv	r2, r2, r3
 8001238:	b2d2      	uxtb	r2, r2
     Digit3= (ADCVal-((Digit1*1000)+(Digit2*100)))/10;
 800123a:	fb03 5302 	mla	r3, r3, r2, r5
 800123e:	1ac3      	subs	r3, r0, r3
 8001240:	250a      	movs	r5, #10
 8001242:	fbb3 f3f5 	udiv	r3, r3, r5
     Digit4= ADCVal -((Digit1*1000)+(Digit2*100)+ (Digit3*10));
        
     /* prepare data to be inserted in html */
     *pcInsert       = (char)(Digit1+0x30);
 8001246:	f101 0530 	add.w	r5, r1, #48	; 0x30
 800124a:	7025      	strb	r5, [r4, #0]
     *(pcInsert + 1) = (char)(Digit2+0x30);
     *(pcInsert + 2) = (char)(Digit3+0x30);
     *(pcInsert + 3) = (char)(Digit4+0x30);
 800124c:	3030      	adds	r0, #48	; 0x30
     *(pcInsert + 1) = (char)(Digit2+0x30);
 800124e:	f102 0530 	add.w	r5, r2, #48	; 0x30
     Digit4= ADCVal -((Digit1*1000)+(Digit2*100)+ (Digit3*10));
 8001252:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 8001256:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     Digit3= (ADCVal-((Digit1*1000)+(Digit2*100)))/10;
 800125a:	b2db      	uxtb	r3, r3
     *(pcInsert + 3) = (char)(Digit4+0x30);
 800125c:	eba0 00c1 	sub.w	r0, r0, r1, lsl #3
     Digit4= ADCVal -((Digit1*1000)+(Digit2*100)+ (Digit3*10));
 8001260:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     *(pcInsert + 3) = (char)(Digit4+0x30);
 8001264:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
     *(pcInsert + 1) = (char)(Digit2+0x30);
 8001268:	7065      	strb	r5, [r4, #1]
     *(pcInsert + 2) = (char)(Digit3+0x30);
 800126a:	f103 0530 	add.w	r5, r3, #48	; 0x30
     Digit4= ADCVal -((Digit1*1000)+(Digit2*100)+ (Digit3*10));
 800126e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     *(pcInsert + 3) = (char)(Digit4+0x30);
 8001272:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
     *(pcInsert + 2) = (char)(Digit3+0x30);
 8001276:	70a5      	strb	r5, [r4, #2]
     *(pcInsert + 3) = (char)(Digit4+0x30);
 8001278:	70e3      	strb	r3, [r4, #3]
 800127a:	2004      	movs	r0, #4
    
    /* 4 characters need to be inserted in html*/
    return 4;
  }
  return 0;
}
 800127c:	b004      	add	sp, #16
 800127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return 0;
 8001282:	2000      	movs	r0, #0
 8001284:	e7fa      	b.n	800127c <ADC_Handler+0xcc>
 8001286:	bf00      	nop
 8001288:	9999999a 	.word	0x9999999a
 800128c:	3fe99999 	.word	0x3fe99999
 8001290:	200043c8 	.word	0x200043c8
 8001294:	40012200 	.word	0x40012200
 8001298:	20000000 	.word	0x20000000

0800129c <LEDS_CGI_Handler>:

/**
  * @brief  CGI handler for LEDs control 
  */
const char * LEDS_CGI_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 800129c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012a0:	460e      	mov	r6, r1
 80012a2:	4617      	mov	r7, r2
 80012a4:	4698      	mov	r8, r3
  uint32_t i=0;
  
  /* We have only one SSI handler iIndex = 0 */
  if (iIndex==0)
 80012a6:	4604      	mov	r4, r0
 80012a8:	b990      	cbnz	r0, 80012d0 <LEDS_CGI_Handler+0x34>
  {
    /* All leds off */
    BSP_LED_Off(LED1);
 80012aa:	f000 fa75 	bl	8001798 <BSP_LED_Off>
    BSP_LED_Off(LED2);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fa72 	bl	8001798 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 80012b4:	2002      	movs	r0, #2
 80012b6:	f000 fa6f 	bl	8001798 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 fa6c 	bl	8001798 <BSP_LED_Off>
    
    /* Check cgi parameter : application GET /leds.cgi?led=2&led=4 */
    for (i=0; i<iNumParams; i++)
    {
      /* check parameter "led" */
      if (strcmp(pcParam[i] , "led")==0)   
 80012c0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001330 <LEDS_CGI_Handler+0x94>
      {
        /* switch led1 ON if 1 */
        if(strcmp(pcValue[i], "1") ==0) 
 80012c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8001334 <LEDS_CGI_Handler+0x98>
          BSP_LED_On(LED1);
          
        /* switch led2 ON if 2 */
        else if(strcmp(pcValue[i], "2") ==0) 
 80012c8:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8001338 <LEDS_CGI_Handler+0x9c>
    for (i=0; i<iNumParams; i++)
 80012cc:	42b4      	cmp	r4, r6
 80012ce:	d302      	bcc.n	80012d6 <LEDS_CGI_Handler+0x3a>
      }
    }
  }
  /* uri to send after cgi call*/
  return "/STM32F4xxLED.html";  
}
 80012d0:	4814      	ldr	r0, [pc, #80]	; (8001324 <LEDS_CGI_Handler+0x88>)
 80012d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (strcmp(pcParam[i] , "led")==0)   
 80012d6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80012da:	4649      	mov	r1, r9
 80012dc:	f7fe ff78 	bl	80001d0 <strcmp>
 80012e0:	b940      	cbnz	r0, 80012f4 <LEDS_CGI_Handler+0x58>
        if(strcmp(pcValue[i], "1") ==0) 
 80012e2:	f858 5024 	ldr.w	r5, [r8, r4, lsl #2]
 80012e6:	4651      	mov	r1, sl
 80012e8:	4628      	mov	r0, r5
 80012ea:	f7fe ff71 	bl	80001d0 <strcmp>
 80012ee:	b918      	cbnz	r0, 80012f8 <LEDS_CGI_Handler+0x5c>
          BSP_LED_On(LED4);
 80012f0:	f000 fa44 	bl	800177c <BSP_LED_On>
    for (i=0; i<iNumParams; i++)
 80012f4:	3401      	adds	r4, #1
 80012f6:	e7e9      	b.n	80012cc <LEDS_CGI_Handler+0x30>
        else if(strcmp(pcValue[i], "2") ==0) 
 80012f8:	4659      	mov	r1, fp
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7fe ff68 	bl	80001d0 <strcmp>
 8001300:	b908      	cbnz	r0, 8001306 <LEDS_CGI_Handler+0x6a>
          BSP_LED_On(LED2);
 8001302:	2001      	movs	r0, #1
 8001304:	e7f4      	b.n	80012f0 <LEDS_CGI_Handler+0x54>
        else if(strcmp(pcValue[i], "3") ==0) 
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <LEDS_CGI_Handler+0x8c>)
 8001308:	4628      	mov	r0, r5
 800130a:	f7fe ff61 	bl	80001d0 <strcmp>
 800130e:	b908      	cbnz	r0, 8001314 <LEDS_CGI_Handler+0x78>
          BSP_LED_On(LED3);
 8001310:	2002      	movs	r0, #2
 8001312:	e7ed      	b.n	80012f0 <LEDS_CGI_Handler+0x54>
        else if(strcmp(pcValue[i], "4") ==0) 
 8001314:	4905      	ldr	r1, [pc, #20]	; (800132c <LEDS_CGI_Handler+0x90>)
 8001316:	4628      	mov	r0, r5
 8001318:	f7fe ff5a 	bl	80001d0 <strcmp>
 800131c:	2800      	cmp	r0, #0
 800131e:	d1e9      	bne.n	80012f4 <LEDS_CGI_Handler+0x58>
          BSP_LED_On(LED4);
 8001320:	2003      	movs	r0, #3
 8001322:	e7e5      	b.n	80012f0 <LEDS_CGI_Handler+0x54>
 8001324:	08018cc2 	.word	0x08018cc2
 8001328:	08018cd5 	.word	0x08018cd5
 800132c:	08018f77 	.word	0x08018f77
 8001330:	0801b754 	.word	0x0801b754
 8001334:	080193ad 	.word	0x080193ad
 8001338:	0801a614 	.word	0x0801a614

0800133c <http_server_init>:

/**
  * @brief  Http webserver Init
  */
void http_server_init(void)
{
 800133c:	b508      	push	{r3, lr}
  /* Httpd Init */
  httpd_init();
 800133e:	f009 fc3d 	bl	800abbc <httpd_init>
  
  /* configure SSI handlers (ADC page SSI) */
  http_set_ssi_handler(ADC_Handler, (char const **)TAGS, 1);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <http_server_init+0x2c>)
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <http_server_init+0x30>)
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f009 fc77 	bl	800ac3c <http_set_ssi_handler>
  
  /* configure CGI handlers (LEDs control CGI) */
  CGI_TAB[0] = LEDS_CGI;
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <http_server_init+0x34>)
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <http_server_init+0x38>)
 8001352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001356:	e883 0003 	stmia.w	r3, {r0, r1}
  http_set_cgi_handlers(CGI_TAB, 1);  
 800135a:	4618      	mov	r0, r3
 800135c:	2101      	movs	r1, #1
}
 800135e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  http_set_cgi_handlers(CGI_TAB, 1);  
 8001362:	f009 bc99 	b.w	800ac98 <http_set_cgi_handlers>
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	080011b1 	.word	0x080011b1
 8001370:	0800be08 	.word	0x0800be08
 8001374:	20004410 	.word	0x20004410

08001378 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001378:	b500      	push	{lr}
 800137a:	b099      	sub	sp, #100	; 0x64
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();  
 800137c:	f000 fb32 	bl	80019e4 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2400      	movs	r4, #0
 8001382:	4b46      	ldr	r3, [pc, #280]	; (800149c <main+0x124>)
 8001384:	9405      	str	r4, [sp, #20]
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	9305      	str	r3, [sp, #20]
 8001396:	9b05      	ldr	r3, [sp, #20]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <main+0x128>)
 800139a:	9406      	str	r4, [sp, #24]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	9306      	str	r3, [sp, #24]
 80013ac:	9b06      	ldr	r3, [sp, #24]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ae:	2001      	movs	r0, #1
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b8:	2502      	movs	r5, #2
 80013ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013be:	f04f 0c19 	mov.w	ip, #25
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	e9cd 5312 	strd	r5, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013ca:	e9cd c314 	strd	ip, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80013ce:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013d0:	2307      	movs	r3, #7
 80013d2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	9516      	str	r5, [sp, #88]	; 0x58
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80013d6:	f001 fb71 	bl	8002abc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80013da:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80013dc:	f44f 5ea0 	mov.w	lr, #5120	; 0x1400
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80013e0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80013e6:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80013f2:	f001 fd3d 	bl	8002e70 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80013f6:	f000 fb31 	bl	8001a5c <HAL_GetREVID>
 80013fa:	f241 0301 	movw	r3, #4097	; 0x1001
 80013fe:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001400:	bf08      	it	eq
 8001402:	4a28      	ldreq	r2, [pc, #160]	; (80014a4 <main+0x12c>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8001404:	4c28      	ldr	r4, [pc, #160]	; (80014a8 <main+0x130>)
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001406:	bf02      	ittt	eq
 8001408:	6813      	ldreq	r3, [r2, #0]
 800140a:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800140e:	6013      	streq	r3, [r2, #0]
  BSP_LED_Init(LED1);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f95f 	bl	80016d4 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001416:	2001      	movs	r0, #1
 8001418:	f000 f95c 	bl	80016d4 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800141c:	2002      	movs	r0, #2
 800141e:	f000 f959 	bl	80016d4 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001422:	2003      	movs	r0, #3
 8001424:	f000 f956 	bl	80016d4 <BSP_LED_Init>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0x0, 0x0);
 8001428:	2200      	movs	r2, #0
 800142a:	4611      	mov	r1, r2
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 fd3e 	bl	8001eb0 <HAL_NVIC_SetPriority>
  lwip_init();
 8001434:	f004 f901 	bl	800563a <lwip_init>
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <main+0x134>)
 800143a:	9304      	str	r3, [sp, #16]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 800143c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001440:	9307      	str	r3, [sp, #28]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001442:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800
 8001446:	33c1      	adds	r3, #193	; 0xc1
 8001448:	930c      	str	r3, [sp, #48]	; 0x30
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <main+0x138>)
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <main+0x13c>)
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2300      	movs	r3, #0
 8001454:	a904      	add	r1, sp, #16
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	aa07      	add	r2, sp, #28
 800145a:	ab0c      	add	r3, sp, #48	; 0x30
 800145c:	4620      	mov	r0, r4
 800145e:	f004 fc03 	bl	8005c68 <netif_add>
  netif_set_default(&gnetif);
 8001462:	4620      	mov	r0, r4
 8001464:	f004 fc98 	bl	8005d98 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8001468:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800146c:	0759      	lsls	r1, r3, #29
    netif_set_up(&gnetif);
 800146e:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8001470:	d511      	bpl.n	8001496 <main+0x11e>
    netif_set_up(&gnetif);
 8001472:	f004 fc97 	bl	8005da4 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8001476:	4910      	ldr	r1, [pc, #64]	; (80014b8 <main+0x140>)
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <main+0x130>)
    ethernetif_input(&gnetif);
 800147a:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <main+0x130>)
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800147c:	f004 fcc8 	bl	8005e10 <netif_set_link_callback>
  http_server_init();
 8001480:	f7ff ff5c 	bl	800133c <http_server_init>
  User_notification(&gnetif);
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <main+0x130>)
 8001486:	f7ff fc0d 	bl	8000ca4 <User_notification>
    ethernetif_input(&gnetif);
 800148a:	4620      	mov	r0, r4
 800148c:	f7ff fd54 	bl	8000f38 <ethernetif_input>
    sys_check_timeouts();
 8001490:	f008 fa5c 	bl	800994c <sys_check_timeouts>
  while (1)
 8001494:	e7f9      	b.n	800148a <main+0x112>
    netif_set_down(&gnetif);
 8001496:	f004 fc9f 	bl	8005dd8 <netif_set_down>
 800149a:	e7ec      	b.n	8001476 <main+0xfe>
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000
 80014a4:	40023c00 	.word	0x40023c00
 80014a8:	20004418 	.word	0x20004418
 80014ac:	6e01a8c0 	.word	0x6e01a8c0
 80014b0:	08009efd 	.word	0x08009efd
 80014b4:	08001019 	.word	0x08001019
 80014b8:	08001109 	.word	0x08001109

080014bc <HAL_ADC_MspInit>:
  * @brief  ADC_MspInit
  * @param  None
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *heth)
{
 80014bc:	b530      	push	{r4, r5, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
   GPIO_InitTypeDef GPIO_InitStructure;
   
   __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c0:	4c10      	ldr	r4, [pc, #64]	; (8001504 <HAL_ADC_MspInit+0x48>)
   
   /* Configure ADC Channel 7 as analog input */
  GPIO_InitStructure.Pin = GPIO_PIN_9;/**/
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <HAL_ADC_MspInit+0x4c>)
   __HAL_RCC_GPIOF_CLK_ENABLE();
 80014c4:	2500      	movs	r5, #0
 80014c6:	9501      	str	r5, [sp, #4]
 80014c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ca:	f043 0320 	orr.w	r3, r3, #32
 80014ce:	6323      	str	r3, [r4, #48]	; 0x30
 80014d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80014d2:	9505      	str	r5, [sp, #20]
   __HAL_RCC_GPIOF_CLK_ENABLE();
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80014e2:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80014e4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80014e8:	f001 f972 	bl	80027d0 <HAL_GPIO_Init>
   
   /* ADC3 Periph clock enable */
   __HAL_RCC_ADC3_CLK_ENABLE();
 80014ec:	9502      	str	r5, [sp, #8]
 80014ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f4:	6463      	str	r3, [r4, #68]	; 0x44
 80014f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	9b02      	ldr	r3, [sp, #8]
}
 8001500:	b009      	add	sp, #36	; 0x24
 8001502:	bd30      	pop	{r4, r5, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40021400 	.word	0x40021400

0800150c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800150c:	4770      	bx	lr

0800150e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler>

08001510 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler>

08001512 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler>

08001514 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler>

08001516 <DebugMon_Handler>:
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
  /* Update the LocalTime by adding 1 ms each SysTick interrupt */
  HAL_IncTick();
 8001518:	f000 ba7a 	b.w	8001a10 <HAL_IncTick>

0800151c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001520:	4d1c      	ldr	r5, [pc, #112]	; (8001594 <LCD_LOG_UpdateDisplay+0x78>)
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <LCD_LOG_UpdateDisplay+0x7c>)
 8001524:	882b      	ldrh	r3, [r5, #0]
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	4f1c      	ldr	r7, [pc, #112]	; (800159c <LCD_LOG_UpdateDisplay+0x80>)
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d811      	bhi.n	8001552 <LCD_LOG_UpdateDisplay+0x36>
 800152e:	4293      	cmp	r3, r2
 8001530:	d311      	bcc.n	8001556 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8001532:	2484      	movs	r4, #132	; 0x84
 8001534:	fb04 7303 	mla	r3, r4, r3, r7
 8001538:	f8b3 0080 	ldrh.w	r0, [r3, #128]	; 0x80
 800153c:	f000 f942 	bl	80017c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8001540:	8829      	ldrh	r1, [r5, #0]
 8001542:	1d08      	adds	r0, r1, #4
 8001544:	b280      	uxth	r0, r0
 8001546:	fb04 7101 	mla	r1, r4, r1, r7
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 800154a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800154e:	f000 b9f1 	b.w	8001934 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001552:	4293      	cmp	r3, r2
 8001554:	d201      	bcs.n	800155a <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 8001556:	3375      	adds	r3, #117	; 0x75
 8001558:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800155a:	3b10      	subs	r3, #16
 800155c:	b29c      	uxth	r4, r3
 800155e:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001560:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001564:	f04f 0984 	mov.w	r9, #132	; 0x84
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8001568:	19a1      	adds	r1, r4, r6
 800156a:	fbb1 f5f8 	udiv	r5, r1, r8
 800156e:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001572:	fb09 7505 	mla	r5, r9, r5, r7
 8001576:	f8b5 0080 	ldrh.w	r0, [r5, #128]	; 0x80
 800157a:	f000 f923 	bl	80017c4 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800157e:	1d30      	adds	r0, r6, #4
 8001580:	4629      	mov	r1, r5
 8001582:	b280      	uxth	r0, r0
 8001584:	3601      	adds	r6, #1
 8001586:	f000 f9d5 	bl	8001934 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800158a:	2e11      	cmp	r6, #17
 800158c:	d1ec      	bne.n	8001568 <LCD_LOG_UpdateDisplay+0x4c>
}
 800158e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001592:	bf00      	nop
 8001594:	20004454 	.word	0x20004454
 8001598:	2000445c 	.word	0x2000445c
 800159c:	20004460 	.word	0x20004460

080015a0 <__io_putchar>:
{
 80015a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015a4:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 80015a6:	f000 f913 	bl	80017d0 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <__io_putchar+0x104>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
  sFONT *cFont = BSP_LCD_GetFont();
 80015ae:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 80015b0:	bb43      	cbnz	r3, 8001604 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 80015b2:	4a3d      	ldr	r2, [pc, #244]	; (80016a8 <__io_putchar+0x108>)
 80015b4:	4c3d      	ldr	r4, [pc, #244]	; (80016ac <__io_putchar+0x10c>)
 80015b6:	7811      	ldrb	r1, [r2, #0]
 80015b8:	2901      	cmp	r1, #1
 80015ba:	d10b      	bne.n	80015d4 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80015bc:	493c      	ldr	r1, [pc, #240]	; (80016b0 <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 80015be:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80015c0:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 80015c2:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 80015c4:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80015c6:	493c      	ldr	r1, [pc, #240]	; (80016b8 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 80015c8:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80015ca:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 80015cc:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80015ce:	493c      	ldr	r1, [pc, #240]	; (80016c0 <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 80015d0:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 80015d2:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 80015d4:	4f3b      	ldr	r7, [pc, #236]	; (80016c4 <__io_putchar+0x124>)
 80015d6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80016d0 <__io_putchar+0x130>
 80015da:	883e      	ldrh	r6, [r7, #0]
 80015dc:	f000 f8ea 	bl	80017b4 <BSP_LCD_GetXSize>
 80015e0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80015e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e8:	4286      	cmp	r6, r0
 80015ea:	463e      	mov	r6, r7
 80015ec:	d20d      	bcs.n	800160a <__io_putchar+0x6a>
 80015ee:	2d0a      	cmp	r5, #10
 80015f0:	d00b      	beq.n	800160a <__io_putchar+0x6a>
 80015f2:	883a      	ldrh	r2, [r7, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80015f4:	8823      	ldrh	r3, [r4, #0]
 80015f6:	1c51      	adds	r1, r2, #1
 80015f8:	8039      	strh	r1, [r7, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80015fa:	2184      	movs	r1, #132	; 0x84
 80015fc:	fb01 9903 	mla	r9, r1, r3, r9
 8001600:	f809 5002 	strb.w	r5, [r9, r2]
}
 8001604:	4628      	mov	r0, r5
 8001606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800160a:	4f2d      	ldr	r7, [pc, #180]	; (80016c0 <__io_putchar+0x120>)
 800160c:	8822      	ldrh	r2, [r4, #0]
 800160e:	883b      	ldrh	r3, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d809      	bhi.n	8001628 <__io_putchar+0x88>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001614:	4a2c      	ldr	r2, [pc, #176]	; (80016c8 <__io_putchar+0x128>)
 8001616:	7811      	ldrb	r1, [r2, #0]
 8001618:	2900      	cmp	r1, #0
 800161a:	d135      	bne.n	8001688 <__io_putchar+0xe8>
          LCD_CacheBuffer_yptr_top++;
 800161c:	3301      	adds	r3, #1
 800161e:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001620:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 8001622:	bf14      	ite	ne
 8001624:	803b      	strhne	r3, [r7, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 8001626:	8039      	strheq	r1, [r7, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001628:	f8b6 a000 	ldrh.w	sl, [r6]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800162c:	f04f 0b84 	mov.w	fp, #132	; 0x84
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001630:	f000 f8c0 	bl	80017b4 <BSP_LCD_GetXSize>
 8001634:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8001638:	fbb0 f0f2 	udiv	r0, r0, r2
 800163c:	4550      	cmp	r0, sl
 800163e:	f04f 0320 	mov.w	r3, #32
 8001642:	d824      	bhi.n	800168e <__io_putchar+0xee>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8001644:	8823      	ldrh	r3, [r4, #0]
 8001646:	2284      	movs	r2, #132	; 0x84
 8001648:	fb02 9303 	mla	r3, r2, r3, r9
 800164c:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <__io_putchar+0x12c>)
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_CacheBuffer_xptr = 0;
 8001654:	f04f 0800 	mov.w	r8, #0
 8001658:	f8a6 8000 	strh.w	r8, [r6]
      LCD_LOG_UpdateDisplay (); 
 800165c:	f7ff ff5e 	bl	800151c <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8001660:	8823      	ldrh	r3, [r4, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001666:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001668:	bf09      	itett	eq
 800166a:	4a17      	ldreq	r2, [pc, #92]	; (80016c8 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 800166c:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 800166e:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_bottom = 0;
 8001670:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 8001674:	bf04      	itt	eq
 8001676:	803b      	strheq	r3, [r7, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8001678:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 800167a:	2d0a      	cmp	r5, #10
 800167c:	d0c2      	beq.n	8001604 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800167e:	8832      	ldrh	r2, [r6, #0]
 8001680:	8823      	ldrh	r3, [r4, #0]
 8001682:	1c51      	adds	r1, r2, #1
 8001684:	8031      	strh	r1, [r6, #0]
 8001686:	e7b8      	b.n	80015fa <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	7013      	strb	r3, [r2, #0]
 800168c:	e7cc      	b.n	8001628 <__io_putchar+0x88>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800168e:	8822      	ldrh	r2, [r4, #0]
 8001690:	8831      	ldrh	r1, [r6, #0]
 8001692:	fb0b 9202 	mla	r2, fp, r2, r9
 8001696:	1c48      	adds	r0, r1, #1
 8001698:	5453      	strb	r3, [r2, r1]
 800169a:	8030      	strh	r0, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800169c:	f10a 0a01 	add.w	sl, sl, #1
 80016a0:	e7c6      	b.n	8001630 <__io_putchar+0x90>
 80016a2:	bf00      	nop
 80016a4:	20004459 	.word	0x20004459
 80016a8:	2000445e 	.word	0x2000445e
 80016ac:	20004454 	.word	0x20004454
 80016b0:	20004450 	.word	0x20004450
 80016b4:	2000445a 	.word	0x2000445a
 80016b8:	20004452 	.word	0x20004452
 80016bc:	200080b8 	.word	0x200080b8
 80016c0:	2000445c 	.word	0x2000445c
 80016c4:	20004456 	.word	0x20004456
 80016c8:	20004458 	.word	0x20004458
 80016cc:	200080b4 	.word	0x200080b4
 80016d0:	20004460 	.word	0x20004460

080016d4 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80016d4:	b500      	push	{lr}
 80016d6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80016d8:	b9e0      	cbnz	r0, 8001714 <BSP_LED_Init+0x40>
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <BSP_LED_Init+0x9c>)
 80016dc:	9001      	str	r0, [sp, #4]
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	f042 0208 	orr.w	r2, r2, #8
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <BSP_LED_Init+0xa0>)
 80016f2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80016f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	e9cd 3306 	strd	r3, r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80016fe:	2302      	movs	r3, #2
 8001700:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <BSP_LED_Init+0xa4>)
 8001704:	a905      	add	r1, sp, #20
 8001706:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800170a:	f001 f861 	bl	80027d0 <HAL_GPIO_Init>
}
 800170e:	b00b      	add	sp, #44	; 0x2c
 8001710:	f85d fb04 	ldr.w	pc, [sp], #4
  LEDx_GPIO_CLK_ENABLE(Led);
 8001714:	2801      	cmp	r0, #1
 8001716:	d10c      	bne.n	8001732 <BSP_LED_Init+0x5e>
 8001718:	2300      	movs	r3, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <BSP_LED_Init+0x9c>)
 800171e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001720:	f042 0208 	orr.w	r2, r2, #8
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	9b02      	ldr	r3, [sp, #8]
 8001730:	e7de      	b.n	80016f0 <BSP_LED_Init+0x1c>
 8001732:	2802      	cmp	r0, #2
 8001734:	d10c      	bne.n	8001750 <BSP_LED_Init+0x7c>
 8001736:	2300      	movs	r3, #0
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <BSP_LED_Init+0x9c>)
 800173c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800173e:	f042 0208 	orr.w	r2, r2, #8
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	e7cf      	b.n	80016f0 <BSP_LED_Init+0x1c>
 8001750:	2803      	cmp	r0, #3
 8001752:	d1cd      	bne.n	80016f0 <BSP_LED_Init+0x1c>
 8001754:	2300      	movs	r3, #0
 8001756:	9304      	str	r3, [sp, #16]
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <BSP_LED_Init+0x9c>)
 800175a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175c:	f042 0208 	orr.w	r2, r2, #8
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	9304      	str	r3, [sp, #16]
 800176a:	9b04      	ldr	r3, [sp, #16]
 800176c:	e7c0      	b.n	80016f0 <BSP_LED_Init+0x1c>
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	0800be10 	.word	0x0800be10
 8001778:	2000000c 	.word	0x2000000c

0800177c <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <BSP_LED_On+0x14>)
 800177e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <BSP_LED_On+0x18>)
 8001784:	2201      	movs	r2, #1
 8001786:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800178a:	f001 b991 	b.w	8002ab0 <HAL_GPIO_WritePin>
 800178e:	bf00      	nop
 8001790:	0800be10 	.word	0x0800be10
 8001794:	2000000c 	.word	0x2000000c

08001798 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <BSP_LED_Off+0x14>)
 800179a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <BSP_LED_Off+0x18>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017a6:	f001 b983 	b.w	8002ab0 <HAL_GPIO_WritePin>
 80017aa:	bf00      	nop
 80017ac:	0800be10 	.word	0x0800be10
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80017b4:	b508      	push	{r3, lr}
  return(lcd_drv->GetLcdPixelWidth());
 80017b6:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <BSP_LCD_GetXSize+0xc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	4798      	blx	r3
}
 80017be:	bd08      	pop	{r3, pc}
 80017c0:	200000d0 	.word	0x200000d0

080017c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
  DrawProp.TextColor = Color;
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <BSP_LCD_SetTextColor+0x8>)
 80017c6:	6018      	str	r0, [r3, #0]
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200080bc 	.word	0x200080bc

080017d0 <BSP_LCD_GetFont>:
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp.pFont;
}
 80017d0:	4b01      	ldr	r3, [pc, #4]	; (80017d8 <BSP_LCD_GetFont+0x8>)
 80017d2:	6898      	ldr	r0, [r3, #8]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200080bc 	.word	0x200080bc

080017dc <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
  if(lcd_drv->WritePixel != NULL)
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <BSP_LCD_DrawPixel+0xc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	b103      	cbz	r3, 80017e6 <BSP_LCD_DrawPixel+0xa>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80017e4:	4718      	bx	r3
  }
}
 80017e6:	4770      	bx	lr
 80017e8:	200000d0 	.word	0x200000d0

080017ec <BSP_LCD_DisplayChar>:
{
 80017ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <BSP_LCD_DisplayChar+0xa8>)
{
 80017f2:	b085      	sub	sp, #20
 80017f4:	e9cd 0100 	strd	r0, r1, [sp]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80017f8:	6899      	ldr	r1, [r3, #8]
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80017fa:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 80017fe:	f8b1 a006 	ldrh.w	sl, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8001802:	f1a2 0520 	sub.w	r5, r2, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8001806:	f10b 0607 	add.w	r6, fp, #7
 800180a:	680a      	ldr	r2, [r1, #0]
 800180c:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800180e:	fb0a f505 	mul.w	r5, sl, r5
  uint32_t line;
  
  height = DrawProp.pFont->Height;
  width  = DrawProp.pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 8001812:	ebcb 09c6 	rsb	r9, fp, r6, lsl #3
  
  for(i = 0; i < height; i++)
 8001816:	fb06 2505 	mla	r5, r6, r5, r2
      break;
    }  
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 800181a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800181e:	fa52 f389 	uxtab	r3, r2, r9
  for(i = 0; i < height; i++)
 8001822:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	9b01      	ldr	r3, [sp, #4]
  for(i = 0; i < height; i++)
 800182a:	45d0      	cmp	r8, sl
 800182c:	eb03 0108 	add.w	r1, r3, r8
 8001830:	b289      	uxth	r1, r1
 8001832:	d302      	bcc.n	800183a <BSP_LCD_DisplayChar+0x4e>
}
 8001834:	b005      	add	sp, #20
 8001836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800183a:	2e01      	cmp	r6, #1
 800183c:	782c      	ldrb	r4, [r5, #0]
 800183e:	d004      	beq.n	800184a <BSP_LCD_DisplayChar+0x5e>
 8001840:	2e02      	cmp	r6, #2
 8001842:	d10b      	bne.n	800185c <BSP_LCD_DisplayChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8001844:	882c      	ldrh	r4, [r5, #0]
 8001846:	ba64      	rev16	r4, r4
 8001848:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800184a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001894 <BSP_LCD_DisplayChar+0xa8>
 800184e:	2700      	movs	r7, #0
 8001850:	45bb      	cmp	fp, r7
 8001852:	d80a      	bhi.n	800186a <BSP_LCD_DisplayChar+0x7e>
  for(i = 0; i < height; i++)
 8001854:	f108 0801 	add.w	r8, r8, #1
 8001858:	4435      	add	r5, r6
 800185a:	e7e5      	b.n	8001828 <BSP_LCD_DisplayChar+0x3c>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800185c:	786a      	ldrb	r2, [r5, #1]
 800185e:	0424      	lsls	r4, r4, #16
 8001860:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001864:	78aa      	ldrb	r2, [r5, #2]
 8001866:	4314      	orrs	r4, r2
      break;
 8001868:	e7ef      	b.n	800184a <BSP_LCD_DisplayChar+0x5e>
      if(line & (1 << (width- j + offset- 1))) 
 800186a:	9b00      	ldr	r3, [sp, #0]
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800186c:	9103      	str	r1, [sp, #12]
 800186e:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	2201      	movs	r2, #1
 8001874:	eba3 0c07 	sub.w	ip, r3, r7
 8001878:	fa02 f20c 	lsl.w	r2, r2, ip
 800187c:	4222      	tst	r2, r4
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800187e:	bf14      	ite	ne
 8001880:	f8b9 2000 	ldrhne.w	r2, [r9]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001884:	f8b9 2004 	ldrheq.w	r2, [r9, #4]
 8001888:	b280      	uxth	r0, r0
 800188a:	f7ff ffa7 	bl	80017dc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800188e:	3701      	adds	r7, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8001890:	9903      	ldr	r1, [sp, #12]
    for (j = 0; j < width; j++)
 8001892:	e7dd      	b.n	8001850 <BSP_LCD_DisplayChar+0x64>
 8001894:	200080bc 	.word	0x200080bc

08001898 <BSP_LCD_DisplayStringAt>:
{
 8001898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800189c:	4699      	mov	r9, r3
 800189e:	4606      	mov	r6, r0
 80018a0:	460f      	mov	r7, r1
 80018a2:	4615      	mov	r5, r2
  uint8_t  *ptr = Text;
 80018a4:	4613      	mov	r3, r2
 80018a6:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 80018a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d1fa      	bne.n	80018a6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80018b0:	f7ff ff80 	bl	80017b4 <BSP_LCD_GetXSize>
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <BSP_LCD_DisplayStringAt+0x98>)
 80018b6:	689a      	ldr	r2, [r3, #8]
  switch (Mode)
 80018b8:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80018bc:	8892      	ldrh	r2, [r2, #4]
 80018be:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (Mode)
 80018c2:	4698      	mov	r8, r3
 80018c4:	d017      	beq.n	80018f6 <BSP_LCD_DisplayStringAt+0x5e>
 80018c6:	f1b9 0f02 	cmp.w	r9, #2
 80018ca:	d01b      	beq.n	8001904 <BSP_LCD_DisplayStringAt+0x6c>
 80018cc:	3d01      	subs	r5, #1
  uint8_t  *ptr = Text;
 80018ce:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80018d2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80018d6:	3c00      	subs	r4, #0
 80018d8:	bf18      	it	ne
 80018da:	2401      	movne	r4, #1
 80018dc:	f7ff ff6a 	bl	80017b4 <BSP_LCD_GetXSize>
 80018e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80018e4:	889b      	ldrh	r3, [r3, #4]
 80018e6:	fb03 0019 	mls	r0, r3, r9, r0
 80018ea:	b280      	uxth	r0, r0
 80018ec:	4298      	cmp	r0, r3
 80018ee:	d300      	bcc.n	80018f2 <BSP_LCD_DisplayStringAt+0x5a>
 80018f0:	b974      	cbnz	r4, 8001910 <BSP_LCD_DisplayStringAt+0x78>
}
 80018f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80018f6:	1b2c      	subs	r4, r5, r4
 80018f8:	4420      	add	r0, r4
 80018fa:	4350      	muls	r0, r2
 80018fc:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001900:	b286      	uxth	r6, r0
      break;
 8001902:	e7e3      	b.n	80018cc <BSP_LCD_DisplayStringAt+0x34>
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8001904:	1b2c      	subs	r4, r5, r4
 8001906:	4404      	add	r4, r0
 8001908:	fb14 f402 	smulbb	r4, r4, r2
 800190c:	1ba0      	subs	r0, r4, r6
 800190e:	e7f7      	b.n	8001900 <BSP_LCD_DisplayStringAt+0x68>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001910:	4630      	mov	r0, r6
 8001912:	782a      	ldrb	r2, [r5, #0]
 8001914:	4639      	mov	r1, r7
 8001916:	f7ff ff69 	bl	80017ec <BSP_LCD_DisplayChar>
    refcolumn += DrawProp.pFont->Width;
 800191a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800191e:	8898      	ldrh	r0, [r3, #4]
    i++;
 8001920:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp.pFont->Width;
 8001924:	4430      	add	r0, r6
 8001926:	b286      	uxth	r6, r0
    i++;
 8001928:	fa1f f989 	uxth.w	r9, r9
 800192c:	e7d1      	b.n	80018d2 <BSP_LCD_DisplayStringAt+0x3a>
 800192e:	bf00      	nop
 8001930:	200080bc 	.word	0x200080bc

08001934 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp.pFont;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <BSP_LCD_DisplayStringAtLine+0x18>)
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	88db      	ldrh	r3, [r3, #6]
 800193a:	fb13 f000 	smulbb	r0, r3, r0
{
 800193e:	460a      	mov	r2, r1
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001940:	2303      	movs	r3, #3
 8001942:	b281      	uxth	r1, r0
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff bfa7 	b.w	8001898 <BSP_LCD_DisplayStringAt>
 800194a:	bf00      	nop
 800194c:	200080bc 	.word	0x200080bc

08001950 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	490f      	ldr	r1, [pc, #60]	; (8001990 <SystemInit+0x40>)
 8001952:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <SystemInit+0x44>)
 8001960:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001962:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800196a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001972:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001976:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <SystemInit+0x48>)
 800197a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001982:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001984:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800198a:	608b      	str	r3, [r1, #8]
#endif
}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	40023800 	.word	0x40023800
 8001998:	24003010 	.word	0x24003010

0800199c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_InitTick+0x3c>)
 80019a4:	4e0e      	ldr	r6, [pc, #56]	; (80019e0 <HAL_InitTick+0x40>)
{
 80019a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	7830      	ldrb	r0, [r6, #0]
 80019ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80019b2:	6810      	ldr	r0, [r2, #0]
 80019b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b8:	f000 faac 	bl	8001f14 <HAL_SYSTICK_Config>
 80019bc:	4604      	mov	r4, r0
 80019be:	b950      	cbnz	r0, 80019d6 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c0:	2d0f      	cmp	r5, #15
 80019c2:	d808      	bhi.n	80019d6 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	4602      	mov	r2, r0
 80019c6:	4629      	mov	r1, r5
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f000 fa70 	bl	8001eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	6075      	str	r5, [r6, #4]
 80019d2:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e7fc      	b.n	80019d4 <HAL_InitTick+0x34>
 80019da:	bf00      	nop
 80019dc:	20000034 	.word	0x20000034
 80019e0:	20000038 	.word	0x20000038

080019e4 <HAL_Init>:
{
 80019e4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_Init+0x28>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 fa47 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f7ff ffce 	bl	80019a0 <HAL_InitTick>
  HAL_MspInit();
 8001a04:	f7ff ffca 	bl	800199c <HAL_MspInit>
}
 8001a08:	2000      	movs	r0, #0
 8001a0a:	bd08      	pop	{r3, pc}
 8001a0c:	40023c00 	.word	0x40023c00

08001a10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x10>)
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <HAL_IncTick+0x14>)
 8001a14:	6811      	ldr	r1, [r2, #0]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	440b      	add	r3, r1
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200080c8 	.word	0x200080c8
 8001a24:	20000038 	.word	0x20000038

08001a28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a28:	4b01      	ldr	r3, [pc, #4]	; (8001a30 <HAL_GetTick+0x8>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200080c8 	.word	0x200080c8

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff fff6 	bl	8001a28 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	bf1c      	itt	ne
 8001a40:	4b05      	ldrne	r3, [pc, #20]	; (8001a58 <HAL_Delay+0x24>)
 8001a42:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001a46:	bf18      	it	ne
 8001a48:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4a:	f7ff ffed 	bl	8001a28 <HAL_GetTick>
 8001a4e:	1b43      	subs	r3, r0, r5
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	d3fa      	bcc.n	8001a4a <HAL_Delay+0x16>
  {
  }
}
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
 8001a56:	bf00      	nop
 8001a58:	20000038 	.word	0x20000038

08001a5c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001a5c:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <HAL_GetREVID+0x8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
}
 8001a60:	0c00      	lsrs	r0, r0, #16
 8001a62:	4770      	bx	lr
 8001a64:	e0042000 	.word	0xe0042000

08001a68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	f000 809b 	beq.w	8001ba8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a72:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a74:	b925      	cbnz	r5, 8001a80 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	f7ff fd21 	bl	80014bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a82:	06db      	lsls	r3, r3, #27
 8001a84:	f100 808e 	bmi.w	8001ba4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a8e:	f023 0302 	bic.w	r3, r3, #2
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a98:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_ADC_Init+0x144>)
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001aa0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	6861      	ldr	r1, [r4, #4]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aaa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aac:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001abe:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ac0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ac2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ac6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ace:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_ADC_Init+0x148>)
 8001ae0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d052      	beq.n	8001b8c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001aec:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aee:	6899      	ldr	r1, [r3, #8]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001af6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b02:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	f022 0202 	bic.w	r2, r2, #2
 8001b0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	7e21      	ldrb	r1, [r4, #24]
 8001b10:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b16:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d03e      	beq.n	8001b9c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b1e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	3901      	subs	r1, #1
 8001b34:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b38:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b3c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b46:	3901      	subs	r1, #1
 8001b48:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001b5c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001b60:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b62:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b64:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b6c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b70:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001b74:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001b84:	2300      	movs	r3, #0
 8001b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b9a:	e7b2      	b.n	8001b02 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba2:	e7c9      	b.n	8001b38 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	e7ed      	b.n	8001b84 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7ee      	b.n	8001b8a <HAL_ADC_Init+0x122>
 8001bac:	40012300 	.word	0x40012300
 8001bb0:	0f000001 	.word	0x0f000001

08001bb4 <HAL_ADC_Start>:
{
 8001bb4:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t counter = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001bba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d06c      	beq.n	8001c9c <HAL_ADC_Start+0xe8>
 8001bc2:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bc4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8001bc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bca:	6893      	ldr	r3, [r2, #8]
 8001bcc:	07d9      	lsls	r1, r3, #31
 8001bce:	d50c      	bpl.n	8001bea <HAL_ADC_Start+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bd0:	6893      	ldr	r3, [r2, #8]
 8001bd2:	f013 0301 	ands.w	r3, r3, #1
 8001bd6:	d11a      	bne.n	8001c0e <HAL_ADC_Start+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bd8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001bda:	f042 0210 	orr.w	r2, r2, #16
 8001bde:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	6442      	str	r2, [r0, #68]	; 0x44
 8001be8:	e056      	b.n	8001c98 <HAL_ADC_Start+0xe4>
    __HAL_ADC_ENABLE(hadc);
 8001bea:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bec:	492d      	ldr	r1, [pc, #180]	; (8001ca4 <HAL_ADC_Start+0xf0>)
    __HAL_ADC_ENABLE(hadc);
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_ADC_Start+0xf4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8001c00:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001c02:	9b01      	ldr	r3, [sp, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0e3      	beq.n	8001bd0 <HAL_ADC_Start+0x1c>
      counter--;
 8001c08:	9b01      	ldr	r3, [sp, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	e7f8      	b.n	8001c00 <HAL_ADC_Start+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c10:	4c26      	ldr	r4, [pc, #152]	; (8001cac <HAL_ADC_Start+0xf8>)
 8001c12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c20:	6853      	ldr	r3, [r2, #4]
 8001c22:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c24:	bf41      	itttt	mi
 8001c26:	6c03      	ldrmi	r3, [r0, #64]	; 0x40
 8001c28:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001c2c:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001c30:	6403      	strmi	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c34:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c38:	bf1c      	itt	ne
 8001c3a:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8001c3c:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001c40:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c42:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8001c46:	2300      	movs	r3, #0
 8001c48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c4c:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c4e:	4918      	ldr	r1, [pc, #96]	; (8001cb0 <HAL_ADC_Start+0xfc>)
 8001c50:	6848      	ldr	r0, [r1, #4]
 8001c52:	f010 001f 	ands.w	r0, r0, #31
 8001c56:	d119      	bne.n	8001c8c <HAL_ADC_Start+0xd8>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c58:	42a2      	cmp	r2, r4
 8001c5a:	d006      	beq.n	8001c6a <HAL_ADC_Start+0xb6>
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_ADC_Start+0x100>)
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_Start+0xca>
 8001c62:	684b      	ldr	r3, [r1, #4]
 8001c64:	f013 0f1f 	tst.w	r3, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c68:	d107      	bne.n	8001c7a <HAL_ADC_Start+0xc6>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c6a:	6890      	ldr	r0, [r2, #8]
 8001c6c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001c70:	d116      	bne.n	8001ca0 <HAL_ADC_Start+0xec>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c72:	6893      	ldr	r3, [r2, #8]
 8001c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c78:	6093      	str	r3, [r2, #8]
}
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd10      	pop	{r4, pc}
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_ADC_Start+0x104>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1fa      	bne.n	8001c7a <HAL_ADC_Start+0xc6>
 8001c84:	684b      	ldr	r3, [r1, #4]
 8001c86:	f013 0f10 	tst.w	r3, #16
 8001c8a:	e7ed      	b.n	8001c68 <HAL_ADC_Start+0xb4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c8c:	42a2      	cmp	r2, r4
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_Start+0xec>
 8001c90:	6890      	ldr	r0, [r2, #8]
 8001c92:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001c96:	d0ec      	beq.n	8001c72 <HAL_ADC_Start+0xbe>
  return HAL_OK;
 8001c98:	4618      	mov	r0, r3
 8001c9a:	e7ee      	b.n	8001c7a <HAL_ADC_Start+0xc6>
  __HAL_LOCK(hadc);
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	e7ec      	b.n	8001c7a <HAL_ADC_Start+0xc6>
  return HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e7ea      	b.n	8001c7a <HAL_ADC_Start+0xc6>
 8001ca4:	000f4240 	.word	0x000f4240
 8001ca8:	20000034 	.word	0x20000034
 8001cac:	40012000 	.word	0x40012000
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012100 	.word	0x40012100
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cbc:	6803      	ldr	r3, [r0, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	0552      	lsls	r2, r2, #21
{
 8001cc2:	b570      	push	{r4, r5, r6, lr}
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cc8:	d50b      	bpl.n	8001ce2 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cca:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ccc:	05de      	lsls	r6, r3, #23
 8001cce:	d508      	bpl.n	8001ce2 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
}
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8001ce2:	f7ff fea1 	bl	8001a28 <HAL_GetTick>
 8001ce6:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	0791      	lsls	r1, r2, #30
 8001cee:	d50c      	bpl.n	8001d0a <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cf0:	f06f 0212 	mvn.w	r2, #18
 8001cf4:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfc:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001d04:	d017      	beq.n	8001d36 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 8001d06:	2000      	movs	r0, #0
 8001d08:	e7ea      	b.n	8001ce0 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8001d0a:	1c68      	adds	r0, r5, #1
 8001d0c:	d0ed      	beq.n	8001cea <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d0e:	b965      	cbnz	r5, 8001d2a <HAL_ADC_PollForConversion+0x6e>
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f013 0302 	ands.w	r3, r3, #2
 8001d18:	d1e6      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8001d1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d20:	f042 0204 	orr.w	r2, r2, #4
 8001d24:	6422      	str	r2, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
 8001d28:	e7da      	b.n	8001ce0 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d2a:	f7ff fe7d 	bl	8001a28 <HAL_GetTick>
 8001d2e:	1b80      	subs	r0, r0, r6
 8001d30:	42a8      	cmp	r0, r5
 8001d32:	d8ed      	bhi.n	8001d10 <HAL_ADC_PollForConversion+0x54>
 8001d34:	e7d8      	b.n	8001ce8 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d36:	7e20      	ldrb	r0, [r4, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d1e4      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d3e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001d42:	d002      	beq.n	8001d4a <HAL_ADC_PollForConversion+0x8e>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d44:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d46:	055a      	lsls	r2, r3, #21
 8001d48:	d4dd      	bmi.n	8001d06 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d50:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d54:	04db      	lsls	r3, r3, #19
 8001d56:	d4d6      	bmi.n	8001d06 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6423      	str	r3, [r4, #64]	; 0x40
 8001d60:	e7be      	b.n	8001ce0 <HAL_ADC_PollForConversion+0x24>

08001d62 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001d66:	4770      	bx	lr

08001d68 <HAL_ADC_ConfigChannel>:
{
 8001d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001d6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d066      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0xdc>
 8001d76:	2301      	movs	r3, #1
 8001d78:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d7c:	680d      	ldr	r5, [r1, #0]
 8001d7e:	6803      	ldr	r3, [r0, #0]
 8001d80:	688e      	ldr	r6, [r1, #8]
 8001d82:	2d09      	cmp	r5, #9
 8001d84:	b2ac      	uxth	r4, r5
 8001d86:	d931      	bls.n	8001dec <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d88:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001d8c:	68df      	ldr	r7, [r3, #12]
 8001d8e:	3a1e      	subs	r2, #30
 8001d90:	f04f 0c07 	mov.w	ip, #7
 8001d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8001d98:	ea27 070c 	bic.w	r7, r7, ip
 8001d9c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d9e:	68df      	ldr	r7, [r3, #12]
 8001da0:	fa06 f202 	lsl.w	r2, r6, r2
 8001da4:	433a      	orrs	r2, r7
 8001da6:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001da8:	6849      	ldr	r1, [r1, #4]
 8001daa:	2906      	cmp	r1, #6
 8001dac:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001db0:	d82c      	bhi.n	8001e0c <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db4:	3a05      	subs	r2, #5
 8001db6:	261f      	movs	r6, #31
 8001db8:	4096      	lsls	r6, r2
 8001dba:	ea21 0106 	bic.w	r1, r1, r6
 8001dbe:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dc2:	fa04 f202 	lsl.w	r2, r4, r2
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dca:	4a2c      	ldr	r2, [pc, #176]	; (8001e7c <HAL_ADC_ConfigChannel+0x114>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x78>
 8001dd0:	2d12      	cmp	r5, #18
 8001dd2:	d139      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0xe0>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dd4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ddc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8001de0:	2300      	movs	r3, #0
 8001de2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001de6:	4618      	mov	r0, r3
}
 8001de8:	b003      	add	sp, #12
 8001dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dec:	691f      	ldr	r7, [r3, #16]
 8001dee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001df2:	f04f 0c07 	mov.w	ip, #7
 8001df6:	fa0c fc02 	lsl.w	ip, ip, r2
 8001dfa:	ea27 070c 	bic.w	r7, r7, ip
 8001dfe:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	691f      	ldr	r7, [r3, #16]
 8001e02:	fa06 f202 	lsl.w	r2, r6, r2
 8001e06:	433a      	orrs	r2, r7
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	e7cd      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001e0c:	290c      	cmp	r1, #12
 8001e0e:	f04f 011f 	mov.w	r1, #31
 8001e12:	d80b      	bhi.n	8001e2c <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e14:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001e16:	3a23      	subs	r2, #35	; 0x23
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	ea26 0101 	bic.w	r1, r6, r1
 8001e1e:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e22:	fa04 f202 	lsl.w	r2, r4, r2
 8001e26:	430a      	orrs	r2, r1
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2a:	e7ce      	b.n	8001dca <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e2c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001e2e:	3a41      	subs	r2, #65	; 0x41
 8001e30:	4091      	lsls	r1, r2
 8001e32:	ea26 0101 	bic.w	r1, r6, r1
 8001e36:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3a:	fa04 f202 	lsl.w	r2, r4, r2
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e42:	e7c2      	b.n	8001dca <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001e44:	2002      	movs	r0, #2
 8001e46:	e7cf      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e48:	f1a5 0310 	sub.w	r3, r5, #16
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d8c7      	bhi.n	8001de0 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_ADC_ConfigChannel+0x118>)
 8001e52:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e54:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e5a:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e5c:	d1c0      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_ADC_ConfigChannel+0x11c>)
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_ADC_ConfigChannel+0x120>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e68:	230a      	movs	r3, #10
 8001e6a:	4353      	muls	r3, r2
        counter--;
 8001e6c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001e6e:	9b01      	ldr	r3, [sp, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0b5      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8001e74:	9b01      	ldr	r3, [sp, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	e7f8      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x104>
 8001e7a:	bf00      	nop
 8001e7c:	40012000 	.word	0x40012000
 8001e80:	40012300 	.word	0x40012300
 8001e84:	20000034 	.word	0x20000034
 8001e88:	000f4240 	.word	0x000f4240

08001e8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e8e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ea8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b530      	push	{r4, r5, lr}
 8001eb4:	68dc      	ldr	r4, [r3, #12]
 8001eb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eba:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	2d04      	cmp	r5, #4
 8001ec2:	bf28      	it	cs
 8001ec4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ecc:	bf8c      	ite	hi
 8001ece:	3c03      	subhi	r4, #3
 8001ed0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed2:	fa03 f505 	lsl.w	r5, r3, r5
 8001ed6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eda:	40a3      	lsls	r3, r4
 8001edc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001ee2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	bfac      	ite	ge
 8001eea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	4a08      	ldrlt	r2, [pc, #32]	; (8001f10 <HAL_NVIC_SetPriority+0x60>)
 8001ef0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ef4:	bfb8      	it	lt
 8001ef6:	f000 000f 	andlt.w	r0, r0, #15
 8001efa:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	bfaa      	itet	ge
 8001efe:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f08:	bd30      	pop	{r4, r5, pc}
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	e000ed14 	.word	0xe000ed14

08001f14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f14:	3801      	subs	r0, #1
 8001f16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001f1a:	d20a      	bcs.n	8001f32 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f20:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	21f0      	movs	r1, #240	; 0xf0
 8001f24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <ETH_Delay.constprop.0>:
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <ETH_Delay.constprop.0+0x20>)
static void ETH_Delay(uint32_t mdelay)
 8001f42:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8001f50:	bf00      	nop
  } 
  while (Delay --);
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	9201      	str	r2, [sp, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <ETH_Delay.constprop.0+0x10>
}
 8001f5c:	b002      	add	sp, #8
 8001f5e:	4770      	bx	lr
 8001f60:	20000034 	.word	0x20000034

08001f64 <ETH_FlushTransmitFIFO>:
{
 8001f64:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f6a:	f241 0118 	movw	r1, #4120	; 0x1018
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	585a      	ldr	r2, [r3, r1]
 8001f72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f76:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f78:	585b      	ldr	r3, [r3, r1]
 8001f7a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f7c:	f7ff ffe0 	bl	8001f40 <ETH_Delay.constprop.0>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f80:	9a01      	ldr	r2, [sp, #4]
 8001f82:	6803      	ldr	r3, [r0, #0]
 8001f84:	505a      	str	r2, [r3, r1]
}
 8001f86:	b003      	add	sp, #12
 8001f88:	f85d fb04 	ldr.w	pc, [sp], #4

08001f8c <ETH_MACDMAConfig>:
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}
 8001f8e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f90:	b129      	cbz	r1, 8001f9e <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f9e:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001fa0:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fa2:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8001fa4:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fa8:	bf0c      	ite	eq
 8001faa:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001fae:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8001fb0:	432b      	orrs	r3, r5
  tmpreg1 = (heth->Instance)->MACCR;
 8001fb2:	6810      	ldr	r0, [r2, #0]
                       (heth->Init).DuplexMode | 
 8001fb4:	430b      	orrs	r3, r1
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fb6:	492d      	ldr	r1, [pc, #180]	; (800206c <ETH_MACDMAConfig+0xe0>)
 8001fb8:	4001      	ands	r1, r0
 8001fba:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fc0:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc2:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8001fc4:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc6:	f7ff fd35 	bl	8001a34 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001fca:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fcc:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 8001fce:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fd2:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fd4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd6:	f7ff fd2d 	bl	8001a34 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fde:	2500      	movs	r5, #0
 8001fe0:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fe2:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fe4:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe6:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001fea:	0412      	lsls	r2, r2, #16
 8001fec:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ff2:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff4:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ff6:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff8:	f7ff fd1c 	bl	8001a34 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ffc:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffe:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 8002000:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002002:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002004:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002006:	f7ff fd15 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800200a:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 800200e:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002010:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002014:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002016:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002018:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800201a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800201e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002022:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002024:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002026:	f7ff fd05 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800202a:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg1;
 800202e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002034:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002036:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8002038:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800203a:	f7ff fcfb 	bl	8001a34 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800203e:	6822      	ldr	r2, [r4, #0]
 8002040:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002044:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002046:	69a3      	ldr	r3, [r4, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800204c:	f241 011c 	movw	r1, #4124	; 0x101c
 8002050:	5853      	ldr	r3, [r2, r1]
 8002052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800205c:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <ETH_MACDMAConfig+0xec>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002060:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002062:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002064:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <ETH_MACDMAConfig+0xf0>)
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bd70      	pop	{r4, r5, r6, pc}
 800206c:	ff20810f 	.word	0xff20810f
 8002070:	f8de3f23 	.word	0xf8de3f23
 8002074:	02c12080 	.word	0x02c12080
 8002078:	40028040 	.word	0x40028040
 800207c:	40028044 	.word	0x40028044

08002080 <HAL_ETH_DMATxDescListInit>:
{
 8002080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002084:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002088:	2c01      	cmp	r4, #1
 800208a:	f04f 0402 	mov.w	r4, #2
 800208e:	d031      	beq.n	80020f4 <HAL_ETH_DMATxDescListInit+0x74>
 8002090:	2501      	movs	r5, #1
 8002092:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8002096:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 800209a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 800209c:	460c      	mov	r4, r1
 800209e:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020a0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020a4:	f240 5cf4 	movw	ip, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 80020a8:	f103 3eff 	add.w	lr, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 80020ac:	429d      	cmp	r5, r3
 80020ae:	d10c      	bne.n	80020ca <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	f241 0310 	movw	r3, #4112	; 0x1010
 80020b6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80020be:	2300      	movs	r3, #0
 80020c0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80020c4:	4618      	mov	r0, r3
}
 80020c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020ca:	fb0c 2605 	mla	r6, ip, r5, r2
 80020ce:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020d0:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020d2:	6027      	str	r7, [r4, #0]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020d4:	b91e      	cbnz	r6, 80020de <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020d6:	6826      	ldr	r6, [r4, #0]
 80020d8:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80020dc:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1U))
 80020de:	f104 0620 	add.w	r6, r4, #32
 80020e2:	45ae      	cmp	lr, r5
 80020e4:	bf94      	ite	ls
 80020e6:	4688      	movls	r8, r1
 80020e8:	46b0      	movhi	r8, r6
 80020ea:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0U; i < TxBuffCount; i++)
 80020ee:	3501      	adds	r5, #1
 80020f0:	4634      	mov	r4, r6
 80020f2:	e7db      	b.n	80020ac <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80020f4:	4620      	mov	r0, r4
 80020f6:	e7e6      	b.n	80020c6 <HAL_ETH_DMATxDescListInit+0x46>

080020f8 <HAL_ETH_DMARxDescListInit>:
{
 80020f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 80020fc:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002100:	2c01      	cmp	r4, #1
 8002102:	f04f 0402 	mov.w	r4, #2
 8002106:	d02f      	beq.n	8002168 <HAL_ETH_DMARxDescListInit+0x70>
 8002108:	2501      	movs	r5, #1
 800210a:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800210e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8002112:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8002114:	460c      	mov	r4, r1
 8002116:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002118:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800211c:	f244 5cf4 	movw	ip, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002120:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 8002124:	f103 38ff 	add.w	r8, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 8002128:	42ab      	cmp	r3, r5
 800212a:	d10c      	bne.n	8002146 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800212c:	6802      	ldr	r2, [r0, #0]
 800212e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002132:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002134:	2301      	movs	r3, #1
 8002136:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800213a:	2300      	movs	r3, #0
 800213c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002140:	4618      	mov	r0, r3
}
 8002142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002146:	fb0e 2605 	mla	r6, lr, r5, r2
 800214a:	60a6      	str	r6, [r4, #8]
 800214c:	f104 0620 	add.w	r6, r4, #32
 8002150:	45a8      	cmp	r8, r5
 8002152:	bf94      	ite	ls
 8002154:	4689      	movls	r9, r1
 8002156:	46b1      	movhi	r9, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002158:	6027      	str	r7, [r4, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800215a:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1U))
 800215e:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002162:	3501      	adds	r5, #1
 8002164:	4634      	mov	r4, r6
 8002166:	e7df      	b.n	8002128 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8002168:	4620      	mov	r0, r4
 800216a:	e7ea      	b.n	8002142 <HAL_ETH_DMARxDescListInit+0x4a>

0800216c <HAL_ETH_DeInit>:
{
 800216c:	b510      	push	{r4, lr}
  heth->State = HAL_ETH_STATE_BUSY;
 800216e:	2302      	movs	r3, #2
{
 8002170:	4604      	mov	r4, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8002172:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  HAL_ETH_MspDeInit(heth);
 8002176:	f7fe feb3 	bl	8000ee0 <HAL_ETH_MspDeInit>
  heth->State= HAL_ETH_STATE_RESET;
 800217a:	2000      	movs	r0, #0
 800217c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002180:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8002184:	bd10      	pop	{r4, pc}
	...

08002188 <HAL_ETH_TransmitFrame>:
{
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800218a:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800218e:	2b01      	cmp	r3, #1
 8002190:	f04f 0302 	mov.w	r3, #2
 8002194:	d068      	beq.n	8002268 <HAL_ETH_TransmitFrame+0xe0>
 8002196:	2201      	movs	r2, #1
 8002198:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800219c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 80021a0:	b929      	cbnz	r1, 80021ae <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 80021a2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80021a6:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 80021aa:	4610      	mov	r0, r2
}
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80021ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021b0:	681c      	ldr	r4, [r3, #0]
 80021b2:	2c00      	cmp	r4, #0
 80021b4:	da06      	bge.n	80021c4 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80021b6:	2312      	movs	r3, #18
 80021b8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80021bc:	2300      	movs	r3, #0
 80021be:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80021c2:	e7f2      	b.n	80021aa <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 80021c4:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80021c8:	42a1      	cmp	r1, r4
 80021ca:	d92e      	bls.n	800222a <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80021cc:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80021d0:	fb04 1412 	mls	r4, r4, r2, r1
 80021d4:	b33c      	cbz	r4, 8002226 <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 80021d6:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80021d8:	4c24      	ldr	r4, [pc, #144]	; (800226c <HAL_ETH_TransmitFrame+0xe4>)
 80021da:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 80021de:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80021e2:	f3c1 010c 	ubfx	r1, r1, #0, #13
    for (i=0U; i< bufcount; i++)
 80021e6:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80021e8:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 80021ec:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021ee:	681d      	ldr	r5, [r3, #0]
 80021f0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80021f4:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 80021f6:	b91c      	cbnz	r4, 8002200 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80021f8:	681d      	ldr	r5, [r3, #0]
 80021fa:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80021fe:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8002200:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002202:	bf08      	it	eq
 8002204:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002206:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002208:	bf04      	itt	eq
 800220a:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 800220e:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002210:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002212:	bf08      	it	eq
 8002214:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 8002216:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002218:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 800221c:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800221e:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002220:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 8002222:	d1e4      	bne.n	80021ee <HAL_ETH_TransmitFrame+0x66>
 8002224:	e00d      	b.n	8002242 <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 8002226:	2a01      	cmp	r2, #1
 8002228:	d1d6      	bne.n	80021d8 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002230:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002232:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002234:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002238:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800223c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800223e:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002244:	f241 0214 	movw	r2, #4116	; 0x1014
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	5899      	ldr	r1, [r3, r2]
 800224c:	0749      	lsls	r1, r1, #29
 800224e:	d505      	bpl.n	800225c <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002250:	2104      	movs	r1, #4
 8002252:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8002254:	f241 0204 	movw	r2, #4100	; 0x1004
 8002258:	2100      	movs	r1, #0
 800225a:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 800225c:	2301      	movs	r3, #1
 800225e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002262:	2300      	movs	r3, #0
 8002264:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8002268:	4618      	mov	r0, r3
 800226a:	e79f      	b.n	80021ac <HAL_ETH_TransmitFrame+0x24>
 800226c:	fffffa0c 	.word	0xfffffa0c

08002270 <HAL_ETH_GetReceivedFrame>:
{
 8002270:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8002272:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002276:	2b01      	cmp	r3, #1
 8002278:	f04f 0302 	mov.w	r3, #2
 800227c:	d023      	beq.n	80022c6 <HAL_ETH_GetReceivedFrame+0x56>
  heth->State = HAL_ETH_STATE_BUSY;
 800227e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8002282:	2401      	movs	r4, #1
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002284:	6a83      	ldr	r3, [r0, #40]	; 0x28
  __HAL_LOCK(heth);
 8002286:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2a00      	cmp	r2, #0
 800228e:	db27      	blt.n	80022e0 <HAL_ETH_GetReceivedFrame+0x70>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68d9      	ldr	r1, [r3, #12]
 8002294:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002298:	d017      	beq.n	80022ca <HAL_ETH_GetReceivedFrame+0x5a>
      (heth->RxFrameInfos).SegCount++;
 800229a:	6b82      	ldr	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800229c:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount++;
 800229e:	4422      	add	r2, r4
      if ((heth->RxFrameInfos).SegCount == 1U)
 80022a0:	42a2      	cmp	r2, r4
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80022a2:	bf08      	it	eq
 80022a4:	6303      	streq	r3, [r0, #48]	; 0x30
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80022a6:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos).SegCount++;
 80022a8:	6382      	str	r2, [r0, #56]	; 0x38
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80022aa:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80022ae:	3b04      	subs	r3, #4
      heth->RxFrameInfos.length = framelength;
 80022b0:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80022b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80022be:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80022c0:	6281      	str	r1, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 80022c2:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd30      	pop	{r4, r5, pc}
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022ca:	681d      	ldr	r5, [r3, #0]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80022cc:	6281      	str	r1, [r0, #40]	; 0x28
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022ce:	05ad      	lsls	r5, r5, #22
      (heth->RxFrameInfos).SegCount++;
 80022d0:	bf53      	iteet	pl
 80022d2:	6b83      	ldrpl	r3, [r0, #56]	; 0x38
      (heth->RxFrameInfos).SegCount = 1U;
 80022d4:	6384      	strmi	r4, [r0, #56]	; 0x38
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80022d6:	e9c0 320c 	strdmi	r3, r2, [r0, #48]	; 0x30
      (heth->RxFrameInfos).SegCount++;
 80022da:	3301      	addpl	r3, #1
 80022dc:	bf58      	it	pl
 80022de:	6383      	strpl	r3, [r0, #56]	; 0x38
  heth->State = HAL_ETH_STATE_READY;
 80022e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80022e2:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 80022e4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80022e8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 80022ec:	e7eb      	b.n	80022c6 <HAL_ETH_GetReceivedFrame+0x56>

080022ee <HAL_ETH_ReadPHYRegister>:
{
 80022ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022f0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80022f4:	2b82      	cmp	r3, #130	; 0x82
{
 80022f6:	4606      	mov	r6, r0
 80022f8:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022fa:	d031      	beq.n	8002360 <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80022fc:	2382      	movs	r3, #130	; 0x82
 80022fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002302:	8a34      	ldrh	r4, [r6, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8002304:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002306:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 8002308:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800230a:	0189      	lsls	r1, r1, #6
 800230c:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002310:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002312:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002316:	430c      	orrs	r4, r1
 8002318:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800231a:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 800231e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002320:	f7ff fb82 	bl	8001a28 <HAL_GetTick>
 8002324:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002326:	f014 0401 	ands.w	r4, r4, #1
 800232a:	d108      	bne.n	800233e <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800232c:	6833      	ldr	r3, [r6, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	b29b      	uxth	r3, r3
 8002332:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8002334:	2301      	movs	r3, #1
 8002336:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 800233a:	4620      	mov	r0, r4
 800233c:	e00c      	b.n	8002358 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800233e:	f7ff fb73 	bl	8001a28 <HAL_GetTick>
 8002342:	1bc0      	subs	r0, r0, r7
 8002344:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 8002348:	d307      	bcc.n	800235a <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 800234a:	2301      	movs	r3, #1
 800234c:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8002350:	2300      	movs	r3, #0
 8002352:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
      return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
}
 8002358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 800235a:	6833      	ldr	r3, [r6, #0]
 800235c:	691c      	ldr	r4, [r3, #16]
 800235e:	e7e2      	b.n	8002326 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8002360:	2002      	movs	r0, #2
 8002362:	e7f9      	b.n	8002358 <HAL_ETH_ReadPHYRegister+0x6a>

08002364 <HAL_ETH_WritePHYRegister>:
{
 8002364:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002366:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800236a:	2b42      	cmp	r3, #66	; 0x42
{
 800236c:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800236e:	d02f      	beq.n	80023d0 <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002370:	2342      	movs	r3, #66	; 0x42
 8002372:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002376:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg1 = heth->Instance->MACMIIAR;
 8002378:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800237a:	02e4      	lsls	r4, r4, #11
  tmpreg1 = heth->Instance->MACMIIAR;
 800237c:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800237e:	0189      	lsls	r1, r1, #6
 8002380:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002384:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002386:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800238a:	430c      	orrs	r4, r1
 800238c:	4304      	orrs	r4, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800238e:	b292      	uxth	r2, r2
 8002390:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002394:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8002396:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8002398:	f7ff fb46 	bl	8001a28 <HAL_GetTick>
 800239c:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800239e:	f014 0401 	ands.w	r4, r4, #1
 80023a2:	d104      	bne.n	80023ae <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 80023aa:	4620      	mov	r0, r4
 80023ac:	e00c      	b.n	80023c8 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80023ae:	f7ff fb3b 	bl	8001a28 <HAL_GetTick>
 80023b2:	1b80      	subs	r0, r0, r6
 80023b4:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
 80023b8:	d307      	bcc.n	80023ca <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80023c0:	2300      	movs	r3, #0
 80023c2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
}
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	691c      	ldr	r4, [r3, #16]
 80023ce:	e7e6      	b.n	800239e <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80023d0:	2002      	movs	r0, #2
 80023d2:	e7f9      	b.n	80023c8 <HAL_ETH_WritePHYRegister+0x64>

080023d4 <HAL_ETH_Init>:
{
 80023d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 80023da:	4604      	mov	r4, r0
 80023dc:	2800      	cmp	r0, #0
 80023de:	f000 80e0 	beq.w	80025a2 <HAL_ETH_Init+0x1ce>
  if(heth->State == HAL_ETH_STATE_RESET)
 80023e2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80023e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ea:	b91b      	cbnz	r3, 80023f4 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 80023ec:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80023f0:	f7fe fcde 	bl	8000db0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	2300      	movs	r3, #0
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <HAL_ETH_Init+0x1d4>)
 80023fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002400:	645a      	str	r2, [r3, #68]	; 0x44
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800240c:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_ETH_Init+0x1d8>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002414:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	6a21      	ldr	r1, [r4, #32]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800242c:	f7ff fafc 	bl	8001a28 <HAL_GetTick>
 8002430:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	07d0      	lsls	r0, r2, #31
 800243c:	d41d      	bmi.n	800247a <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800243e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8002440:	f000 fdb2 	bl	8002fa8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_ETH_Init+0x1dc>)
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_ETH_Init+0x1e0>)
 8002448:	4403      	add	r3, r0
 800244a:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800244c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002450:	d222      	bcs.n	8002498 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002452:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002456:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002458:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800245c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800245e:	2100      	movs	r1, #0
 8002460:	4620      	mov	r0, r4
 8002462:	f7ff ff7f 	bl	8002364 <HAL_ETH_WritePHYRegister>
 8002466:	4605      	mov	r5, r0
 8002468:	b368      	cbz	r0, 80024c6 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 800246a:	2101      	movs	r1, #1
 800246c:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 800246e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8002470:	f7ff fd8c 	bl	8001f8c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8002474:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002478:	e00b      	b.n	8002492 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800247a:	f7ff fad5 	bl	8001a28 <HAL_GetTick>
 800247e:	1b40      	subs	r0, r0, r5
 8002480:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002484:	d9d5      	bls.n	8002432 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002486:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8002488:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800248a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800248e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002492:	4628      	mov	r0, r5
 8002494:	b003      	add	sp, #12
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_ETH_Init+0x1e4>)
 800249a:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_ETH_Init+0x1e8>)
 800249c:	4403      	add	r3, r0
 800249e:	4293      	cmp	r3, r2
 80024a0:	d802      	bhi.n	80024a8 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80024a2:	f045 050c 	orr.w	r5, r5, #12
 80024a6:	e7d6      	b.n	8002456 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80024a8:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <HAL_ETH_Init+0x1ec>)
 80024aa:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <HAL_ETH_Init+0x1f0>)
 80024ac:	4403      	add	r3, r0
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d3d1      	bcc.n	8002456 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_ETH_Init+0x1f4>)
 80024b4:	4a45      	ldr	r2, [pc, #276]	; (80025cc <HAL_ETH_Init+0x1f8>)
 80024b6:	4403      	add	r3, r0
 80024b8:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80024ba:	bf94      	ite	ls
 80024bc:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80024c0:	f045 0510 	orrhi.w	r5, r5, #16
 80024c4:	e7c7      	b.n	8002456 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 80024c6:	f240 20ff 	movw	r0, #767	; 0x2ff
 80024ca:	f7ff fab3 	bl	8001a34 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d054      	beq.n	800257e <HAL_ETH_Init+0x1aa>
    tickstart = HAL_GetTick();
 80024d4:	f7ff faa8 	bl	8001a28 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80024d8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80024dc:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80024de:	466a      	mov	r2, sp
 80024e0:	2101      	movs	r1, #1
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7ff ff03 	bl	80022ee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80024e8:	f7ff fa9e 	bl	8001a28 <HAL_GetTick>
 80024ec:	1b80      	subs	r0, r0, r6
 80024ee:	42b8      	cmp	r0, r7
 80024f0:	d90b      	bls.n	800250a <HAL_ETH_Init+0x136>
        ETH_MACDMAConfig(heth, err);
 80024f2:	2101      	movs	r1, #1
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff fd49 	bl	8001f8c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8002500:	2300      	movs	r3, #0
 8002502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8002506:	2503      	movs	r5, #3
 8002508:	e7c3      	b.n	8002492 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800250a:	9b00      	ldr	r3, [sp, #0]
 800250c:	0759      	lsls	r1, r3, #29
 800250e:	d5e6      	bpl.n	80024de <HAL_ETH_Init+0x10a>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002514:	2100      	movs	r1, #0
 8002516:	4620      	mov	r0, r4
 8002518:	f7ff ff24 	bl	8002364 <HAL_ETH_WritePHYRegister>
 800251c:	2800      	cmp	r0, #0
 800251e:	d1a4      	bne.n	800246a <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8002520:	f7ff fa82 	bl	8001a28 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002524:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002528:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800252a:	466a      	mov	r2, sp
 800252c:	2101      	movs	r1, #1
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fedd 	bl	80022ee <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002534:	f7ff fa78 	bl	8001a28 <HAL_GetTick>
 8002538:	1b80      	subs	r0, r0, r6
 800253a:	42b8      	cmp	r0, r7
 800253c:	d8d9      	bhi.n	80024f2 <HAL_ETH_Init+0x11e>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800253e:	9b00      	ldr	r3, [sp, #0]
 8002540:	069a      	lsls	r2, r3, #26
 8002542:	d5f2      	bpl.n	800252a <HAL_ETH_Init+0x156>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002544:	466a      	mov	r2, sp
 8002546:	211f      	movs	r1, #31
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fed0 	bl	80022ee <HAL_ETH_ReadPHYRegister>
 800254e:	2800      	cmp	r0, #0
 8002550:	d18b      	bne.n	800246a <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002552:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002554:	f013 0210 	ands.w	r2, r3, #16
 8002558:	bf18      	it	ne
 800255a:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800255e:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_100M;
 8002560:	bf58      	it	pl
 8002562:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8002566:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002568:	bf4c      	ite	mi
 800256a:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 800256c:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800256e:	2100      	movs	r1, #0
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fd0b 	bl	8001f8c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8002576:	2301      	movs	r3, #1
 8002578:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800257c:	e789      	b.n	8002492 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800257e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8002582:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002584:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8002588:	b292      	uxth	r2, r2
 800258a:	4629      	mov	r1, r5
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff fee9 	bl	8002364 <HAL_ETH_WritePHYRegister>
 8002592:	2800      	cmp	r0, #0
 8002594:	f47f af69 	bne.w	800246a <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8002598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800259c:	f7ff fa4a 	bl	8001a34 <HAL_Delay>
 80025a0:	e7e5      	b.n	800256e <HAL_ETH_Init+0x19a>
    return HAL_ERROR;
 80025a2:	2501      	movs	r5, #1
 80025a4:	e775      	b.n	8002492 <HAL_ETH_Init+0xbe>
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40013800 	.word	0x40013800
 80025b0:	feced300 	.word	0xfeced300
 80025b4:	00e4e1c0 	.word	0x00e4e1c0
 80025b8:	fde9f140 	.word	0xfde9f140
 80025bc:	017d783f 	.word	0x017d783f
 80025c0:	fc6c7900 	.word	0xfc6c7900
 80025c4:	02625a00 	.word	0x02625a00
 80025c8:	fa0a1f00 	.word	0xfa0a1f00
 80025cc:	02faf07f 	.word	0x02faf07f

080025d0 <HAL_ETH_Start>:
{  
 80025d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 80025d2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	f04f 0402 	mov.w	r4, #2
 80025dc:	d02f      	beq.n	800263e <HAL_ETH_Start+0x6e>
  heth->State = HAL_ETH_STATE_BUSY;
 80025de:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025e2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 80025e4:	2400      	movs	r4, #0
  __HAL_LOCK(heth);
 80025e6:	2501      	movs	r5, #1
 80025e8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  __IO uint32_t tmpreg1 = 0U;
 80025ec:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f042 0208 	orr.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025fa:	f7ff fca1 	bl	8001f40 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 80025fe:	6803      	ldr	r3, [r0, #0]
 8002600:	9a01      	ldr	r2, [sp, #4]
 8002602:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002604:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f042 0204 	orr.w	r2, r2, #4
 800260c:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002612:	f7ff fc95 	bl	8001f40 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	9a00      	ldr	r2, [sp, #0]
 800261a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800261c:	f7ff fca2 	bl	8001f64 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002620:	f241 0318 	movw	r3, #4120	; 0x1018
 8002624:	6802      	ldr	r2, [r0, #0]
 8002626:	58d1      	ldr	r1, [r2, r3]
 8002628:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800262c:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800262e:	58d1      	ldr	r1, [r2, r3]
 8002630:	f041 0102 	orr.w	r1, r1, #2
 8002634:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002636:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800263a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 800263e:	4620      	mov	r0, r4
}
 8002640:	b003      	add	sp, #12
 8002642:	bd30      	pop	{r4, r5, pc}

08002644 <HAL_ETH_Stop>:
{  
 8002644:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_LOCK(heth);
 8002646:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800264a:	2b01      	cmp	r3, #1
 800264c:	f04f 0402 	mov.w	r4, #2
 8002650:	d02f      	beq.n	80026b2 <HAL_ETH_Stop+0x6e>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002652:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8002654:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002658:	f241 0218 	movw	r2, #4120	; 0x1018
  __HAL_LOCK(heth);
 800265c:	2501      	movs	r5, #1
 800265e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002662:	5899      	ldr	r1, [r3, r2]
 8002664:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002668:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800266a:	5899      	ldr	r1, [r3, r2]
 800266c:	f021 0102 	bic.w	r1, r1, #2
 8002670:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg1 = 0U;
 8002672:	2400      	movs	r4, #0
 8002674:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f022 0204 	bic.w	r2, r2, #4
 800267c:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002682:	f7ff fc5d 	bl	8001f40 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	9a01      	ldr	r2, [sp, #4]
 800268a:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 800268c:	f7ff fc6a 	bl	8001f64 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002690:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t tmpreg1 = 0U;
 8002692:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	f022 0208 	bic.w	r2, r2, #8
 800269a:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026a0:	f7ff fc4e 	bl	8001f40 <ETH_Delay.constprop.0>
  (heth->Instance)->MACCR = tmpreg1;
 80026a4:	6803      	ldr	r3, [r0, #0]
 80026a6:	9a00      	ldr	r2, [sp, #0]
 80026a8:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 80026aa:	f880 5044 	strb.w	r5, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80026ae:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80026b2:	4620      	mov	r0, r4
}
 80026b4:	b003      	add	sp, #12
 80026b6:	bd30      	pop	{r4, r5, pc}

080026b8 <HAL_ETH_ConfigMAC>:
{
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80026ba:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80026be:	2b01      	cmp	r3, #1
{
 80026c0:	4605      	mov	r5, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 80026c8:	d071      	beq.n	80027ae <HAL_ETH_ConfigMAC+0xf6>
 80026ca:	2601      	movs	r6, #1
  heth->State= HAL_ETH_STATE_BUSY;
 80026cc:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
 80026d0:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(heth);
 80026d2:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  if (macconf != NULL)
 80026d6:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
 80026da:	2900      	cmp	r1, #0
 80026dc:	d068      	beq.n	80027b0 <HAL_ETH_ConfigMAC+0xf8>
    tmpreg1 = (heth->Instance)->MACCR;
 80026de:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026e0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80027cc <HAL_ETH_ConfigMAC+0x114>
 80026e4:	ea0c 0c03 	and.w	ip, ip, r3
                         macconf->BackOffLimit | 
 80026e8:	e9d1 3100 	ldrd	r3, r1, [r1]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	68a1      	ldr	r1, [r4, #8]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	68e1      	ldr	r1, [r4, #12]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6921      	ldr	r1, [r4, #16]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6961      	ldr	r1, [r4, #20]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	69a1      	ldr	r1, [r4, #24]
 8002700:	430b      	orrs	r3, r1
 8002702:	69e1      	ldr	r1, [r4, #28]
 8002704:	430b      	orrs	r3, r1
 8002706:	6a21      	ldr	r1, [r4, #32]
 8002708:	430b      	orrs	r3, r1
 800270a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800270c:	430b      	orrs	r3, r1
 800270e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002710:	430b      	orrs	r3, r1
 8002712:	433b      	orrs	r3, r7
 8002714:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002716:	ea43 030c 	orr.w	r3, r3, ip
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800271a:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800271c:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 800271e:	6817      	ldr	r7, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002720:	f7ff f988 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002724:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
 8002728:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800272a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg1; 
 800272c:	682a      	ldr	r2, [r5, #0]
                                          macconf->SourceAddrFilter |
 800272e:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 8002730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    (heth->Instance)->MACCR = tmpreg1; 
 8002732:	6017      	str	r7, [r2, #0]
                                          macconf->PassControlFrames |
 8002734:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8002736:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002738:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800273a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800273c:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800273e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002740:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8002742:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002744:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002746:	6053      	str	r3, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002748:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFFR;
 800274a:	6857      	ldr	r7, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800274c:	f7ff f972 	bl	8001a34 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002750:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002752:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACFFR = tmpreg1;
 8002754:	6057      	str	r7, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002756:	6093      	str	r3, [r2, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002758:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800275a:	60d3      	str	r3, [r2, #12]
                          macconf->ReceiveFlowControl |
 800275c:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 8002760:	4303      	orrs	r3, r0
 8002762:	6e20      	ldr	r0, [r4, #96]	; 0x60
     tmpreg1 = (heth->Instance)->MACFCR;
 8002764:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8002766:	4303      	orrs	r3, r0
 8002768:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800276a:	4303      	orrs	r3, r0
 800276c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800276e:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
                          macconf->ReceiveFlowControl |
 8002772:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002774:	6d60      	ldr	r0, [r4, #84]	; 0x54
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002776:	0409      	lsls	r1, r1, #16
 8002778:	0c09      	lsrs	r1, r1, #16
                          macconf->ReceiveFlowControl |
 800277a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800277e:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002780:	6193      	str	r3, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002782:	4630      	mov	r0, r6
     tmpreg1 = (heth->Instance)->MACFCR;
 8002784:	6997      	ldr	r7, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002786:	f7ff f955 	bl	8001a34 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800278a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg1;
 800278e:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002790:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg1;
 8002792:	619f      	str	r7, [r3, #24]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002794:	4630      	mov	r0, r6
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002796:	61da      	str	r2, [r3, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002798:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800279a:	f7ff f94b 	bl	8001a34 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 80027a2:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 80027a4:	2000      	movs	r0, #0
  heth->State= HAL_ETH_STATE_READY;
 80027a6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80027aa:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 80027ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 80027b0:	6811      	ldr	r1, [r2, #0]
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80027b2:	ea47 0300 	orr.w	r3, r7, r0
    tmpreg1 &= ~(0x00004800U);
 80027b6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80027ba:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027bc:	6013      	str	r3, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027be:	4630      	mov	r0, r6
    tmpreg1 = (heth->Instance)->MACCR;
 80027c0:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c2:	f7ff f937 	bl	8001a34 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	601c      	str	r4, [r3, #0]
 80027ca:	e7ea      	b.n	80027a2 <HAL_ETH_ConfigMAC+0xea>
 80027cc:	ff20810f 	.word	0xff20810f

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002980 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027dc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80027de:	2401      	movs	r4, #1
 80027e0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80027e6:	43ac      	bics	r4, r5
 80027e8:	f040 80b0 	bne.w	800294c <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ec:	684d      	ldr	r5, [r1, #4]
 80027ee:	f005 0403 	and.w	r4, r5, #3
 80027f2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80027f6:	2603      	movs	r6, #3
 80027f8:	1e67      	subs	r7, r4, #1
 80027fa:	fa06 f608 	lsl.w	r6, r6, r8
 80027fe:	2f01      	cmp	r7, #1
 8002800:	ea6f 0606 	mvn.w	r6, r6
 8002804:	d834      	bhi.n	8002870 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002806:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002808:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280c:	68cf      	ldr	r7, [r1, #12]
 800280e:	fa07 f708 	lsl.w	r7, r7, r8
 8002812:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002816:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002818:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800281e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002822:	409f      	lsls	r7, r3
 8002824:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002828:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800282a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002830:	688f      	ldr	r7, [r1, #8]
 8002832:	fa07 f708 	lsl.w	r7, r7, r8
 8002836:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800283c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283e:	d119      	bne.n	8002874 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002840:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002844:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002848:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800284c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002850:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002854:	f04f 0e0f 	mov.w	lr, #15
 8002858:	fa0e fe0b 	lsl.w	lr, lr, fp
 800285c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002860:	690f      	ldr	r7, [r1, #16]
 8002862:	fa07 f70b 	lsl.w	r7, r7, fp
 8002866:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	f8ca 7020 	str.w	r7, [sl, #32]
 800286e:	e001      	b.n	8002874 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002870:	2c03      	cmp	r4, #3
 8002872:	d1da      	bne.n	800282a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002874:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002876:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287e:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8002880:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002882:	d563      	bpl.n	800294c <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002884:	f04f 0a00 	mov.w	sl, #0
 8002888:	f8cd a004 	str.w	sl, [sp, #4]
 800288c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002890:	4c3a      	ldr	r4, [pc, #232]	; (800297c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002896:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800289a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800289e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80028a2:	9601      	str	r6, [sp, #4]
 80028a4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028a6:	f023 0603 	bic.w	r6, r3, #3
 80028aa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80028ae:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80028b6:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80028be:	270f      	movs	r7, #15
 80028c0:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c4:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c6:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ca:	d046      	beq.n	800295a <HAL_GPIO_Init+0x18a>
 80028cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028d0:	42a0      	cmp	r0, r4
 80028d2:	d044      	beq.n	800295e <HAL_GPIO_Init+0x18e>
 80028d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028d8:	42a0      	cmp	r0, r4
 80028da:	d042      	beq.n	8002962 <HAL_GPIO_Init+0x192>
 80028dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028e0:	42a0      	cmp	r0, r4
 80028e2:	d040      	beq.n	8002966 <HAL_GPIO_Init+0x196>
 80028e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028e8:	42a0      	cmp	r0, r4
 80028ea:	d03e      	beq.n	800296a <HAL_GPIO_Init+0x19a>
 80028ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028f0:	42a0      	cmp	r0, r4
 80028f2:	d03c      	beq.n	800296e <HAL_GPIO_Init+0x19e>
 80028f4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028f8:	42a0      	cmp	r0, r4
 80028fa:	d03a      	beq.n	8002972 <HAL_GPIO_Init+0x1a2>
 80028fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002900:	42a0      	cmp	r0, r4
 8002902:	bf0c      	ite	eq
 8002904:	2407      	moveq	r4, #7
 8002906:	2408      	movne	r4, #8
 8002908:	fa04 f40e 	lsl.w	r4, r4, lr
 800290c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800290e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002910:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002912:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002916:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002918:	bf54      	ite	pl
 800291a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800291c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002920:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002922:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002924:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002926:	bf54      	ite	pl
 8002928:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800292a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800292e:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002930:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002932:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002934:	bf54      	ite	pl
 8002936:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002938:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800293c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800293e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002940:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002942:	bf54      	ite	pl
 8002944:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002946:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800294a:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294c:	3301      	adds	r3, #1
 800294e:	2b10      	cmp	r3, #16
 8002950:	f47f af44 	bne.w	80027dc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002954:	b003      	add	sp, #12
 8002956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	4654      	mov	r4, sl
 800295c:	e7d4      	b.n	8002908 <HAL_GPIO_Init+0x138>
 800295e:	2401      	movs	r4, #1
 8002960:	e7d2      	b.n	8002908 <HAL_GPIO_Init+0x138>
 8002962:	2402      	movs	r4, #2
 8002964:	e7d0      	b.n	8002908 <HAL_GPIO_Init+0x138>
 8002966:	2403      	movs	r4, #3
 8002968:	e7ce      	b.n	8002908 <HAL_GPIO_Init+0x138>
 800296a:	2404      	movs	r4, #4
 800296c:	e7cc      	b.n	8002908 <HAL_GPIO_Init+0x138>
 800296e:	2405      	movs	r4, #5
 8002970:	e7ca      	b.n	8002908 <HAL_GPIO_Init+0x138>
 8002972:	2406      	movs	r4, #6
 8002974:	e7c8      	b.n	8002908 <HAL_GPIO_Init+0x138>
 8002976:	bf00      	nop
 8002978:	40013c00 	.word	0x40013c00
 800297c:	40020000 	.word	0x40020000
 8002980:	40023800 	.word	0x40023800

08002984 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002988:	4c44      	ldr	r4, [pc, #272]	; (8002a9c <HAL_GPIO_DeInit+0x118>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800298a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002aa4 <HAL_GPIO_DeInit+0x120>
 800298e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002aa8 <HAL_GPIO_DeInit+0x124>
 8002992:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002aac <HAL_GPIO_DeInit+0x128>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8002998:	2301      	movs	r3, #1
 800299a:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800299e:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 80029a2:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 80029a6:	d166      	bne.n	8002a76 <HAL_GPIO_DeInit+0xf2>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029a8:	f022 0503 	bic.w	r5, r2, #3
 80029ac:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80029b0:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_GPIO_DeInit+0x11c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80029b6:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029ba:	f002 0c03 	and.w	ip, r2, #3
 80029be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80029c2:	260f      	movs	r6, #15
 80029c4:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80029c8:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80029ca:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80029ce:	d057      	beq.n	8002a80 <HAL_GPIO_DeInit+0xfc>
 80029d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d4:	4298      	cmp	r0, r3
 80029d6:	d055      	beq.n	8002a84 <HAL_GPIO_DeInit+0x100>
 80029d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029dc:	4298      	cmp	r0, r3
 80029de:	d053      	beq.n	8002a88 <HAL_GPIO_DeInit+0x104>
 80029e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d051      	beq.n	8002a8c <HAL_GPIO_DeInit+0x108>
 80029e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ec:	4298      	cmp	r0, r3
 80029ee:	d04f      	beq.n	8002a90 <HAL_GPIO_DeInit+0x10c>
 80029f0:	4548      	cmp	r0, r9
 80029f2:	d04f      	beq.n	8002a94 <HAL_GPIO_DeInit+0x110>
 80029f4:	4550      	cmp	r0, sl
 80029f6:	d04f      	beq.n	8002a98 <HAL_GPIO_DeInit+0x114>
 80029f8:	4558      	cmp	r0, fp
 80029fa:	bf0c      	ite	eq
 80029fc:	2307      	moveq	r3, #7
 80029fe:	2308      	movne	r3, #8
 8002a00:	fa03 f30c 	lsl.w	r3, r3, ip
 8002a04:	4543      	cmp	r3, r8
 8002a06:	d113      	bne.n	8002a30 <HAL_GPIO_DeInit+0xac>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	ea23 0307 	bic.w	r3, r3, r7
 8002a0e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a10:	6863      	ldr	r3, [r4, #4]
 8002a12:	ea23 0307 	bic.w	r3, r3, r7
 8002a16:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a18:	68a3      	ldr	r3, [r4, #8]
 8002a1a:	ea23 0307 	bic.w	r3, r3, r7
 8002a1e:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a20:	68e3      	ldr	r3, [r4, #12]
 8002a22:	ea23 0707 	bic.w	r7, r3, r7
 8002a26:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a28:	68ab      	ldr	r3, [r5, #8]
 8002a2a:	ea23 0606 	bic.w	r6, r3, r6
 8002a2e:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a30:	6805      	ldr	r5, [r0, #0]
 8002a32:	2603      	movs	r6, #3
 8002a34:	0053      	lsls	r3, r2, #1
 8002a36:	fa06 f303 	lsl.w	r3, r6, r3
 8002a3a:	ea25 0503 	bic.w	r5, r5, r3
 8002a3e:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a40:	fa22 f506 	lsr.w	r5, r2, r6
 8002a44:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002a48:	f002 0c07 	and.w	ip, r2, #7
 8002a4c:	6a2e      	ldr	r6, [r5, #32]
 8002a4e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002a52:	270f      	movs	r7, #15
 8002a54:	fa07 f70c 	lsl.w	r7, r7, ip
 8002a58:	ea26 0707 	bic.w	r7, r6, r7
 8002a5c:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5e:	68c5      	ldr	r5, [r0, #12]
 8002a60:	ea25 0503 	bic.w	r5, r5, r3
 8002a64:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a66:	6845      	ldr	r5, [r0, #4]
 8002a68:	ea25 050e 	bic.w	r5, r5, lr
 8002a6c:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a6e:	6885      	ldr	r5, [r0, #8]
 8002a70:	ea25 0303 	bic.w	r3, r5, r3
 8002a74:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	3201      	adds	r2, #1
 8002a78:	2a10      	cmp	r2, #16
 8002a7a:	d18d      	bne.n	8002998 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8002a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a80:	2300      	movs	r3, #0
 8002a82:	e7bd      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e7bb      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e7b9      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e7b7      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e7b5      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a94:	2305      	movs	r3, #5
 8002a96:	e7b3      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a98:	2306      	movs	r3, #6
 8002a9a:	e7b1      	b.n	8002a00 <HAL_GPIO_DeInit+0x7c>
 8002a9c:	40013c00 	.word	0x40013c00
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00

08002ab0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab0:	b10a      	cbz	r2, 8002ab6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab2:	6181      	str	r1, [r0, #24]
  }
}
 8002ab4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab6:	0409      	lsls	r1, r1, #16
 8002ab8:	e7fb      	b.n	8002ab2 <HAL_GPIO_WritePin+0x2>
	...

08002abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002abc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	b340      	cbz	r0, 8002b16 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac4:	6803      	ldr	r3, [r0, #0]
 8002ac6:	07dd      	lsls	r5, r3, #31
 8002ac8:	d410      	bmi.n	8002aec <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	0798      	lsls	r0, r3, #30
 8002ace:	d45e      	bmi.n	8002b8e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	071a      	lsls	r2, r3, #28
 8002ad4:	f100 80a0 	bmi.w	8002c18 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	075b      	lsls	r3, r3, #29
 8002adc:	f100 80be 	bmi.w	8002c5c <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae0:	69a0      	ldr	r0, [r4, #24]
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	f040 811f 	bne.w	8002d26 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	e02b      	b.n	8002b44 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aec:	4ba6      	ldr	r3, [pc, #664]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	f002 020c 	and.w	r2, r2, #12
 8002af4:	2a04      	cmp	r2, #4
 8002af6:	d007      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afe:	2a08      	cmp	r2, #8
 8002b00:	d10b      	bne.n	8002b1a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	0251      	lsls	r1, r2, #9
 8002b06:	d508      	bpl.n	8002b1a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	4b9f      	ldr	r3, [pc, #636]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	039a      	lsls	r2, r3, #14
 8002b0e:	d5dc      	bpl.n	8002aca <HAL_RCC_OscConfig+0xe>
 8002b10:	6863      	ldr	r3, [r4, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1d9      	bne.n	8002aca <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1a:	6862      	ldr	r2, [r4, #4]
 8002b1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b20:	d113      	bne.n	8002b4a <HAL_RCC_OscConfig+0x8e>
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff7d 	bl	8001a28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4e96      	ldr	r6, [pc, #600]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002b30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	6833      	ldr	r3, [r6, #0]
 8002b34:	039b      	lsls	r3, r3, #14
 8002b36:	d4c8      	bmi.n	8002aca <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff76 	bl	8001a28 <HAL_GetTick>
 8002b3c:	1b40      	subs	r0, r0, r5
 8002b3e:	2864      	cmp	r0, #100	; 0x64
 8002b40:	d9f7      	bls.n	8002b32 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
}
 8002b44:	b002      	add	sp, #8
 8002b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4a:	4d8f      	ldr	r5, [pc, #572]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002b4c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0xa8>
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	602b      	str	r3, [r5, #0]
 8002b5a:	682b      	ldr	r3, [r5, #0]
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b62:	e7e2      	b.n	8002b2a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b68:	602b      	str	r3, [r5, #0]
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b72:	2a00      	cmp	r2, #0
 8002b74:	d1d9      	bne.n	8002b2a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002b76:	f7fe ff57 	bl	8001a28 <HAL_GetTick>
 8002b7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	039f      	lsls	r7, r3, #14
 8002b80:	d5a3      	bpl.n	8002aca <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b82:	f7fe ff51 	bl	8001a28 <HAL_GetTick>
 8002b86:	1b80      	subs	r0, r0, r6
 8002b88:	2864      	cmp	r0, #100	; 0x64
 8002b8a:	d9f7      	bls.n	8002b7c <HAL_RCC_OscConfig+0xc0>
 8002b8c:	e7d9      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b8e:	4b7e      	ldr	r3, [pc, #504]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	f012 0f0c 	tst.w	r2, #12
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b9e:	2a08      	cmp	r2, #8
 8002ba0:	d111      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	025e      	lsls	r6, r3, #9
 8002ba6:	d40e      	bmi.n	8002bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba8:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	0795      	lsls	r5, r2, #30
 8002bae:	d502      	bpl.n	8002bb6 <HAL_RCC_OscConfig+0xfa>
 8002bb0:	68e2      	ldr	r2, [r4, #12]
 8002bb2:	2a01      	cmp	r2, #1
 8002bb4:	d1af      	bne.n	8002b16 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	6921      	ldr	r1, [r4, #16]
 8002bba:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002bbe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002bc2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc4:	e784      	b.n	8002ad0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc6:	68e2      	ldr	r2, [r4, #12]
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x2d0>)
 8002bca:	b1b2      	cbz	r2, 8002bfa <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bd0:	f7fe ff2a 	bl	8001a28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4d6c      	ldr	r5, [pc, #432]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002bd6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	0798      	lsls	r0, r3, #30
 8002bdc:	d507      	bpl.n	8002bee <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	6922      	ldr	r2, [r4, #16]
 8002be2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002be6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bea:	602b      	str	r3, [r5, #0]
 8002bec:	e770      	b.n	8002ad0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7fe ff1b 	bl	8001a28 <HAL_GetTick>
 8002bf2:	1b80      	subs	r0, r0, r6
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	d9ef      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x11c>
 8002bf8:	e7a3      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bfc:	f7fe ff14 	bl	8001a28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c00:	4e61      	ldr	r6, [pc, #388]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002c02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c04:	6833      	ldr	r3, [r6, #0]
 8002c06:	0799      	lsls	r1, r3, #30
 8002c08:	f57f af62 	bpl.w	8002ad0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7fe ff0c 	bl	8001a28 <HAL_GetTick>
 8002c10:	1b40      	subs	r0, r0, r5
 8002c12:	2802      	cmp	r0, #2
 8002c14:	d9f6      	bls.n	8002c04 <HAL_RCC_OscConfig+0x148>
 8002c16:	e794      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c18:	6962      	ldr	r2, [r4, #20]
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCC_OscConfig+0x2d4>)
 8002c1c:	b17a      	cbz	r2, 8002c3e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c22:	f7fe ff01 	bl	8001a28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4e58      	ldr	r6, [pc, #352]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002c28:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c2c:	079f      	lsls	r7, r3, #30
 8002c2e:	f53f af53 	bmi.w	8002ad8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c32:	f7fe fef9 	bl	8001a28 <HAL_GetTick>
 8002c36:	1b40      	subs	r0, r0, r5
 8002c38:	2802      	cmp	r0, #2
 8002c3a:	d9f6      	bls.n	8002c2a <HAL_RCC_OscConfig+0x16e>
 8002c3c:	e781      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002c3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c40:	f7fe fef2 	bl	8001a28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	4e50      	ldr	r6, [pc, #320]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002c46:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002c4a:	0798      	lsls	r0, r3, #30
 8002c4c:	f57f af44 	bpl.w	8002ad8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe feea 	bl	8001a28 <HAL_GetTick>
 8002c54:	1b40      	subs	r0, r0, r5
 8002c56:	2802      	cmp	r0, #2
 8002c58:	d9f6      	bls.n	8002c48 <HAL_RCC_OscConfig+0x18c>
 8002c5a:	e772      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c60:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002c64:	d128      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	9201      	str	r2, [sp, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c7a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4d45      	ldr	r5, [pc, #276]	; (8002d94 <HAL_RCC_OscConfig+0x2d8>)
 8002c7e:	682b      	ldr	r3, [r5, #0]
 8002c80:	05d9      	lsls	r1, r3, #23
 8002c82:	d51b      	bpl.n	8002cbc <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	4d40      	ldr	r5, [pc, #256]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d127      	bne.n	8002cdc <HAL_RCC_OscConfig+0x220>
 8002c8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c94:	f7fe fec8 	bl	8001a28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4e3b      	ldr	r6, [pc, #236]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002c9a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002ca2:	079b      	lsls	r3, r3, #30
 8002ca4:	d539      	bpl.n	8002d1a <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8002ca6:	2f00      	cmp	r7, #0
 8002ca8:	f43f af1a 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002cae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	e713      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2700      	movs	r7, #0
 8002cba:	e7df      	b.n	8002c7c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002cc4:	f7fe feb0 	bl	8001a28 <HAL_GetTick>
 8002cc8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	682b      	ldr	r3, [r5, #0]
 8002ccc:	05da      	lsls	r2, r3, #23
 8002cce:	d4d9      	bmi.n	8002c84 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe feaa 	bl	8001a28 <HAL_GetTick>
 8002cd4:	1b80      	subs	r0, r0, r6
 8002cd6:	2802      	cmp	r0, #2
 8002cd8:	d9f7      	bls.n	8002cca <HAL_RCC_OscConfig+0x20e>
 8002cda:	e732      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d104      	bne.n	8002cea <HAL_RCC_OscConfig+0x22e>
 8002ce0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	672b      	str	r3, [r5, #112]	; 0x70
 8002ce8:	e7d0      	b.n	8002c8c <HAL_RCC_OscConfig+0x1d0>
 8002cea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	672a      	str	r2, [r5, #112]	; 0x70
 8002cf2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cf4:	f022 0204 	bic.w	r2, r2, #4
 8002cf8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ca      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe93 	bl	8001a28 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d0a:	0798      	lsls	r0, r3, #30
 8002d0c:	d5cb      	bpl.n	8002ca6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fe8b 	bl	8001a28 <HAL_GetTick>
 8002d12:	1b80      	subs	r0, r0, r6
 8002d14:	4540      	cmp	r0, r8
 8002d16:	d9f7      	bls.n	8002d08 <HAL_RCC_OscConfig+0x24c>
 8002d18:	e713      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fe85 	bl	8001a28 <HAL_GetTick>
 8002d1e:	1b40      	subs	r0, r0, r5
 8002d20:	4540      	cmp	r0, r8
 8002d22:	d9bd      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x1e4>
 8002d24:	e70d      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d26:	4d18      	ldr	r5, [pc, #96]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
 8002d28:	68ab      	ldr	r3, [r5, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d047      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d32:	4e19      	ldr	r6, [pc, #100]	; (8002d98 <HAL_RCC_OscConfig+0x2dc>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d38:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3a:	d135      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fe74 	bl	8001a28 <HAL_GetTick>
 8002d40:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	682b      	ldr	r3, [r5, #0]
 8002d44:	0199      	lsls	r1, r3, #6
 8002d46:	d429      	bmi.n	8002d9c <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d48:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d50:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d56:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d5c:	0852      	lsrs	r2, r2, #1
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d64:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d66:	2301      	movs	r3, #1
 8002d68:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fe5d 	bl	8001a28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4d06      	ldr	r5, [pc, #24]	; (8002d88 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002d70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	019a      	lsls	r2, r3, #6
 8002d76:	f53f aeb7 	bmi.w	8002ae8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7a:	f7fe fe55 	bl	8001a28 <HAL_GetTick>
 8002d7e:	1b00      	subs	r0, r0, r4
 8002d80:	2802      	cmp	r0, #2
 8002d82:	d9f6      	bls.n	8002d72 <HAL_RCC_OscConfig+0x2b6>
 8002d84:	e6dd      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	42470000 	.word	0x42470000
 8002d90:	42470e80 	.word	0x42470e80
 8002d94:	40007000 	.word	0x40007000
 8002d98:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fe44 	bl	8001a28 <HAL_GetTick>
 8002da0:	1bc0      	subs	r0, r0, r7
 8002da2:	2802      	cmp	r0, #2
 8002da4:	d9cd      	bls.n	8002d42 <HAL_RCC_OscConfig+0x286>
 8002da6:	e6cc      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe3e 	bl	8001a28 <HAL_GetTick>
 8002dac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	f57f ae99 	bpl.w	8002ae8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db6:	f7fe fe37 	bl	8001a28 <HAL_GetTick>
 8002dba:	1b00      	subs	r0, r0, r4
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	d9f6      	bls.n	8002dae <HAL_RCC_OscConfig+0x2f2>
 8002dc0:	e6bf      	b.n	8002b42 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc2:	2801      	cmp	r0, #1
 8002dc4:	f43f aebe 	beq.w	8002b44 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002dc8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dca:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd0:	4291      	cmp	r1, r2
 8002dd2:	f47f aea0 	bne.w	8002b16 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	428a      	cmp	r2, r1
 8002dde:	f47f ae9a 	bne.w	8002b16 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002de8:	401a      	ands	r2, r3
 8002dea:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002dee:	f47f ae92 	bne.w	8002b16 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002dfa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002e00:	f47f ae89 	bne.w	8002b16 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e06:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002e0e:	f43f ae6b 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x2c>
 8002e12:	e680      	b.n	8002b16 <HAL_RCC_OscConfig+0x5a>

08002e14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e14:	4913      	ldr	r1, [pc, #76]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002e16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e18:	688b      	ldr	r3, [r1, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d01c      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x48>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d11c      	bne.n	8002e60 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e26:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e28:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e30:	bf14      	ite	ne
 8002e32:	480d      	ldrne	r0, [pc, #52]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e34:	480d      	ldreq	r0, [pc, #52]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002e3a:	bf18      	it	ne
 8002e3c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e42:	fba1 0100 	umull	r0, r1, r1, r0
 8002e46:	f7fd fd31 	bl	80008ac <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x50>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002e56:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002e5a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x54>)
 8002e5e:	e7fc      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002e62:	e7fa      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x46>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	017d7840 	.word	0x017d7840
 8002e6c:	00f42400 	.word	0x00f42400

08002e70 <HAL_RCC_ClockConfig>:
{
 8002e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002e76:	4604      	mov	r4, r0
 8002e78:	b910      	cbnz	r0, 8002e80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002e7a:	2001      	movs	r0, #1
}
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_RCC_ClockConfig+0x124>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f002 0207 	and.w	r2, r2, #7
 8002e88:	428a      	cmp	r2, r1
 8002e8a:	d328      	bcc.n	8002ede <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	0797      	lsls	r7, r2, #30
 8002e90:	d42d      	bmi.n	8002eee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	07d0      	lsls	r0, r2, #31
 8002e94:	d441      	bmi.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e96:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCC_ClockConfig+0x124>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	f002 0207 	and.w	r2, r2, #7
 8002e9e:	42aa      	cmp	r2, r5
 8002ea0:	d866      	bhi.n	8002f70 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	0751      	lsls	r1, r2, #29
 8002ea6:	d46c      	bmi.n	8002f82 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	0713      	lsls	r3, r2, #28
 8002eaa:	d507      	bpl.n	8002ebc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eac:	4a3a      	ldr	r2, [pc, #232]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002eae:	6921      	ldr	r1, [r4, #16]
 8002eb0:	6893      	ldr	r3, [r2, #8]
 8002eb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002eb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002eba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ebc:	f7ff ffaa 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002ec2:	4a36      	ldr	r2, [pc, #216]	; (8002f9c <HAL_RCC_ClockConfig+0x12c>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	40d8      	lsrs	r0, r3
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_ClockConfig+0x130>)
 8002ed0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x134>)
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	f7fe fd63 	bl	80019a0 <HAL_InitTick>
  return HAL_OK;
 8002eda:	2000      	movs	r0, #0
 8002edc:	e7ce      	b.n	8002e7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	b2ca      	uxtb	r2, r1
 8002ee0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d1c6      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xa>
 8002eec:	e7ce      	b.n	8002e8c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002ef0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	bf1e      	ittt	ne
 8002ef6:	6899      	ldrne	r1, [r3, #8]
 8002ef8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002efc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f00:	bf42      	ittt	mi
 8002f02:	6899      	ldrmi	r1, [r3, #8]
 8002f04:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002f08:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0a:	4923      	ldr	r1, [pc, #140]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002f0c:	68a0      	ldr	r0, [r4, #8]
 8002f0e:	688b      	ldr	r3, [r1, #8]
 8002f10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f14:	4303      	orrs	r3, r0
 8002f16:	608b      	str	r3, [r1, #8]
 8002f18:	e7bb      	b.n	8002e92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	6862      	ldr	r2, [r4, #4]
 8002f1c:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002f1e:	2a01      	cmp	r2, #1
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	d0a7      	beq.n	8002e7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4e1b      	ldr	r6, [pc, #108]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002f2c:	68b3      	ldr	r3, [r6, #8]
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002f36:	f7fe fd77 	bl	8001a28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f3e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	68b3      	ldr	r3, [r6, #8]
 8002f42:	6862      	ldr	r2, [r4, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002f4c:	d0a3      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7fe fd6b 	bl	8001a28 <HAL_GetTick>
 8002f52:	1bc0      	subs	r0, r0, r7
 8002f54:	4540      	cmp	r0, r8
 8002f56:	d9f3      	bls.n	8002f40 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002f58:	2003      	movs	r0, #3
 8002f5a:	e78f      	b.n	8002e7c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5c:	1e91      	subs	r1, r2, #2
 8002f5e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	d802      	bhi.n	8002f6a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f68:	e7de      	b.n	8002f28 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	f013 0f02 	tst.w	r3, #2
 8002f6e:	e7db      	b.n	8002f28 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f70:	b2ea      	uxtb	r2, r5
 8002f72:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	42ab      	cmp	r3, r5
 8002f7c:	f47f af7d 	bne.w	8002e7a <HAL_RCC_ClockConfig+0xa>
 8002f80:	e78f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f82:	4905      	ldr	r1, [pc, #20]	; (8002f98 <HAL_RCC_ClockConfig+0x128>)
 8002f84:	68e0      	ldr	r0, [r4, #12]
 8002f86:	688b      	ldr	r3, [r1, #8]
 8002f88:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f8c:	4303      	orrs	r3, r0
 8002f8e:	608b      	str	r3, [r1, #8]
 8002f90:	e78a      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x38>
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	0800be2c 	.word	0x0800be2c
 8002fa0:	20000034 	.word	0x20000034
 8002fa4:	2000003c 	.word	0x2000003c

08002fa8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002fa8:	4b01      	ldr	r3, [pc, #4]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x8>)
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000034 	.word	0x20000034

08002fb4 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8002fb4:	7943      	ldrb	r3, [r0, #5]
 8002fb6:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8002fb8:	bf1f      	itttt	ne
 8002fba:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8002fbc:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8002fbe:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8002fc0:	8103      	strhne	r3, [r0, #8]
  }
}
 8002fc2:	4770      	bx	lr

08002fc4 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8002fc6:	1c87      	adds	r7, r0, #2
 8002fc8:	2f44      	cmp	r7, #68	; 0x44
{
 8002fca:	4604      	mov	r4, r0
 8002fcc:	460d      	mov	r5, r1
 8002fce:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8002fd0:	d906      	bls.n	8002fe0 <dhcp_option_short+0x1c>
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <dhcp_option_short+0x2c>)
 8002fd4:	4907      	ldr	r1, [pc, #28]	; (8002ff4 <dhcp_option_short+0x30>)
 8002fd6:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <dhcp_option_short+0x34>)
 8002fd8:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8002fdc:	f007 fece 	bl	800ad7c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8002fe0:	0a33      	lsrs	r3, r6, #8
 8002fe2:	552b      	strb	r3, [r5, r4]
 8002fe4:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8002fe6:	b2a4      	uxth	r4, r4
  return options_out_len;
}
 8002fe8:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8002fea:	552e      	strb	r6, [r5, r4]
}
 8002fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08018ce1 	.word	0x08018ce1
 8002ff4:	08018d58 	.word	0x08018d58
 8002ff8:	08018c9a 	.word	0x08018c9a

08002ffc <dhcp_option>:
{
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8003000:	3302      	adds	r3, #2
 8003002:	4403      	add	r3, r0
 8003004:	2b44      	cmp	r3, #68	; 0x44
{
 8003006:	4604      	mov	r4, r0
 8003008:	460d      	mov	r5, r1
 800300a:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800300c:	d906      	bls.n	800301c <dhcp_option+0x20>
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <dhcp_option+0x30>)
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <dhcp_option+0x34>)
 8003012:	4808      	ldr	r0, [pc, #32]	; (8003034 <dhcp_option+0x38>)
 8003014:	f240 529a 	movw	r2, #1434	; 0x59a
 8003018:	f007 feb0 	bl	800ad7c <iprintf>
  options[options_out_len++] = option_type;
 800301c:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 800301e:	b29b      	uxth	r3, r3
 8003020:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8003022:	552f      	strb	r7, [r5, r4]
}
 8003024:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8003026:	54ee      	strb	r6, [r5, r3]
}
 8003028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800302a:	bf00      	nop
 800302c:	08018ce1 	.word	0x08018ce1
 8003030:	08018d93 	.word	0x08018d93
 8003034:	08018c9a 	.word	0x08018c9a

08003038 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8003038:	2843      	cmp	r0, #67	; 0x43
{
 800303a:	b570      	push	{r4, r5, r6, lr}
 800303c:	4604      	mov	r4, r0
 800303e:	460d      	mov	r5, r1
 8003040:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8003042:	d906      	bls.n	8003052 <dhcp_option_byte+0x1a>
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <dhcp_option_byte+0x24>)
 8003046:	4906      	ldr	r1, [pc, #24]	; (8003060 <dhcp_option_byte+0x28>)
 8003048:	4806      	ldr	r0, [pc, #24]	; (8003064 <dhcp_option_byte+0x2c>)
 800304a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800304e:	f007 fe95 	bl	800ad7c <iprintf>
  options[options_out_len++] = value;
 8003052:	1c60      	adds	r0, r4, #1
 8003054:	552e      	strb	r6, [r5, r4]
}
 8003056:	b280      	uxth	r0, r0
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	bf00      	nop
 800305c:	08018ce1 	.word	0x08018ce1
 8003060:	08018dd5 	.word	0x08018dd5
 8003064:	08018c9a 	.word	0x08018c9a

08003068 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800306a:	1d07      	adds	r7, r0, #4
 800306c:	2f44      	cmp	r7, #68	; 0x44
{
 800306e:	4604      	mov	r4, r0
 8003070:	460d      	mov	r5, r1
 8003072:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8003074:	d906      	bls.n	8003084 <dhcp_option_long+0x1c>
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <dhcp_option_long+0x3c>)
 8003078:	490b      	ldr	r1, [pc, #44]	; (80030a8 <dhcp_option_long+0x40>)
 800307a:	480c      	ldr	r0, [pc, #48]	; (80030ac <dhcp_option_long+0x44>)
 800307c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8003080:	f007 fe7c 	bl	800ad7c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8003084:	0e33      	lsrs	r3, r6, #24
 8003086:	552b      	strb	r3, [r5, r4]
 8003088:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800308a:	b29b      	uxth	r3, r3
 800308c:	0c32      	lsrs	r2, r6, #16
 800308e:	54ea      	strb	r2, [r5, r3]
 8003090:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8003092:	3403      	adds	r4, #3
 8003094:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8003096:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8003098:	0a32      	lsrs	r2, r6, #8
 800309a:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 800309c:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800309e:	552e      	strb	r6, [r5, r4]
}
 80030a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a2:	bf00      	nop
 80030a4:	08018ce1 	.word	0x08018ce1
 80030a8:	08018e0a 	.word	0x08018e0a
 80030ac:	08018c9a 	.word	0x08018c9a

080030b0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80030b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030b4:	460e      	mov	r6, r1
 80030b6:	4690      	mov	r8, r2
 80030b8:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80030ba:	4605      	mov	r5, r0
 80030bc:	b958      	cbnz	r0, 80030d6 <dhcp_create_msg+0x26>
 80030be:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <dhcp_create_msg+0x110>)
 80030c0:	4940      	ldr	r1, [pc, #256]	; (80031c4 <dhcp_create_msg+0x114>)
 80030c2:	4841      	ldr	r0, [pc, #260]	; (80031c8 <dhcp_create_msg+0x118>)
 80030c4:	f240 7269 	movw	r2, #1897	; 0x769
 80030c8:	f007 fe58 	bl	800ad7c <iprintf>
 80030cc:	462f      	mov	r7, r5
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 80030ce:	4638      	mov	r0, r7
 80030d0:	b003      	add	sp, #12
 80030d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80030d6:	b941      	cbnz	r1, 80030ea <dhcp_create_msg+0x3a>
 80030d8:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <dhcp_create_msg+0x110>)
 80030da:	493c      	ldr	r1, [pc, #240]	; (80031cc <dhcp_create_msg+0x11c>)
 80030dc:	483a      	ldr	r0, [pc, #232]	; (80031c8 <dhcp_create_msg+0x118>)
 80030de:	f240 726a 	movw	r2, #1898	; 0x76a
 80030e2:	f007 fe4b 	bl	800ad7c <iprintf>
 80030e6:	4637      	mov	r7, r6
 80030e8:	e7f1      	b.n	80030ce <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80030ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80030ee:	f44f 719a 	mov.w	r1, #308	; 0x134
 80030f2:	2036      	movs	r0, #54	; 0x36
 80030f4:	f002 ffae 	bl	8006054 <pbuf_alloc>
  if (p_out == NULL) {
 80030f8:	4607      	mov	r7, r0
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d0e7      	beq.n	80030ce <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80030fe:	8943      	ldrh	r3, [r0, #10]
 8003100:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8003104:	d206      	bcs.n	8003114 <dhcp_create_msg+0x64>
 8003106:	4b2e      	ldr	r3, [pc, #184]	; (80031c0 <dhcp_create_msg+0x110>)
 8003108:	4931      	ldr	r1, [pc, #196]	; (80031d0 <dhcp_create_msg+0x120>)
 800310a:	482f      	ldr	r0, [pc, #188]	; (80031c8 <dhcp_create_msg+0x118>)
 800310c:	f240 7271 	movw	r2, #1905	; 0x771
 8003110:	f007 fe34 	bl	800ad7c <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8003114:	f1b8 0f03 	cmp.w	r8, #3
 8003118:	d102      	bne.n	8003120 <dhcp_create_msg+0x70>
 800311a:	7973      	ldrb	r3, [r6, #5]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d107      	bne.n	8003130 <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 8003120:	79b3      	ldrb	r3, [r6, #6]
 8003122:	4c2c      	ldr	r4, [pc, #176]	; (80031d4 <dhcp_create_msg+0x124>)
 8003124:	b913      	cbnz	r3, 800312c <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 8003126:	f007 fe41 	bl	800adac <rand>
 800312a:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8003130:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8003132:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003136:	2100      	movs	r1, #0
 8003138:	4620      	mov	r0, r4
 800313a:	f007 fe17 	bl	800ad6c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 800313e:	2301      	movs	r3, #1
 8003140:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8003142:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8003144:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8003148:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800314a:	6830      	ldr	r0, [r6, #0]
 800314c:	f002 f9ed 	bl	800552a <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8003150:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8003154:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8003156:	d00a      	beq.n	800316e <dhcp_create_msg+0xbe>
 8003158:	f1a8 0307 	sub.w	r3, r8, #7
 800315c:	2b01      	cmp	r3, #1
 800315e:	d906      	bls.n	800316e <dhcp_create_msg+0xbe>
 8003160:	f1b8 0f03 	cmp.w	r8, #3
 8003164:	d105      	bne.n	8003172 <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8003166:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8003168:	3b04      	subs	r3, #4
 800316a:	2b01      	cmp	r3, #1
 800316c:	d801      	bhi.n	8003172 <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800316e:	686b      	ldr	r3, [r5, #4]
 8003170:	60e3      	str	r3, [r4, #12]
 8003172:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8003176:	f104 021c 	add.w	r2, r4, #28
 800317a:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 800317c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003180:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8003184:	42ab      	cmp	r3, r5
 8003186:	d1f9      	bne.n	800317c <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8003188:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800318c:	2363      	movs	r3, #99	; 0x63
 800318e:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8003192:	2253      	movs	r2, #83	; 0x53
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8003194:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8003198:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800319c:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 80031a0:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80031a4:	2235      	movs	r2, #53	; 0x35
 80031a6:	2301      	movs	r3, #1
 80031a8:	2000      	movs	r0, #0
 80031aa:	9101      	str	r1, [sp, #4]
 80031ac:	f7ff ff26 	bl	8002ffc <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80031b0:	9901      	ldr	r1, [sp, #4]
 80031b2:	4642      	mov	r2, r8
 80031b4:	f7ff ff40 	bl	8003038 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 80031b8:	f8a9 0000 	strh.w	r0, [r9]
 80031bc:	e787      	b.n	80030ce <dhcp_create_msg+0x1e>
 80031be:	bf00      	nop
 80031c0:	08018ce1 	.word	0x08018ce1
 80031c4:	08018e44 	.word	0x08018e44
 80031c8:	08018c9a 	.word	0x08018c9a
 80031cc:	08018e63 	.word	0x08018e63
 80031d0:	08018e81 	.word	0x08018e81
 80031d4:	200000d4 	.word	0x200000d4

080031d8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80031d8:	4603      	mov	r3, r0
 80031da:	b430      	push	{r4, r5}
  options[options_out_len++] = DHCP_OPTION_END;
 80031dc:	1c5c      	adds	r4, r3, #1
 80031de:	25ff      	movs	r5, #255	; 0xff
{
 80031e0:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 80031e2:	b2a2      	uxth	r2, r4
 80031e4:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80031e6:	fa11 f184 	uxtah	r1, r1, r4
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80031ea:	2500      	movs	r5, #0
  options[options_out_len++] = DHCP_OPTION_END;
 80031ec:	4614      	mov	r4, r2
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80031ee:	2c43      	cmp	r4, #67	; 0x43
 80031f0:	d90a      	bls.n	8003208 <dhcp_option_trailer+0x30>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80031f2:	2a44      	cmp	r2, #68	; 0x44
 80031f4:	f1c3 0143 	rsb	r1, r3, #67	; 0x43
 80031f8:	bf88      	it	hi
 80031fa:	2100      	movhi	r1, #0
 80031fc:	33f1      	adds	r3, #241	; 0xf1
 80031fe:	4419      	add	r1, r3
}
 8003200:	bc30      	pop	{r4, r5}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8003202:	b289      	uxth	r1, r1
 8003204:	f002 bfa2 	b.w	800614c <pbuf_realloc>
    options[options_out_len++] = 0;
 8003208:	3401      	adds	r4, #1
 800320a:	f801 5b01 	strb.w	r5, [r1], #1
 800320e:	b2a4      	uxth	r4, r4
 8003210:	e7ed      	b.n	80031ee <dhcp_option_trailer+0x16>
	...

08003214 <dhcp_reboot>:
{
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003218:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800321a:	b086      	sub	sp, #24
 800321c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800321e:	2103      	movs	r1, #3
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff fec7 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8003226:	f10d 0316 	add.w	r3, sp, #22
 800322a:	2203      	movs	r2, #3
 800322c:	4621      	mov	r1, r4
 800322e:	4630      	mov	r0, r6
 8003230:	f7ff ff3e 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 8003234:	4605      	mov	r5, r0
 8003236:	2800      	cmp	r0, #0
 8003238:	d067      	beq.n	800330a <dhcp_reboot+0xf6>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800323a:	6841      	ldr	r1, [r0, #4]
 800323c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003240:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003318 <dhcp_reboot+0x104>
 8003244:	31f0      	adds	r1, #240	; 0xf0
 8003246:	2302      	movs	r3, #2
 8003248:	2239      	movs	r2, #57	; 0x39
 800324a:	9103      	str	r1, [sp, #12]
 800324c:	f7ff fed6 	bl	8002ffc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8003250:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003252:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8003256:	f44f 7210 	mov.w	r2, #576	; 0x240
 800325a:	f7ff feb3 	bl	8002fc4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800325e:	2304      	movs	r3, #4
 8003260:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8003262:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8003266:	2232      	movs	r2, #50	; 0x32
 8003268:	f7ff fec8 	bl	8002ffc <dhcp_option>
 800326c:	4607      	mov	r7, r0
 800326e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003272:	69e0      	ldr	r0, [r4, #28]
 8003274:	f002 f959 	bl	800552a <lwip_htonl>
 8003278:	9903      	ldr	r1, [sp, #12]
 800327a:	4602      	mov	r2, r0
 800327c:	4638      	mov	r0, r7
 800327e:	f7ff fef3 	bl	8003068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003282:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003284:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003288:	2303      	movs	r3, #3
 800328a:	2237      	movs	r2, #55	; 0x37
 800328c:	f7ff feb6 	bl	8002ffc <dhcp_option>
 8003290:	9903      	ldr	r1, [sp, #12]
 8003292:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003296:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003298:	f818 2b01 	ldrb.w	r2, [r8], #1
 800329c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80032a0:	9103      	str	r1, [sp, #12]
 80032a2:	f7ff fec9 	bl	8003038 <dhcp_option_byte>
 80032a6:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80032a8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80032ac:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80032ae:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80032b2:	d1f1      	bne.n	8003298 <dhcp_reboot+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80032b4:	462a      	mov	r2, r5
 80032b6:	f7ff ff8f 	bl	80031d8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80032ba:	4815      	ldr	r0, [pc, #84]	; (8003310 <dhcp_reboot+0xfc>)
 80032bc:	9600      	str	r6, [sp, #0]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <dhcp_reboot+0x100>)
 80032c0:	6840      	ldr	r0, [r0, #4]
 80032c2:	2343      	movs	r3, #67	; 0x43
 80032c4:	4629      	mov	r1, r5
 80032c6:	f006 fd41 	bl	8009d4c <udp_sendto_if>
 80032ca:	4606      	mov	r6, r0
    pbuf_free(p_out);
 80032cc:	4628      	mov	r0, r5
 80032ce:	f002 fe5d 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 80032d2:	79a3      	ldrb	r3, [r4, #6]
 80032d4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80032d6:	bf1c      	itt	ne
 80032d8:	3301      	addne	r3, #1
 80032da:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80032dc:	79a3      	ldrb	r3, [r4, #6]
 80032de:	2b09      	cmp	r3, #9
 80032e0:	bf9f      	itttt	ls
 80032e2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80032e6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 80032ea:	00db      	lslls	r3, r3, #3
 80032ec:	b29b      	uxthls	r3, r3
 80032ee:	bf88      	it	hi
 80032f0:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80032f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 80032f8:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80032fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80032fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003302:	8123      	strh	r3, [r4, #8]
}
 8003304:	b006      	add	sp, #24
 8003306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800330a:	f04f 36ff 	mov.w	r6, #4294967295
 800330e:	e7e0      	b.n	80032d2 <dhcp_reboot+0xbe>
 8003310:	200000d4 	.word	0x200000d4
 8003314:	0800be48 	.word	0x0800be48
 8003318:	0800be44 	.word	0x0800be44

0800331c <dhcp_select>:
{
 800331c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8003320:	4607      	mov	r7, r0
{
 8003322:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8003324:	b960      	cbnz	r0, 8003340 <dhcp_select+0x24>
 8003326:	4b52      	ldr	r3, [pc, #328]	; (8003470 <dhcp_select+0x154>)
 8003328:	4952      	ldr	r1, [pc, #328]	; (8003474 <dhcp_select+0x158>)
 800332a:	4853      	ldr	r0, [pc, #332]	; (8003478 <dhcp_select+0x15c>)
 800332c:	f240 1277 	movw	r2, #375	; 0x177
 8003330:	f007 fd24 	bl	800ad7c <iprintf>
 8003334:	f06f 050f 	mvn.w	r5, #15
}
 8003338:	4628      	mov	r0, r5
 800333a:	b005      	add	sp, #20
 800333c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 8003340:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8003342:	b94c      	cbnz	r4, 8003358 <dhcp_select+0x3c>
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <dhcp_select+0x154>)
 8003346:	494d      	ldr	r1, [pc, #308]	; (800347c <dhcp_select+0x160>)
 8003348:	484b      	ldr	r0, [pc, #300]	; (8003478 <dhcp_select+0x15c>)
 800334a:	f240 1279 	movw	r2, #377	; 0x179
 800334e:	f007 fd15 	bl	800ad7c <iprintf>
 8003352:	f06f 0505 	mvn.w	r5, #5
 8003356:	e7ef      	b.n	8003338 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8003358:	2101      	movs	r1, #1
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff fe2a 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8003360:	f10d 030e 	add.w	r3, sp, #14
 8003364:	2203      	movs	r2, #3
 8003366:	4621      	mov	r1, r4
 8003368:	4638      	mov	r0, r7
 800336a:	f7ff fea1 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 800336e:	4606      	mov	r6, r0
 8003370:	2800      	cmp	r0, #0
 8003372:	d07a      	beq.n	800346a <dhcp_select+0x14e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003374:	6845      	ldr	r5, [r0, #4]
 8003376:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800337a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800348c <dhcp_select+0x170>
 800337e:	35f0      	adds	r5, #240	; 0xf0
 8003380:	2302      	movs	r3, #2
 8003382:	2239      	movs	r2, #57	; 0x39
 8003384:	4629      	mov	r1, r5
 8003386:	f7ff fe39 	bl	8002ffc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800338a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800338c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003390:	4629      	mov	r1, r5
 8003392:	f7ff fe17 	bl	8002fc4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8003396:	2304      	movs	r3, #4
 8003398:	2232      	movs	r2, #50	; 0x32
 800339a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800339c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80033a0:	f7ff fe2c 	bl	8002ffc <dhcp_option>
 80033a4:	4680      	mov	r8, r0
 80033a6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80033aa:	69e0      	ldr	r0, [r4, #28]
 80033ac:	f002 f8bd 	bl	800552a <lwip_htonl>
 80033b0:	4629      	mov	r1, r5
 80033b2:	4602      	mov	r2, r0
 80033b4:	4640      	mov	r0, r8
 80033b6:	f7ff fe57 	bl	8003068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80033ba:	2304      	movs	r3, #4
 80033bc:	2236      	movs	r2, #54	; 0x36
 80033be:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80033c0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80033c4:	f7ff fe1a 	bl	8002ffc <dhcp_option>
 80033c8:	4680      	mov	r8, r0
 80033ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80033ce:	69a0      	ldr	r0, [r4, #24]
 80033d0:	f002 f8ab 	bl	800552a <lwip_htonl>
 80033d4:	4629      	mov	r1, r5
 80033d6:	4602      	mov	r2, r0
 80033d8:	4640      	mov	r0, r8
 80033da:	f7ff fe45 	bl	8003068 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80033de:	2303      	movs	r3, #3
 80033e0:	2237      	movs	r2, #55	; 0x37
 80033e2:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80033e4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80033e8:	f7ff fe08 	bl	8002ffc <dhcp_option>
 80033ec:	f04f 0803 	mov.w	r8, #3
 80033f0:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80033f4:	f819 2b01 	ldrb.w	r2, [r9], #1
 80033f8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7ff fe1b 	bl	8003038 <dhcp_option_byte>
 8003402:	f108 38ff 	add.w	r8, r8, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003406:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800340a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800340e:	d1f1      	bne.n	80033f4 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003410:	4629      	mov	r1, r5
 8003412:	4632      	mov	r2, r6
 8003414:	f7ff fee0 	bl	80031d8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <dhcp_select+0x164>)
 800341a:	481a      	ldr	r0, [pc, #104]	; (8003484 <dhcp_select+0x168>)
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <dhcp_select+0x16c>)
 800341e:	e9cd 7300 	strd	r7, r3, [sp]
 8003422:	4631      	mov	r1, r6
 8003424:	6840      	ldr	r0, [r0, #4]
 8003426:	2343      	movs	r3, #67	; 0x43
 8003428:	f006 fbf8 	bl	8009c1c <udp_sendto_if_src>
 800342c:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800342e:	4630      	mov	r0, r6
 8003430:	f002 fdac 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 8003434:	79a3      	ldrb	r3, [r4, #6]
 8003436:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003438:	bf1c      	itt	ne
 800343a:	3301      	addne	r3, #1
 800343c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800343e:	79a2      	ldrb	r2, [r4, #6]
 8003440:	2a05      	cmp	r2, #5
 8003442:	bf9f      	itttt	ls
 8003444:	2301      	movls	r3, #1
 8003446:	4093      	lslls	r3, r2
 8003448:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800344c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8003450:	bf9a      	itte	ls
 8003452:	00db      	lslls	r3, r3, #3
 8003454:	b29b      	uxthls	r3, r3
 8003456:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800345a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800345e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003462:	fbb3 f3f2 	udiv	r3, r3, r2
 8003466:	8123      	strh	r3, [r4, #8]
  return result;
 8003468:	e766      	b.n	8003338 <dhcp_select+0x1c>
    result = ERR_MEM;
 800346a:	f04f 35ff 	mov.w	r5, #4294967295
 800346e:	e7e1      	b.n	8003434 <dhcp_select+0x118>
 8003470:	08018ce1 	.word	0x08018ce1
 8003474:	08018ec1 	.word	0x08018ec1
 8003478:	08018c9a 	.word	0x08018c9a
 800347c:	08018edc 	.word	0x08018edc
 8003480:	0800be4c 	.word	0x0800be4c
 8003484:	200000d4 	.word	0x200000d4
 8003488:	0800be48 	.word	0x0800be48
 800348c:	0800be44 	.word	0x0800be44

08003490 <dhcp_discover>:
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003494:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8003496:	2300      	movs	r3, #0
{
 8003498:	b086      	sub	sp, #24
 800349a:	4606      	mov	r6, r0
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800349c:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800349e:	2106      	movs	r1, #6
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7ff fd87 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80034a6:	f10d 0316 	add.w	r3, sp, #22
 80034aa:	2201      	movs	r2, #1
 80034ac:	4621      	mov	r1, r4
 80034ae:	4630      	mov	r0, r6
 80034b0:	f7ff fdfe 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 80034b4:	4605      	mov	r5, r0
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d039      	beq.n	800352e <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80034ba:	6841      	ldr	r1, [r0, #4]
 80034bc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80034c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8003578 <dhcp_discover+0xe8>
 80034c4:	31f0      	adds	r1, #240	; 0xf0
 80034c6:	2302      	movs	r3, #2
 80034c8:	2239      	movs	r2, #57	; 0x39
 80034ca:	9103      	str	r1, [sp, #12]
 80034cc:	f7ff fd96 	bl	8002ffc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80034d0:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80034d2:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80034d4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80034d8:	f7ff fd74 	bl	8002fc4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80034dc:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80034de:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80034e2:	2303      	movs	r3, #3
 80034e4:	2237      	movs	r2, #55	; 0x37
 80034e6:	f7ff fd89 	bl	8002ffc <dhcp_option>
 80034ea:	9903      	ldr	r1, [sp, #12]
 80034ec:	f8ad 0016 	strh.w	r0, [sp, #22]
 80034f0:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80034f2:	f818 2b01 	ldrb.w	r2, [r8], #1
 80034f6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80034fa:	9103      	str	r1, [sp, #12]
 80034fc:	f7ff fd9c 	bl	8003038 <dhcp_option_byte>
 8003500:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003502:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8003506:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003508:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800350c:	d1f1      	bne.n	80034f2 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800350e:	462a      	mov	r2, r5
 8003510:	f7ff fe62 	bl	80031d8 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8003514:	4b15      	ldr	r3, [pc, #84]	; (800356c <dhcp_discover+0xdc>)
 8003516:	4816      	ldr	r0, [pc, #88]	; (8003570 <dhcp_discover+0xe0>)
 8003518:	4a16      	ldr	r2, [pc, #88]	; (8003574 <dhcp_discover+0xe4>)
 800351a:	e9cd 6300 	strd	r6, r3, [sp]
 800351e:	4629      	mov	r1, r5
 8003520:	6840      	ldr	r0, [r0, #4]
 8003522:	2343      	movs	r3, #67	; 0x43
 8003524:	f006 fb7a 	bl	8009c1c <udp_sendto_if_src>
    pbuf_free(p_out);
 8003528:	4628      	mov	r0, r5
 800352a:	f002 fd2f 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 800352e:	79a3      	ldrb	r3, [r4, #6]
 8003530:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003532:	bf1c      	itt	ne
 8003534:	3301      	addne	r3, #1
 8003536:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8003538:	79a2      	ldrb	r2, [r4, #6]
 800353a:	2a05      	cmp	r2, #5
 800353c:	bf9f      	itttt	ls
 800353e:	2301      	movls	r3, #1
 8003540:	4093      	lslls	r3, r2
 8003542:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8003546:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 800354a:	bf9a      	itte	ls
 800354c:	00db      	lslls	r3, r3, #3
 800354e:	b29b      	uxthls	r3, r3
 8003550:	f64e 2360 	movwhi	r3, #60000	; 0xea60
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8003554:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8003558:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800355a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800355e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003562:	8123      	strh	r3, [r4, #8]
}
 8003564:	b006      	add	sp, #24
 8003566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800356a:	bf00      	nop
 800356c:	0800be4c 	.word	0x0800be4c
 8003570:	200000d4 	.word	0x200000d4
 8003574:	0800be48 	.word	0x0800be48
 8003578:	0800be44 	.word	0x0800be44

0800357c <dhcp_check>:
{
 800357c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800357e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8003580:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8003582:	2108      	movs	r1, #8
 8003584:	4620      	mov	r0, r4
 8003586:	f7ff fd15 	bl	8002fb4 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800358a:	2200      	movs	r2, #0
 800358c:	f104 011c 	add.w	r1, r4, #28
 8003590:	4628      	mov	r0, r5
 8003592:	f001 f821 	bl	80045d8 <etharp_query>
  if (dhcp->tries < 255) {
 8003596:	79a3      	ldrb	r3, [r4, #6]
 8003598:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800359a:	bf1c      	itt	ne
 800359c:	3301      	addne	r3, #1
 800359e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80035a0:	2301      	movs	r3, #1
 80035a2:	8123      	strh	r3, [r4, #8]
}
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080035a8 <dhcp_bind>:
{
 80035a8:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80035aa:	4605      	mov	r5, r0
 80035ac:	b940      	cbnz	r0, 80035c0 <dhcp_bind+0x18>
 80035ae:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <dhcp_bind+0xfc>)
 80035b0:	493d      	ldr	r1, [pc, #244]	; (80036a8 <dhcp_bind+0x100>)
 80035b2:	f240 4215 	movw	r2, #1045	; 0x415
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80035b6:	483d      	ldr	r0, [pc, #244]	; (80036ac <dhcp_bind+0x104>)
 80035b8:	f007 fbe0 	bl	800ad7c <iprintf>
}
 80035bc:	b002      	add	sp, #8
 80035be:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 80035c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80035c2:	b920      	cbnz	r0, 80035ce <dhcp_bind+0x26>
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <dhcp_bind+0xfc>)
 80035c6:	493a      	ldr	r1, [pc, #232]	; (80036b0 <dhcp_bind+0x108>)
 80035c8:	f240 4217 	movw	r2, #1047	; 0x417
 80035cc:	e7f3      	b.n	80035b6 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80035d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	d00c      	beq.n	80035f2 <dhcp_bind+0x4a>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80035d8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80035da:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 80035de:	bf2e      	itee	cs
 80035e0:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80035e4:	223c      	movcc	r2, #60	; 0x3c
 80035e6:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 80035ea:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d042      	beq.n	8003676 <dhcp_bind+0xce>
    dhcp->t0_timeout = (u16_t)timeout;
 80035f0:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80035f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035f4:	1c59      	adds	r1, r3, #1
 80035f6:	d00e      	beq.n	8003616 <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80035f8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80035fa:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 80035fe:	bf2e      	itee	cs
 8003600:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8003604:	223c      	movcc	r2, #60	; 0x3c
 8003606:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 800360a:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d035      	beq.n	800367c <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 8003610:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8003612:	8943      	ldrh	r3, [r0, #10]
 8003614:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8003616:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	d00d      	beq.n	8003638 <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800361c:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800361e:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
      timeout = 0xffff;
 8003622:	bf2e      	itee	cs
 8003624:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8003628:	223c      	movcc	r2, #60	; 0x3c
 800362a:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 800362e:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 8003630:	b33b      	cbz	r3, 8003682 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 8003632:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8003634:	8983      	ldrh	r3, [r0, #12]
 8003636:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8003638:	8983      	ldrh	r3, [r0, #12]
 800363a:	8942      	ldrh	r2, [r0, #10]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <dhcp_bind+0x9e>
 8003640:	b10b      	cbz	r3, 8003646 <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 8003646:	79c3      	ldrb	r3, [r0, #7]
 8003648:	b1f3      	cbz	r3, 8003688 <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800364a:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800364c:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800364e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003650:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8003652:	b92b      	cbnz	r3, 8003660 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8003654:	69c3      	ldr	r3, [r0, #28]
 8003656:	9a00      	ldr	r2, [sp, #0]
 8003658:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8003660:	210a      	movs	r1, #10
 8003662:	f7ff fca7 	bl	8002fb4 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8003666:	ab01      	add	r3, sp, #4
 8003668:	f100 011c 	add.w	r1, r0, #28
 800366c:	466a      	mov	r2, sp
 800366e:	4628      	mov	r0, r5
 8003670:	f002 face 	bl	8005c10 <netif_set_addr>
 8003674:	e7a2      	b.n	80035bc <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	8283      	strh	r3, [r0, #20]
 800367a:	e7ba      	b.n	80035f2 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 800367c:	2301      	movs	r3, #1
 800367e:	8143      	strh	r3, [r0, #10]
 8003680:	e7c7      	b.n	8003612 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	8183      	strh	r3, [r0, #12]
 8003686:	e7d5      	b.n	8003634 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 8003688:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800368c:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 800368e:	2a00      	cmp	r2, #0
 8003690:	db01      	blt.n	8003696 <dhcp_bind+0xee>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8003692:	23ff      	movs	r3, #255	; 0xff
 8003694:	e7da      	b.n	800364c <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 8003696:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8003698:	bf8c      	ite	hi
 800369a:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800369e:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80036a2:	e7d3      	b.n	800364c <dhcp_bind+0xa4>
 80036a4:	08018ce1 	.word	0x08018ce1
 80036a8:	08018ef6 	.word	0x08018ef6
 80036ac:	08018c9a 	.word	0x08018c9a
 80036b0:	08018f0f 	.word	0x08018f0f

080036b4 <dhcp_inc_pcb_refcount>:
{
 80036b4:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 80036b6:	4c14      	ldr	r4, [pc, #80]	; (8003708 <dhcp_inc_pcb_refcount+0x54>)
 80036b8:	7a23      	ldrb	r3, [r4, #8]
 80036ba:	b9eb      	cbnz	r3, 80036f8 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80036bc:	6863      	ldr	r3, [r4, #4]
 80036be:	b12b      	cbz	r3, 80036cc <dhcp_inc_pcb_refcount+0x18>
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <dhcp_inc_pcb_refcount+0x58>)
 80036c2:	4913      	ldr	r1, [pc, #76]	; (8003710 <dhcp_inc_pcb_refcount+0x5c>)
 80036c4:	4813      	ldr	r0, [pc, #76]	; (8003714 <dhcp_inc_pcb_refcount+0x60>)
 80036c6:	22e5      	movs	r2, #229	; 0xe5
 80036c8:	f007 fb58 	bl	800ad7c <iprintf>
    dhcp_pcb = udp_new();
 80036cc:	f006 fbf2 	bl	8009eb4 <udp_new>
 80036d0:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 80036d2:	b1b0      	cbz	r0, 8003702 <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80036d4:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80036d6:	4910      	ldr	r1, [pc, #64]	; (8003718 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80036de:	2244      	movs	r2, #68	; 0x44
 80036e0:	f006 fa34 	bl	8009b4c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80036e4:	490c      	ldr	r1, [pc, #48]	; (8003718 <dhcp_inc_pcb_refcount+0x64>)
 80036e6:	6860      	ldr	r0, [r4, #4]
 80036e8:	2243      	movs	r2, #67	; 0x43
 80036ea:	f006 fb6f 	bl	8009dcc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80036ee:	490b      	ldr	r1, [pc, #44]	; (800371c <dhcp_inc_pcb_refcount+0x68>)
 80036f0:	6860      	ldr	r0, [r4, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f006 fba6 	bl	8009e44 <udp_recv>
  dhcp_pcb_refcount++;
 80036f8:	7a23      	ldrb	r3, [r4, #8]
 80036fa:	3301      	adds	r3, #1
 80036fc:	7223      	strb	r3, [r4, #8]
  return ERR_OK;
 80036fe:	2000      	movs	r0, #0
}
 8003700:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 8003702:	f04f 30ff 	mov.w	r0, #4294967295
 8003706:	e7fb      	b.n	8003700 <dhcp_inc_pcb_refcount+0x4c>
 8003708:	200000d4 	.word	0x200000d4
 800370c:	08018ce1 	.word	0x08018ce1
 8003710:	08018f27 	.word	0x08018f27
 8003714:	08018c9a 	.word	0x08018c9a
 8003718:	0800be4c 	.word	0x0800be4c
 800371c:	080037c1 	.word	0x080037c1

08003720 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8003720:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8003722:	4d17      	ldr	r5, [pc, #92]	; (8003780 <dhcp_handle_ack.isra.0+0x60>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8003724:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8003726:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800372a:	78eb      	ldrb	r3, [r5, #3]
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800372c:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800372e:	b113      	cbz	r3, 8003736 <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8003730:	4b14      	ldr	r3, [pc, #80]	; (8003784 <dhcp_handle_ack.isra.0+0x64>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8003736:	792b      	ldrb	r3, [r5, #4]
 8003738:	b1d3      	cbz	r3, 8003770 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <dhcp_handle_ack.isra.0+0x64>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8003740:	796b      	ldrb	r3, [r5, #5]
 8003742:	b1c3      	cbz	r3, 8003776 <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <dhcp_handle_ack.isra.0+0x64>)
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800374a:	690b      	ldr	r3, [r1, #16]
 800374c:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800374e:	79ab      	ldrb	r3, [r5, #6]
 8003750:	b12b      	cbz	r3, 800375e <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8003752:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <dhcp_handle_ack.isra.0+0x64>)
 8003754:	6998      	ldr	r0, [r3, #24]
 8003756:	f001 fee8 	bl	800552a <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800375a:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800375c:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800375e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8003760:	79eb      	ldrb	r3, [r5, #7]
 8003762:	b123      	cbz	r3, 800376e <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <dhcp_handle_ack.isra.0+0x64>)
 8003766:	69d8      	ldr	r0, [r3, #28]
 8003768:	f001 fedf 	bl	800552a <lwip_htonl>
 800376c:	6260      	str	r0, [r4, #36]	; 0x24
}
 800376e:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8003770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	e7e3      	b.n	800373e <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8003776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003778:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	e7e3      	b.n	8003748 <dhcp_handle_ack.isra.0+0x28>
 8003780:	200080cc 	.word	0x200080cc
 8003784:	200080d4 	.word	0x200080d4

08003788 <dhcp_dec_pcb_refcount>:
{
 8003788:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800378a:	4c09      	ldr	r4, [pc, #36]	; (80037b0 <dhcp_dec_pcb_refcount+0x28>)
 800378c:	7a23      	ldrb	r3, [r4, #8]
 800378e:	b92b      	cbnz	r3, 800379c <dhcp_dec_pcb_refcount+0x14>
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <dhcp_dec_pcb_refcount+0x2c>)
 8003792:	4909      	ldr	r1, [pc, #36]	; (80037b8 <dhcp_dec_pcb_refcount+0x30>)
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <dhcp_dec_pcb_refcount+0x34>)
 8003796:	22ff      	movs	r2, #255	; 0xff
 8003798:	f007 faf0 	bl	800ad7c <iprintf>
  dhcp_pcb_refcount--;
 800379c:	7a25      	ldrb	r5, [r4, #8]
 800379e:	3d01      	subs	r5, #1
 80037a0:	b2ed      	uxtb	r5, r5
 80037a2:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 80037a4:	b91d      	cbnz	r5, 80037ae <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 80037a6:	6860      	ldr	r0, [r4, #4]
 80037a8:	f006 fb5e 	bl	8009e68 <udp_remove>
    dhcp_pcb = NULL;
 80037ac:	6065      	str	r5, [r4, #4]
}
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	200000d4 	.word	0x200000d4
 80037b4:	08018ce1 	.word	0x08018ce1
 80037b8:	08018f4c 	.word	0x08018f4c
 80037bc:	08018c9a 	.word	0x08018c9a

080037c0 <dhcp_recv>:
{
 80037c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80037c4:	4bb2      	ldr	r3, [pc, #712]	; (8003a90 <dhcp_recv+0x2d0>)
 80037c6:	685d      	ldr	r5, [r3, #4]
{
 80037c8:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80037ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80037cc:	9301      	str	r3, [sp, #4]
{
 80037ce:	4693      	mov	fp, r2
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d03c      	beq.n	800384e <dhcp_recv+0x8e>
 80037d4:	791b      	ldrb	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d039      	beq.n	800384e <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80037da:	8953      	ldrh	r3, [r2, #10]
 80037dc:	2b2b      	cmp	r3, #43	; 0x2b
 80037de:	d936      	bls.n	800384e <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80037e0:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80037e2:	7813      	ldrb	r3, [r2, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d132      	bne.n	800384e <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80037e8:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
 80037ec:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80037f0:	f102 011c 	add.w	r1, r2, #28
 80037f4:	2300      	movs	r3, #0
 80037f6:	b2de      	uxtb	r6, r3
 80037f8:	42b4      	cmp	r4, r6
 80037fa:	d901      	bls.n	8003800 <dhcp_recv+0x40>
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d11e      	bne.n	800383e <dhcp_recv+0x7e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8003800:	6850      	ldr	r0, [r2, #4]
 8003802:	f001 fe92 	bl	800552a <lwip_htonl>
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4298      	cmp	r0, r3
 800380c:	d11f      	bne.n	800384e <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 800380e:	4ba1      	ldr	r3, [pc, #644]	; (8003a94 <dhcp_recv+0x2d4>)
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8003814:	f8bb 100a 	ldrh.w	r1, [fp, #10]
  dhcp_clear_all_options(dhcp);
 8003818:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 800381a:	292b      	cmp	r1, #43	; 0x2b
 800381c:	d917      	bls.n	800384e <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 800381e:	f8bb a008 	ldrh.w	sl, [fp, #8]
  int parse_sname_as_options = 0;
 8003822:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 8003824:	f04f 09f0 	mov.w	r9, #240	; 0xf0
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8003828:	9302      	str	r3, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 800382a:	46d8      	mov	r8, fp
  while ((q != NULL) && (options_idx >= q->len)) {
 800382c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8003830:	454b      	cmp	r3, r9
 8003832:	d912      	bls.n	800385a <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 8003834:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003838:	9305      	str	r3, [sp, #20]
 800383a:	464c      	mov	r4, r9
 800383c:	e0a9      	b.n	8003992 <dhcp_recv+0x1d2>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800383e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8003842:	f811 6b01 	ldrb.w	r6, [r1], #1
 8003846:	42b7      	cmp	r7, r6
 8003848:	f103 0301 	add.w	r3, r3, #1
 800384c:	d0d3      	beq.n	80037f6 <dhcp_recv+0x36>
  pbuf_free(p);
 800384e:	4658      	mov	r0, fp
 8003850:	f002 fb9c 	bl	8005f8c <pbuf_free>
}
 8003854:	b009      	add	sp, #36	; 0x24
 8003856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = q->next;
 800385a:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx = (u16_t)(options_idx - q->len);
 800385e:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8003862:	ebaa 0a03 	sub.w	sl, sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 8003866:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800386a:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 800386e:	f1b8 0f00 	cmp.w	r8, #0
 8003872:	d1db      	bne.n	800382c <dhcp_recv+0x6c>
 8003874:	e7eb      	b.n	800384e <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 8003876:	1ca3      	adds	r3, r4, #2
 8003878:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 800387a:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 800387c:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 800387e:	d3e6      	bcc.n	800384e <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 8003880:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8003884:	1c60      	adds	r0, r4, #1
 8003886:	4298      	cmp	r0, r3
 8003888:	da16      	bge.n	80038b8 <dhcp_recv+0xf8>
      len = options[offset + 1];
 800388a:	9b05      	ldr	r3, [sp, #20]
 800388c:	4423      	add	r3, r4
 800388e:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8003890:	2a3b      	cmp	r2, #59	; 0x3b
 8003892:	d855      	bhi.n	8003940 <dhcp_recv+0x180>
 8003894:	2a32      	cmp	r2, #50	; 0x32
 8003896:	f200 818a 	bhi.w	8003bae <dhcp_recv+0x3ee>
 800389a:	2a01      	cmp	r2, #1
 800389c:	d014      	beq.n	80038c8 <dhcp_recv+0x108>
 800389e:	2a03      	cmp	r2, #3
 80038a0:	d14e      	bne.n	8003940 <dhcp_recv+0x180>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80038a2:	2b03      	cmp	r3, #3
 80038a4:	f200 8171 	bhi.w	8003b8a <dhcp_recv+0x3ca>
 80038a8:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <dhcp_recv+0x2d8>)
 80038aa:	497c      	ldr	r1, [pc, #496]	; (8003a9c <dhcp_recv+0x2dc>)
 80038ac:	f240 6233 	movw	r2, #1587	; 0x633
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80038b0:	487b      	ldr	r0, [pc, #492]	; (8003aa0 <dhcp_recv+0x2e0>)
 80038b2:	f007 fa63 	bl	800ad7c <iprintf>
 80038b6:	e7ca      	b.n	800384e <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80038b8:	f8d8 3000 	ldr.w	r3, [r8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80ff 	beq.w	8003ac0 <dhcp_recv+0x300>
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	e7e3      	b.n	8003890 <dhcp_recv+0xd0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	f000 815b 	beq.w	8003b84 <dhcp_recv+0x3c4>
 80038ce:	4b72      	ldr	r3, [pc, #456]	; (8003a98 <dhcp_recv+0x2d8>)
 80038d0:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80038d4:	4973      	ldr	r1, [pc, #460]	; (8003aa4 <dhcp_recv+0x2e4>)
 80038d6:	e7eb      	b.n	80038b0 <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80038d8:	2b04      	cmp	r3, #4
 80038da:	f000 8159 	beq.w	8003b90 <dhcp_recv+0x3d0>
 80038de:	4b6e      	ldr	r3, [pc, #440]	; (8003a98 <dhcp_recv+0x2d8>)
 80038e0:	f240 6241 	movw	r2, #1601	; 0x641
 80038e4:	e7f6      	b.n	80038d4 <dhcp_recv+0x114>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d004      	beq.n	80038f4 <dhcp_recv+0x134>
 80038ea:	4b6b      	ldr	r3, [pc, #428]	; (8003a98 <dhcp_recv+0x2d8>)
 80038ec:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80038f0:	496d      	ldr	r1, [pc, #436]	; (8003aa8 <dhcp_recv+0x2e8>)
 80038f2:	e7dd      	b.n	80038b0 <dhcp_recv+0xf0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80038f4:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 80038f8:	f000 814d 	beq.w	8003b96 <dhcp_recv+0x3d6>
 80038fc:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <dhcp_recv+0x2d8>)
 80038fe:	496b      	ldr	r1, [pc, #428]	; (8003aac <dhcp_recv+0x2ec>)
 8003900:	f240 6251 	movw	r2, #1617	; 0x651
 8003904:	e7d4      	b.n	80038b0 <dhcp_recv+0xf0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8003906:	2b01      	cmp	r3, #1
 8003908:	f000 814b 	beq.w	8003ba2 <dhcp_recv+0x3e2>
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <dhcp_recv+0x2d8>)
 800390e:	f240 6255 	movw	r2, #1621	; 0x655
 8003912:	e7ed      	b.n	80038f0 <dhcp_recv+0x130>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003914:	2b04      	cmp	r3, #4
 8003916:	f000 8141 	beq.w	8003b9c <dhcp_recv+0x3dc>
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <dhcp_recv+0x2d8>)
 800391c:	f240 6259 	movw	r2, #1625	; 0x659
 8003920:	e7d8      	b.n	80038d4 <dhcp_recv+0x114>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003922:	2b04      	cmp	r3, #4
 8003924:	f000 813d 	beq.w	8003ba2 <dhcp_recv+0x3e2>
 8003928:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <dhcp_recv+0x2d8>)
 800392a:	f240 625d 	movw	r2, #1629	; 0x65d
 800392e:	e7d1      	b.n	80038d4 <dhcp_recv+0x114>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8003930:	2b04      	cmp	r3, #4
 8003932:	f000 8139 	beq.w	8003ba8 <dhcp_recv+0x3e8>
 8003936:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <dhcp_recv+0x2d8>)
 8003938:	f240 6261 	movw	r2, #1633	; 0x661
 800393c:	e7ca      	b.n	80038d4 <dhcp_recv+0x114>
    switch (op) {
 800393e:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 8003940:	2a00      	cmp	r2, #0
 8003942:	f040 80cc 	bne.w	8003ade <dhcp_recv+0x31e>
      offset++;
 8003946:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 8003948:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800394c:	42a3      	cmp	r3, r4
 800394e:	d820      	bhi.n	8003992 <dhcp_recv+0x1d2>
      offset = (u16_t)(offset - q->len);
 8003950:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8003952:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8003956:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8003958:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 800395c:	4554      	cmp	r4, sl
 800395e:	f4bf af76 	bcs.w	800384e <dhcp_recv+0x8e>
        q = q->next;
 8003962:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8003966:	f1b8 0f00 	cmp.w	r8, #0
 800396a:	d10f      	bne.n	800398c <dhcp_recv+0x1cc>
 800396c:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <dhcp_recv+0x2d8>)
 800396e:	4950      	ldr	r1, [pc, #320]	; (8003ab0 <dhcp_recv+0x2f0>)
 8003970:	f240 629d 	movw	r2, #1693	; 0x69d
 8003974:	e79c      	b.n	80038b0 <dhcp_recv+0xf0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8003976:	2e01      	cmp	r6, #1
 8003978:	d004      	beq.n	8003984 <dhcp_recv+0x1c4>
 800397a:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <dhcp_recv+0x2d8>)
 800397c:	494d      	ldr	r1, [pc, #308]	; (8003ab4 <dhcp_recv+0x2f4>)
 800397e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8003982:	e795      	b.n	80038b0 <dhcp_recv+0xf0>
            value = ((u8_t *)&value)[0];
 8003984:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	e0d9      	b.n	8003b40 <dhcp_recv+0x380>
        options = (u8_t *)q->payload;
 800398c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003990:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8003992:	4554      	cmp	r4, sl
 8003994:	d204      	bcs.n	80039a0 <dhcp_recv+0x1e0>
 8003996:	9b05      	ldr	r3, [sp, #20]
 8003998:	5d1a      	ldrb	r2, [r3, r4]
 800399a:	2aff      	cmp	r2, #255	; 0xff
 800399c:	f47f af6b 	bne.w	8003876 <dhcp_recv+0xb6>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80039a0:	9b02      	ldr	r3, [sp, #8]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b9db      	cbnz	r3, 80039de <dhcp_recv+0x21e>
  } else if (parse_sname_as_options) {
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	bb13      	cbnz	r3, 80039f0 <dhcp_recv+0x230>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80039aa:	9b02      	ldr	r3, [sp, #8]
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f43f af4d 	beq.w	800384e <dhcp_recv+0x8e>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80039b4:	4a40      	ldr	r2, [pc, #256]	; (8003ab8 <dhcp_recv+0x2f8>)
  msg_in = (struct dhcp_msg *)p->payload;
 80039b6:	f8db 1004 	ldr.w	r1, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80039ba:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d132      	bne.n	8003a26 <dhcp_recv+0x266>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80039c0:	9b01      	ldr	r3, [sp, #4]
 80039c2:	795b      	ldrb	r3, [r3, #5]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d123      	bne.n	8003a10 <dhcp_recv+0x250>
      dhcp_handle_ack(netif, msg_in);
 80039c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80039ca:	f7ff fea9 	bl	8003720 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80039ce:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80039d2:	071b      	lsls	r3, r3, #28
        dhcp_check(netif);
 80039d4:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80039d6:	d523      	bpl.n	8003a20 <dhcp_recv+0x260>
        dhcp_check(netif);
 80039d8:	f7ff fdd0 	bl	800357c <dhcp_check>
 80039dc:	e737      	b.n	800384e <dhcp_recv+0x8e>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <dhcp_recv+0x2f8>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80039e0:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80039e2:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80039e4:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 80039e6:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80039e8:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80039ea:	d00c      	beq.n	8003a06 <dhcp_recv+0x246>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d106      	bne.n	80039fe <dhcp_recv+0x23e>
    parse_sname_as_options = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80039f4:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80039f8:	f04f 092c 	mov.w	r9, #44	; 0x2c
 80039fc:	e715      	b.n	800382a <dhcp_recv+0x6a>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d1d1      	bne.n	80039a6 <dhcp_recv+0x1e6>
      parse_sname_as_options = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8003a06:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8003a0a:	f04f 096c 	mov.w	r9, #108	; 0x6c
 8003a0e:	e70c      	b.n	800382a <dhcp_recv+0x6a>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8003a10:	3b03      	subs	r3, #3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	f63f af1b 	bhi.w	800384e <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 8003a18:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a1a:	f7ff fe81 	bl	8003720 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8003a1e:	4628      	mov	r0, r5
 8003a20:	f7ff fdc2 	bl	80035a8 <dhcp_bind>
 8003a24:	e713      	b.n	800384e <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d115      	bne.n	8003a56 <dhcp_recv+0x296>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003a2a:	9b01      	ldr	r3, [sp, #4]
 8003a2c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8003a2e:	1eda      	subs	r2, r3, #3
 8003a30:	2a02      	cmp	r2, #2
 8003a32:	d902      	bls.n	8003a3a <dhcp_recv+0x27a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f47f af0a 	bne.w	800384e <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8003a3a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003a3c:	210c      	movs	r1, #12
 8003a3e:	f7ff fab9 	bl	8002fb4 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <dhcp_recv+0x2fc>)
 8003a44:	4628      	mov	r0, r5
 8003a46:	461a      	mov	r2, r3
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f002 f8e1 	bl	8005c10 <netif_set_addr>
  dhcp_discover(netif);
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f7ff fd1e 	bl	8003490 <dhcp_discover>
}
 8003a54:	e6fb      	b.n	800384e <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	f47f aef9 	bne.w	800384e <dhcp_recv+0x8e>
 8003a5c:	9b01      	ldr	r3, [sp, #4]
 8003a5e:	795b      	ldrb	r3, [r3, #5]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	f47f aef4 	bne.w	800384e <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8003a66:	9b02      	ldr	r3, [sp, #8]
 8003a68:	789b      	ldrb	r3, [r3, #2]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f43f aeef 	beq.w	800384e <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003a70:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8003a72:	9b03      	ldr	r3, [sp, #12]
 8003a74:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8003a76:	6890      	ldr	r0, [r2, #8]
 8003a78:	9101      	str	r1, [sp, #4]
 8003a7a:	f001 fd56 	bl	800552a <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8003a7e:	9901      	ldr	r1, [sp, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8003a80:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8003a82:	690b      	ldr	r3, [r1, #16]
 8003a84:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8003a86:	4628      	mov	r0, r5
 8003a88:	f7ff fc48 	bl	800331c <dhcp_select>
 8003a8c:	e6df      	b.n	800384e <dhcp_recv+0x8e>
 8003a8e:	bf00      	nop
 8003a90:	200080f4 	.word	0x200080f4
 8003a94:	200080cc 	.word	0x200080cc
 8003a98:	08018ce1 	.word	0x08018ce1
 8003a9c:	08018f79 	.word	0x08018f79
 8003aa0:	08018c9a 	.word	0x08018c9a
 8003aa4:	08018f70 	.word	0x08018f70
 8003aa8:	08018f8b 	.word	0x08018f8b
 8003aac:	08018f94 	.word	0x08018f94
 8003ab0:	08018fcf 	.word	0x08018fcf
 8003ab4:	08018fbc 	.word	0x08018fbc
 8003ab8:	200080d4 	.word	0x200080d4
 8003abc:	0800be4c 	.word	0x0800be4c
    switch (op) {
 8003ac0:	2a3b      	cmp	r2, #59	; 0x3b
 8003ac2:	f63f af3d 	bhi.w	8003940 <dhcp_recv+0x180>
 8003ac6:	2a32      	cmp	r2, #50	; 0x32
 8003ac8:	d842      	bhi.n	8003b50 <dhcp_recv+0x390>
 8003aca:	2a01      	cmp	r2, #1
 8003acc:	f43f aeff 	beq.w	80038ce <dhcp_recv+0x10e>
 8003ad0:	2a03      	cmp	r2, #3
 8003ad2:	f43f aee9 	beq.w	80038a8 <dhcp_recv+0xe8>
 8003ad6:	2a00      	cmp	r2, #0
 8003ad8:	f43f af35 	beq.w	8003946 <dhcp_recv+0x186>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f04f 37ff 	mov.w	r7, #4294967295
 8003ae2:	2600      	movs	r6, #0
      if (offset + len + 2 > 0xFFFF) {
 8003ae4:	441c      	add	r4, r3
 8003ae6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8003aea:	4294      	cmp	r4, r2
 8003aec:	f73f aeaf 	bgt.w	800384e <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 8003af0:	9a04      	ldr	r2, [sp, #16]
 8003af2:	18d4      	adds	r4, r2, r3
 8003af4:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8003af6:	2e00      	cmp	r6, #0
 8003af8:	f43f af26 	beq.w	8003948 <dhcp_recv+0x188>
        u32_t value = 0;
 8003afc:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8003afe:	2f07      	cmp	r7, #7
        u32_t value = 0;
 8003b00:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8003b02:	d906      	bls.n	8003b12 <dhcp_recv+0x352>
 8003b04:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <dhcp_recv+0x424>)
 8003b06:	4938      	ldr	r1, [pc, #224]	; (8003be8 <dhcp_recv+0x428>)
 8003b08:	4838      	ldr	r0, [pc, #224]	; (8003bec <dhcp_recv+0x42c>)
 8003b0a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8003b0e:	f007 f935 	bl	800ad7c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8003b12:	9b02      	ldr	r3, [sp, #8]
 8003b14:	5ddb      	ldrb	r3, [r3, r7]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f af16 	bne.w	8003948 <dhcp_recv+0x188>
          copy_len = LWIP_MIN(decode_len, 4);
 8003b1c:	b2b2      	uxth	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8003b1e:	9b04      	ldr	r3, [sp, #16]
 8003b20:	9204      	str	r2, [sp, #16]
 8003b22:	a907      	add	r1, sp, #28
 8003b24:	4640      	mov	r0, r8
 8003b26:	f002 fc4b 	bl	80063c0 <pbuf_copy_partial>
 8003b2a:	9a04      	ldr	r2, [sp, #16]
 8003b2c:	4282      	cmp	r2, r0
 8003b2e:	f47f ae8e 	bne.w	800384e <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8003b32:	2e04      	cmp	r6, #4
 8003b34:	f47f af1f 	bne.w	8003976 <dhcp_recv+0x1b6>
            value = lwip_ntohl(value);
 8003b38:	9807      	ldr	r0, [sp, #28]
 8003b3a:	f001 fcf6 	bl	800552a <lwip_htonl>
 8003b3e:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8003b40:	9a02      	ldr	r2, [sp, #8]
 8003b42:	2301      	movs	r3, #1
 8003b44:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8003b46:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <dhcp_recv+0x430>)
 8003b48:	9b07      	ldr	r3, [sp, #28]
 8003b4a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 8003b4e:	e6fb      	b.n	8003948 <dhcp_recv+0x188>
 8003b50:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	f63f aef2 	bhi.w	800393e <dhcp_recv+0x17e>
 8003b5a:	a101      	add	r1, pc, #4	; (adr r1, 8003b60 <dhcp_recv+0x3a0>)
 8003b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b60:	080038df 	.word	0x080038df
 8003b64:	080038eb 	.word	0x080038eb
 8003b68:	0800390d 	.word	0x0800390d
 8003b6c:	0800391b 	.word	0x0800391b
 8003b70:	0800393f 	.word	0x0800393f
 8003b74:	0800393f 	.word	0x0800393f
 8003b78:	0800393f 	.word	0x0800393f
 8003b7c:	08003929 	.word	0x08003929
 8003b80:	08003937 	.word	0x08003937
 8003b84:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8003b86:	2706      	movs	r7, #6
 8003b88:	e7ac      	b.n	8003ae4 <dhcp_recv+0x324>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8003b8a:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8003b8c:	2604      	movs	r6, #4
 8003b8e:	e7a9      	b.n	8003ae4 <dhcp_recv+0x324>
 8003b90:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8003b92:	2703      	movs	r7, #3
 8003b94:	e7a6      	b.n	8003ae4 <dhcp_recv+0x324>
    decode_len = len;
 8003b96:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8003b98:	2700      	movs	r7, #0
 8003b9a:	e7a3      	b.n	8003ae4 <dhcp_recv+0x324>
 8003b9c:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8003b9e:	2702      	movs	r7, #2
 8003ba0:	e7a0      	b.n	8003ae4 <dhcp_recv+0x324>
 8003ba2:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8003ba4:	461f      	mov	r7, r3
 8003ba6:	e79d      	b.n	8003ae4 <dhcp_recv+0x324>
 8003ba8:	461e      	mov	r6, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8003baa:	2705      	movs	r7, #5
    if (op == DHCP_OPTION_PAD) {
 8003bac:	e79a      	b.n	8003ae4 <dhcp_recv+0x324>
 8003bae:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8003bb2:	2908      	cmp	r1, #8
 8003bb4:	f63f aec4 	bhi.w	8003940 <dhcp_recv+0x180>
 8003bb8:	a601      	add	r6, pc, #4	; (adr r6, 8003bc0 <dhcp_recv+0x400>)
 8003bba:	f856 f021 	ldr.w	pc, [r6, r1, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	080038d9 	.word	0x080038d9
 8003bc4:	080038e7 	.word	0x080038e7
 8003bc8:	08003907 	.word	0x08003907
 8003bcc:	08003915 	.word	0x08003915
 8003bd0:	08003941 	.word	0x08003941
 8003bd4:	08003941 	.word	0x08003941
 8003bd8:	08003941 	.word	0x08003941
 8003bdc:	08003923 	.word	0x08003923
 8003be0:	08003931 	.word	0x08003931
 8003be4:	08018ce1 	.word	0x08018ce1
 8003be8:	08018fab 	.word	0x08018fab
 8003bec:	08018c9a 	.word	0x08018c9a
 8003bf0:	200080d4 	.word	0x200080d4

08003bf4 <dhcp_arp_reply>:
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003bf6:	4606      	mov	r6, r0
{
 8003bf8:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8003bfa:	b940      	cbnz	r0, 8003c0e <dhcp_arp_reply+0x1a>
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <dhcp_arp_reply+0xa8>)
 8003bfe:	4928      	ldr	r1, [pc, #160]	; (8003ca0 <dhcp_arp_reply+0xac>)
 8003c00:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <dhcp_arp_reply+0xb0>)
 8003c02:	f240 328b 	movw	r2, #907	; 0x38b
 8003c06:	f007 f8b9 	bl	800ad7c <iprintf>
}
 8003c0a:	b007      	add	sp, #28
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dhcp = netif_dhcp_data(netif);
 8003c0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8003c10:	2c00      	cmp	r4, #0
 8003c12:	d0fa      	beq.n	8003c0a <dhcp_arp_reply+0x16>
 8003c14:	7963      	ldrb	r3, [r4, #5]
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d1f7      	bne.n	8003c0a <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8003c1a:	680a      	ldr	r2, [r1, #0]
 8003c1c:	69e3      	ldr	r3, [r4, #28]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d1f3      	bne.n	8003c0a <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8003c22:	210c      	movs	r1, #12
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7ff f9c5 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8003c2a:	f10d 0316 	add.w	r3, sp, #22
 8003c2e:	2204      	movs	r2, #4
 8003c30:	4621      	mov	r1, r4
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7ff fa3c 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 8003c38:	4605      	mov	r5, r0
 8003c3a:	b330      	cbz	r0, 8003c8a <dhcp_arp_reply+0x96>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8003c3c:	6841      	ldr	r1, [r0, #4]
 8003c3e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003c42:	2304      	movs	r3, #4
 8003c44:	31f0      	adds	r1, #240	; 0xf0
 8003c46:	2232      	movs	r2, #50	; 0x32
 8003c48:	9103      	str	r1, [sp, #12]
 8003c4a:	f7ff f9d7 	bl	8002ffc <dhcp_option>
 8003c4e:	4607      	mov	r7, r0
 8003c50:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003c54:	69e0      	ldr	r0, [r4, #28]
 8003c56:	f001 fc68 	bl	800552a <lwip_htonl>
 8003c5a:	9903      	ldr	r1, [sp, #12]
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4638      	mov	r0, r7
 8003c60:	f7ff fa02 	bl	8003068 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003c64:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8003c66:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003c6a:	462a      	mov	r2, r5
 8003c6c:	f7ff fab4 	bl	80031d8 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8003c70:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <dhcp_arp_reply+0xb4>)
 8003c72:	480e      	ldr	r0, [pc, #56]	; (8003cac <dhcp_arp_reply+0xb8>)
 8003c74:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <dhcp_arp_reply+0xbc>)
 8003c76:	e9cd 6300 	strd	r6, r3, [sp]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	6840      	ldr	r0, [r0, #4]
 8003c7e:	2343      	movs	r3, #67	; 0x43
 8003c80:	f005 ffcc 	bl	8009c1c <udp_sendto_if_src>
    pbuf_free(p_out);
 8003c84:	4628      	mov	r0, r5
 8003c86:	f002 f981 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 8003c8a:	79a3      	ldrb	r3, [r4, #6]
 8003c8c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003c8e:	bf1c      	itt	ne
 8003c90:	3301      	addne	r3, #1
 8003c92:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8003c94:	2314      	movs	r3, #20
 8003c96:	8123      	strh	r3, [r4, #8]
  return result;
 8003c98:	e7b7      	b.n	8003c0a <dhcp_arp_reply+0x16>
 8003c9a:	bf00      	nop
 8003c9c:	08018ce1 	.word	0x08018ce1
 8003ca0:	08018f01 	.word	0x08018f01
 8003ca4:	08018c9a 	.word	0x08018c9a
 8003ca8:	0800be4c 	.word	0x0800be4c
 8003cac:	200000d4 	.word	0x200000d4
 8003cb0:	0800be48 	.word	0x0800be48

08003cb4 <dhcp_renew>:
{
 8003cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003cb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8003cba:	b086      	sub	sp, #24
 8003cbc:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8003cbe:	2105      	movs	r1, #5
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7ff f977 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8003cc6:	f10d 0316 	add.w	r3, sp, #22
 8003cca:	2203      	movs	r2, #3
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7ff f9ee 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d055      	beq.n	8003d86 <dhcp_renew+0xd2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003cda:	6841      	ldr	r1, [r0, #4]
 8003cdc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003ce0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8003d90 <dhcp_renew+0xdc>
 8003ce4:	31f0      	adds	r1, #240	; 0xf0
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	2239      	movs	r2, #57	; 0x39
 8003cea:	9103      	str	r1, [sp, #12]
 8003cec:	f7ff f986 	bl	8002ffc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003cf0:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8003cf2:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003cf4:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003cf8:	f7ff f964 	bl	8002fc4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003cfc:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003cfe:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003d02:	2303      	movs	r3, #3
 8003d04:	2237      	movs	r2, #55	; 0x37
 8003d06:	f7ff f979 	bl	8002ffc <dhcp_option>
 8003d0a:	9903      	ldr	r1, [sp, #12]
 8003d0c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003d10:	2703      	movs	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003d12:	f818 2b01 	ldrb.w	r2, [r8], #1
 8003d16:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003d1a:	9103      	str	r1, [sp, #12]
 8003d1c:	f7ff f98c 	bl	8003038 <dhcp_option_byte>
 8003d20:	3f01      	subs	r7, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003d22:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8003d26:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003d28:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003d2c:	d1f1      	bne.n	8003d12 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003d2e:	462a      	mov	r2, r5
 8003d30:	f7ff fa52 	bl	80031d8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8003d34:	4815      	ldr	r0, [pc, #84]	; (8003d8c <dhcp_renew+0xd8>)
 8003d36:	9600      	str	r6, [sp, #0]
 8003d38:	6840      	ldr	r0, [r0, #4]
 8003d3a:	2343      	movs	r3, #67	; 0x43
 8003d3c:	f104 0218 	add.w	r2, r4, #24
 8003d40:	4629      	mov	r1, r5
 8003d42:	f006 f803 	bl	8009d4c <udp_sendto_if>
 8003d46:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8003d48:	4628      	mov	r0, r5
 8003d4a:	f002 f91f 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 8003d4e:	79a3      	ldrb	r3, [r4, #6]
 8003d50:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8003d52:	bf1c      	itt	ne
 8003d54:	3301      	addne	r3, #1
 8003d56:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8003d58:	79a3      	ldrb	r3, [r4, #6]
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	bf9f      	itttt	ls
 8003d5e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8003d62:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8003d66:	011b      	lslls	r3, r3, #4
 8003d68:	b29b      	uxthls	r3, r3
 8003d6a:	bf88      	it	hi
 8003d6c:	f644 6320 	movwhi	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8003d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
}
 8003d74:	4630      	mov	r0, r6
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8003d76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8003d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d7e:	8123      	strh	r3, [r4, #8]
}
 8003d80:	b006      	add	sp, #24
 8003d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8003d86:	f04f 36ff 	mov.w	r6, #4294967295
 8003d8a:	e7e0      	b.n	8003d4e <dhcp_renew+0x9a>
 8003d8c:	200000d4 	.word	0x200000d4
 8003d90:	0800be44 	.word	0x0800be44

08003d94 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8003d94:	b150      	cbz	r0, 8003dac <dhcp_supplied_address+0x18>
 8003d96:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003d98:	b140      	cbz	r0, 8003dac <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8003d9a:	7940      	ldrb	r0, [r0, #5]
 8003d9c:	280a      	cmp	r0, #10
 8003d9e:	d006      	beq.n	8003dae <dhcp_supplied_address+0x1a>
 8003da0:	3804      	subs	r0, #4
 8003da2:	2801      	cmp	r0, #1
 8003da4:	bf8c      	ite	hi
 8003da6:	2000      	movhi	r0, #0
 8003da8:	2001      	movls	r0, #1
 8003daa:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8003dac:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8003dae:	2001      	movs	r0, #1
 8003db0:	e7fb      	b.n	8003daa <dhcp_supplied_address+0x16>
	...

08003db4 <dhcp_release_and_stop>:
{
 8003db4:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8003db6:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8003db8:	b087      	sub	sp, #28
 8003dba:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	d050      	beq.n	8003e62 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8003dc0:	7963      	ldrb	r3, [r4, #5]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04d      	beq.n	8003e62 <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8003dc6:	69a3      	ldr	r3, [r4, #24]
 8003dc8:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8003dca:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8003dcc:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8003dd0:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8003dd4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8003dd8:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8003dda:	81e3      	strh	r3, [r4, #14]
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8003de0:	f7ff ffd8 	bl	8003d94 <dhcp_supplied_address>
 8003de4:	b368      	cbz	r0, 8003e42 <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8003de6:	f10d 0312 	add.w	r3, sp, #18
 8003dea:	2207      	movs	r2, #7
 8003dec:	4621      	mov	r1, r4
 8003dee:	4630      	mov	r0, r6
 8003df0:	f7ff f95e 	bl	80030b0 <dhcp_create_msg>
    if (p_out != NULL) {
 8003df4:	4605      	mov	r5, r0
 8003df6:	b320      	cbz	r0, 8003e42 <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8003df8:	6841      	ldr	r1, [r0, #4]
 8003dfa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8003dfe:	2304      	movs	r3, #4
 8003e00:	31f0      	adds	r1, #240	; 0xf0
 8003e02:	2236      	movs	r2, #54	; 0x36
 8003e04:	9103      	str	r1, [sp, #12]
 8003e06:	f7ff f8f9 	bl	8002ffc <dhcp_option>
 8003e0a:	4607      	mov	r7, r0
 8003e0c:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8003e10:	9805      	ldr	r0, [sp, #20]
 8003e12:	f001 fb8a 	bl	800552a <lwip_htonl>
 8003e16:	9903      	ldr	r1, [sp, #12]
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff f924 	bl	8003068 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003e20:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8003e22:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003e26:	462a      	mov	r2, r5
 8003e28:	f7ff f9d6 	bl	80031d8 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8003e2c:	480e      	ldr	r0, [pc, #56]	; (8003e68 <dhcp_release_and_stop+0xb4>)
 8003e2e:	9600      	str	r6, [sp, #0]
 8003e30:	6840      	ldr	r0, [r0, #4]
 8003e32:	2343      	movs	r3, #67	; 0x43
 8003e34:	aa05      	add	r2, sp, #20
 8003e36:	4629      	mov	r1, r5
 8003e38:	f005 ff88 	bl	8009d4c <udp_sendto_if>
      pbuf_free(p_out);
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f002 f8a5 	bl	8005f8c <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <dhcp_release_and_stop+0xb8>)
 8003e44:	4630      	mov	r0, r6
 8003e46:	4619      	mov	r1, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f001 fee1 	bl	8005c10 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff f8af 	bl	8002fb4 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8003e56:	7923      	ldrb	r3, [r4, #4]
 8003e58:	b11b      	cbz	r3, 8003e62 <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8003e5a:	f7ff fc95 	bl	8003788 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	7123      	strb	r3, [r4, #4]
}
 8003e62:	b007      	add	sp, #28
 8003e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200000d4 	.word	0x200000d4
 8003e6c:	0800be4c 	.word	0x0800be4c

08003e70 <dhcp_start>:
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8003e72:	4604      	mov	r4, r0
 8003e74:	b950      	cbnz	r0, 8003e8c <dhcp_start+0x1c>
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <dhcp_start+0x98>)
 8003e78:	4924      	ldr	r1, [pc, #144]	; (8003f0c <dhcp_start+0x9c>)
 8003e7a:	f240 22e7 	movw	r2, #743	; 0x2e7
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8003e7e:	4824      	ldr	r0, [pc, #144]	; (8003f10 <dhcp_start+0xa0>)
 8003e80:	f006 ff7c 	bl	800ad7c <iprintf>
 8003e84:	f06f 020f 	mvn.w	r2, #15
}
 8003e88:	4610      	mov	r0, r2
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8003e8c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8003e90:	07da      	lsls	r2, r3, #31
 8003e92:	d404      	bmi.n	8003e9e <dhcp_start+0x2e>
 8003e94:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <dhcp_start+0x98>)
 8003e96:	491f      	ldr	r1, [pc, #124]	; (8003f14 <dhcp_start+0xa4>)
 8003e98:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8003e9c:	e7ef      	b.n	8003e7e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8003e9e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8003ea0:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8003ea2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8003ea6:	d202      	bcs.n	8003eae <dhcp_start+0x3e>
    return ERR_MEM;
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	e7ec      	b.n	8003e88 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8003eae:	b9dd      	cbnz	r5, 8003ee8 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8003eb0:	2034      	movs	r0, #52	; 0x34
 8003eb2:	f001 fd35 	bl	8005920 <mem_malloc>
    if (dhcp == NULL) {
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d0f5      	beq.n	8003ea8 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8003ebc:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8003ebe:	2234      	movs	r2, #52	; 0x34
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f006 ff52 	bl	800ad6c <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8003ec8:	f7ff fbf4 	bl	80036b4 <dhcp_inc_pcb_refcount>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d1ea      	bne.n	8003ea8 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8003ed6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8003eda:	075b      	lsls	r3, r3, #29
 8003edc:	d40a      	bmi.n	8003ef4 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f7ff f867 	bl	8002fb4 <dhcp_set_state>
    return ERR_OK;
 8003ee6:	e7cf      	b.n	8003e88 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8003ee8:	792b      	ldrb	r3, [r5, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0e7      	beq.n	8003ebe <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8003eee:	f7ff fc4b 	bl	8003788 <dhcp_dec_pcb_refcount>
 8003ef2:	e7e4      	b.n	8003ebe <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff facb 	bl	8003490 <dhcp_discover>
  if (result != ERR_OK) {
 8003efa:	4602      	mov	r2, r0
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d0c3      	beq.n	8003e88 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8003f00:	4620      	mov	r0, r4
 8003f02:	f7ff ff57 	bl	8003db4 <dhcp_release_and_stop>
 8003f06:	e7cf      	b.n	8003ea8 <dhcp_start+0x38>
 8003f08:	08018ce1 	.word	0x08018ce1
 8003f0c:	08018f01 	.word	0x08018f01
 8003f10:	08018c9a 	.word	0x08018c9a
 8003f14:	0801901a 	.word	0x0801901a

08003f18 <dhcp_coarse_tmr>:
{
 8003f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8003f1c:	4b57      	ldr	r3, [pc, #348]	; (800407c <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8003f1e:	4f58      	ldr	r7, [pc, #352]	; (8004080 <dhcp_coarse_tmr+0x168>)
  NETIF_FOREACH(netif) {
 8003f20:	681d      	ldr	r5, [r3, #0]
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8003f22:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8004084 <dhcp_coarse_tmr+0x16c>
{
 8003f26:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8003f28:	f240 2619 	movw	r6, #537	; 0x219
  NETIF_FOREACH(netif) {
 8003f2c:	b915      	cbnz	r5, 8003f34 <dhcp_coarse_tmr+0x1c>
}
 8003f2e:	b007      	add	sp, #28
 8003f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8003f34:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8003f36:	b17c      	cbz	r4, 8003f58 <dhcp_coarse_tmr+0x40>
 8003f38:	7963      	ldrb	r3, [r4, #5]
 8003f3a:	b16b      	cbz	r3, 8003f58 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8003f3c:	8aa1      	ldrh	r1, [r4, #20]
 8003f3e:	b169      	cbz	r1, 8003f5c <dhcp_coarse_tmr+0x44>
 8003f40:	8a62      	ldrh	r2, [r4, #18]
 8003f42:	3201      	adds	r2, #1
 8003f44:	b292      	uxth	r2, r2
 8003f46:	4291      	cmp	r1, r2
 8003f48:	8262      	strh	r2, [r4, #18]
 8003f4a:	d107      	bne.n	8003f5c <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7ff ff31 	bl	8003db4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8003f52:	4628      	mov	r0, r5
 8003f54:	f7ff ff8c 	bl	8003e70 <dhcp_start>
  NETIF_FOREACH(netif) {
 8003f58:	682d      	ldr	r5, [r5, #0]
 8003f5a:	e7e7      	b.n	8003f2c <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8003f5c:	8a22      	ldrh	r2, [r4, #16]
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	d072      	beq.n	8004048 <dhcp_coarse_tmr+0x130>
 8003f62:	1e51      	subs	r1, r2, #1
 8003f64:	2a01      	cmp	r2, #1
 8003f66:	8221      	strh	r1, [r4, #16]
 8003f68:	d16e      	bne.n	8004048 <dhcp_coarse_tmr+0x130>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b09      	cmp	r3, #9
 8003f70:	d8f2      	bhi.n	8003f58 <dhcp_coarse_tmr+0x40>
 8003f72:	fa26 f303 	lsr.w	r3, r6, r3
 8003f76:	07db      	lsls	r3, r3, #31
 8003f78:	d5ee      	bpl.n	8003f58 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff f819 	bl	8002fb4 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8003f82:	f10d 0316 	add.w	r3, sp, #22
 8003f86:	2203      	movs	r2, #3
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f7ff f890 	bl	80030b0 <dhcp_create_msg>
  if (p_out != NULL) {
 8003f90:	4681      	mov	r9, r0
 8003f92:	2800      	cmp	r0, #0
 8003f94:	d038      	beq.n	8004008 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003f96:	6841      	ldr	r1, [r0, #4]
 8003f98:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003f9c:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8004088 <dhcp_coarse_tmr+0x170>
 8003fa0:	31f0      	adds	r1, #240	; 0xf0
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	2239      	movs	r2, #57	; 0x39
 8003fa6:	9103      	str	r1, [sp, #12]
 8003fa8:	f7ff f828 	bl	8002ffc <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003fac:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8003fae:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8003fb0:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003fb4:	f7ff f806 	bl	8002fc4 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003fb8:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8003fba:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	2237      	movs	r2, #55	; 0x37
 8003fc2:	f7ff f81b 	bl	8002ffc <dhcp_option>
 8003fc6:	9903      	ldr	r1, [sp, #12]
 8003fc8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003fcc:	f04f 0a03 	mov.w	sl, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003fd0:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8003fd4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8003fd8:	9103      	str	r1, [sp, #12]
 8003fda:	f7ff f82d 	bl	8003038 <dhcp_option_byte>
 8003fde:	f10a 3aff 	add.w	sl, sl, #4294967295
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003fe2:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8003fe6:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8003fe8:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8003fec:	d1f0      	bne.n	8003fd0 <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8003fee:	464a      	mov	r2, r9
 8003ff0:	f7ff f8f2 	bl	80031d8 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	9500      	str	r5, [sp, #0]
 8003ff8:	2343      	movs	r3, #67	; 0x43
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	f005 fea5 	bl	8009d4c <udp_sendto_if>
    pbuf_free(p_out);
 8004002:	4648      	mov	r0, r9
 8004004:	f001 ffc2 	bl	8005f8c <pbuf_free>
  if (dhcp->tries < 255) {
 8004008:	79a3      	ldrb	r3, [r4, #6]
 800400a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800400c:	bf1c      	itt	ne
 800400e:	3301      	addne	r3, #1
 8004010:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8004012:	79a3      	ldrb	r3, [r4, #6]
 8004014:	2b09      	cmp	r3, #9
 8004016:	bf9f      	itttt	ls
 8004018:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800401c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
 8004020:	00db      	lslls	r3, r3, #3
 8004022:	b29b      	uxthls	r3, r3
 8004024:	bf88      	it	hi
 8004026:	f242 7310 	movwhi	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800402a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800402e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004032:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8004036:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8004038:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800403a:	8aa3      	ldrh	r3, [r4, #20]
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	2b01      	cmp	r3, #1
 8004040:	dd8a      	ble.n	8003f58 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8004042:	105b      	asrs	r3, r3, #1
 8004044:	8223      	strh	r3, [r4, #16]
 8004046:	e787      	b.n	8003f58 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8004048:	89e2      	ldrh	r2, [r4, #14]
 800404a:	2a00      	cmp	r2, #0
 800404c:	d084      	beq.n	8003f58 <dhcp_coarse_tmr+0x40>
 800404e:	1e51      	subs	r1, r2, #1
 8004050:	2a01      	cmp	r2, #1
 8004052:	81e1      	strh	r1, [r4, #14]
 8004054:	d180      	bne.n	8003f58 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8004056:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800405a:	2a01      	cmp	r2, #1
 800405c:	d002      	beq.n	8004064 <dhcp_coarse_tmr+0x14c>
 800405e:	2b0a      	cmp	r3, #10
 8004060:	f47f af7a 	bne.w	8003f58 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8004064:	4628      	mov	r0, r5
 8004066:	f7ff fe25 	bl	8003cb4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	8a62      	ldrh	r2, [r4, #18]
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8004072:	bfc4      	itt	gt
 8004074:	105b      	asrgt	r3, r3, #1
 8004076:	81e3      	strhgt	r3, [r4, #14]
 8004078:	e76e      	b.n	8003f58 <dhcp_coarse_tmr+0x40>
 800407a:	bf00      	nop
 800407c:	2000e47c 	.word	0x2000e47c
 8004080:	200000d4 	.word	0x200000d4
 8004084:	0800be48 	.word	0x0800be48
 8004088:	0800be44 	.word	0x0800be44

0800408c <dhcp_fine_tmr>:
{
 800408c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <dhcp_fine_tmr+0x7c>)
 8004090:	681c      	ldr	r4, [r3, #0]
        dhcp->request_timeout--;
 8004092:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8004094:	b904      	cbnz	r4, 8004098 <dhcp_fine_tmr+0xc>
}
 8004096:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8004098:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800409a:	b123      	cbz	r3, 80040a6 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 800409c:	891a      	ldrh	r2, [r3, #8]
 800409e:	2a01      	cmp	r2, #1
 80040a0:	d903      	bls.n	80040aa <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 80040a2:	3a01      	subs	r2, #1
 80040a4:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 80040a6:	6824      	ldr	r4, [r4, #0]
 80040a8:	e7f4      	b.n	8004094 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 80040aa:	d1fc      	bne.n	80040a6 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80040ac:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 80040ae:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80040b0:	2a0c      	cmp	r2, #12
 80040b2:	d001      	beq.n	80040b8 <dhcp_fine_tmr+0x2c>
 80040b4:	2a06      	cmp	r2, #6
 80040b6:	d103      	bne.n	80040c0 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 80040b8:	4620      	mov	r0, r4
      dhcp_discover(netif);
 80040ba:	f7ff f9e9 	bl	8003490 <dhcp_discover>
 80040be:	e7f2      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80040c0:	2a01      	cmp	r2, #1
 80040c2:	d10c      	bne.n	80040de <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 80040c4:	799b      	ldrb	r3, [r3, #6]
 80040c6:	2b05      	cmp	r3, #5
      dhcp_select(netif);
 80040c8:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 80040ca:	d802      	bhi.n	80040d2 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 80040cc:	f7ff f926 	bl	800331c <dhcp_select>
 80040d0:	e7e9      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 80040d2:	f7ff fe6f 	bl	8003db4 <dhcp_release_and_stop>
      dhcp_start(netif);
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff feca 	bl	8003e70 <dhcp_start>
 80040dc:	e7e3      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80040de:	2a08      	cmp	r2, #8
 80040e0:	d109      	bne.n	80040f6 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 80040e2:	799b      	ldrb	r3, [r3, #6]
 80040e4:	2b01      	cmp	r3, #1
      dhcp_check(netif);
 80040e6:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80040e8:	d802      	bhi.n	80040f0 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 80040ea:	f7ff fa47 	bl	800357c <dhcp_check>
 80040ee:	e7da      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80040f0:	f7ff fa5a 	bl	80035a8 <dhcp_bind>
 80040f4:	e7d7      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80040f6:	2a03      	cmp	r2, #3
 80040f8:	d1d5      	bne.n	80040a6 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80040fa:	799b      	ldrb	r3, [r3, #6]
 80040fc:	2b01      	cmp	r3, #1
      dhcp_reboot(netif);
 80040fe:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8004100:	d8db      	bhi.n	80040ba <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8004102:	f7ff f887 	bl	8003214 <dhcp_reboot>
 8004106:	e7ce      	b.n	80040a6 <dhcp_fine_tmr+0x1a>
 8004108:	2000e47c 	.word	0x2000e47c

0800410c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800410c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800410e:	2618      	movs	r6, #24
 8004110:	4d07      	ldr	r5, [pc, #28]	; (8004130 <etharp_free_entry+0x24>)
 8004112:	4346      	muls	r6, r0
{
 8004114:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8004116:	59a8      	ldr	r0, [r5, r6]
 8004118:	b118      	cbz	r0, 8004122 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800411a:	f001 ff37 	bl	8005f8c <pbuf_free>
    arp_table[i].q = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8004122:	2018      	movs	r0, #24
 8004124:	fb00 5404 	mla	r4, r0, r4, r5
 8004128:	2300      	movs	r3, #0
 800412a:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	bf00      	nop
 8004130:	200000e0 	.word	0x200000e0

08004134 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8004134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800413a:	f04f 0e0a 	mov.w	lr, #10
{
 800413e:	e9cd 2100 	strd	r2, r1, [sp]
 8004142:	4a3f      	ldr	r2, [pc, #252]	; (8004240 <etharp_find_entry+0x10c>)
 8004144:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8004146:	4699      	mov	r9, r3
 8004148:	469b      	mov	fp, r3
 800414a:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 800414c:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800414e:	4675      	mov	r5, lr
 8004150:	46f0      	mov	r8, lr
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004152:	2c0a      	cmp	r4, #10
    u8_t state = arp_table[i].state;
 8004154:	f892 a014 	ldrb.w	sl, [r2, #20]
 8004158:	b218      	sxth	r0, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800415a:	d11a      	bne.n	8004192 <etharp_find_entry+0x5e>
 800415c:	f1ba 0f00 	cmp.w	sl, #0
 8004160:	d05e      	beq.n	8004220 <etharp_find_entry+0xec>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8004162:	b156      	cbz	r6, 800417a <etharp_find_entry+0x46>
 8004164:	6837      	ldr	r7, [r6, #0]
 8004166:	6851      	ldr	r1, [r2, #4]
 8004168:	428f      	cmp	r7, r1
 800416a:	d106      	bne.n	800417a <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800416c:	9900      	ldr	r1, [sp, #0]
 800416e:	2900      	cmp	r1, #0
 8004170:	d049      	beq.n	8004206 <etharp_find_entry+0xd2>
 8004172:	6891      	ldr	r1, [r2, #8]
 8004174:	9f00      	ldr	r7, [sp, #0]
 8004176:	42b9      	cmp	r1, r7
 8004178:	d045      	beq.n	8004206 <etharp_find_entry+0xd2>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800417a:	f1ba 0f01 	cmp.w	sl, #1
 800417e:	8a51      	ldrh	r1, [r2, #18]
 8004180:	d149      	bne.n	8004216 <etharp_find_entry+0xe2>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004182:	6817      	ldr	r7, [r2, #0]
 8004184:	2f00      	cmp	r7, #0
 8004186:	d041      	beq.n	800420c <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 8004188:	458c      	cmp	ip, r1
 800418a:	d805      	bhi.n	8004198 <etharp_find_entry+0x64>
 800418c:	468c      	mov	ip, r1
 800418e:	4686      	mov	lr, r0
 8004190:	e002      	b.n	8004198 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004192:	f1ba 0f00 	cmp.w	sl, #0
 8004196:	d1e4      	bne.n	8004162 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004198:	3301      	adds	r3, #1
 800419a:	2b0a      	cmp	r3, #10
 800419c:	f102 0218 	add.w	r2, r2, #24
 80041a0:	d1d7      	bne.n	8004152 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d143      	bne.n	8004230 <etharp_find_entry+0xfc>
 80041a8:	2c0a      	cmp	r4, #10
 80041aa:	d111      	bne.n	80041d0 <etharp_find_entry+0x9c>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80041ac:	2d0a      	cmp	r5, #10
 80041ae:	d039      	beq.n	8004224 <etharp_find_entry+0xf0>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80041b0:	2318      	movs	r3, #24
 80041b2:	4a23      	ldr	r2, [pc, #140]	; (8004240 <etharp_find_entry+0x10c>)
 80041b4:	436b      	muls	r3, r5
 80041b6:	58d3      	ldr	r3, [r2, r3]
 80041b8:	b133      	cbz	r3, 80041c8 <etharp_find_entry+0x94>
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <etharp_find_entry+0x110>)
 80041bc:	4922      	ldr	r1, [pc, #136]	; (8004248 <etharp_find_entry+0x114>)
 80041be:	4823      	ldr	r0, [pc, #140]	; (800424c <etharp_find_entry+0x118>)
 80041c0:	f240 126d 	movw	r2, #365	; 0x16d
 80041c4:	f006 fdda 	bl	800ad7c <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 80041c8:	4628      	mov	r0, r5
 80041ca:	f7ff ff9f 	bl	800410c <etharp_free_entry>
 80041ce:	462c      	mov	r4, r5
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80041d0:	4d1b      	ldr	r5, [pc, #108]	; (8004240 <etharp_find_entry+0x10c>)
 80041d2:	2318      	movs	r3, #24
 80041d4:	fb03 5304 	mla	r3, r3, r4, r5
 80041d8:	7d1b      	ldrb	r3, [r3, #20]
 80041da:	b133      	cbz	r3, 80041ea <etharp_find_entry+0xb6>
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <etharp_find_entry+0x110>)
 80041de:	491c      	ldr	r1, [pc, #112]	; (8004250 <etharp_find_entry+0x11c>)
 80041e0:	481a      	ldr	r0, [pc, #104]	; (800424c <etharp_find_entry+0x118>)
 80041e2:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80041e6:	f006 fdc9 	bl	800ad7c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80041ea:	b126      	cbz	r6, 80041f6 <etharp_find_entry+0xc2>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80041ec:	2318      	movs	r3, #24
 80041ee:	fb03 5304 	mla	r3, r3, r4, r5
 80041f2:	6832      	ldr	r2, [r6, #0]
 80041f4:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80041f6:	2318      	movs	r3, #24
 80041f8:	fb03 5504 	mla	r5, r3, r4, r5
 80041fc:	2300      	movs	r3, #0
 80041fe:	826b      	strh	r3, [r5, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8004200:	9b00      	ldr	r3, [sp, #0]
 8004202:	60ab      	str	r3, [r5, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8004204:	4620      	mov	r0, r4
}
 8004206:	b003      	add	sp, #12
 8004208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800420c:	458b      	cmp	fp, r1
 800420e:	d8c3      	bhi.n	8004198 <etharp_find_entry+0x64>
 8004210:	468b      	mov	fp, r1
 8004212:	4680      	mov	r8, r0
 8004214:	e7c0      	b.n	8004198 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8004216:	4589      	cmp	r9, r1
 8004218:	d8be      	bhi.n	8004198 <etharp_find_entry+0x64>
 800421a:	4689      	mov	r9, r1
 800421c:	4605      	mov	r5, r0
 800421e:	e7bb      	b.n	8004198 <etharp_find_entry+0x64>
 8004220:	4604      	mov	r4, r0
 8004222:	e7b9      	b.n	8004198 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004224:	f1b8 0f0a 	cmp.w	r8, #10
 8004228:	d105      	bne.n	8004236 <etharp_find_entry+0x102>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800422a:	f1be 0f0a 	cmp.w	lr, #10
 800422e:	d104      	bne.n	800423a <etharp_find_entry+0x106>
    return (s16_t)ERR_MEM;
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	e7e7      	b.n	8004206 <etharp_find_entry+0xd2>
 8004236:	4645      	mov	r5, r8
 8004238:	e7c6      	b.n	80041c8 <etharp_find_entry+0x94>
 800423a:	4675      	mov	r5, lr
 800423c:	e7c4      	b.n	80041c8 <etharp_find_entry+0x94>
 800423e:	bf00      	nop
 8004240:	200000e0 	.word	0x200000e0
 8004244:	0801903b 	.word	0x0801903b
 8004248:	080190b4 	.word	0x080190b4
 800424c:	08018c9a 	.word	0x08018c9a
 8004250:	080190cb 	.word	0x080190cb

08004254 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8004254:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800425c:	4688      	mov	r8, r1
 800425e:	4691      	mov	r9, r2
 8004260:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004262:	4607      	mov	r7, r0
 8004264:	b930      	cbnz	r0, 8004274 <etharp_raw+0x20>
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <etharp_raw+0xc8>)
 8004268:	492d      	ldr	r1, [pc, #180]	; (8004320 <etharp_raw+0xcc>)
 800426a:	482e      	ldr	r0, [pc, #184]	; (8004324 <etharp_raw+0xd0>)
 800426c:	f240 4257 	movw	r2, #1111	; 0x457
 8004270:	f006 fd84 	bl	800ad7c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004274:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004278:	211c      	movs	r1, #28
 800427a:	200e      	movs	r0, #14
 800427c:	f001 feea 	bl	8006054 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004280:	4605      	mov	r5, r0
 8004282:	2800      	cmp	r0, #0
 8004284:	d047      	beq.n	8004316 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004286:	8943      	ldrh	r3, [r0, #10]
 8004288:	2b1b      	cmp	r3, #27
 800428a:	d806      	bhi.n	800429a <etharp_raw+0x46>
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <etharp_raw+0xc8>)
 800428e:	4926      	ldr	r1, [pc, #152]	; (8004328 <etharp_raw+0xd4>)
 8004290:	4824      	ldr	r0, [pc, #144]	; (8004324 <etharp_raw+0xd0>)
 8004292:	f240 4262 	movw	r2, #1122	; 0x462
 8004296:	f006 fd71 	bl	800ad7c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800429a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800429e:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 80042a0:	f001 f940 	bl	8005524 <lwip_htons>
 80042a4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80042a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d006      	beq.n	80042bc <etharp_raw+0x68>
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <etharp_raw+0xc8>)
 80042b0:	491e      	ldr	r1, [pc, #120]	; (800432c <etharp_raw+0xd8>)
 80042b2:	481c      	ldr	r0, [pc, #112]	; (8004324 <etharp_raw+0xd0>)
 80042b4:	f240 4269 	movw	r2, #1129	; 0x469
 80042b8:	f006 fd60 	bl	800ad7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	60a3      	str	r3, [r4, #8]
 80042c0:	88b3      	ldrh	r3, [r6, #4]
 80042c2:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80042c4:	f8da 3000 	ldr.w	r3, [sl]
 80042c8:	f8c4 3012 	str.w	r3, [r4, #18]
 80042cc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80042d0:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80042d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80042da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80042e0:	2301      	movs	r3, #1
 80042e2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80042e4:	2308      	movs	r3, #8
 80042e6:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80042e8:	2306      	movs	r3, #6
 80042ea:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80042ec:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80042ee:	2600      	movs	r6, #0
  hdr->protolen = sizeof(ip4_addr_t);
 80042f0:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80042f2:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80042f6:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80042f8:	70e6      	strb	r6, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80042fa:	4642      	mov	r2, r8
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	4629      	mov	r1, r5
 8004300:	464b      	mov	r3, r9
 8004302:	4638      	mov	r0, r7
 8004304:	f005 fe4a 	bl	8009f9c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8004308:	4628      	mov	r0, r5
 800430a:	f001 fe3f 	bl	8005f8c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800430e:	4630      	mov	r0, r6
}
 8004310:	b002      	add	sp, #8
 8004312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	e7f9      	b.n	8004310 <etharp_raw+0xbc>
 800431c:	0801903b 	.word	0x0801903b
 8004320:	08018f01 	.word	0x08018f01
 8004324:	08018c9a 	.word	0x08018c9a
 8004328:	080190f4 	.word	0x080190f4
 800432c:	08019125 	.word	0x08019125

08004330 <etharp_cleanup_netif>:
{
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	4d08      	ldr	r5, [pc, #32]	; (8004354 <etharp_cleanup_netif+0x24>)
 8004334:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004336:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004338:	7d2b      	ldrb	r3, [r5, #20]
 800433a:	b12b      	cbz	r3, 8004348 <etharp_cleanup_netif+0x18>
 800433c:	68ab      	ldr	r3, [r5, #8]
 800433e:	42b3      	cmp	r3, r6
 8004340:	d102      	bne.n	8004348 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff fee2 	bl	800410c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004348:	3401      	adds	r4, #1
 800434a:	2c0a      	cmp	r4, #10
 800434c:	f105 0518 	add.w	r5, r5, #24
 8004350:	d1f2      	bne.n	8004338 <etharp_cleanup_netif+0x8>
}
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	200000e0 	.word	0x200000e0

08004358 <etharp_input>:
{
 8004358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800435c:	4607      	mov	r7, r0
 800435e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004360:	460c      	mov	r4, r1
 8004362:	b949      	cbnz	r1, 8004378 <etharp_input+0x20>
 8004364:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <etharp_input+0x140>)
 8004366:	494d      	ldr	r1, [pc, #308]	; (800449c <etharp_input+0x144>)
 8004368:	484d      	ldr	r0, [pc, #308]	; (80044a0 <etharp_input+0x148>)
 800436a:	f240 228a 	movw	r2, #650	; 0x28a
 800436e:	f006 fd05 	bl	800ad7c <iprintf>
}
 8004372:	b008      	add	sp, #32
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8004378:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800437a:	882b      	ldrh	r3, [r5, #0]
 800437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004380:	d108      	bne.n	8004394 <etharp_input+0x3c>
 8004382:	792b      	ldrb	r3, [r5, #4]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d105      	bne.n	8004394 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8004388:	796b      	ldrb	r3, [r5, #5]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d102      	bne.n	8004394 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800438e:	886b      	ldrh	r3, [r5, #2]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d003      	beq.n	800439c <etharp_input+0x44>
  pbuf_free(p);
 8004394:	4638      	mov	r0, r7
 8004396:	f001 fdf9 	bl	8005f8c <pbuf_free>
 800439a:	e7ea      	b.n	8004372 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800439c:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800439e:	f8d5 300e 	ldr.w	r3, [r5, #14]
 80043a2:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80043a4:	f105 0808 	add.w	r8, r5, #8
 80043a8:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d05f      	beq.n	800446e <etharp_input+0x116>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80043ae:	1af3      	subs	r3, r6, r3
 80043b0:	425e      	negs	r6, r3
 80043b2:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80043b4:	f1c6 0a02 	rsb	sl, r6, #2
 80043b8:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80043bc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d006      	beq.n	80043d2 <etharp_input+0x7a>
 80043c4:	4b34      	ldr	r3, [pc, #208]	; (8004498 <etharp_input+0x140>)
 80043c6:	4937      	ldr	r1, [pc, #220]	; (80044a4 <etharp_input+0x14c>)
 80043c8:	4835      	ldr	r0, [pc, #212]	; (80044a0 <etharp_input+0x148>)
 80043ca:	f240 12a9 	movw	r2, #425	; 0x1a9
 80043ce:	f006 fcd5 	bl	800ad7c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80043d2:	9807      	ldr	r0, [sp, #28]
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d03e      	beq.n	8004456 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80043d8:	4621      	mov	r1, r4
 80043da:	f000 fcb2 	bl	8004d42 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80043de:	4681      	mov	r9, r0
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d138      	bne.n	8004456 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80043ea:	2be0      	cmp	r3, #224	; 0xe0
 80043ec:	d033      	beq.n	8004456 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 80043ee:	4622      	mov	r2, r4
 80043f0:	4651      	mov	r1, sl
 80043f2:	a807      	add	r0, sp, #28
 80043f4:	f7ff fe9e 	bl	8004134 <etharp_find_entry>
  if (i < 0) {
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	db2c      	blt.n	8004456 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <etharp_input+0x150>)
 80043fe:	2018      	movs	r0, #24
 8004400:	fb00 fc03 	mul.w	ip, r0, r3
 8004404:	eb02 010c 	add.w	r1, r2, ip
 8004408:	f04f 0e02 	mov.w	lr, #2
 800440c:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004410:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8004414:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8004416:	fb13 e300 	smlabb	r3, r3, r0, lr
 800441a:	f8d8 0000 	ldr.w	r0, [r8]
 800441e:	50d0      	str	r0, [r2, r3]
 8004420:	eb02 0e03 	add.w	lr, r2, r3
 8004424:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004428:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 800442c:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 8004430:	f852 100c 	ldr.w	r1, [r2, ip]
 8004434:	b179      	cbz	r1, 8004456 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8004436:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800443a:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800443e:	4620      	mov	r0, r4
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8004446:	4643      	mov	r3, r8
 8004448:	9105      	str	r1, [sp, #20]
 800444a:	f005 fda7 	bl	8009f9c <ethernet_output>
    pbuf_free(p);
 800444e:	9905      	ldr	r1, [sp, #20]
 8004450:	4608      	mov	r0, r1
 8004452:	f001 fd9b 	bl	8005f8c <pbuf_free>
  switch (hdr->opcode) {
 8004456:	88eb      	ldrh	r3, [r5, #6]
 8004458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445c:	d00a      	beq.n	8004474 <etharp_input+0x11c>
 800445e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004462:	d197      	bne.n	8004394 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8004464:	a907      	add	r1, sp, #28
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff fbc4 	bl	8003bf4 <dhcp_arp_reply>
      break;
 800446c:	e792      	b.n	8004394 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800446e:	f04f 0a02 	mov.w	sl, #2
 8004472:	e7a3      	b.n	80043bc <etharp_input+0x64>
      if (for_us) {
 8004474:	2e00      	cmp	r6, #0
 8004476:	d08d      	beq.n	8004394 <etharp_input+0x3c>
        etharp_raw(netif,
 8004478:	2202      	movs	r2, #2
 800447a:	9203      	str	r2, [sp, #12]
 800447c:	aa07      	add	r2, sp, #28
 800447e:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004482:	f104 032a 	add.w	r3, r4, #42	; 0x2a
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004486:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	4619      	mov	r1, r3
 800448c:	4642      	mov	r2, r8
 800448e:	4620      	mov	r0, r4
 8004490:	f7ff fee0 	bl	8004254 <etharp_raw>
 8004494:	e77e      	b.n	8004394 <etharp_input+0x3c>
 8004496:	bf00      	nop
 8004498:	0801903b 	.word	0x0801903b
 800449c:	08018f01 	.word	0x08018f01
 80044a0:	08018c9a 	.word	0x08018c9a
 80044a4:	080191a7 	.word	0x080191a7
 80044a8:	200000e0 	.word	0x200000e0

080044ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80044ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044ae:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80044b0:	2401      	movs	r4, #1
 80044b2:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80044b6:	f100 032a 	add.w	r3, r0, #42	; 0x2a
 80044ba:	4905      	ldr	r1, [pc, #20]	; (80044d0 <etharp_request+0x24>)
 80044bc:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80044be:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80044c0:	9200      	str	r2, [sp, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	4a03      	ldr	r2, [pc, #12]	; (80044d4 <etharp_request+0x28>)
 80044c6:	f7ff fec5 	bl	8004254 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80044ca:	b004      	add	sp, #16
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	0800bf62 	.word	0x0800bf62
 80044d4:	0800bf5c 	.word	0x0800bf5c

080044d8 <etharp_tmr>:
{
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	4c13      	ldr	r4, [pc, #76]	; (8004528 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80044dc:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80044de:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80044e0:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80044e2:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 80044e4:	b16a      	cbz	r2, 8004502 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80044e6:	8a63      	ldrh	r3, [r4, #18]
 80044e8:	3301      	adds	r3, #1
 80044ea:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80044ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80044f0:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80044f2:	d203      	bcs.n	80044fc <etharp_tmr+0x24>
 80044f4:	2a01      	cmp	r2, #1
 80044f6:	d10a      	bne.n	800450e <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d910      	bls.n	800451e <etharp_tmr+0x46>
        etharp_free_entry(i);
 80044fc:	4628      	mov	r0, r5
 80044fe:	f7ff fe05 	bl	800410c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004502:	3501      	adds	r5, #1
 8004504:	2d0a      	cmp	r5, #10
 8004506:	f104 0418 	add.w	r4, r4, #24
 800450a:	d1ea      	bne.n	80044e2 <etharp_tmr+0xa>
}
 800450c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800450e:	2a03      	cmp	r2, #3
 8004510:	d101      	bne.n	8004516 <etharp_tmr+0x3e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004512:	7527      	strb	r7, [r4, #20]
 8004514:	e7f5      	b.n	8004502 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004516:	2a04      	cmp	r2, #4
 8004518:	d1f3      	bne.n	8004502 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800451a:	7526      	strb	r6, [r4, #20]
 800451c:	e7f1      	b.n	8004502 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800451e:	68a0      	ldr	r0, [r4, #8]
 8004520:	1d21      	adds	r1, r4, #4
 8004522:	f7ff ffc3 	bl	80044ac <etharp_request>
 8004526:	e7ec      	b.n	8004502 <etharp_tmr+0x2a>
 8004528:	200000e0 	.word	0x200000e0

0800452c <etharp_output_to_arp_index>:
{
 800452c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004530:	4d24      	ldr	r5, [pc, #144]	; (80045c4 <etharp_output_to_arp_index+0x98>)
 8004532:	2318      	movs	r3, #24
 8004534:	fb03 5302 	mla	r3, r3, r2, r5
{
 8004538:	4607      	mov	r7, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800453a:	7d1b      	ldrb	r3, [r3, #20]
 800453c:	2b01      	cmp	r3, #1
{
 800453e:	4688      	mov	r8, r1
 8004540:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004542:	d806      	bhi.n	8004552 <etharp_output_to_arp_index+0x26>
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <etharp_output_to_arp_index+0x9c>)
 8004546:	4921      	ldr	r1, [pc, #132]	; (80045cc <etharp_output_to_arp_index+0xa0>)
 8004548:	4821      	ldr	r0, [pc, #132]	; (80045d0 <etharp_output_to_arp_index+0xa4>)
 800454a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800454e:	f006 fc15 	bl	800ad7c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004552:	2218      	movs	r2, #24
 8004554:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8004558:	fb02 5404 	mla	r4, r2, r4, r5
 800455c:	00f6      	lsls	r6, r6, #3
 800455e:	7d23      	ldrb	r3, [r4, #20]
 8004560:	f106 0a0c 	add.w	sl, r6, #12
 8004564:	2b02      	cmp	r3, #2
 8004566:	44aa      	add	sl, r5
 8004568:	f107 092a 	add.w	r9, r7, #42	; 0x2a
 800456c:	d10b      	bne.n	8004586 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800456e:	8a63      	ldrh	r3, [r4, #18]
 8004570:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8004574:	d913      	bls.n	800459e <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004576:	3604      	adds	r6, #4
 8004578:	19a9      	adds	r1, r5, r6
 800457a:	4638      	mov	r0, r7
 800457c:	f7ff ff96 	bl	80044ac <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004580:	b908      	cbnz	r0, 8004586 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004582:	2303      	movs	r3, #3
 8004584:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8004586:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	464a      	mov	r2, r9
 800458e:	4653      	mov	r3, sl
 8004590:	4641      	mov	r1, r8
 8004592:	4638      	mov	r0, r7
 8004594:	f005 fd02 	bl	8009f9c <ethernet_output>
}
 8004598:	b004      	add	sp, #16
 800459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800459e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80045a2:	d3f0      	bcc.n	8004586 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80045a4:	2301      	movs	r3, #1
 80045a6:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80045a8:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <etharp_output_to_arp_index+0xa8>)
 80045ac:	9301      	str	r3, [sp, #4]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80045ae:	442e      	add	r6, r5
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80045b0:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	9602      	str	r6, [sp, #8]
 80045b6:	464b      	mov	r3, r9
 80045b8:	4652      	mov	r2, sl
 80045ba:	4649      	mov	r1, r9
 80045bc:	4638      	mov	r0, r7
 80045be:	f7ff fe49 	bl	8004254 <etharp_raw>
 80045c2:	e7dd      	b.n	8004580 <etharp_output_to_arp_index+0x54>
 80045c4:	200000e0 	.word	0x200000e0
 80045c8:	0801903b 	.word	0x0801903b
 80045cc:	080191cb 	.word	0x080191cb
 80045d0:	08018c9a 	.word	0x08018c9a
 80045d4:	0800bf62 	.word	0x0800bf62

080045d8 <etharp_query>:
{
 80045d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80045dc:	4688      	mov	r8, r1
 80045de:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80045e0:	4601      	mov	r1, r0
 80045e2:	f8d8 0000 	ldr.w	r0, [r8]
{
 80045e6:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80045e8:	f000 fbab 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d16b      	bne.n	80046c8 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 80045f0:	f8d8 3000 	ldr.w	r3, [r8]
 80045f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80045f8:	2ae0      	cmp	r2, #224	; 0xe0
 80045fa:	d065      	beq.n	80046c8 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d063      	beq.n	80046c8 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004600:	4632      	mov	r2, r6
 8004602:	2101      	movs	r1, #1
 8004604:	4640      	mov	r0, r8
 8004606:	f7ff fd95 	bl	8004134 <etharp_find_entry>
  if (i_err < 0) {
 800460a:	1e04      	subs	r4, r0, #0
 800460c:	da03      	bge.n	8004616 <etharp_query+0x3e>
    return (err_t)i_err;
 800460e:	b260      	sxtb	r0, r4
}
 8004610:	b002      	add	sp, #8
 8004612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8004616:	2c7e      	cmp	r4, #126	; 0x7e
 8004618:	dd06      	ble.n	8004628 <etharp_query+0x50>
 800461a:	4b35      	ldr	r3, [pc, #212]	; (80046f0 <etharp_query+0x118>)
 800461c:	4935      	ldr	r1, [pc, #212]	; (80046f4 <etharp_query+0x11c>)
 800461e:	4836      	ldr	r0, [pc, #216]	; (80046f8 <etharp_query+0x120>)
 8004620:	f240 32c1 	movw	r2, #961	; 0x3c1
 8004624:	f006 fbaa 	bl	800ad7c <iprintf>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004628:	4f34      	ldr	r7, [pc, #208]	; (80046fc <etharp_query+0x124>)
  i = (netif_addr_idx_t)i_err;
 800462a:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800462c:	2218      	movs	r2, #24
 800462e:	fb02 7204 	mla	r2, r2, r4, r7
 8004632:	7d13      	ldrb	r3, [r2, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d156      	bne.n	80046e6 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004638:	2301      	movs	r3, #1
 800463a:	7513      	strb	r3, [r2, #20]
    arp_table[i].netif = netif;
 800463c:	6096      	str	r6, [r2, #8]
    result = etharp_request(netif, ipaddr);
 800463e:	4641      	mov	r1, r8
 8004640:	4630      	mov	r0, r6
 8004642:	f7ff ff33 	bl	80044ac <etharp_request>
    if (q == NULL) {
 8004646:	2d00      	cmp	r5, #0
 8004648:	d0e2      	beq.n	8004610 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800464a:	2318      	movs	r3, #24
 800464c:	fb03 7204 	mla	r2, r3, r4, r7
 8004650:	7d12      	ldrb	r2, [r2, #20]
 8004652:	2a01      	cmp	r2, #1
 8004654:	d90e      	bls.n	8004674 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004656:	fb03 7304 	mla	r3, r3, r4, r7
 800465a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800465e:	9200      	str	r2, [sp, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 8004666:	4629      	mov	r1, r5
 8004668:	4630      	mov	r0, r6
    ETHARP_SET_ADDRHINT(netif, i);
 800466a:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800466e:	f005 fc95 	bl	8009f9c <ethernet_output>
 8004672:	e7cd      	b.n	8004610 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004674:	d1cc      	bne.n	8004610 <etharp_query+0x38>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004676:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80046f0 <etharp_query+0x118>
 800467a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004700 <etharp_query+0x128>
 800467e:	f8df a078 	ldr.w	sl, [pc, #120]	; 80046f8 <etharp_query+0x120>
 8004682:	462e      	mov	r6, r5
 8004684:	8972      	ldrh	r2, [r6, #10]
 8004686:	8933      	ldrh	r3, [r6, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d108      	bne.n	800469e <etharp_query+0xc6>
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	b133      	cbz	r3, 800469e <etharp_query+0xc6>
 8004690:	4643      	mov	r3, r8
 8004692:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8004696:	4649      	mov	r1, r9
 8004698:	4650      	mov	r0, sl
 800469a:	f006 fb6f 	bl	800ad7c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800469e:	7b33      	ldrb	r3, [r6, #12]
 80046a0:	065b      	lsls	r3, r3, #25
 80046a2:	d414      	bmi.n	80046ce <etharp_query+0xf6>
      p = p->next;
 80046a4:	6836      	ldr	r6, [r6, #0]
    while (p) {
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	d1ec      	bne.n	8004684 <etharp_query+0xac>
      pbuf_ref(p);
 80046aa:	4628      	mov	r0, r5
 80046ac:	f001 fdae 	bl	800620c <pbuf_ref>
      if (arp_table[i].q != NULL) {
 80046b0:	2318      	movs	r3, #24
 80046b2:	fb03 f204 	mul.w	r2, r3, r4
 80046b6:	461e      	mov	r6, r3
 80046b8:	58b8      	ldr	r0, [r7, r2]
 80046ba:	b108      	cbz	r0, 80046c0 <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 80046bc:	f001 fc66 	bl	8005f8c <pbuf_free>
      arp_table[i].q = p;
 80046c0:	4374      	muls	r4, r6
      result = ERR_OK;
 80046c2:	2000      	movs	r0, #0
      arp_table[i].q = p;
 80046c4:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 80046c6:	e7a3      	b.n	8004610 <etharp_query+0x38>
    return ERR_ARG;
 80046c8:	f06f 000f 	mvn.w	r0, #15
 80046cc:	e7a0      	b.n	8004610 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80046ce:	462a      	mov	r2, r5
 80046d0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80046d4:	200e      	movs	r0, #14
 80046d6:	f001 feb9 	bl	800644c <pbuf_clone>
    if (p != NULL) {
 80046da:	4605      	mov	r5, r0
 80046dc:	2800      	cmp	r0, #0
 80046de:	d1e7      	bne.n	80046b0 <etharp_query+0xd8>
      result = ERR_MEM;
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	e794      	b.n	8004610 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	d0a9      	beq.n	800463e <etharp_query+0x66>
  err_t result = ERR_MEM;
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	e7ac      	b.n	800464a <etharp_query+0x72>
 80046f0:	0801903b 	.word	0x0801903b
 80046f4:	080191fb 	.word	0x080191fb
 80046f8:	08018c9a 	.word	0x08018c9a
 80046fc:	200000e0 	.word	0x200000e0
 8004700:	08019209 	.word	0x08019209

08004704 <etharp_output>:
{
 8004704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004706:	460e      	mov	r6, r1
 8004708:	b085      	sub	sp, #20
 800470a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800470c:	4604      	mov	r4, r0
 800470e:	b930      	cbnz	r0, 800471e <etharp_output+0x1a>
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <etharp_output+0x114>)
 8004712:	4942      	ldr	r1, [pc, #264]	; (800481c <etharp_output+0x118>)
 8004714:	4842      	ldr	r0, [pc, #264]	; (8004820 <etharp_output+0x11c>)
 8004716:	f240 321e 	movw	r2, #798	; 0x31e
 800471a:	f006 fb2f 	bl	800ad7c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800471e:	b936      	cbnz	r6, 800472e <etharp_output+0x2a>
 8004720:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <etharp_output+0x114>)
 8004722:	4940      	ldr	r1, [pc, #256]	; (8004824 <etharp_output+0x120>)
 8004724:	483e      	ldr	r0, [pc, #248]	; (8004820 <etharp_output+0x11c>)
 8004726:	f240 321f 	movw	r2, #799	; 0x31f
 800472a:	f006 fb27 	bl	800ad7c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800472e:	b935      	cbnz	r5, 800473e <etharp_output+0x3a>
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <etharp_output+0x114>)
 8004732:	493d      	ldr	r1, [pc, #244]	; (8004828 <etharp_output+0x124>)
 8004734:	483a      	ldr	r0, [pc, #232]	; (8004820 <etharp_output+0x11c>)
 8004736:	f44f 7248 	mov.w	r2, #800	; 0x320
 800473a:	f006 fb1f 	bl	800ad7c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800473e:	6828      	ldr	r0, [r5, #0]
 8004740:	4621      	mov	r1, r4
 8004742:	f000 fafe 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 8004746:	2800      	cmp	r0, #0
 8004748:	d161      	bne.n	800480e <etharp_output+0x10a>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004750:	2ae0      	cmp	r2, #224	; 0xe0
 8004752:	d11b      	bne.n	800478c <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004754:	2301      	movs	r3, #1
 8004756:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800475a:	235e      	movs	r3, #94	; 0x5e
 800475c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004760:	786b      	ldrb	r3, [r5, #1]
 8004762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004766:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800476a:	78ab      	ldrb	r3, [r5, #2]
 800476c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004770:	78eb      	ldrb	r3, [r5, #3]
 8004772:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004776:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8004778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800477c:	9200      	str	r2, [sp, #0]
 800477e:	4631      	mov	r1, r6
 8004780:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8004784:	4620      	mov	r0, r4
 8004786:	f005 fc09 	bl	8009f9c <ethernet_output>
 800478a:	e023      	b.n	80047d4 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800478c:	6862      	ldr	r2, [r4, #4]
 800478e:	68a1      	ldr	r1, [r4, #8]
 8004790:	405a      	eors	r2, r3
 8004792:	420a      	tst	r2, r1
 8004794:	d009      	beq.n	80047aa <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 8004796:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004798:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d035      	beq.n	8004812 <etharp_output+0x10e>
            dst_addr = netif_ip4_gw(netif);
 80047a6:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80047aa:	4920      	ldr	r1, [pc, #128]	; (800482c <etharp_output+0x128>)
 80047ac:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 80047b0:	2318      	movs	r3, #24
 80047b2:	fb03 1302 	mla	r3, r3, r2, r1
 80047b6:	468c      	mov	ip, r1
 80047b8:	7d18      	ldrb	r0, [r3, #20]
 80047ba:	2801      	cmp	r0, #1
 80047bc:	d90c      	bls.n	80047d8 <etharp_output+0xd4>
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	42a1      	cmp	r1, r4
 80047c2:	d109      	bne.n	80047d8 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 80047c4:	6829      	ldr	r1, [r5, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4299      	cmp	r1, r3
 80047ca:	d105      	bne.n	80047d8 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 80047cc:	4631      	mov	r1, r6
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff feac 	bl	800452c <etharp_output_to_arp_index>
}
 80047d4:	b005      	add	sp, #20
 80047d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <etharp_output+0x128>)
{
 80047da:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80047dc:	7d1f      	ldrb	r7, [r3, #20]
 80047de:	2f01      	cmp	r7, #1
 80047e0:	b2ca      	uxtb	r2, r1
 80047e2:	d909      	bls.n	80047f8 <etharp_output+0xf4>
 80047e4:	689f      	ldr	r7, [r3, #8]
 80047e6:	42a7      	cmp	r7, r4
 80047e8:	d106      	bne.n	80047f8 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 80047ea:	685f      	ldr	r7, [r3, #4]
 80047ec:	6828      	ldr	r0, [r5, #0]
 80047ee:	42b8      	cmp	r0, r7
 80047f0:	d102      	bne.n	80047f8 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 80047f2:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 80047f6:	e7e9      	b.n	80047cc <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80047f8:	3101      	adds	r1, #1
 80047fa:	290a      	cmp	r1, #10
 80047fc:	f103 0318 	add.w	r3, r3, #24
 8004800:	d1ec      	bne.n	80047dc <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8004802:	4632      	mov	r2, r6
 8004804:	4629      	mov	r1, r5
 8004806:	4620      	mov	r0, r4
 8004808:	f7ff fee6 	bl	80045d8 <etharp_query>
 800480c:	e7e2      	b.n	80047d4 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <etharp_output+0x12c>)
 8004810:	e7b2      	b.n	8004778 <etharp_output+0x74>
            return ERR_RTE;
 8004812:	f06f 0003 	mvn.w	r0, #3
 8004816:	e7dd      	b.n	80047d4 <etharp_output+0xd0>
 8004818:	0801903b 	.word	0x0801903b
 800481c:	08018f01 	.word	0x08018f01
 8004820:	08018c9a 	.word	0x08018c9a
 8004824:	08019c85 	.word	0x08019c85
 8004828:	08019188 	.word	0x08019188
 800482c:	200000e0 	.word	0x200000e0
 8004830:	0800bf5c 	.word	0x0800bf5c

08004834 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	4604      	mov	r4, r0
 8004838:	b087      	sub	sp, #28
 800483a:	460f      	mov	r7, r1
 800483c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800483e:	2124      	movs	r1, #36	; 0x24
 8004840:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004844:	2022      	movs	r0, #34	; 0x22
 8004846:	f001 fc05 	bl	8006054 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800484a:	4605      	mov	r5, r0
 800484c:	b390      	cbz	r0, 80048b4 <icmp_send_response.isra.0+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800484e:	8943      	ldrh	r3, [r0, #10]
 8004850:	2b23      	cmp	r3, #35	; 0x23
 8004852:	d806      	bhi.n	8004862 <icmp_send_response.isra.0+0x2e>
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <icmp_send_response.isra.0+0x84>)
 8004856:	4919      	ldr	r1, [pc, #100]	; (80048bc <icmp_send_response.isra.0+0x88>)
 8004858:	4819      	ldr	r0, [pc, #100]	; (80048c0 <icmp_send_response.isra.0+0x8c>)
 800485a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800485e:	f006 fa8d 	bl	800ad7c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004862:	6820      	ldr	r0, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004864:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	7123      	strb	r3, [r4, #4]
 800486a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800486c:	71a3      	strb	r3, [r4, #6]
 800486e:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8004870:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004872:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004874:	4603      	mov	r3, r0
 8004876:	f104 0208 	add.w	r2, r4, #8
 800487a:	f100 011c 	add.w	r1, r0, #28
 800487e:	f853 6b04 	ldr.w	r6, [r3], #4
 8004882:	f842 6b04 	str.w	r6, [r2], #4
 8004886:	428b      	cmp	r3, r1
 8004888:	d1f9      	bne.n	800487e <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800488a:	68c3      	ldr	r3, [r0, #12]
 800488c:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800488e:	a805      	add	r0, sp, #20
 8004890:	f000 f8da 	bl	8004a48 <ip4_route>
#endif
  if (netif != NULL) {
 8004894:	b158      	cbz	r0, 80048ae <icmp_send_response.isra.0+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004896:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004898:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 800489a:	70a1      	strb	r1, [r4, #2]
 800489c:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800489e:	aa05      	add	r2, sp, #20
 80048a0:	e9cd 1300 	strd	r1, r3, [sp]
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	23ff      	movs	r3, #255	; 0xff
 80048a8:	4628      	mov	r0, r5
 80048aa:	f000 fa39 	bl	8004d20 <ip4_output_if>
  }
  pbuf_free(q);
 80048ae:	4628      	mov	r0, r5
 80048b0:	f001 fb6c 	bl	8005f8c <pbuf_free>
}
 80048b4:	b007      	add	sp, #28
 80048b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b8:	08019223 	.word	0x08019223
 80048bc:	0801929a 	.word	0x0801929a
 80048c0:	08018c9a 	.word	0x08018c9a

080048c4 <icmp_input>:
{
 80048c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 80048c8:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <icmp_input+0x124>)
 80048ca:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80048ce:	f899 5000 	ldrb.w	r5, [r9]
 80048d2:	f005 050f 	and.w	r5, r5, #15
 80048d6:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80048d8:	2d13      	cmp	r5, #19
{
 80048da:	b087      	sub	sp, #28
 80048dc:	4604      	mov	r4, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	4698      	mov	r8, r3
  if (hlen < IP_HLEN) {
 80048e2:	d916      	bls.n	8004912 <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 80048e4:	8942      	ldrh	r2, [r0, #10]
 80048e6:	2a03      	cmp	r2, #3
 80048e8:	d913      	bls.n	8004912 <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 80048ea:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	2a08      	cmp	r2, #8
 80048f0:	d10f      	bne.n	8004912 <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80048f2:	6958      	ldr	r0, [r3, #20]
 80048f4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80048f8:	2ae0      	cmp	r2, #224	; 0xe0
 80048fa:	d00a      	beq.n	8004912 <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80048fc:	6819      	ldr	r1, [r3, #0]
 80048fe:	f000 fa20 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 8004902:	b930      	cbnz	r0, 8004912 <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8004904:	8923      	ldrh	r3, [r4, #8]
 8004906:	2b07      	cmp	r3, #7
 8004908:	d903      	bls.n	8004912 <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 800490a:	4620      	mov	r0, r4
 800490c:	f000 fe73 	bl	80055f6 <inet_chksum_pbuf>
 8004910:	b128      	cbz	r0, 800491e <icmp_input+0x5a>
  pbuf_free(p);
 8004912:	4620      	mov	r0, r4
}
 8004914:	b007      	add	sp, #28
 8004916:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800491a:	f001 bb37 	b.w	8005f8c <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800491e:	f105 010e 	add.w	r1, r5, #14
 8004922:	4620      	mov	r0, r4
 8004924:	9105      	str	r1, [sp, #20]
 8004926:	f001 faf9 	bl	8005f1c <pbuf_add_header>
 800492a:	9905      	ldr	r1, [sp, #20]
 800492c:	2800      	cmp	r0, #0
 800492e:	d04f      	beq.n	80049d0 <icmp_input+0x10c>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8004930:	8923      	ldrh	r3, [r4, #8]
 8004932:	1959      	adds	r1, r3, r5
 8004934:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8004936:	428b      	cmp	r3, r1
 8004938:	d8eb      	bhi.n	8004912 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800493a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800493e:	200e      	movs	r0, #14
 8004940:	f001 fb88 	bl	8006054 <pbuf_alloc>
        if (r == NULL) {
 8004944:	4606      	mov	r6, r0
 8004946:	2800      	cmp	r0, #0
 8004948:	d0e3      	beq.n	8004912 <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800494a:	8942      	ldrh	r2, [r0, #10]
 800494c:	f105 0308 	add.w	r3, r5, #8
 8004950:	429a      	cmp	r2, r3
 8004952:	d203      	bcs.n	800495c <icmp_input+0x98>
          pbuf_free(r);
 8004954:	4630      	mov	r0, r6
 8004956:	f001 fb19 	bl	8005f8c <pbuf_free>
          goto icmperr;
 800495a:	e7da      	b.n	8004912 <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 800495c:	4649      	mov	r1, r9
 800495e:	6840      	ldr	r0, [r0, #4]
 8004960:	462a      	mov	r2, r5
 8004962:	f006 f9f5 	bl	800ad50 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8004966:	4629      	mov	r1, r5
 8004968:	4630      	mov	r0, r6
 800496a:	f001 fadb 	bl	8005f24 <pbuf_remove_header>
 800496e:	b130      	cbz	r0, 800497e <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <icmp_input+0x128>)
 8004972:	491f      	ldr	r1, [pc, #124]	; (80049f0 <icmp_input+0x12c>)
 8004974:	481f      	ldr	r0, [pc, #124]	; (80049f4 <icmp_input+0x130>)
 8004976:	22b6      	movs	r2, #182	; 0xb6
 8004978:	f006 fa00 	bl	800ad7c <iprintf>
          pbuf_free(r);
 800497c:	e7ea      	b.n	8004954 <icmp_input+0x90>
        if (pbuf_copy(r, p) != ERR_OK) {
 800497e:	4621      	mov	r1, r4
 8004980:	4630      	mov	r0, r6
 8004982:	f001 fc9b 	bl	80062bc <pbuf_copy>
 8004986:	2800      	cmp	r0, #0
 8004988:	d1e4      	bne.n	8004954 <icmp_input+0x90>
        pbuf_free(p);
 800498a:	4620      	mov	r0, r4
 800498c:	f001 fafe 	bl	8005f8c <pbuf_free>
        p = r;
 8004990:	4634      	mov	r4, r6
      if (pbuf_add_header(p, hlen)) {
 8004992:	4629      	mov	r1, r5
 8004994:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8004996:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8004998:	f001 fac0 	bl	8005f1c <pbuf_add_header>
 800499c:	2800      	cmp	r0, #0
 800499e:	d1b8      	bne.n	8004912 <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80049a0:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 80049a2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80049a6:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80049a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80049ac:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80049ae:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80049b0:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 80049b2:	70b0      	strb	r0, [r6, #2]
 80049b4:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80049b6:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80049b8:	7290      	strb	r0, [r2, #10]
 80049ba:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80049bc:	2201      	movs	r2, #1
 80049be:	e9cd 0200 	strd	r0, r2, [sp]
 80049c2:	490d      	ldr	r1, [pc, #52]	; (80049f8 <icmp_input+0x134>)
 80049c4:	9702      	str	r7, [sp, #8]
 80049c6:	4602      	mov	r2, r0
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 f9a9 	bl	8004d20 <ip4_output_if>
  pbuf_free(p);
 80049ce:	e7a0      	b.n	8004912 <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80049d0:	4620      	mov	r0, r4
 80049d2:	f001 faa7 	bl	8005f24 <pbuf_remove_header>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d0db      	beq.n	8004992 <icmp_input+0xce>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80049da:	4b04      	ldr	r3, [pc, #16]	; (80049ec <icmp_input+0x128>)
 80049dc:	4907      	ldr	r1, [pc, #28]	; (80049fc <icmp_input+0x138>)
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <icmp_input+0x130>)
 80049e0:	22c7      	movs	r2, #199	; 0xc7
 80049e2:	f006 f9cb 	bl	800ad7c <iprintf>
          goto icmperr;
 80049e6:	e794      	b.n	8004912 <icmp_input+0x4e>
 80049e8:	200080f4 	.word	0x200080f4
 80049ec:	08019223 	.word	0x08019223
 80049f0:	080192c6 	.word	0x080192c6
 80049f4:	08018c9a 	.word	0x08018c9a
 80049f8:	20008108 	.word	0x20008108
 80049fc:	080192fb 	.word	0x080192fb

08004a00 <icmp_dest_unreach>:
{
 8004a00:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8004a02:	3004      	adds	r0, #4
 8004a04:	2103      	movs	r1, #3
 8004a06:	f7ff bf15 	b.w	8004834 <icmp_send_response.isra.0>

08004a0a <icmp_time_exceeded>:
{
 8004a0a:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8004a0c:	3004      	adds	r0, #4
 8004a0e:	210b      	movs	r1, #11
 8004a10:	f7ff bf10 	b.w	8004834 <icmp_send_response.isra.0>

08004a14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8004a14:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004a16:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8004a1a:	f013 0301 	ands.w	r3, r3, #1
{
 8004a1e:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8004a20:	d00b      	beq.n	8004a3a <ip4_input_accept+0x26>
 8004a22:	6843      	ldr	r3, [r0, #4]
 8004a24:	b14b      	cbz	r3, 8004a3a <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <ip4_input_accept+0x30>)
 8004a28:	6950      	ldr	r0, [r2, #20]
 8004a2a:	4283      	cmp	r3, r0
 8004a2c:	d007      	beq.n	8004a3e <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8004a2e:	f000 f988 	bl	8004d42 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8004a32:	3800      	subs	r0, #0
 8004a34:	bf18      	it	ne
 8004a36:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8004a38:	bd08      	pop	{r3, pc}
  return 0;
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	e7fc      	b.n	8004a38 <ip4_input_accept+0x24>
      return 1;
 8004a3e:	2001      	movs	r0, #1
 8004a40:	e7fa      	b.n	8004a38 <ip4_input_accept+0x24>
 8004a42:	bf00      	nop
 8004a44:	200080f4 	.word	0x200080f4

08004a48 <ip4_route>:
{
 8004a48:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <ip4_route+0x54>)
{
 8004a4c:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	b978      	cbnz	r0, 8004a72 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <ip4_route+0x58>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	b15b      	cbz	r3, 8004a70 <ip4_route+0x28>
 8004a58:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8004a5c:	f001 0105 	and.w	r1, r1, #5
 8004a60:	2905      	cmp	r1, #5
 8004a62:	d105      	bne.n	8004a70 <ip4_route+0x28>
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	b119      	cbz	r1, 8004a70 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	2a7f      	cmp	r2, #127	; 0x7f
 8004a6c:	bf18      	it	ne
 8004a6e:	4618      	movne	r0, r3
}
 8004a70:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004a72:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8004a76:	07cd      	lsls	r5, r1, #31
 8004a78:	d50d      	bpl.n	8004a96 <ip4_route+0x4e>
 8004a7a:	074c      	lsls	r4, r1, #29
 8004a7c:	d50b      	bpl.n	8004a96 <ip4_route+0x4e>
 8004a7e:	6843      	ldr	r3, [r0, #4]
 8004a80:	b14b      	cbz	r3, 8004a96 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8004a82:	6814      	ldr	r4, [r2, #0]
 8004a84:	6885      	ldr	r5, [r0, #8]
 8004a86:	4063      	eors	r3, r4
 8004a88:	422b      	tst	r3, r5
 8004a8a:	d0f1      	beq.n	8004a70 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8004a8c:	078b      	lsls	r3, r1, #30
 8004a8e:	d402      	bmi.n	8004a96 <ip4_route+0x4e>
 8004a90:	68c3      	ldr	r3, [r0, #12]
 8004a92:	429c      	cmp	r4, r3
 8004a94:	d0ec      	beq.n	8004a70 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8004a96:	6800      	ldr	r0, [r0, #0]
 8004a98:	e7da      	b.n	8004a50 <ip4_route+0x8>
 8004a9a:	bf00      	nop
 8004a9c:	2000e47c 	.word	0x2000e47c
 8004aa0:	2000e480 	.word	0x2000e480

08004aa4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8004aa8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8004aac:	f898 5000 	ldrb.w	r5, [r8]
 8004ab0:	092b      	lsrs	r3, r5, #4
 8004ab2:	2b04      	cmp	r3, #4
{
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8004ab8:	d005      	beq.n	8004ac6 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8004aba:	4620      	mov	r0, r4
 8004abc:	f001 fa66 	bl	8005f8c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004ac6:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8004aca:	f000 fd2b 	bl	8005524 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8004ace:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8004ad0:	f005 050f 	and.w	r5, r5, #15
 8004ad4:	ea4f 0985 	mov.w	r9, r5, lsl #2
  if (iphdr_len < p->tot_len) {
 8004ad8:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8004ada:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8004adc:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8004ade:	d903      	bls.n	8004ae8 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f001 fb32 	bl	800614c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8004ae8:	8963      	ldrh	r3, [r4, #10]
 8004aea:	42ab      	cmp	r3, r5
 8004aec:	d3e5      	bcc.n	8004aba <ip4_input+0x16>
 8004aee:	8923      	ldrh	r3, [r4, #8]
 8004af0:	42bb      	cmp	r3, r7
 8004af2:	d3e2      	bcc.n	8004aba <ip4_input+0x16>
 8004af4:	2d13      	cmp	r5, #19
 8004af6:	d9e0      	bls.n	8004aba <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8004af8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004afc:	4d49      	ldr	r5, [pc, #292]	; (8004c24 <ip4_input+0x180>)
 8004afe:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8004b04:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8004b08:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004b0a:	2be0      	cmp	r3, #224	; 0xe0
 8004b0c:	d143      	bne.n	8004b96 <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004b0e:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8004b12:	07db      	lsls	r3, r3, #31
 8004b14:	d405      	bmi.n	8004b22 <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8004b16:	f898 3009 	ldrb.w	r3, [r8, #9]
 8004b1a:	2b11      	cmp	r3, #17
 8004b1c:	d053      	beq.n	8004bc6 <ip4_input+0x122>
 8004b1e:	2700      	movs	r7, #0
 8004b20:	e003      	b.n	8004b2a <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8004b22:	6873      	ldr	r3, [r6, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f6      	beq.n	8004b16 <ip4_input+0x72>
 8004b28:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8004b2a:	6928      	ldr	r0, [r5, #16]
 8004b2c:	b148      	cbz	r0, 8004b42 <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004b2e:	4631      	mov	r1, r6
 8004b30:	f000 f907 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1c0      	bne.n	8004aba <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8004b38:	692b      	ldr	r3, [r5, #16]
 8004b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8004b3e:	2be0      	cmp	r3, #224	; 0xe0
 8004b40:	d0bb      	beq.n	8004aba <ip4_input+0x16>
  if (netif == NULL) {
 8004b42:	2f00      	cmp	r7, #0
 8004b44:	d0b9      	beq.n	8004aba <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8004b46:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8004b4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b4e:	b13b      	cbz	r3, 8004b60 <ip4_input+0xbc>
    p = ip4_reass(p);
 8004b50:	4620      	mov	r0, r4
 8004b52:	f000 fa29 	bl	8004fa8 <ip4_reass>
    if (p == NULL) {
 8004b56:	4604      	mov	r4, r0
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d0b1      	beq.n	8004ac0 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8004b5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8004b60:	f8c5 8008 	str.w	r8, [r5, #8]
  ip_data.current_input_netif = inp;
 8004b64:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8004b68:	f898 3000 	ldrb.w	r3, [r8]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	009b      	lsls	r3, r3, #2
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8004b72:	4649      	mov	r1, r9
 8004b74:	4620      	mov	r0, r4
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8004b76:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8004b78:	f001 f9d4 	bl	8005f24 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8004b7c:	f898 3009 	ldrb.w	r3, [r8, #9]
 8004b80:	2b06      	cmp	r3, #6
 8004b82:	d034      	beq.n	8004bee <ip4_input+0x14a>
 8004b84:	2b11      	cmp	r3, #17
 8004b86:	d026      	beq.n	8004bd6 <ip4_input+0x132>
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d135      	bne.n	8004bf8 <ip4_input+0x154>
        icmp_input(p, inp);
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f7ff fe98 	bl	80048c4 <icmp_input>
        break;
 8004b94:	e023      	b.n	8004bde <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ff3c 	bl	8004a14 <ip4_input_accept>
 8004b9c:	b980      	cbnz	r0, 8004bc0 <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8004b9e:	7d2b      	ldrb	r3, [r5, #20]
 8004ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba2:	d0b8      	beq.n	8004b16 <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8004ba4:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <ip4_input+0x184>)
 8004ba6:	681f      	ldr	r7, [r3, #0]
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	d0b4      	beq.n	8004b16 <ip4_input+0x72>
          if (netif == inp) {
 8004bac:	42b7      	cmp	r7, r6
 8004bae:	d101      	bne.n	8004bb4 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8004bb0:	683f      	ldr	r7, [r7, #0]
 8004bb2:	e7f9      	b.n	8004ba8 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f7ff ff2d 	bl	8004a14 <ip4_input_accept>
 8004bba:	2800      	cmp	r0, #0
 8004bbc:	d0f8      	beq.n	8004bb0 <ip4_input+0x10c>
 8004bbe:	e7b4      	b.n	8004b2a <ip4_input+0x86>
  if (netif == NULL) {
 8004bc0:	2e00      	cmp	r6, #0
 8004bc2:	d1b1      	bne.n	8004b28 <ip4_input+0x84>
 8004bc4:	e7a7      	b.n	8004b16 <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8004bc6:	eb08 0309 	add.w	r3, r8, r9
 8004bca:	885b      	ldrh	r3, [r3, #2]
 8004bcc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8004bd0:	d1a5      	bne.n	8004b1e <ip4_input+0x7a>
 8004bd2:	4637      	mov	r7, r6
 8004bd4:	e7b5      	b.n	8004b42 <ip4_input+0x9e>
        udp_input(p, inp);
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f004 fedf 	bl	800999c <udp_input>
  ip_data.current_netif = NULL;
 8004bde:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8004be0:	e9c5 3300 	strd	r3, r3, [r5]
  ip4_addr_set_any(ip4_current_dest_addr());
 8004be4:	e9c5 3304 	strd	r3, r3, [r5, #16]
  ip_data.current_ip4_header = NULL;
 8004be8:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8004bea:	81ab      	strh	r3, [r5, #12]
  return ERR_OK;
 8004bec:	e768      	b.n	8004ac0 <ip4_input+0x1c>
        tcp_input(p, inp);
 8004bee:	4631      	mov	r1, r6
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f002 ff9b 	bl	8007b2c <tcp_input>
        break;
 8004bf6:	e7f2      	b.n	8004bde <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004bf8:	6968      	ldr	r0, [r5, #20]
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	f000 f8a1 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 8004c00:	b960      	cbnz	r0, 8004c1c <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004c02:	696b      	ldr	r3, [r5, #20]
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8004c08:	2be0      	cmp	r3, #224	; 0xe0
 8004c0a:	d007      	beq.n	8004c1c <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f001 f9b4 	bl	8005f7c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8004c14:	2102      	movs	r1, #2
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff fef2 	bl	8004a00 <icmp_dest_unreach>
        pbuf_free(p);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f001 f9b5 	bl	8005f8c <pbuf_free>
        break;
 8004c22:	e7dc      	b.n	8004bde <ip4_input+0x13a>
 8004c24:	200080f4 	.word	0x200080f4
 8004c28:	2000e47c 	.word	0x2000e47c

08004c2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8004c2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004c32:	7b83      	ldrb	r3, [r0, #14]
{
 8004c34:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004c38:	2b01      	cmp	r3, #1
{
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	4689      	mov	r9, r1
 8004c3e:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8004c40:	d006      	beq.n	8004c50 <ip4_output_if_src+0x24>
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <ip4_output_if_src+0xdc>)
 8004c44:	4931      	ldr	r1, [pc, #196]	; (8004d0c <ip4_output_if_src+0xe0>)
 8004c46:	4832      	ldr	r0, [pc, #200]	; (8004d10 <ip4_output_if_src+0xe4>)
 8004c48:	f44f 7255 	mov.w	r2, #852	; 0x354
 8004c4c:	f006 f896 	bl	800ad7c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8004c50:	2e00      	cmp	r6, #0
 8004c52:	d049      	beq.n	8004ce8 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8004c54:	2114      	movs	r1, #20
 8004c56:	4620      	mov	r0, r4
 8004c58:	f001 f960 	bl	8005f1c <pbuf_add_header>
 8004c5c:	b120      	cbz	r0, 8004c68 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8004c5e:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8004c62:	b002      	add	sp, #8
 8004c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004c68:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8004c6a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8004c6c:	2b13      	cmp	r3, #19
 8004c6e:	d806      	bhi.n	8004c7e <ip4_output_if_src+0x52>
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <ip4_output_if_src+0xdc>)
 8004c72:	4928      	ldr	r1, [pc, #160]	; (8004d14 <ip4_output_if_src+0xe8>)
 8004c74:	4826      	ldr	r0, [pc, #152]	; (8004d10 <ip4_output_if_src+0xe4>)
 8004c76:	f44f 7262 	mov.w	r2, #904	; 0x388
 8004c7a:	f006 f87f 	bl	800ad7c <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8004c7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8004c82:	722f      	strb	r7, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 8004c84:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8004c86:	6833      	ldr	r3, [r6, #0]
 8004c88:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8004c8a:	2345      	movs	r3, #69	; 0x45
 8004c8c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8004c8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004c92:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004c94:	8920      	ldrh	r0, [r4, #8]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004c96:	f8df a084 	ldr.w	sl, [pc, #132]	; 8004d1c <ip4_output_if_src+0xf0>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004c9a:	f000 fc43 	bl	8005524 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8004c9e:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8004ca0:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8004ca2:	71af      	strb	r7, [r5, #6]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004ca4:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 8004ca8:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004caa:	f000 fc3b 	bl	8005524 <lwip_htons>
    ++ip_id;
 8004cae:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8004cb2:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8004cba:	f1b9 0f00 	cmp.w	r9, #0
 8004cbe:	d110      	bne.n	8004ce2 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <ip4_output_if_src+0xec>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8004cc6:	72af      	strb	r7, [r5, #10]
 8004cc8:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8004cca:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8004cce:	b19b      	cbz	r3, 8004cf8 <ip4_output_if_src+0xcc>
 8004cd0:	8922      	ldrh	r2, [r4, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 8004cd6:	4632      	mov	r2, r6
 8004cd8:	4641      	mov	r1, r8
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 fb36 	bl	800534c <ip4_frag>
 8004ce0:	e7bf      	b.n	8004c62 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 8004ce2:	f8d9 3000 	ldr.w	r3, [r9]
 8004ce6:	e7ed      	b.n	8004cc4 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8004ce8:	8963      	ldrh	r3, [r4, #10]
 8004cea:	2b13      	cmp	r3, #19
 8004cec:	d9b7      	bls.n	8004c5e <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8004cf4:	ae01      	add	r6, sp, #4
 8004cf6:	e7e8      	b.n	8004cca <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 8004cf8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4640      	mov	r0, r8
 8004d02:	4798      	blx	r3
 8004d04:	e7ad      	b.n	8004c62 <ip4_output_if_src+0x36>
 8004d06:	bf00      	nop
 8004d08:	0801932d 	.word	0x0801932d
 8004d0c:	080193a3 	.word	0x080193a3
 8004d10:	08018c9a 	.word	0x08018c9a
 8004d14:	080193af 	.word	0x080193af
 8004d18:	0800be4c 	.word	0x0800be4c
 8004d1c:	200001d2 	.word	0x200001d2

08004d20 <ip4_output_if>:
{
 8004d20:	b4f0      	push	{r4, r5, r6, r7}
 8004d22:	9c06      	ldr	r4, [sp, #24]
 8004d24:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8004d28:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8004d2c:	b11a      	cbz	r2, 8004d36 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8004d2e:	b109      	cbz	r1, 8004d34 <ip4_output_if+0x14>
 8004d30:	680f      	ldr	r7, [r1, #0]
 8004d32:	b907      	cbnz	r7, 8004d36 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8004d34:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004d36:	e9cd 6405 	strd	r6, r4, [sp, #20]
 8004d3a:	9504      	str	r5, [sp, #16]
}
 8004d3c:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8004d3e:	f7ff bf75 	b.w	8004c2c <ip4_output_if_src>

08004d42 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8004d42:	1e43      	subs	r3, r0, #1
 8004d44:	3303      	adds	r3, #3
{
 8004d46:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8004d48:	d812      	bhi.n	8004d70 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8004d4a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8004d4e:	f013 0002 	ands.w	r0, r3, #2
 8004d52:	d010      	beq.n	8004d76 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8004d54:	684b      	ldr	r3, [r1, #4]
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00c      	beq.n	8004d74 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8004d5a:	6888      	ldr	r0, [r1, #8]
 8004d5c:	4053      	eors	r3, r2
 8004d5e:	4203      	tst	r3, r0
 8004d60:	d108      	bne.n	8004d74 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8004d62:	43c3      	mvns	r3, r0
 8004d64:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8004d68:	1ac3      	subs	r3, r0, r3
 8004d6a:	4258      	negs	r0, r3
 8004d6c:	4158      	adcs	r0, r3
 8004d6e:	4770      	bx	lr
    return 1;
 8004d70:	2001      	movs	r0, #1
 8004d72:	4770      	bx	lr
    return 0;
 8004d74:	2000      	movs	r0, #0
  }
}
 8004d76:	4770      	bx	lr

08004d78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <ip_reass_dequeue_datagram+0x34>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4282      	cmp	r2, r0
{
 8004d80:	4604      	mov	r4, r0
 8004d82:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8004d84:	d107      	bne.n	8004d96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8004d86:	6802      	ldr	r2, [r0, #0]
 8004d88:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	2004      	movs	r0, #4
}
 8004d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8004d92:	f000 becd 	b.w	8005b30 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8004d96:	b931      	cbnz	r1, 8004da6 <ip_reass_dequeue_datagram+0x2e>
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <ip_reass_dequeue_datagram+0x38>)
 8004d9a:	4906      	ldr	r1, [pc, #24]	; (8004db4 <ip_reass_dequeue_datagram+0x3c>)
 8004d9c:	4806      	ldr	r0, [pc, #24]	; (8004db8 <ip_reass_dequeue_datagram+0x40>)
 8004d9e:	f240 1245 	movw	r2, #325	; 0x145
 8004da2:	f005 ffeb 	bl	800ad7c <iprintf>
    prev->next = ipr->next;
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	e7ee      	b.n	8004d8a <ip_reass_dequeue_datagram+0x12>
 8004dac:	200001d4 	.word	0x200001d4
 8004db0:	080193dc 	.word	0x080193dc
 8004db4:	08019457 	.word	0x08019457
 8004db8:	08018c9a 	.word	0x08018c9a

08004dbc <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004dbc:	4281      	cmp	r1, r0
{
 8004dbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8004dc6:	d105      	bne.n	8004dd4 <ip_reass_free_complete_datagram+0x18>
 8004dc8:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <ip_reass_free_complete_datagram+0xcc>)
 8004dca:	4930      	ldr	r1, [pc, #192]	; (8004e8c <ip_reass_free_complete_datagram+0xd0>)
 8004dcc:	4830      	ldr	r0, [pc, #192]	; (8004e90 <ip_reass_free_complete_datagram+0xd4>)
 8004dce:	22ab      	movs	r2, #171	; 0xab
 8004dd0:	f005 ffd4 	bl	800ad7c <iprintf>
  if (prev != NULL) {
 8004dd4:	b146      	cbz	r6, 8004de8 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8004dd6:	6833      	ldr	r3, [r6, #0]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d005      	beq.n	8004de8 <ip_reass_free_complete_datagram+0x2c>
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <ip_reass_free_complete_datagram+0xcc>)
 8004dde:	492d      	ldr	r1, [pc, #180]	; (8004e94 <ip_reass_free_complete_datagram+0xd8>)
 8004de0:	482b      	ldr	r0, [pc, #172]	; (8004e90 <ip_reass_free_complete_datagram+0xd4>)
 8004de2:	22ad      	movs	r2, #173	; 0xad
 8004de4:	f005 ffca 	bl	800ad7c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8004de8:	6867      	ldr	r7, [r4, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8004dec:	889a      	ldrh	r2, [r3, #4]
 8004dee:	bb92      	cbnz	r2, 8004e56 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8004df4:	f104 011c 	add.w	r1, r4, #28
 8004df8:	f104 0208 	add.w	r2, r4, #8
 8004dfc:	f852 0b04 	ldr.w	r0, [r2], #4
 8004e00:	f843 0b04 	str.w	r0, [r3], #4
 8004e04:	428a      	cmp	r2, r1
 8004e06:	d1f9      	bne.n	8004dfc <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8004e08:	2101      	movs	r1, #1
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff fdfd 	bl	8004a0a <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8004e10:	4638      	mov	r0, r7
 8004e12:	f001 f9f3 	bl	80061fc <pbuf_clen>
 8004e16:	4605      	mov	r5, r0
    pbuf_free(p);
 8004e18:	4638      	mov	r0, r7
 8004e1a:	f001 f8b7 	bl	8005f8c <pbuf_free>
  p = ipr->p;
 8004e1e:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004e20:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004e88 <ip_reass_free_complete_datagram+0xcc>
 8004e24:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004ea0 <ip_reass_free_complete_datagram+0xe4>
 8004e28:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004e90 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8004e2c:	b9af      	cbnz	r7, 8004e5a <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8004e2e:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8004e30:	4c19      	ldr	r4, [pc, #100]	; (8004e98 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8004e32:	4631      	mov	r1, r6
 8004e34:	f7ff ffa0 	bl	8004d78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8004e38:	88a3      	ldrh	r3, [r4, #4]
 8004e3a:	42ab      	cmp	r3, r5
 8004e3c:	d205      	bcs.n	8004e4a <ip_reass_free_complete_datagram+0x8e>
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <ip_reass_free_complete_datagram+0xcc>)
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <ip_reass_free_complete_datagram+0xe0>)
 8004e42:	4813      	ldr	r0, [pc, #76]	; (8004e90 <ip_reass_free_complete_datagram+0xd4>)
 8004e44:	22d2      	movs	r2, #210	; 0xd2
 8004e46:	f005 ff99 	bl	800ad7c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8004e4a:	88a3      	ldrh	r3, [r4, #4]
 8004e4c:	1b5b      	subs	r3, r3, r5
 8004e4e:	80a3      	strh	r3, [r4, #4]
}
 8004e50:	4628      	mov	r0, r5
 8004e52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8004e56:	2500      	movs	r5, #0
 8004e58:	e7e1      	b.n	8004e1e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8004e5a:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8004e5c:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8004e5e:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8004e62:	f001 f9cb 	bl	80061fc <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8004e66:	4405      	add	r5, r0
 8004e68:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004e6c:	db05      	blt.n	8004e7a <ip_reass_free_complete_datagram+0xbe>
 8004e6e:	4643      	mov	r3, r8
 8004e70:	22cc      	movs	r2, #204	; 0xcc
 8004e72:	4649      	mov	r1, r9
 8004e74:	4650      	mov	r0, sl
 8004e76:	f005 ff81 	bl	800ad7c <iprintf>
    pbuf_free(pcur);
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f001 f886 	bl	8005f8c <pbuf_free>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8004e80:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8004e82:	465f      	mov	r7, fp
 8004e84:	e7d2      	b.n	8004e2c <ip_reass_free_complete_datagram+0x70>
 8004e86:	bf00      	nop
 8004e88:	080193dc 	.word	0x080193dc
 8004e8c:	08019470 	.word	0x08019470
 8004e90:	08018c9a 	.word	0x08018c9a
 8004e94:	0801947c 	.word	0x0801947c
 8004e98:	200001d4 	.word	0x200001d4
 8004e9c:	080194ab 	.word	0x080194ab
 8004ea0:	0801948e 	.word	0x0801948e

08004ea4 <ip_reass_remove_oldest_datagram>:
{
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8004ea8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8004f18 <ip_reass_remove_oldest_datagram+0x74>
{
 8004eac:	4605      	mov	r5, r0
 8004eae:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8004eb0:	2600      	movs	r6, #0
    other_datagrams = 0;
 8004eb2:	2400      	movs	r4, #0
    r = reassdatagrams;
 8004eb4:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8004eb8:	4621      	mov	r1, r4
    prev = NULL;
 8004eba:	46a4      	mov	ip, r4
    oldest = NULL;
 8004ebc:	4620      	mov	r0, r4
    while (r != NULL) {
 8004ebe:	b953      	cbnz	r3, 8004ed6 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8004ec0:	b110      	cbz	r0, 8004ec8 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8004ec2:	f7ff ff7b 	bl	8004dbc <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8004ec6:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8004ec8:	42be      	cmp	r6, r7
 8004eca:	da01      	bge.n	8004ed0 <ip_reass_remove_oldest_datagram+0x2c>
 8004ecc:	2c01      	cmp	r4, #1
 8004ece:	dcf0      	bgt.n	8004eb2 <ip_reass_remove_oldest_datagram+0xe>
}
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8004ed6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8004eda:	695a      	ldr	r2, [r3, #20]
 8004edc:	4572      	cmp	r2, lr
 8004ede:	d109      	bne.n	8004ef4 <ip_reass_remove_oldest_datagram+0x50>
 8004ee0:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	4572      	cmp	r2, lr
 8004ee8:	d104      	bne.n	8004ef4 <ip_reass_remove_oldest_datagram+0x50>
 8004eea:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8004eee:	88aa      	ldrh	r2, [r5, #4]
 8004ef0:	4596      	cmp	lr, r2
 8004ef2:	d008      	beq.n	8004f06 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8004ef4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8004ef6:	b160      	cbz	r0, 8004f12 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8004ef8:	7fc2      	ldrb	r2, [r0, #31]
 8004efa:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8004efe:	4596      	cmp	lr, r2
 8004f00:	bf9c      	itt	ls
 8004f02:	4661      	movls	r1, ip
 8004f04:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	bf18      	it	ne
 8004f0c:	469c      	movne	ip, r3
 8004f0e:	4613      	mov	r3, r2
 8004f10:	e7d5      	b.n	8004ebe <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8004f12:	4661      	mov	r1, ip
 8004f14:	4618      	mov	r0, r3
 8004f16:	e7f6      	b.n	8004f06 <ip_reass_remove_oldest_datagram+0x62>
 8004f18:	200001d4 	.word	0x200001d4

08004f1c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8004f1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8004f1e:	4604      	mov	r4, r0
 8004f20:	b930      	cbnz	r0, 8004f30 <ip_frag_free_pbuf_custom_ref+0x14>
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <ip_frag_free_pbuf_custom_ref+0x20>)
 8004f24:	4906      	ldr	r1, [pc, #24]	; (8004f40 <ip_frag_free_pbuf_custom_ref+0x24>)
 8004f26:	4807      	ldr	r0, [pc, #28]	; (8004f44 <ip_frag_free_pbuf_custom_ref+0x28>)
 8004f28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8004f2c:	f005 ff26 	bl	800ad7c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8004f30:	4621      	mov	r1, r4
 8004f32:	2005      	movs	r0, #5
}
 8004f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8004f38:	f000 bdfa 	b.w	8005b30 <memp_free>
 8004f3c:	080193dc 	.word	0x080193dc
 8004f40:	08019c6d 	.word	0x08019c6d
 8004f44:	08018c9a 	.word	0x08018c9a

08004f48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8004f48:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	b930      	cbnz	r0, 8004f5c <ipfrag_free_pbuf_custom+0x14>
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <ipfrag_free_pbuf_custom+0x28>)
 8004f50:	4908      	ldr	r1, [pc, #32]	; (8004f74 <ipfrag_free_pbuf_custom+0x2c>)
 8004f52:	4809      	ldr	r0, [pc, #36]	; (8004f78 <ipfrag_free_pbuf_custom+0x30>)
 8004f54:	f240 22ce 	movw	r2, #718	; 0x2ce
 8004f58:	f005 ff10 	bl	800ad7c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8004f5c:	6960      	ldr	r0, [r4, #20]
 8004f5e:	b108      	cbz	r0, 8004f64 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8004f60:	f001 f814 	bl	8005f8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8004f64:	4620      	mov	r0, r4
}
 8004f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8004f6a:	f7ff bfd7 	b.w	8004f1c <ip_frag_free_pbuf_custom_ref>
 8004f6e:	bf00      	nop
 8004f70:	080193dc 	.word	0x080193dc
 8004f74:	080194cd 	.word	0x080194cd
 8004f78:	08018c9a 	.word	0x08018c9a

08004f7c <ip_reass_tmr>:
{
 8004f7c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <ip_reass_tmr+0x28>)
 8004f80:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8004f82:	2400      	movs	r4, #0
  while (r != NULL) {
 8004f84:	b900      	cbnz	r0, 8004f88 <ip_reass_tmr+0xc>
}
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8004f88:	7fc3      	ldrb	r3, [r0, #31]
 8004f8a:	6805      	ldr	r5, [r0, #0]
 8004f8c:	b123      	cbz	r3, 8004f98 <ip_reass_tmr+0x1c>
      r->timer--;
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8004f92:	4604      	mov	r4, r0
 8004f94:	4628      	mov	r0, r5
 8004f96:	e7f5      	b.n	8004f84 <ip_reass_tmr+0x8>
 8004f98:	4621      	mov	r1, r4
 8004f9a:	f7ff ff0f 	bl	8004dbc <ip_reass_free_complete_datagram>
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	e7f7      	b.n	8004f92 <ip_reass_tmr+0x16>
 8004fa2:	bf00      	nop
 8004fa4:	200001d4 	.word	0x200001d4

08004fa8 <ip4_reass>:
{
 8004fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8004fac:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8004fae:	782b      	ldrb	r3, [r5, #0]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	2b05      	cmp	r3, #5
{
 8004fb6:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8004fb8:	f040 80a0 	bne.w	80050fc <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8004fbc:	88e8      	ldrh	r0, [r5, #6]
 8004fbe:	f000 fab1 	bl	8005524 <lwip_htons>
 8004fc2:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8004fc4:	8868      	ldrh	r0, [r5, #2]
 8004fc6:	f000 faad 	bl	8005524 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8004fca:	782b      	ldrb	r3, [r5, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8004fd0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8004fd4:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8004fd8:	f0c0 8090 	bcc.w	80050fc <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8004fdc:	1bc0      	subs	r0, r0, r7
 8004fde:	b283      	uxth	r3, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004fe0:	4ebf      	ldr	r6, [pc, #764]	; (80052e0 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 8004fe2:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	f001 f909 	bl	80061fc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004fea:	88b3      	ldrh	r3, [r6, #4]
 8004fec:	4403      	add	r3, r0
 8004fee:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8004ff0:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8004ff2:	dc79      	bgt.n	80050e8 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8004ff4:	6834      	ldr	r4, [r6, #0]
 8004ff6:	2c00      	cmp	r4, #0
 8004ff8:	f040 8085 	bne.w	8005106 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8004ffc:	2004      	movs	r0, #4
 8004ffe:	f000 fd7b 	bl	8005af8 <memp_malloc>
  if (ipr == NULL) {
 8005002:	4604      	mov	r4, r0
 8005004:	b958      	cbnz	r0, 800501e <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005006:	4649      	mov	r1, r9
 8005008:	4628      	mov	r0, r5
 800500a:	f7ff ff4b 	bl	8004ea4 <ip_reass_remove_oldest_datagram>
 800500e:	4581      	cmp	r9, r0
 8005010:	dc74      	bgt.n	80050fc <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005012:	2004      	movs	r0, #4
 8005014:	f000 fd70 	bl	8005af8 <memp_malloc>
    if (ipr == NULL)
 8005018:	4604      	mov	r4, r0
 800501a:	2800      	cmp	r0, #0
 800501c:	d06e      	beq.n	80050fc <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800501e:	221c      	movs	r2, #28
 8005020:	2100      	movs	r1, #0
 8005022:	1d20      	adds	r0, r4, #4
 8005024:	f005 fea2 	bl	800ad6c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005028:	230f      	movs	r3, #15
 800502a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800502c:	6833      	ldr	r3, [r6, #0]
 800502e:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 8005030:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8005032:	462b      	mov	r3, r5
 8005034:	f104 0208 	add.w	r2, r4, #8
 8005038:	f105 0114 	add.w	r1, r5, #20
 800503c:	f853 0b04 	ldr.w	r0, [r3], #4
 8005040:	f842 0b04 	str.w	r0, [r2], #4
 8005044:	428b      	cmp	r3, r1
 8005046:	d1f9      	bne.n	800503c <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8005048:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800504c:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 8005050:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8005054:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 8005058:	d10a      	bne.n	8005070 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 800505a:	9b01      	ldr	r3, [sp, #4]
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8005060:	429f      	cmp	r7, r3
 8005062:	f200 8129 	bhi.w	80052b8 <ip4_reass+0x310>
 8005066:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800506a:	4293      	cmp	r3, r2
 800506c:	f200 8124 	bhi.w	80052b8 <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8005070:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8005074:	8868      	ldrh	r0, [r5, #2]
 8005076:	f000 fa55 	bl	8005524 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800507a:	782b      	ldrb	r3, [r5, #0]
 800507c:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8005080:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8005084:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8005088:	f0c0 8116 	bcc.w	80052b8 <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 800508c:	1a80      	subs	r0, r0, r2
 800508e:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8005092:	88e8      	ldrh	r0, [r5, #6]
 8005094:	f000 fa46 	bl	8005524 <lwip_htons>
 8005098:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800509c:	00c0      	lsls	r0, r0, #3
  iprh->end = (u16_t)(offset + len);
 800509e:	eb0a 0300 	add.w	r3, sl, r0
  iprh = (struct ip_reass_helper *)new_p->payload;
 80050a2:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->end = (u16_t)(offset + len);
 80050a6:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 80050aa:	2500      	movs	r5, #0
  if (iprh->end < offset) {
 80050ac:	4560      	cmp	r0, ip
  iprh->next_pbuf = NULL;
 80050ae:	7035      	strb	r5, [r6, #0]
 80050b0:	7075      	strb	r5, [r6, #1]
 80050b2:	70b5      	strb	r5, [r6, #2]
 80050b4:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80050b6:	80b0      	strh	r0, [r6, #4]
  iprh->end = (u16_t)(offset + len);
 80050b8:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 80050ba:	f200 80fd 	bhi.w	80052b8 <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 80050be:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 80050c2:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 80050c6:	4671      	mov	r1, lr
 80050c8:	bb61      	cbnz	r1, 8005124 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	f040 80ae 	bne.w	800522c <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80050d0:	f1be 0f00 	cmp.w	lr, #0
 80050d4:	f000 809a 	beq.w	800520c <ip4_reass+0x264>
 80050d8:	4b82      	ldr	r3, [pc, #520]	; (80052e4 <ip4_reass+0x33c>)
 80050da:	4983      	ldr	r1, [pc, #524]	; (80052e8 <ip4_reass+0x340>)
 80050dc:	4883      	ldr	r0, [pc, #524]	; (80052ec <ip4_reass+0x344>)
 80050de:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80050e2:	f005 fe4b 	bl	800ad7c <iprintf>
 80050e6:	e091      	b.n	800520c <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80050e8:	4601      	mov	r1, r0
 80050ea:	4628      	mov	r0, r5
 80050ec:	f7ff feda 	bl	8004ea4 <ip_reass_remove_oldest_datagram>
 80050f0:	b120      	cbz	r0, 80050fc <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80050f2:	88b3      	ldrh	r3, [r6, #4]
 80050f4:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80050f6:	2b0a      	cmp	r3, #10
 80050f8:	f77f af7c 	ble.w	8004ff4 <ip4_reass+0x4c>
  pbuf_free(p);
 80050fc:	4640      	mov	r0, r8
 80050fe:	f000 ff45 	bl	8005f8c <pbuf_free>
  return NULL;
 8005102:	2600      	movs	r6, #0
 8005104:	e07c      	b.n	8005200 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8005106:	68eb      	ldr	r3, [r5, #12]
 8005108:	6962      	ldr	r2, [r4, #20]
 800510a:	429a      	cmp	r2, r3
 800510c:	d108      	bne.n	8005120 <ip4_reass+0x178>
 800510e:	692b      	ldr	r3, [r5, #16]
 8005110:	69a2      	ldr	r2, [r4, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d104      	bne.n	8005120 <ip4_reass+0x178>
 8005116:	89a2      	ldrh	r2, [r4, #12]
 8005118:	88ab      	ldrh	r3, [r5, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	f000 80f2 	beq.w	8005304 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005120:	6824      	ldr	r4, [r4, #0]
 8005122:	e768      	b.n	8004ff6 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8005124:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8005126:	889a      	ldrh	r2, [r3, #4]
 8005128:	4290      	cmp	r0, r2
 800512a:	d272      	bcs.n	8005212 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 800512c:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800512e:	2d00      	cmp	r5, #0
 8005130:	d06a      	beq.n	8005208 <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8005132:	88eb      	ldrh	r3, [r5, #6]
 8005134:	4298      	cmp	r0, r3
 8005136:	f0c0 80bf 	bcc.w	80052b8 <ip4_reass+0x310>
 800513a:	4594      	cmp	ip, r2
 800513c:	f200 80bc 	bhi.w	80052b8 <ip4_reass+0x310>
        iprh_prev->next_pbuf = new_p;
 8005140:	f8c5 8000 	str.w	r8, [r5]
        if (iprh_prev->end != iprh->start) {
 8005144:	4298      	cmp	r0, r3
      if (iprh_prev->end != iprh->start) {
 8005146:	f040 80f9 	bne.w	800533c <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800514a:	f1bb 0f00 	cmp.w	fp, #0
 800514e:	d004      	beq.n	800515a <ip4_reass+0x1b2>
 8005150:	7fa3      	ldrb	r3, [r4, #30]
 8005152:	f013 0301 	ands.w	r3, r3, #1
 8005156:	f000 80a0 	beq.w	800529a <ip4_reass+0x2f2>
    if (valid) {
 800515a:	f1ba 0f00 	cmp.w	sl, #0
 800515e:	d175      	bne.n	800524c <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 8005160:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8005164:	4b5e      	ldr	r3, [pc, #376]	; (80052e0 <ip4_reass+0x338>)
 8005166:	8898      	ldrh	r0, [r3, #4]
 8005168:	4481      	add	r9, r0
 800516a:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 800516e:	4698      	mov	r8, r3
 8005170:	f1bb 0f00 	cmp.w	fp, #0
 8005174:	d106      	bne.n	8005184 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800517a:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800517c:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8005184:	f1ba 0f01 	cmp.w	sl, #1
 8005188:	d1bb      	bne.n	8005102 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800518a:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800518c:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800518e:	685e      	ldr	r6, [r3, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8005190:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8005192:	6835      	ldr	r5, [r6, #0]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8005194:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8005196:	f104 0308 	add.w	r3, r4, #8
 800519a:	4632      	mov	r2, r6
 800519c:	f104 011c 	add.w	r1, r4, #28
 80051a0:	f853 7b04 	ldr.w	r7, [r3], #4
 80051a4:	f842 7b04 	str.w	r7, [r2], #4
 80051a8:	428b      	cmp	r3, r1
 80051aa:	d1f9      	bne.n	80051a0 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80051ac:	f000 f9ba 	bl	8005524 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80051b0:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80051b2:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80051b4:	71b3      	strb	r3, [r6, #6]
 80051b6:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80051b8:	72b3      	strb	r3, [r6, #10]
 80051ba:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80051bc:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80051be:	2d00      	cmp	r5, #0
 80051c0:	d16d      	bne.n	800529e <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 80051c2:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 80051c6:	42a3      	cmp	r3, r4
 80051c8:	d002      	beq.n	80051d0 <ip4_reass+0x228>
 80051ca:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d171      	bne.n	80052b4 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80051d0:	4620      	mov	r0, r4
 80051d2:	4629      	mov	r1, r5
 80051d4:	f7ff fdd0 	bl	8004d78 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80051d8:	4630      	mov	r0, r6
 80051da:	f001 f80f 	bl	80061fc <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80051de:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80051e2:	4283      	cmp	r3, r0
    clen = pbuf_clen(p);
 80051e4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80051e6:	d206      	bcs.n	80051f6 <ip4_reass+0x24e>
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <ip4_reass+0x33c>)
 80051ea:	4941      	ldr	r1, [pc, #260]	; (80052f0 <ip4_reass+0x348>)
 80051ec:	483f      	ldr	r0, [pc, #252]	; (80052ec <ip4_reass+0x344>)
 80051ee:	f240 229b 	movw	r2, #667	; 0x29b
 80051f2:	f005 fdc3 	bl	800ad7c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80051f6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80051fa:	1b04      	subs	r4, r0, r4
 80051fc:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 8005200:	4630      	mov	r0, r6
 8005202:	b003      	add	sp, #12
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 8005208:	4594      	cmp	ip, r2
 800520a:	d855      	bhi.n	80052b8 <ip4_reass+0x310>
      ipr->p = new_p;
 800520c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005210:	e79b      	b.n	800514a <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8005212:	d051      	beq.n	80052b8 <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 8005214:	88d9      	ldrh	r1, [r3, #6]
 8005216:	4281      	cmp	r1, r0
 8005218:	d84e      	bhi.n	80052b8 <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 800521a:	b125      	cbz	r5, 8005226 <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 800521c:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 800521e:	4291      	cmp	r1, r2
 8005220:	bf18      	it	ne
 8005222:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	461d      	mov	r5, r3
 800522a:	e74d      	b.n	80050c8 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800522c:	88eb      	ldrh	r3, [r5, #6]
 800522e:	4283      	cmp	r3, r0
 8005230:	d906      	bls.n	8005240 <ip4_reass+0x298>
 8005232:	4b2c      	ldr	r3, [pc, #176]	; (80052e4 <ip4_reass+0x33c>)
 8005234:	492f      	ldr	r1, [pc, #188]	; (80052f4 <ip4_reass+0x34c>)
 8005236:	482d      	ldr	r0, [pc, #180]	; (80052ec <ip4_reass+0x344>)
 8005238:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800523c:	f005 fd9e 	bl	800ad7c <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005240:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 8005244:	88ea      	ldrh	r2, [r5, #6]
 8005246:	88b3      	ldrh	r3, [r6, #4]
 8005248:	429a      	cmp	r2, r3
 800524a:	e77c      	b.n	8005146 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d086      	beq.n	8005160 <ip4_reass+0x1b8>
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	888b      	ldrh	r3, [r1, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d182      	bne.n	8005160 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 800525a:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800525c:	b9a3      	cbnz	r3, 8005288 <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 800525e:	42b1      	cmp	r1, r6
 8005260:	d106      	bne.n	8005270 <ip4_reass+0x2c8>
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <ip4_reass+0x33c>)
 8005264:	4924      	ldr	r1, [pc, #144]	; (80052f8 <ip4_reass+0x350>)
 8005266:	4821      	ldr	r0, [pc, #132]	; (80052ec <ip4_reass+0x344>)
 8005268:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800526c:	f005 fd86 	bl	800ad7c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f43f af76 	beq.w	8005164 <ip4_reass+0x1bc>
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <ip4_reass+0x33c>)
 800527a:	4920      	ldr	r1, [pc, #128]	; (80052fc <ip4_reass+0x354>)
 800527c:	481b      	ldr	r0, [pc, #108]	; (80052ec <ip4_reass+0x344>)
 800527e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8005282:	f005 fd7b 	bl	800ad7c <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8005286:	e76d      	b.n	8005164 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 8005288:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800528a:	88f0      	ldrh	r0, [r6, #6]
 800528c:	8893      	ldrh	r3, [r2, #4]
 800528e:	4298      	cmp	r0, r3
 8005290:	f47f af66 	bne.w	8005160 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 8005294:	6813      	ldr	r3, [r2, #0]
 8005296:	4616      	mov	r6, r2
 8005298:	e7e0      	b.n	800525c <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800529a:	469a      	mov	sl, r3
 800529c:	e762      	b.n	8005164 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 800529e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80052a0:	2114      	movs	r1, #20
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 fe3e 	bl	8005f24 <pbuf_remove_header>
      pbuf_cat(p, r);
 80052a8:	4629      	mov	r1, r5
 80052aa:	4630      	mov	r0, r6
 80052ac:	f000 ffc2 	bl	8006234 <pbuf_cat>
      r = iprh->next_pbuf;
 80052b0:	683d      	ldr	r5, [r7, #0]
 80052b2:	e784      	b.n	80051be <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	e786      	b.n	80051c6 <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f47f af1e 	bne.w	80050fc <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80052c0:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <ip4_reass+0x338>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	42a3      	cmp	r3, r4
 80052c6:	d006      	beq.n	80052d6 <ip4_reass+0x32e>
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <ip4_reass+0x33c>)
 80052ca:	490d      	ldr	r1, [pc, #52]	; (8005300 <ip4_reass+0x358>)
 80052cc:	4807      	ldr	r0, [pc, #28]	; (80052ec <ip4_reass+0x344>)
 80052ce:	f240 22ab 	movw	r2, #683	; 0x2ab
 80052d2:	f005 fd53 	bl	800ad7c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80052d6:	2100      	movs	r1, #0
 80052d8:	4620      	mov	r0, r4
 80052da:	f7ff fd4d 	bl	8004d78 <ip_reass_dequeue_datagram>
 80052de:	e70d      	b.n	80050fc <ip4_reass+0x154>
 80052e0:	200001d4 	.word	0x200001d4
 80052e4:	080193dc 	.word	0x080193dc
 80052e8:	080194f7 	.word	0x080194f7
 80052ec:	08018c9a 	.word	0x08018c9a
 80052f0:	0801955d 	.word	0x0801955d
 80052f4:	080194d9 	.word	0x080194d9
 80052f8:	0801952e 	.word	0x0801952e
 80052fc:	0801953b 	.word	0x0801953b
 8005300:	08019578 	.word	0x08019578
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005304:	88e8      	ldrh	r0, [r5, #6]
 8005306:	f000 f90d 	bl	8005524 <lwip_htons>
 800530a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800530e:	2800      	cmp	r0, #0
 8005310:	f47f ae9a 	bne.w	8005048 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005314:	89e0      	ldrh	r0, [r4, #14]
 8005316:	f000 f905 	bl	8005524 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800531a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800531e:	2800      	cmp	r0, #0
 8005320:	f43f ae92 	beq.w	8005048 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005324:	462b      	mov	r3, r5
 8005326:	f104 0208 	add.w	r2, r4, #8
 800532a:	f105 0114 	add.w	r1, r5, #20
 800532e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005332:	f842 0b04 	str.w	r0, [r2], #4
 8005336:	428b      	cmp	r3, r1
 8005338:	d1f9      	bne.n	800532e <ip4_reass+0x386>
 800533a:	e685      	b.n	8005048 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800533c:	f1bb 0f00 	cmp.w	fp, #0
 8005340:	f43f af0e 	beq.w	8005160 <ip4_reass+0x1b8>
 8005344:	f04f 0a00 	mov.w	sl, #0
 8005348:	e702      	b.n	8005150 <ip4_reass+0x1a8>
 800534a:	bf00      	nop

0800534c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8005350:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 8005352:	ed2d 8b02 	vpush	{d8}
 8005356:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800535a:	f1b3 0214 	subs.w	r2, r3, #20
{
 800535e:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8005360:	bf48      	it	mi
 8005362:	f1a3 020d 	submi.w	r2, r3, #13
 8005366:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800536a:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800536c:	6843      	ldr	r3, [r0, #4]
 800536e:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	2b05      	cmp	r3, #5
{
 8005378:	4605      	mov	r5, r0
 800537a:	468a      	mov	sl, r1
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800537c:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8005380:	d109      	bne.n	8005396 <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8005382:	8943      	ldrh	r3, [r0, #10]
 8005384:	2b13      	cmp	r3, #19
 8005386:	d809      	bhi.n	800539c <ip4_frag+0x50>
 8005388:	4b60      	ldr	r3, [pc, #384]	; (800550c <ip4_frag+0x1c0>)
 800538a:	4961      	ldr	r1, [pc, #388]	; (8005510 <ip4_frag+0x1c4>)
 800538c:	4861      	ldr	r0, [pc, #388]	; (8005514 <ip4_frag+0x1c8>)
 800538e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8005392:	f005 fcf3 	bl	800ad7c <iprintf>
    return ERR_VAL;
 8005396:	f06f 0005 	mvn.w	r0, #5
 800539a:	e013      	b.n	80053c4 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800539c:	9b02      	ldr	r3, [sp, #8]
 800539e:	88d8      	ldrh	r0, [r3, #6]
 80053a0:	f000 f8c0 	bl	8005524 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80053a4:	f3c0 030c 	ubfx	r3, r0, #0, #13
 80053a8:	9303      	str	r3, [sp, #12]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80053aa:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 80053ae:	9307      	str	r3, [sp, #28]

  left = (u16_t)(p->tot_len - IP_HLEN);

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053b0:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 80053b2:	892c      	ldrh	r4, [r5, #8]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053b4:	00db      	lsls	r3, r3, #3
  left = (u16_t)(p->tot_len - IP_HLEN);
 80053b6:	3c14      	subs	r4, #20
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053b8:	b29b      	uxth	r3, r3
  left = (u16_t)(p->tot_len - IP_HLEN);
 80053ba:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053bc:	9306      	str	r3, [sp, #24]
  u16_t newpbuflen = 0;
 80053be:	2600      	movs	r6, #0
  while (left) {
 80053c0:	b92c      	cbnz	r4, 80053ce <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80053c2:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80053c4:	b00b      	add	sp, #44	; 0x2c
 80053c6:	ecbd 8b02 	vpop	{d8}
 80053ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053ce:	9b06      	ldr	r3, [sp, #24]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	bf28      	it	cs
 80053d4:	4623      	movcs	r3, r4
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80053d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80053da:	2114      	movs	r1, #20
 80053dc:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80053de:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80053e0:	f000 fe38 	bl	8006054 <pbuf_alloc>
    if (rambuf == NULL) {
 80053e4:	4680      	mov	r8, r0
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d036      	beq.n	8005458 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80053ea:	8943      	ldrh	r3, [r0, #10]
 80053ec:	2b13      	cmp	r3, #19
 80053ee:	d806      	bhi.n	80053fe <ip4_frag+0xb2>
 80053f0:	4b46      	ldr	r3, [pc, #280]	; (800550c <ip4_frag+0x1c0>)
 80053f2:	4949      	ldr	r1, [pc, #292]	; (8005518 <ip4_frag+0x1cc>)
 80053f4:	4847      	ldr	r0, [pc, #284]	; (8005514 <ip4_frag+0x1c8>)
 80053f6:	f44f 7249 	mov.w	r2, #804	; 0x324
 80053fa:	f005 fcbf 	bl	800ad7c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005404:	4619      	mov	r1, r3
 8005406:	3114      	adds	r1, #20
 8005408:	f853 0b04 	ldr.w	r0, [r3], #4
 800540c:	f842 0b04 	str.w	r0, [r2], #4
 8005410:	428b      	cmp	r3, r1
 8005412:	d1f9      	bne.n	8005408 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005414:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 8005418:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 800541c:	f1b9 0f00 	cmp.w	r9, #0
 8005420:	d041      	beq.n	80054a6 <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8005422:	896b      	ldrh	r3, [r5, #10]
 8005424:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8005426:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 8005428:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800542a:	d206      	bcs.n	800543a <ip4_frag+0xee>
 800542c:	4b37      	ldr	r3, [pc, #220]	; (800550c <ip4_frag+0x1c0>)
 800542e:	493b      	ldr	r1, [pc, #236]	; (800551c <ip4_frag+0x1d0>)
 8005430:	4838      	ldr	r0, [pc, #224]	; (8005514 <ip4_frag+0x1c8>)
 8005432:	f240 322d 	movw	r2, #813	; 0x32d
 8005436:	f005 fca1 	bl	800ad7c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800543a:	454e      	cmp	r6, r9
 800543c:	bf28      	it	cs
 800543e:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8005440:	b916      	cbnz	r6, 8005448 <ip4_frag+0xfc>
        p = p->next;
 8005442:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8005444:	2700      	movs	r7, #0
 8005446:	e7e9      	b.n	800541c <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8005448:	2005      	movs	r0, #5
 800544a:	f000 fb55 	bl	8005af8 <memp_malloc>
      if (pcr == NULL) {
 800544e:	4603      	mov	r3, r0
 8005450:	b928      	cbnz	r0, 800545e <ip4_frag+0x112>
        pbuf_free(rambuf);
 8005452:	4640      	mov	r0, r8
 8005454:	f000 fd9a 	bl	8005f8c <pbuf_free>
  return ERR_MEM;
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	e7b2      	b.n	80053c4 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800545e:	9601      	str	r6, [sp, #4]
 8005460:	686a      	ldr	r2, [r5, #4]
 8005462:	9008      	str	r0, [sp, #32]
 8005464:	443a      	add	r2, r7
 8005466:	9200      	str	r2, [sp, #0]
 8005468:	4631      	mov	r1, r6
 800546a:	2241      	movs	r2, #65	; 0x41
 800546c:	2000      	movs	r0, #0
 800546e:	f000 fd3b 	bl	8005ee8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	b918      	cbnz	r0, 800547e <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fd50 	bl	8004f1c <ip_frag_free_pbuf_custom_ref>
 800547c:	e7e9      	b.n	8005452 <ip4_frag+0x106>
 800547e:	e9cd 0308 	strd	r0, r3, [sp, #32]
      pbuf_ref(p);
 8005482:	4628      	mov	r0, r5
 8005484:	f000 fec2 	bl	800620c <pbuf_ref>
      pcr->original = p;
 8005488:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800548a:	4a25      	ldr	r2, [pc, #148]	; (8005520 <ip4_frag+0x1d4>)
      pbuf_cat(rambuf, newpbuf);
 800548c:	9908      	ldr	r1, [sp, #32]
      pcr->original = p;
 800548e:	615d      	str	r5, [r3, #20]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8005490:	eba9 0906 	sub.w	r9, r9, r6
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005494:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8005496:	4640      	mov	r0, r8
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8005498:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800549c:	f000 feca 	bl	8006234 <pbuf_cat>
      if (left_to_copy) {
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	d1cd      	bne.n	8005442 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80054ac:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
 80054b0:	3b13      	subs	r3, #19
    poff = (u16_t)(poff + newpbuflen);
 80054b2:	4437      	add	r7, r6
    if (!last || mf_set) {
 80054b4:	42a3      	cmp	r3, r4
    poff = (u16_t)(poff + newpbuflen);
 80054b6:	b2bf      	uxth	r7, r7
    if (!last || mf_set) {
 80054b8:	dd01      	ble.n	80054be <ip4_frag+0x172>
 80054ba:	9b07      	ldr	r3, [sp, #28]
 80054bc:	b10b      	cbz	r3, 80054c2 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 80054be:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80054c2:	f000 f82f 	bl	8005524 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80054c6:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80054c8:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80054cc:	f103 0014 	add.w	r0, r3, #20
 80054d0:	b280      	uxth	r0, r0
 80054d2:	f000 f827 	bl	8005524 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80054d6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 80054d8:	ee18 2a10 	vmov	r2, s16
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80054dc:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80054e0:	f88b 300a 	strb.w	r3, [fp, #10]
 80054e4:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80054e8:	4641      	mov	r1, r8
 80054ea:	f8da 3014 	ldr.w	r3, [sl, #20]
 80054ee:	4650      	mov	r0, sl
 80054f0:	4798      	blx	r3
    pbuf_free(rambuf);
 80054f2:	4640      	mov	r0, r8
 80054f4:	f000 fd4a 	bl	8005f8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80054f8:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 80054fa:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 80054fc:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 80054fe:	9b03      	ldr	r3, [sp, #12]
 8005500:	4413      	add	r3, r2
 8005502:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8005504:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	e75a      	b.n	80053c0 <ip4_frag+0x74>
 800550a:	bf00      	nop
 800550c:	080193dc 	.word	0x080193dc
 8005510:	08019598 	.word	0x08019598
 8005514:	08018c9a 	.word	0x08018c9a
 8005518:	080195b3 	.word	0x080195b3
 800551c:	080195d3 	.word	0x080195d3
 8005520:	08004f49 	.word	0x08004f49

08005524 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8005524:	ba40      	rev16	r0, r0
}
 8005526:	b280      	uxth	r0, r0
 8005528:	4770      	bx	lr

0800552a <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800552a:	ba00      	rev	r0, r0
 800552c:	4770      	bx	lr

0800552e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005530:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8005532:	4608      	mov	r0, r1
{
 8005534:	460f      	mov	r7, r1
 8005536:	4615      	mov	r5, r2
  size_t tokenlen = strlen(token);
 8005538:	f7fa fe54 	bl	80001e4 <strlen>
  if (tokenlen == 0) {
 800553c:	4606      	mov	r6, r0
 800553e:	b130      	cbz	r0, 800554e <lwip_strnstr+0x20>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005540:	4425      	add	r5, r4
 8005542:	7823      	ldrb	r3, [r4, #0]
 8005544:	b18b      	cbz	r3, 800556a <lwip_strnstr+0x3c>
 8005546:	19a2      	adds	r2, r4, r6
 8005548:	4295      	cmp	r5, r2
 800554a:	d202      	bcs.n	8005552 <lwip_strnstr+0x24>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 800554c:	2400      	movs	r4, #0
}
 800554e:	4620      	mov	r0, r4
 8005550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005552:	783a      	ldrb	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d106      	bne.n	8005566 <lwip_strnstr+0x38>
 8005558:	4632      	mov	r2, r6
 800555a:	4639      	mov	r1, r7
 800555c:	4620      	mov	r0, r4
 800555e:	f005 fc72 	bl	800ae46 <strncmp>
 8005562:	2800      	cmp	r0, #0
 8005564:	d0f3      	beq.n	800554e <lwip_strnstr+0x20>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005566:	3401      	adds	r4, #1
 8005568:	e7eb      	b.n	8005542 <lwip_strnstr+0x14>
  return NULL;
 800556a:	461c      	mov	r4, r3
 800556c:	e7ef      	b.n	800554e <lwip_strnstr+0x20>

0800556e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800556e:	b530      	push	{r4, r5, lr}
  char c1, c2;

  do {
    c1 = *str1++;
 8005570:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8005574:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <lwip_stricmp+0x22>
      char c1_upc = c1 | 0x20;
 800557c:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005580:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8005584:	2d19      	cmp	r5, #25
 8005586:	d807      	bhi.n	8005598 <lwip_stricmp+0x2a>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8005588:	f042 0220 	orr.w	r2, r2, #32
 800558c:	4294      	cmp	r4, r2
 800558e:	d103      	bne.n	8005598 <lwip_stricmp+0x2a>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ed      	bne.n	8005570 <lwip_stricmp+0x2>
  return 0;
 8005594:	4618      	mov	r0, r3
}
 8005596:	bd30      	pop	{r4, r5, pc}
        return 1;
 8005598:	2001      	movs	r0, #1
 800559a:	e7fc      	b.n	8005596 <lwip_stricmp+0x28>

0800559c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800559c:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800559e:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80055a0:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 80055a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80055a8:	d007      	beq.n	80055ba <lwip_standard_chksum+0x1e>
 80055aa:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 80055ac:	bfc2      	ittt	gt
 80055ae:	f810 3b01 	ldrbgt.w	r3, [r0], #1
 80055b2:	f88d 3007 	strbgt.w	r3, [sp, #7]
    len--;
 80055b6:	f101 31ff 	addgt.w	r1, r1, #4294967295
  u32_t sum = 0;
 80055ba:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80055bc:	2901      	cmp	r1, #1
 80055be:	dc15      	bgt.n	80055ec <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80055c0:	bf04      	itt	eq
 80055c2:	7803      	ldrbeq	r3, [r0, #0]
 80055c4:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80055c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80055cc:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80055ce:	b298      	uxth	r0, r3
 80055d0:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80055d4:	b298      	uxth	r0, r3
 80055d6:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80055da:	b124      	cbz	r4, 80055e6 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80055dc:	0203      	lsls	r3, r0, #8
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80055e4:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80055e6:	b280      	uxth	r0, r0
 80055e8:	b002      	add	sp, #8
 80055ea:	bd10      	pop	{r4, pc}
    sum += *ps++;
 80055ec:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 80055f0:	3902      	subs	r1, #2
    sum += *ps++;
 80055f2:	441a      	add	r2, r3
    len -= 2;
 80055f4:	e7e2      	b.n	80055bc <lwip_standard_chksum+0x20>

080055f6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80055f6:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80055f8:	2600      	movs	r6, #0
{
 80055fa:	4605      	mov	r5, r0

  acc = 0;
 80055fc:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 80055fe:	b945      	cbnz	r5, 8005612 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8005600:	b126      	cbz	r6, 800560c <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005602:	0223      	lsls	r3, r4, #8
 8005604:	b29b      	uxth	r3, r3
 8005606:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800560a:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800560c:	43e0      	mvns	r0, r4
}
 800560e:	b280      	uxth	r0, r0
 8005610:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005612:	8969      	ldrh	r1, [r5, #10]
 8005614:	6868      	ldr	r0, [r5, #4]
 8005616:	f7ff ffc1 	bl	800559c <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800561a:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800561c:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
 800561e:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8005620:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8005622:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8005626:	d506      	bpl.n	8005636 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8005628:	0223      	lsls	r3, r4, #8
 800562a:	b29b      	uxth	r3, r3
 800562c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005630:	f086 0601 	eor.w	r6, r6, #1
 8005634:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8005636:	682d      	ldr	r5, [r5, #0]
 8005638:	e7e1      	b.n	80055fe <inet_chksum_pbuf+0x8>

0800563a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800563a:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800563c:	f000 f80c 	bl	8005658 <mem_init>
  memp_init();
 8005640:	f000 fa4c 	bl	8005adc <memp_init>
  pbuf_init();
  netif_init();
 8005644:	f000 fae2 	bl	8005c0c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005648:	f004 f99c 	bl	8009984 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800564c:	f000 ff74 	bl	8006538 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8005650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8005654:	f004 b956 	b.w	8009904 <sys_timeouts_init>

08005658 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <mem_init+0x28>)
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <mem_init+0x2c>)
 800565c:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8005660:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8005664:	6019      	str	r1, [r3, #0]
  mem->prev = 0;
  mem->used = 0;
 8005666:	2100      	movs	r1, #0
 8005668:	7119      	strb	r1, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800566a:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800566e:	f04f 2028 	mov.w	r0, #671098880	; 0x28002800
 8005672:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 8005674:	2001      	movs	r0, #1
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005676:	6013      	str	r3, [r2, #0]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005678:	6051      	str	r1, [r2, #4]
  ram_end->used = 1;
 800567a:	7108      	strb	r0, [r1, #4]
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800567c:	6093      	str	r3, [r2, #8]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800567e:	4770      	bx	lr
 8005680:	2000810f 	.word	0x2000810f
 8005684:	200001dc 	.word	0x200001dc

08005688 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800568c:	4604      	mov	r4, r0
 800568e:	2800      	cmp	r0, #0
 8005690:	f000 8094 	beq.w	80057bc <mem_free+0x134>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005694:	0783      	lsls	r3, r0, #30
 8005696:	d008      	beq.n	80056aa <mem_free+0x22>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005698:	4b49      	ldr	r3, [pc, #292]	; (80057c0 <mem_free+0x138>)
 800569a:	494a      	ldr	r1, [pc, #296]	; (80057c4 <mem_free+0x13c>)
 800569c:	f240 2273 	movw	r2, #627	; 0x273
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80056a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80056a4:	4848      	ldr	r0, [pc, #288]	; (80057c8 <mem_free+0x140>)
 80056a6:	f005 bb69 	b.w	800ad7c <iprintf>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80056aa:	4a48      	ldr	r2, [pc, #288]	; (80057cc <mem_free+0x144>)
 80056ac:	6813      	ldr	r3, [r2, #0]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80056ae:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	4616      	mov	r6, r2
 80056b6:	d804      	bhi.n	80056c2 <mem_free+0x3a>
 80056b8:	6851      	ldr	r1, [r2, #4]
 80056ba:	f100 020c 	add.w	r2, r0, #12
 80056be:	4291      	cmp	r1, r2
 80056c0:	d204      	bcs.n	80056cc <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80056c2:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <mem_free+0x138>)
 80056c4:	4942      	ldr	r1, [pc, #264]	; (80057d0 <mem_free+0x148>)
 80056c6:	f240 227f 	movw	r2, #639	; 0x27f
 80056ca:	e7e9      	b.n	80056a0 <mem_free+0x18>
  if (!mem->used) {
 80056cc:	f810 2c04 	ldrb.w	r2, [r0, #-4]
 80056d0:	b922      	cbnz	r2, 80056dc <mem_free+0x54>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80056d2:	4b3b      	ldr	r3, [pc, #236]	; (80057c0 <mem_free+0x138>)
 80056d4:	493f      	ldr	r1, [pc, #252]	; (80057d4 <mem_free+0x14c>)
 80056d6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80056da:	e7e1      	b.n	80056a0 <mem_free+0x18>
  nmem = ptr_to_mem(mem->next);
 80056dc:	f830 7c08 	ldrh.w	r7, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80056e0:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 80056e4:	d811      	bhi.n	800570a <mem_free+0x82>
  pmem = ptr_to_mem(mem->prev);
 80056e6:	f830 0c06 	ldrh.w	r0, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80056ea:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 80056ee:	d80c      	bhi.n	800570a <mem_free+0x82>
  return (mem_size_t)((u8_t *)mem - ram);
 80056f0:	1aea      	subs	r2, r5, r3
 80056f2:	b292      	uxth	r2, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80056f4:	4282      	cmp	r2, r0
 80056f6:	d002      	beq.n	80056fe <mem_free+0x76>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80056f8:	5a18      	ldrh	r0, [r3, r0]
 80056fa:	4290      	cmp	r0, r2
 80056fc:	d105      	bne.n	800570a <mem_free+0x82>
  return (struct mem *)(void *)&ram[ptr];
 80056fe:	443b      	add	r3, r7
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005700:	4299      	cmp	r1, r3
 8005702:	d007      	beq.n	8005714 <mem_free+0x8c>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005704:	885b      	ldrh	r3, [r3, #2]
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <mem_free+0x8c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800570a:	4b2d      	ldr	r3, [pc, #180]	; (80057c0 <mem_free+0x138>)
 800570c:	4932      	ldr	r1, [pc, #200]	; (80057d8 <mem_free+0x150>)
 800570e:	f240 2295 	movw	r2, #661	; 0x295
 8005712:	e7c5      	b.n	80056a0 <mem_free+0x18>
  mem->used = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800571a:	68b3      	ldr	r3, [r6, #8]
 800571c:	42ab      	cmp	r3, r5
    lfree = mem;
 800571e:	bf88      	it	hi
 8005720:	60b5      	strhi	r5, [r6, #8]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005722:	42a9      	cmp	r1, r5
 8005724:	d81c      	bhi.n	8005760 <mem_free+0xd8>
 8005726:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <mem_free+0x138>)
 8005728:	492c      	ldr	r1, [pc, #176]	; (80057dc <mem_free+0x154>)
 800572a:	4827      	ldr	r0, [pc, #156]	; (80057c8 <mem_free+0x140>)
 800572c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005730:	f005 fb24 	bl	800ad7c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005734:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005738:	b133      	cbz	r3, 8005748 <mem_free+0xc0>
 800573a:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <mem_free+0x138>)
 800573c:	4928      	ldr	r1, [pc, #160]	; (80057e0 <mem_free+0x158>)
 800573e:	4822      	ldr	r0, [pc, #136]	; (80057c8 <mem_free+0x140>)
 8005740:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005744:	f005 fb1a 	bl	800ad7c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005748:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800574c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005750:	d906      	bls.n	8005760 <mem_free+0xd8>
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <mem_free+0x138>)
 8005754:	4923      	ldr	r1, [pc, #140]	; (80057e4 <mem_free+0x15c>)
 8005756:	481c      	ldr	r0, [pc, #112]	; (80057c8 <mem_free+0x140>)
 8005758:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800575c:	f005 fb0e 	bl	800ad7c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8005760:	6833      	ldr	r3, [r6, #0]
 8005762:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005766:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005768:	4295      	cmp	r5, r2
 800576a:	d012      	beq.n	8005792 <mem_free+0x10a>
 800576c:	7910      	ldrb	r0, [r2, #4]
 800576e:	b980      	cbnz	r0, 8005792 <mem_free+0x10a>
 8005770:	6870      	ldr	r0, [r6, #4]
 8005772:	4282      	cmp	r2, r0
 8005774:	d00d      	beq.n	8005792 <mem_free+0x10a>
    if (lfree == nmem) {
 8005776:	68b0      	ldr	r0, [r6, #8]
 8005778:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800577a:	5a5a      	ldrh	r2, [r3, r1]
 800577c:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005780:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8005782:	bf08      	it	eq
 8005784:	60b5      	streq	r5, [r6, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005786:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800578a:	bf1e      	ittt	ne
 800578c:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800578e:	1ae9      	subne	r1, r5, r3
 8005790:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8005792:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8005796:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005798:	428d      	cmp	r5, r1
 800579a:	d00f      	beq.n	80057bc <mem_free+0x134>
 800579c:	7908      	ldrb	r0, [r1, #4]
 800579e:	b968      	cbnz	r0, 80057bc <mem_free+0x134>
    if (lfree == mem) {
 80057a0:	68b0      	ldr	r0, [r6, #8]
 80057a2:	4285      	cmp	r5, r0
      lfree = pmem;
 80057a4:	bf08      	it	eq
 80057a6:	60b1      	streq	r1, [r6, #8]
    pmem->next = mem->next;
 80057a8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80057ac:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80057ae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80057b2:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80057b6:	bf1c      	itt	ne
 80057b8:	185b      	addne	r3, r3, r1
 80057ba:	805a      	strhne	r2, [r3, #2]
}
 80057bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c0:	080195e2 	.word	0x080195e2
 80057c4:	08019653 	.word	0x08019653
 80057c8:	08018c9a 	.word	0x08018c9a
 80057cc:	200001dc 	.word	0x200001dc
 80057d0:	08019674 	.word	0x08019674
 80057d4:	0801968d 	.word	0x0801968d
 80057d8:	080196b3 	.word	0x080196b3
 80057dc:	080196e5 	.word	0x080196e5
 80057e0:	080196ff 	.word	0x080196ff
 80057e4:	0801971a 	.word	0x0801971a

080057e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80057ec:	1ccc      	adds	r4, r1, #3
 80057ee:	f024 0403 	bic.w	r4, r4, #3
 80057f2:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80057f4:	2c0b      	cmp	r4, #11
{
 80057f6:	4605      	mov	r5, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 80057f8:	d904      	bls.n	8005804 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80057fa:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 80057fe:	d902      	bls.n	8005806 <mem_trim+0x1e>
    return NULL;
 8005800:	2500      	movs	r5, #0
 8005802:	e056      	b.n	80058b2 <mem_trim+0xca>
    newsize = MIN_SIZE_ALIGNED;
 8005804:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005806:	42a1      	cmp	r1, r4
 8005808:	d8fa      	bhi.n	8005800 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800580a:	4e3f      	ldr	r6, [pc, #252]	; (8005908 <mem_trim+0x120>)
 800580c:	6833      	ldr	r3, [r6, #0]
 800580e:	42ab      	cmp	r3, r5
 8005810:	d802      	bhi.n	8005818 <mem_trim+0x30>
 8005812:	6873      	ldr	r3, [r6, #4]
 8005814:	42ab      	cmp	r3, r5
 8005816:	d806      	bhi.n	8005826 <mem_trim+0x3e>
 8005818:	4b3c      	ldr	r3, [pc, #240]	; (800590c <mem_trim+0x124>)
 800581a:	493d      	ldr	r1, [pc, #244]	; (8005910 <mem_trim+0x128>)
 800581c:	483d      	ldr	r0, [pc, #244]	; (8005914 <mem_trim+0x12c>)
 800581e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005822:	f005 faab 	bl	800ad7c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005826:	f8d6 a000 	ldr.w	sl, [r6]
 800582a:	45aa      	cmp	sl, r5
 800582c:	d841      	bhi.n	80058b2 <mem_trim+0xca>
 800582e:	6873      	ldr	r3, [r6, #4]
 8005830:	42ab      	cmp	r3, r5
 8005832:	d93e      	bls.n	80058b2 <mem_trim+0xca>
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005834:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005838:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800583c:	eba7 070a 	sub.w	r7, r7, sl
 8005840:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005842:	f1a9 0308 	sub.w	r3, r9, #8
 8005846:	1bdb      	subs	r3, r3, r7
 8005848:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800584a:	42a3      	cmp	r3, r4
 800584c:	d207      	bcs.n	800585e <mem_trim+0x76>
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <mem_trim+0x124>)
 8005850:	4931      	ldr	r1, [pc, #196]	; (8005918 <mem_trim+0x130>)
 8005852:	4830      	ldr	r0, [pc, #192]	; (8005914 <mem_trim+0x12c>)
 8005854:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005858:	f005 fa90 	bl	800ad7c <iprintf>
  if (newsize > size) {
 800585c:	e7d0      	b.n	8005800 <mem_trim+0x18>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800585e:	d028      	beq.n	80058b2 <mem_trim+0xca>
  return (struct mem *)(void *)&ram[ptr];
 8005860:	eb0a 0809 	add.w	r8, sl, r9

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
  if (mem2->used == 0) {
 8005864:	f898 2004 	ldrb.w	r2, [r8, #4]
 8005868:	bb32      	cbnz	r2, 80058b8 <mem_trim+0xd0>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800586a:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 800586e:	d106      	bne.n	800587e <mem_trim+0x96>
 8005870:	4b26      	ldr	r3, [pc, #152]	; (800590c <mem_trim+0x124>)
 8005872:	492a      	ldr	r1, [pc, #168]	; (800591c <mem_trim+0x134>)
 8005874:	4827      	ldr	r0, [pc, #156]	; (8005914 <mem_trim+0x12c>)
 8005876:	f240 22f5 	movw	r2, #757	; 0x2f5
 800587a:	f005 fa7f 	bl	800ad7c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800587e:	f107 0308 	add.w	r3, r7, #8
 8005882:	441c      	add	r4, r3
 8005884:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8005886:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8005888:	f83a 0009 	ldrh.w	r0, [sl, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800588c:	b2a2      	uxth	r2, r4
    if (lfree == mem2) {
 800588e:	fa13 f484 	uxtah	r4, r3, r4
 8005892:	4541      	cmp	r1, r8
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	7121      	strb	r1, [r4, #4]
    /* restore the next pointer */
    mem2->next = next;
 800589a:	5298      	strh	r0, [r3, r2]
    /* link it back to mem */
    mem2->prev = ptr;
 800589c:	8067      	strh	r7, [r4, #2]
    /* link mem to it */
    mem->next = ptr2;
 800589e:	f825 2c08 	strh.w	r2, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80058a2:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 80058a4:	bf08      	it	eq
 80058a6:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80058a8:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 80058ac:	d001      	beq.n	80058b2 <mem_trim+0xca>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80058ae:	440b      	add	r3, r1
 80058b0:	805a      	strh	r2, [r3, #2]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80058b2:	4628      	mov	r0, r5
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80058b8:	f104 0214 	add.w	r2, r4, #20
 80058bc:	429a      	cmp	r2, r3
 80058be:	d8f8      	bhi.n	80058b2 <mem_trim+0xca>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80058c0:	f107 0308 	add.w	r3, r7, #8
 80058c4:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058c6:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80058ca:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058cc:	d106      	bne.n	80058dc <mem_trim+0xf4>
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <mem_trim+0x124>)
 80058d0:	4912      	ldr	r1, [pc, #72]	; (800591c <mem_trim+0x134>)
 80058d2:	4810      	ldr	r0, [pc, #64]	; (8005914 <mem_trim+0x12c>)
 80058d4:	f240 3216 	movw	r2, #790	; 0x316
 80058d8:	f005 fa50 	bl	800ad7c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 80058dc:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 80058de:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 80058e0:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80058e2:	4291      	cmp	r1, r2
    mem2->used = 0;
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 80058ea:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 80058ee:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 80058f0:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 80058f2:	f825 4c08 	strh.w	r4, [r5, #-8]
      lfree = mem2;
 80058f6:	bf88      	it	hi
 80058f8:	60b2      	strhi	r2, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80058fa:	5b1a      	ldrh	r2, [r3, r4]
 80058fc:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8005900:	d0d7      	beq.n	80058b2 <mem_trim+0xca>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005902:	4413      	add	r3, r2
 8005904:	805c      	strh	r4, [r3, #2]
 8005906:	e7d4      	b.n	80058b2 <mem_trim+0xca>
 8005908:	200001dc 	.word	0x200001dc
 800590c:	080195e2 	.word	0x080195e2
 8005910:	08019744 	.word	0x08019744
 8005914:	08018c9a 	.word	0x08018c9a
 8005918:	0801975b 	.word	0x0801975b
 800591c:	0801977b 	.word	0x0801977b

08005920 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005924:	2800      	cmp	r0, #0
 8005926:	d07c      	beq.n	8005a22 <mem_malloc+0x102>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005928:	1cc5      	adds	r5, r0, #3
 800592a:	f025 0503 	bic.w	r5, r5, #3
 800592e:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8005930:	2d0b      	cmp	r5, #11
 8005932:	d904      	bls.n	800593e <mem_malloc+0x1e>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005934:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8005938:	d902      	bls.n	8005940 <mem_malloc+0x20>
    return NULL;
 800593a:	2000      	movs	r0, #0
 800593c:	e071      	b.n	8005a22 <mem_malloc+0x102>
    size = MIN_SIZE_ALIGNED;
 800593e:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005940:	42a8      	cmp	r0, r5
 8005942:	d8fa      	bhi.n	800593a <mem_malloc+0x1a>
  return (mem_size_t)((u8_t *)mem - ram);
 8005944:	4f3c      	ldr	r7, [pc, #240]	; (8005a38 <mem_malloc+0x118>)
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	68be      	ldr	r6, [r7, #8]
 800594a:	1ab6      	subs	r6, r6, r2
 800594c:	b2b6      	uxth	r6, r6
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800594e:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005952:	f06f 0c07 	mvn.w	ip, #7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005956:	4286      	cmp	r6, r0
 8005958:	d2ef      	bcs.n	800593a <mem_malloc+0x1a>
  return (struct mem *)(void *)&ram[ptr];
 800595a:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 800595c:	5b91      	ldrh	r1, [r2, r6]
 800595e:	7923      	ldrb	r3, [r4, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d166      	bne.n	8005a32 <mem_malloc+0x112>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005964:	ebac 0306 	sub.w	r3, ip, r6
 8005968:	440b      	add	r3, r1
      if ((!mem->used) &&
 800596a:	42ab      	cmp	r3, r5
 800596c:	d361      	bcc.n	8005a32 <mem_malloc+0x112>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800596e:	f105 0214 	add.w	r2, r5, #20
 8005972:	4293      	cmp	r3, r2
 8005974:	d357      	bcc.n	8005a26 <mem_malloc+0x106>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005976:	f105 0808 	add.w	r8, r5, #8
 800597a:	44b0      	add	r8, r6
 800597c:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005980:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8005984:	d106      	bne.n	8005994 <mem_malloc+0x74>
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <mem_malloc+0x11c>)
 8005988:	492d      	ldr	r1, [pc, #180]	; (8005a40 <mem_malloc+0x120>)
 800598a:	482e      	ldr	r0, [pc, #184]	; (8005a44 <mem_malloc+0x124>)
 800598c:	f240 3287 	movw	r2, #903	; 0x387
 8005990:	f005 f9f4 	bl	800ad7c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	eb03 0208 	add.w	r2, r3, r8
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 800599a:	2100      	movs	r1, #0
 800599c:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800599e:	8821      	ldrh	r1, [r4, #0]
 80059a0:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 80059a4:	8056      	strh	r6, [r2, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 80059a6:	2201      	movs	r2, #1
          mem->next = ptr2;
 80059a8:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 80059ac:	7122      	strb	r2, [r4, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80059ae:	f833 2008 	ldrh.w	r2, [r3, r8]
 80059b2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80059b6:	d002      	beq.n	80059be <mem_malloc+0x9e>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80059b8:	4413      	add	r3, r2
 80059ba:	f8a3 8002 	strh.w	r8, [r3, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	42a3      	cmp	r3, r4
 80059c2:	d110      	bne.n	80059e6 <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 80059c4:	e9d7 0100 	ldrd	r0, r1, [r7]
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80059c8:	791a      	ldrb	r2, [r3, #4]
 80059ca:	b10a      	cbz	r2, 80059d0 <mem_malloc+0xb0>
 80059cc:	428b      	cmp	r3, r1
 80059ce:	d12d      	bne.n	8005a2c <mem_malloc+0x10c>
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059d0:	4299      	cmp	r1, r3
          lfree = cur;
 80059d2:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80059d4:	d007      	beq.n	80059e6 <mem_malloc+0xc6>
 80059d6:	b132      	cbz	r2, 80059e6 <mem_malloc+0xc6>
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <mem_malloc+0x11c>)
 80059da:	491b      	ldr	r1, [pc, #108]	; (8005a48 <mem_malloc+0x128>)
 80059dc:	4819      	ldr	r0, [pc, #100]	; (8005a44 <mem_malloc+0x124>)
 80059de:	f240 32b5 	movw	r2, #949	; 0x3b5
 80059e2:	f005 f9cb 	bl	800ad7c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3508      	adds	r5, #8
 80059ea:	4425      	add	r5, r4
 80059ec:	42ab      	cmp	r3, r5
 80059ee:	d206      	bcs.n	80059fe <mem_malloc+0xde>
 80059f0:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <mem_malloc+0x11c>)
 80059f2:	4916      	ldr	r1, [pc, #88]	; (8005a4c <mem_malloc+0x12c>)
 80059f4:	4813      	ldr	r0, [pc, #76]	; (8005a44 <mem_malloc+0x124>)
 80059f6:	f240 32b9 	movw	r2, #953	; 0x3b9
 80059fa:	f005 f9bf 	bl	800ad7c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80059fe:	07a3      	lsls	r3, r4, #30
 8005a00:	d00d      	beq.n	8005a1e <mem_malloc+0xfe>
 8005a02:	4b0e      	ldr	r3, [pc, #56]	; (8005a3c <mem_malloc+0x11c>)
 8005a04:	4912      	ldr	r1, [pc, #72]	; (8005a50 <mem_malloc+0x130>)
 8005a06:	480f      	ldr	r0, [pc, #60]	; (8005a44 <mem_malloc+0x124>)
 8005a08:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005a0c:	f005 f9b6 	bl	800ad7c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <mem_malloc+0x11c>)
 8005a12:	4910      	ldr	r1, [pc, #64]	; (8005a54 <mem_malloc+0x134>)
 8005a14:	480b      	ldr	r0, [pc, #44]	; (8005a44 <mem_malloc+0x124>)
 8005a16:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005a1a:	f005 f9af 	bl	800ad7c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005a1e:	f104 0008 	add.w	r0, r4, #8
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8005a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8005a26:	2301      	movs	r3, #1
 8005a28:	7123      	strb	r3, [r4, #4]
 8005a2a:	e7c8      	b.n	80059be <mem_malloc+0x9e>
  return (struct mem *)(void *)&ram[ptr];
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	4403      	add	r3, r0
 8005a30:	e7ca      	b.n	80059c8 <mem_malloc+0xa8>
 8005a32:	460e      	mov	r6, r1
 8005a34:	e78f      	b.n	8005956 <mem_malloc+0x36>
 8005a36:	bf00      	nop
 8005a38:	200001dc 	.word	0x200001dc
 8005a3c:	080195e2 	.word	0x080195e2
 8005a40:	0801977b 	.word	0x0801977b
 8005a44:	08018c9a 	.word	0x08018c9a
 8005a48:	0801978c 	.word	0x0801978c
 8005a4c:	080197a5 	.word	0x080197a5
 8005a50:	080197d5 	.word	0x080197d5
 8005a54:	08019804 	.word	0x08019804

08005a58 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005a58:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005a5a:	6804      	ldr	r4, [r0, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005a5c:	b154      	cbz	r4, 8005a74 <do_memp_malloc_pool.isra.0+0x1c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	6003      	str	r3, [r0, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005a62:	07a3      	lsls	r3, r4, #30
 8005a64:	d006      	beq.n	8005a74 <do_memp_malloc_pool.isra.0+0x1c>
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <do_memp_malloc_pool.isra.0+0x20>)
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <do_memp_malloc_pool.isra.0+0x24>)
 8005a6a:	4805      	ldr	r0, [pc, #20]	; (8005a80 <do_memp_malloc_pool.isra.0+0x28>)
 8005a6c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005a70:	f005 f984 	bl	800ad7c <iprintf>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8005a74:	4620      	mov	r0, r4
 8005a76:	bd10      	pop	{r4, pc}
 8005a78:	08019827 	.word	0x08019827
 8005a7c:	08019899 	.word	0x08019899
 8005a80:	08018c9a 	.word	0x08018c9a

08005a84 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8005a84:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a86:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8005a88:	4605      	mov	r5, r0
 8005a8a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a8c:	d006      	beq.n	8005a9c <do_memp_free_pool.isra.0+0x18>
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <do_memp_free_pool.isra.0+0x24>)
 8005a90:	4906      	ldr	r1, [pc, #24]	; (8005aac <do_memp_free_pool.isra.0+0x28>)
 8005a92:	4807      	ldr	r0, [pc, #28]	; (8005ab0 <do_memp_free_pool.isra.0+0x2c>)
 8005a94:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005a98:	f005 f970 	bl	800ad7c <iprintf>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005a9c:	682b      	ldr	r3, [r5, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8005aa2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005aa4:	bd38      	pop	{r3, r4, r5, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08019827 	.word	0x08019827
 8005aac:	080198bc 	.word	0x080198bc
 8005ab0:	08018c9a 	.word	0x08018c9a

08005ab4 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ab4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005ab6:	6881      	ldr	r1, [r0, #8]
{
 8005ab8:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8005aba:	2200      	movs	r2, #0
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005abc:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005abe:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005ac0:	600a      	str	r2, [r1, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005ac6:	4294      	cmp	r4, r2
 8005ac8:	dc00      	bgt.n	8005acc <memp_init_pool+0x18>
}
 8005aca:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005acc:	680d      	ldr	r5, [r1, #0]
 8005ace:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ad0:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005ad2:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005ad4:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ad6:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8005ad8:	e7f5      	b.n	8005ac6 <memp_init_pool+0x12>
	...

08005adc <memp_init>:
{
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d05      	ldr	r5, [pc, #20]	; (8005af4 <memp_init+0x18>)
 8005ae0:	2409      	movs	r4, #9
    memp_init_pool(memp_pools[i]);
 8005ae2:	3c01      	subs	r4, #1
 8005ae4:	f855 0b04 	ldr.w	r0, [r5], #4
 8005ae8:	b2a4      	uxth	r4, r4
 8005aea:	f7ff ffe3 	bl	8005ab4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005aee:	2c00      	cmp	r4, #0
 8005af0:	d1f7      	bne.n	8005ae2 <memp_init+0x6>
}
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	0800be50 	.word	0x0800be50

08005af8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005af8:	2808      	cmp	r0, #8
{
 8005afa:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005afc:	d807      	bhi.n	8005b0e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <memp_malloc+0x28>)
 8005b00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005b04:	6898      	ldr	r0, [r3, #8]
}
 8005b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005b0a:	f7ff bfa5 	b.w	8005a58 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <memp_malloc+0x2c>)
 8005b10:	4905      	ldr	r1, [pc, #20]	; (8005b28 <memp_malloc+0x30>)
 8005b12:	4806      	ldr	r0, [pc, #24]	; (8005b2c <memp_malloc+0x34>)
 8005b14:	f240 1257 	movw	r2, #343	; 0x157
 8005b18:	f005 f930 	bl	800ad7c <iprintf>
}
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	bd08      	pop	{r3, pc}
 8005b20:	0800be50 	.word	0x0800be50
 8005b24:	08019827 	.word	0x08019827
 8005b28:	080198ee 	.word	0x080198ee
 8005b2c:	08018c9a 	.word	0x08018c9a

08005b30 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005b30:	2808      	cmp	r0, #8
 8005b32:	d906      	bls.n	8005b42 <memp_free+0x12>
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <memp_free+0x24>)
 8005b36:	4908      	ldr	r1, [pc, #32]	; (8005b58 <memp_free+0x28>)
 8005b38:	4808      	ldr	r0, [pc, #32]	; (8005b5c <memp_free+0x2c>)
 8005b3a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005b3e:	f005 b91d 	b.w	800ad7c <iprintf>

  if (mem == NULL) {
 8005b42:	b129      	cbz	r1, 8005b50 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005b44:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <memp_free+0x30>)
 8005b46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005b4a:	3008      	adds	r0, #8
 8005b4c:	f7ff bf9a 	b.w	8005a84 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	08019827 	.word	0x08019827
 8005b58:	0801990b 	.word	0x0801990b
 8005b5c:	08018c9a 	.word	0x08018c9a
 8005b60:	0800be50 	.word	0x0800be50

08005b64 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8005b64:	f06f 000b 	mvn.w	r0, #11
 8005b68:	4770      	bx	lr
	...

08005b6c <netif_issue_reports>:
{
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005b70:	4604      	mov	r4, r0
 8005b72:	b930      	cbnz	r0, 8005b82 <netif_issue_reports+0x16>
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <netif_issue_reports+0x3c>)
 8005b76:	490d      	ldr	r1, [pc, #52]	; (8005bac <netif_issue_reports+0x40>)
 8005b78:	480d      	ldr	r0, [pc, #52]	; (8005bb0 <netif_issue_reports+0x44>)
 8005b7a:	f240 326d 	movw	r2, #877	; 0x36d
 8005b7e:	f005 f8fd 	bl	800ad7c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005b82:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005b86:	f003 0205 	and.w	r2, r3, #5
 8005b8a:	2a05      	cmp	r2, #5
 8005b8c:	d10b      	bne.n	8005ba6 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005b8e:	07ea      	lsls	r2, r5, #31
 8005b90:	d509      	bpl.n	8005ba6 <netif_issue_reports+0x3a>
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	b13a      	cbz	r2, 8005ba6 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005b96:	071b      	lsls	r3, r3, #28
 8005b98:	d505      	bpl.n	8005ba6 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8005b9a:	1d21      	adds	r1, r4, #4
 8005b9c:	4620      	mov	r0, r4
}
 8005b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 8005ba2:	f7fe bc83 	b.w	80044ac <etharp_request>
}
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	08019926 	.word	0x08019926
 8005bac:	08019999 	.word	0x08019999
 8005bb0:	08018c9a 	.word	0x08018c9a

08005bb4 <netif_do_set_ipaddr>:
{
 8005bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005bba:	460c      	mov	r4, r1
 8005bbc:	b931      	cbnz	r1, 8005bcc <netif_do_set_ipaddr+0x18>
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <netif_do_set_ipaddr+0x4c>)
 8005bc0:	4910      	ldr	r1, [pc, #64]	; (8005c04 <netif_do_set_ipaddr+0x50>)
 8005bc2:	4811      	ldr	r0, [pc, #68]	; (8005c08 <netif_do_set_ipaddr+0x54>)
 8005bc4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005bc8:	f005 f8d8 	bl	800ad7c <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005bcc:	686b      	ldr	r3, [r5, #4]
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d101      	bne.n	8005bd8 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e010      	b.n	8005bfa <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005bd8:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005bda:	a901      	add	r1, sp, #4
 8005bdc:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005bde:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005be0:	f001 fc66 	bl	80074b0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005be4:	a901      	add	r1, sp, #4
 8005be6:	4630      	mov	r0, r6
 8005be8:	f004 f972 	bl	8009ed0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	f7ff ffba 	bl	8005b6c <netif_issue_reports>
    return 1; /* address changed */
 8005bf8:	2001      	movs	r0, #1
}
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	bf00      	nop
 8005c00:	08019926 	.word	0x08019926
 8005c04:	080199bc 	.word	0x080199bc
 8005c08:	08018c9a 	.word	0x08018c9a

08005c0c <netif_init>:
}
 8005c0c:	4770      	bx	lr
	...

08005c10 <netif_set_addr>:
{
 8005c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8005c12:	4f14      	ldr	r7, [pc, #80]	; (8005c64 <netif_set_addr+0x54>)
 8005c14:	2900      	cmp	r1, #0
 8005c16:	bf14      	ite	ne
 8005c18:	460d      	movne	r5, r1
 8005c1a:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	4616      	movne	r6, r2
 8005c22:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bf18      	it	ne
 8005c28:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8005c2a:	682b      	ldr	r3, [r5, #0]
{
 8005c2c:	4604      	mov	r4, r0
  remove = ip4_addr_isany(ipaddr);
 8005c2e:	b9b3      	cbnz	r3, 8005c5e <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005c30:	aa01      	add	r2, sp, #4
 8005c32:	4629      	mov	r1, r5
 8005c34:	f7ff ffbe 	bl	8005bb4 <netif_do_set_ipaddr>
 8005c38:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005c3a:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005c3c:	68a1      	ldr	r1, [r4, #8]
 8005c3e:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005c40:	bf18      	it	ne
 8005c42:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005c44:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005c46:	68e1      	ldr	r1, [r4, #12]
 8005c48:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005c4a:	bf18      	it	ne
 8005c4c:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 8005c4e:	b923      	cbnz	r3, 8005c5a <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005c50:	aa01      	add	r2, sp, #4
 8005c52:	4629      	mov	r1, r5
 8005c54:	4620      	mov	r0, r4
 8005c56:	f7ff ffad 	bl	8005bb4 <netif_do_set_ipaddr>
}
 8005c5a:	b003      	add	sp, #12
 8005c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e7eb      	b.n	8005c3a <netif_set_addr+0x2a>
 8005c62:	bf00      	nop
 8005c64:	0800be4c 	.word	0x0800be4c

08005c68 <netif_add>:
{
 8005c68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005c6e:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005c70:	4604      	mov	r4, r0
 8005c72:	b948      	cbnz	r0, 8005c88 <netif_add+0x20>
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <netif_add+0x108>)
 8005c76:	493f      	ldr	r1, [pc, #252]	; (8005d74 <netif_add+0x10c>)
 8005c78:	483f      	ldr	r0, [pc, #252]	; (8005d78 <netif_add+0x110>)
 8005c7a:	f240 1227 	movw	r2, #295	; 0x127
 8005c7e:	f005 f87d 	bl	800ad7c <iprintf>
}
 8005c82:	4620      	mov	r0, r4
 8005c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005c88:	b947      	cbnz	r7, 8005c9c <netif_add+0x34>
 8005c8a:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <netif_add+0x108>)
 8005c8c:	493b      	ldr	r1, [pc, #236]	; (8005d7c <netif_add+0x114>)
 8005c8e:	483a      	ldr	r0, [pc, #232]	; (8005d78 <netif_add+0x110>)
 8005c90:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005c94:	f005 f872 	bl	800ad7c <iprintf>
 8005c98:	463c      	mov	r4, r7
 8005c9a:	e7f2      	b.n	8005c82 <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8005c9c:	4e38      	ldr	r6, [pc, #224]	; (8005d80 <netif_add+0x118>)
 8005c9e:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8005ca0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ca2:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8005ca4:	4e37      	ldr	r6, [pc, #220]	; (8005d84 <netif_add+0x11c>)
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005ca6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005d8c <netif_add+0x124>
  netif->input = input;
 8005caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 8005cac:	f896 e000 	ldrb.w	lr, [r6]
  netif->input = input;
 8005cb0:	6103      	str	r3, [r0, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005cb2:	2500      	movs	r5, #0
  ip_addr_set_zero_ip4(&netif->netmask);
 8005cb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8005cb8:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 8005cba:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 8005cbc:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005cc0:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 8005cc2:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 8005cc4:	f880 e034 	strb.w	lr, [r0, #52]	; 0x34
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005cc8:	45a8      	cmp	r8, r5
 8005cca:	bf14      	ite	ne
 8005ccc:	4643      	movne	r3, r8
 8005cce:	4663      	moveq	r3, ip
 8005cd0:	42aa      	cmp	r2, r5
 8005cd2:	bf08      	it	eq
 8005cd4:	4662      	moveq	r2, ip
 8005cd6:	42a9      	cmp	r1, r5
 8005cd8:	bf08      	it	eq
 8005cda:	4661      	moveq	r1, ip
 8005cdc:	f7ff ff98 	bl	8005c10 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	47b8      	blx	r7
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d140      	bne.n	8005d6a <netif_add+0x102>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ce8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005d90 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005cec:	4b20      	ldr	r3, [pc, #128]	; (8005d70 <netif_add+0x108>)
 8005cee:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 8005cf0:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005cf4:	f8d9 5000 	ldr.w	r5, [r9]
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005cf8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8005d94 <netif_add+0x12c>
 8005cfc:	f8df a078 	ldr.w	sl, [pc, #120]	; 8005d78 <netif_add+0x110>
      if (netif->num == 255) {
 8005d00:	2aff      	cmp	r2, #255	; 0xff
        netif->num = 0;
 8005d02:	bf04      	itt	eq
 8005d04:	2200      	moveq	r2, #0
 8005d06:	f884 2034 	strbeq.w	r2, [r4, #52]	; 0x34
      num_netifs = 0;
 8005d0a:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d0c:	b92d      	cbnz	r5, 8005d1a <netif_add+0xb2>
  if (netif->num == 254) {
 8005d0e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005d12:	2bfe      	cmp	r3, #254	; 0xfe
 8005d14:	d120      	bne.n	8005d58 <netif_add+0xf0>
    netif_num = 0;
 8005d16:	462b      	mov	r3, r5
 8005d18:	e020      	b.n	8005d5c <netif_add+0xf4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005d1a:	42a5      	cmp	r5, r4
 8005d1c:	d106      	bne.n	8005d2c <netif_add+0xc4>
 8005d1e:	f240 128b 	movw	r2, #395	; 0x18b
 8005d22:	4659      	mov	r1, fp
 8005d24:	4650      	mov	r0, sl
 8005d26:	f005 f829 	bl	800ad7c <iprintf>
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <netif_add+0x108>)
        num_netifs++;
 8005d2c:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005d2e:	2fff      	cmp	r7, #255	; 0xff
 8005d30:	dd06      	ble.n	8005d40 <netif_add+0xd8>
 8005d32:	4915      	ldr	r1, [pc, #84]	; (8005d88 <netif_add+0x120>)
 8005d34:	f240 128d 	movw	r2, #397	; 0x18d
 8005d38:	4650      	mov	r0, sl
 8005d3a:	f005 f81f 	bl	800ad7c <iprintf>
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <netif_add+0x108>)
        if (netif2->num == netif->num) {
 8005d40:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8005d44:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 8005d48:	428a      	cmp	r2, r1
 8005d4a:	d103      	bne.n	8005d54 <netif_add+0xec>
          netif->num++;
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 8005d52:	e7cd      	b.n	8005cf0 <netif_add+0x88>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005d54:	682d      	ldr	r5, [r5, #0]
 8005d56:	e7d9      	b.n	8005d0c <netif_add+0xa4>
    netif_num = (u8_t)(netif->num + 1);
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8005d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d62:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 8005d64:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8005d68:	e78b      	b.n	8005c82 <netif_add+0x1a>
    return NULL;
 8005d6a:	462c      	mov	r4, r5
 8005d6c:	e789      	b.n	8005c82 <netif_add+0x1a>
 8005d6e:	bf00      	nop
 8005d70:	08019926 	.word	0x08019926
 8005d74:	08019a5e 	.word	0x08019a5e
 8005d78:	08018c9a 	.word	0x08018c9a
 8005d7c:	08019a77 	.word	0x08019a77
 8005d80:	08005b65 	.word	0x08005b65
 8005d84:	2000020c 	.word	0x2000020c
 8005d88:	08019aad 	.word	0x08019aad
 8005d8c:	0800be4c 	.word	0x0800be4c
 8005d90:	2000e47c 	.word	0x2000e47c
 8005d94:	08019a99 	.word	0x08019a99

08005d98 <netif_set_default>:
  netif_default = netif;
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <netif_set_default+0x8>)
 8005d9a:	6018      	str	r0, [r3, #0]
}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	2000e480 	.word	0x2000e480

08005da4 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005da4:	b930      	cbnz	r0, 8005db4 <netif_set_up+0x10>
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <netif_set_up+0x28>)
 8005da8:	4909      	ldr	r1, [pc, #36]	; (8005dd0 <netif_set_up+0x2c>)
 8005daa:	480a      	ldr	r0, [pc, #40]	; (8005dd4 <netif_set_up+0x30>)
 8005dac:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005db0:	f004 bfe4 	b.w	800ad7c <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005db4:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8005db8:	07d1      	lsls	r1, r2, #31
 8005dba:	d406      	bmi.n	8005dca <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005dc4:	2103      	movs	r1, #3
 8005dc6:	f7ff bed1 	b.w	8005b6c <netif_issue_reports>
}
 8005dca:	4770      	bx	lr
 8005dcc:	08019926 	.word	0x08019926
 8005dd0:	08019adb 	.word	0x08019adb
 8005dd4:	08018c9a 	.word	0x08018c9a

08005dd8 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005dd8:	b930      	cbnz	r0, 8005de8 <netif_set_down+0x10>
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <netif_set_down+0x2c>)
 8005ddc:	490a      	ldr	r1, [pc, #40]	; (8005e08 <netif_set_down+0x30>)
 8005dde:	480b      	ldr	r0, [pc, #44]	; (8005e0c <netif_set_down+0x34>)
 8005de0:	f240 329b 	movw	r2, #923	; 0x39b
 8005de4:	f004 bfca 	b.w	800ad7c <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 8005de8:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8005dec:	07d1      	lsls	r1, r2, #31
 8005dee:	d507      	bpl.n	8005e00 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005df0:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005df4:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005df6:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005dfa:	d501      	bpl.n	8005e00 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 8005dfc:	f7fe ba98 	b.w	8004330 <etharp_cleanup_netif>
}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	08019926 	.word	0x08019926
 8005e08:	08019af7 	.word	0x08019af7
 8005e0c:	08018c9a 	.word	0x08018c9a

08005e10 <netif_set_link_callback>:
  if (netif) {
 8005e10:	b100      	cbz	r0, 8005e14 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8005e12:	61c1      	str	r1, [r0, #28]
}
 8005e14:	4770      	bx	lr
	...

08005e18 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005e18:	4603      	mov	r3, r0
 8005e1a:	b158      	cbz	r0, 8005e34 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8005e1c:	4a06      	ldr	r2, [pc, #24]	; (8005e38 <netif_get_by_index+0x20>)
 8005e1e:	6810      	ldr	r0, [r2, #0]
 8005e20:	b900      	cbnz	r0, 8005e24 <netif_get_by_index+0xc>
 8005e22:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8005e24:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8005e28:	3201      	adds	r2, #1
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8005e30:	6800      	ldr	r0, [r0, #0]
 8005e32:	e7f5      	b.n	8005e20 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	2000e47c 	.word	0x2000e47c

08005e3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e3c:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e3e:	b968      	cbnz	r0, 8005e5c <pbuf_add_header_impl+0x20>
 8005e40:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <pbuf_add_header_impl+0x58>)
 8005e42:	4915      	ldr	r1, [pc, #84]	; (8005e98 <pbuf_add_header_impl+0x5c>)
 8005e44:	4815      	ldr	r0, [pc, #84]	; (8005e9c <pbuf_add_header_impl+0x60>)
 8005e46:	f240 12df 	movw	r2, #479	; 0x1df
 8005e4a:	f004 ff97 	bl	800ad7c <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e01f      	b.n	8005e92 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	d0fb      	beq.n	8005e4e <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e56:	6842      	ldr	r2, [r0, #4]
 8005e58:	1a51      	subs	r1, r2, r1
 8005e5a:	e014      	b.n	8005e86 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e5c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005e60:	d2f5      	bcs.n	8005e4e <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 8005e62:	b1a9      	cbz	r1, 8005e90 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e64:	8903      	ldrh	r3, [r0, #8]
 8005e66:	fa13 f381 	uxtah	r3, r3, r1
  increment_magnitude = (u16_t)header_size_increment;
 8005e6a:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	429c      	cmp	r4, r3
 8005e70:	d8ed      	bhi.n	8005e4e <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e72:	f990 500c 	ldrsb.w	r5, [r0, #12]
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	daeb      	bge.n	8005e52 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 8005e7a:	6842      	ldr	r2, [r0, #4]
 8005e7c:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e7e:	f100 0210 	add.w	r2, r0, #16
 8005e82:	4291      	cmp	r1, r2
 8005e84:	d3e3      	bcc.n	8005e4e <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e86:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 8005e88:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e8a:	4414      	add	r4, r2
 8005e8c:	8144      	strh	r4, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e8e:	8103      	strh	r3, [r0, #8]


  return 0;
 8005e90:	2000      	movs	r0, #0
}
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	08019b59 	.word	0x08019b59
 8005e98:	08019c6d 	.word	0x08019c6d
 8005e9c:	08018c9a 	.word	0x08018c9a

08005ea0 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ea0:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8005ea4:	2b01      	cmp	r3, #1
{
 8005ea6:	b570      	push	{r4, r5, r6, lr}
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005eae:	d006      	beq.n	8005ebe <pbuf_alloc_reference+0x1e>
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <pbuf_alloc_reference+0x3c>)
 8005eb2:	490b      	ldr	r1, [pc, #44]	; (8005ee0 <pbuf_alloc_reference+0x40>)
 8005eb4:	480b      	ldr	r0, [pc, #44]	; (8005ee4 <pbuf_alloc_reference+0x44>)
 8005eb6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005eba:	f004 ff5f 	bl	800ad7c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005ebe:	2007      	movs	r0, #7
 8005ec0:	f7ff fe1a 	bl	8005af8 <memp_malloc>
  if (p == NULL) {
 8005ec4:	b140      	cbz	r0, 8005ed8 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 8005ec6:	2300      	movs	r3, #0
  p->payload = payload;
 8005ec8:	e9c0 3600 	strd	r3, r6, [r0]
  p->flags = flags;
 8005ecc:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8005ece:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8005ed0:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8005ed2:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8005ed4:	7304      	strb	r4, [r0, #12]
  p->ref = 1;
 8005ed6:	81c3      	strh	r3, [r0, #14]
}
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
 8005eda:	bf00      	nop
 8005edc:	08019b59 	.word	0x08019b59
 8005ee0:	08019bcb 	.word	0x08019bcb
 8005ee4:	08018c9a 	.word	0x08018c9a

08005ee8 <pbuf_alloced_custom>:
{
 8005ee8:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005eea:	3003      	adds	r0, #3
 8005eec:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 8005ef0:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005ef2:	f020 0003 	bic.w	r0, r0, #3
 8005ef6:	180e      	adds	r6, r1, r0
 8005ef8:	42ae      	cmp	r6, r5
 8005efa:	d80d      	bhi.n	8005f18 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8005efc:	b104      	cbz	r4, 8005f00 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005efe:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005f00:	4618      	mov	r0, r3
  p->next = NULL;
 8005f02:	2300      	movs	r3, #0
  p->payload = payload;
 8005f04:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8005f0c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8005f0e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8005f10:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8005f12:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8005f14:	81c3      	strh	r3, [r0, #14]
}
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e7fc      	b.n	8005f16 <pbuf_alloced_custom+0x2e>

08005f1c <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f7ff bf8d 	b.w	8005e3c <pbuf_add_header_impl>
	...

08005f24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f24:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f26:	b990      	cbnz	r0, 8005f4e <pbuf_remove_header+0x2a>
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <pbuf_remove_header+0x48>)
 8005f2a:	4911      	ldr	r1, [pc, #68]	; (8005f70 <pbuf_remove_header+0x4c>)
 8005f2c:	f240 224b 	movw	r2, #587	; 0x24b
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f30:	4810      	ldr	r0, [pc, #64]	; (8005f74 <pbuf_remove_header+0x50>)
 8005f32:	f004 ff23 	bl	800ad7c <iprintf>
    return 1;
 8005f36:	2001      	movs	r0, #1
 8005f38:	e008      	b.n	8005f4c <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f3a:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f3c:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f3e:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f40:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f42:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f44:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f46:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f48:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f4a:	2000      	movs	r0, #0
}
 8005f4c:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005f4e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005f52:	d2f0      	bcs.n	8005f36 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 8005f54:	2900      	cmp	r1, #0
 8005f56:	d0f8      	beq.n	8005f4a <pbuf_remove_header+0x26>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f58:	8943      	ldrh	r3, [r0, #10]
  increment_magnitude = (u16_t)header_size_decrement;
 8005f5a:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d2ec      	bcs.n	8005f3a <pbuf_remove_header+0x16>
 8005f60:	4b02      	ldr	r3, [pc, #8]	; (8005f6c <pbuf_remove_header+0x48>)
 8005f62:	4905      	ldr	r1, [pc, #20]	; (8005f78 <pbuf_remove_header+0x54>)
 8005f64:	f240 2255 	movw	r2, #597	; 0x255
 8005f68:	e7e2      	b.n	8005f30 <pbuf_remove_header+0xc>
 8005f6a:	bf00      	nop
 8005f6c:	08019b59 	.word	0x08019b59
 8005f70:	08019c6d 	.word	0x08019c6d
 8005f74:	08018c9a 	.word	0x08018c9a
 8005f78:	08019bdd 	.word	0x08019bdd

08005f7c <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8005f7c:	1e0b      	subs	r3, r1, #0
 8005f7e:	da02      	bge.n	8005f86 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f80:	4259      	negs	r1, r3
 8005f82:	f7ff bfcf 	b.w	8005f24 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005f86:	2201      	movs	r2, #1
 8005f88:	f7ff bf58 	b.w	8005e3c <pbuf_add_header_impl>

08005f8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005f90:	4604      	mov	r4, r0
 8005f92:	b950      	cbnz	r0, 8005faa <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005f94:	4b29      	ldr	r3, [pc, #164]	; (800603c <pbuf_free+0xb0>)
 8005f96:	492a      	ldr	r1, [pc, #168]	; (8006040 <pbuf_free+0xb4>)
 8005f98:	482a      	ldr	r0, [pc, #168]	; (8006044 <pbuf_free+0xb8>)
 8005f9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005f9e:	f004 feed 	bl	800ad7c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005fa2:	4625      	mov	r5, r4
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005faa:	4e24      	ldr	r6, [pc, #144]	; (800603c <pbuf_free+0xb0>)
 8005fac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006050 <pbuf_free+0xc4>
 8005fb0:	4f24      	ldr	r7, [pc, #144]	; (8006044 <pbuf_free+0xb8>)
  count = 0;
 8005fb2:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005fb4:	7ba3      	ldrb	r3, [r4, #14]
 8005fb6:	b933      	cbnz	r3, 8005fc6 <pbuf_free+0x3a>
 8005fb8:	4633      	mov	r3, r6
 8005fba:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005fbe:	4641      	mov	r1, r8
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f004 fedb 	bl	800ad7c <iprintf>
    ref = --(p->ref);
 8005fc6:	7ba3      	ldrb	r3, [r4, #14]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e8      	bne.n	8005fa4 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005fd2:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8005fd4:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005fd8:	079b      	lsls	r3, r3, #30
 8005fda:	d512      	bpl.n	8006002 <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	b933      	cbnz	r3, 8005fee <pbuf_free+0x62>
 8005fe0:	4919      	ldr	r1, [pc, #100]	; (8006048 <pbuf_free+0xbc>)
 8005fe2:	4633      	mov	r3, r6
 8005fe4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f004 fec7 	bl	800ad7c <iprintf>
        pc->custom_free_function(p);
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4798      	blx	r3
      count++;
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8005ff8:	f1b9 0f00 	cmp.w	r9, #0
 8005ffc:	d0d2      	beq.n	8005fa4 <pbuf_free+0x18>
 8005ffe:	464c      	mov	r4, r9
 8006000:	e7d8      	b.n	8005fb4 <pbuf_free+0x28>
      alloc_src = pbuf_get_allocsrc(p);
 8006002:	7b23      	ldrb	r3, [r4, #12]
 8006004:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006008:	2b02      	cmp	r3, #2
 800600a:	d104      	bne.n	8006016 <pbuf_free+0x8a>
          memp_free(MEMP_PBUF_POOL, p);
 800600c:	4621      	mov	r1, r4
 800600e:	2008      	movs	r0, #8
          memp_free(MEMP_PBUF, p);
 8006010:	f7ff fd8e 	bl	8005b30 <memp_free>
 8006014:	e7ee      	b.n	8005ff4 <pbuf_free+0x68>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006016:	2b01      	cmp	r3, #1
 8006018:	d102      	bne.n	8006020 <pbuf_free+0x94>
          memp_free(MEMP_PBUF, p);
 800601a:	4621      	mov	r1, r4
 800601c:	2007      	movs	r0, #7
 800601e:	e7f7      	b.n	8006010 <pbuf_free+0x84>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006020:	b91b      	cbnz	r3, 800602a <pbuf_free+0x9e>
          mem_free(p);
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff fb30 	bl	8005688 <mem_free>
 8006028:	e7e4      	b.n	8005ff4 <pbuf_free+0x68>
          LWIP_ASSERT("invalid pbuf type", 0);
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <pbuf_free+0xc0>)
 800602c:	4633      	mov	r3, r6
 800602e:	f240 320f 	movw	r2, #783	; 0x30f
 8006032:	4638      	mov	r0, r7
 8006034:	f004 fea2 	bl	800ad7c <iprintf>
 8006038:	e7dc      	b.n	8005ff4 <pbuf_free+0x68>
 800603a:	bf00      	nop
 800603c:	08019b59 	.word	0x08019b59
 8006040:	08019c6d 	.word	0x08019c6d
 8006044:	08018c9a 	.word	0x08018c9a
 8006048:	08019c11 	.word	0x08019c11
 800604c:	08019c32 	.word	0x08019c32
 8006050:	08019bfb 	.word	0x08019bfb

08006054 <pbuf_alloc>:
  switch (type) {
 8006054:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4606      	mov	r6, r0
 800605e:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 8006060:	b284      	uxth	r4, r0
  switch (type) {
 8006062:	d014      	beq.n	800608e <pbuf_alloc+0x3a>
 8006064:	d808      	bhi.n	8006078 <pbuf_alloc+0x24>
 8006066:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800606a:	2b01      	cmp	r3, #1
 800606c:	d107      	bne.n	800607e <pbuf_alloc+0x2a>
}
 800606e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8006072:	2000      	movs	r0, #0
 8006074:	f7ff bf14 	b.w	8005ea0 <pbuf_alloc_reference>
  switch (type) {
 8006078:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800607c:	d03c      	beq.n	80060f8 <pbuf_alloc+0xa4>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800607e:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <pbuf_alloc+0xe4>)
 8006080:	492e      	ldr	r1, [pc, #184]	; (800613c <pbuf_alloc+0xe8>)
 8006082:	482f      	ldr	r0, [pc, #188]	; (8006140 <pbuf_alloc+0xec>)
 8006084:	f240 1227 	movw	r2, #295	; 0x127
 8006088:	f004 fe78 	bl	800ad7c <iprintf>
 800608c:	e00c      	b.n	80060a8 <pbuf_alloc+0x54>
  switch (type) {
 800608e:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 8006090:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8006148 <pbuf_alloc+0xf4>
  switch (type) {
 8006094:	4635      	mov	r5, r6
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006096:	f240 58f4 	movw	r8, #1524	; 0x5f4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800609a:	2008      	movs	r0, #8
 800609c:	f7ff fd2c 	bl	8005af8 <memp_malloc>
        if (q == NULL) {
 80060a0:	46b2      	mov	sl, r6
 80060a2:	4606      	mov	r6, r0
 80060a4:	b930      	cbnz	r0, 80060b4 <pbuf_alloc+0x60>
          if (p) {
 80060a6:	b90d      	cbnz	r5, 80060ac <pbuf_alloc+0x58>
      return NULL;
 80060a8:	2500      	movs	r5, #0
 80060aa:	e020      	b.n	80060ee <pbuf_alloc+0x9a>
            pbuf_free(p);
 80060ac:	4628      	mov	r0, r5
 80060ae:	f7ff ff6d 	bl	8005f8c <pbuf_free>
 80060b2:	e7f9      	b.n	80060a8 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80060b4:	1ce3      	adds	r3, r4, #3
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	eba8 0303 	sub.w	r3, r8, r3
 80060be:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80060c0:	4404      	add	r4, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80060c2:	42bb      	cmp	r3, r7
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80060c4:	f104 0413 	add.w	r4, r4, #19
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80060c8:	bf28      	it	cs
 80060ca:	463b      	movcs	r3, r7
  p->next = NULL;
 80060cc:	2200      	movs	r2, #0
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80060ce:	f024 0403 	bic.w	r4, r4, #3
  p->next = NULL;
 80060d2:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 80060d4:	6044      	str	r4, [r0, #4]
  p->tot_len = tot_len;
 80060d6:	8107      	strh	r7, [r0, #8]
  p->len = len;
 80060d8:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 80060da:	f8c0 900c 	str.w	r9, [r0, #12]
        if (p == NULL) {
 80060de:	b14d      	cbz	r5, 80060f4 <pbuf_alloc+0xa0>
          last->next = q;
 80060e0:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80060e4:	1afb      	subs	r3, r7, r3
 80060e6:	b29f      	uxth	r7, r3
        offset = 0;
 80060e8:	2400      	movs	r4, #0
      } while (rem_len > 0);
 80060ea:	2f00      	cmp	r7, #0
 80060ec:	d1d5      	bne.n	800609a <pbuf_alloc+0x46>
}
 80060ee:	4628      	mov	r0, r5
 80060f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f4:	4605      	mov	r5, r0
 80060f6:	e7f5      	b.n	80060e4 <pbuf_alloc+0x90>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80060f8:	3403      	adds	r4, #3
 80060fa:	1ccb      	adds	r3, r1, #3
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	f024 0403 	bic.w	r4, r4, #3
 8006104:	441c      	add	r4, r3
 8006106:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006108:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800610c:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800610e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006110:	d3ca      	bcc.n	80060a8 <pbuf_alloc+0x54>
 8006112:	4283      	cmp	r3, r0
 8006114:	d8c8      	bhi.n	80060a8 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006116:	f7ff fc03 	bl	8005920 <mem_malloc>
      if (p == NULL) {
 800611a:	4605      	mov	r5, r0
 800611c:	2800      	cmp	r0, #0
 800611e:	d0e6      	beq.n	80060ee <pbuf_alloc+0x9a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006120:	4406      	add	r6, r0
  p->next = NULL;
 8006122:	2300      	movs	r3, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006124:	3613      	adds	r6, #19
  p->next = NULL;
 8006126:	6003      	str	r3, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006128:	f026 0603 	bic.w	r6, r6, #3
  p->type_internal = (u8_t)type;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <pbuf_alloc+0xf0>)
  p->payload = payload;
 800612e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8006130:	8107      	strh	r7, [r0, #8]
  p->len = len;
 8006132:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 8006134:	60c3      	str	r3, [r0, #12]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006136:	e7da      	b.n	80060ee <pbuf_alloc+0x9a>
 8006138:	08019b59 	.word	0x08019b59
 800613c:	08019c44 	.word	0x08019c44
 8006140:	08018c9a 	.word	0x08018c9a
 8006144:	00010080 	.word	0x00010080
 8006148:	00010082 	.word	0x00010082

0800614c <pbuf_realloc>:
{
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006152:	4604      	mov	r4, r0
 8006154:	b930      	cbnz	r0, 8006164 <pbuf_realloc+0x18>
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <pbuf_realloc+0x9c>)
 8006158:	4924      	ldr	r1, [pc, #144]	; (80061ec <pbuf_realloc+0xa0>)
 800615a:	4825      	ldr	r0, [pc, #148]	; (80061f0 <pbuf_realloc+0xa4>)
 800615c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006160:	f004 fe0c 	bl	800ad7c <iprintf>
  if (new_len >= p->tot_len) {
 8006164:	8927      	ldrh	r7, [r4, #8]
 8006166:	42b7      	cmp	r7, r6
 8006168:	d93c      	bls.n	80061e4 <pbuf_realloc+0x98>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800616a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80061e8 <pbuf_realloc+0x9c>
 800616e:	f8df a088 	ldr.w	sl, [pc, #136]	; 80061f8 <pbuf_realloc+0xac>
 8006172:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80061f0 <pbuf_realloc+0xa4>
 8006176:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8006178:	8962      	ldrh	r2, [r4, #10]
 800617a:	42aa      	cmp	r2, r5
 800617c:	d319      	bcc.n	80061b2 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800617e:	7b23      	ldrb	r3, [r4, #12]
 8006180:	0719      	lsls	r1, r3, #28
 8006182:	d127      	bne.n	80061d4 <pbuf_realloc+0x88>
 8006184:	42aa      	cmp	r2, r5
 8006186:	d025      	beq.n	80061d4 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006188:	7b63      	ldrb	r3, [r4, #13]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	d422      	bmi.n	80061d4 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800618e:	6861      	ldr	r1, [r4, #4]
 8006190:	1b09      	subs	r1, r1, r4
 8006192:	4429      	add	r1, r5
 8006194:	4620      	mov	r0, r4
 8006196:	b289      	uxth	r1, r1
 8006198:	f7ff fb26 	bl	80057e8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800619c:	4604      	mov	r4, r0
 800619e:	b9c8      	cbnz	r0, 80061d4 <pbuf_realloc+0x88>
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <pbuf_realloc+0x9c>)
 80061a2:	4914      	ldr	r1, [pc, #80]	; (80061f4 <pbuf_realloc+0xa8>)
 80061a4:	4812      	ldr	r0, [pc, #72]	; (80061f0 <pbuf_realloc+0xa4>)
 80061a6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80061aa:	f004 fde7 	bl	800ad7c <iprintf>
  q->len = rem_len;
 80061ae:	8164      	strh	r4, [r4, #10]
 80061b0:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 80061b2:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80061b4:	8922      	ldrh	r2, [r4, #8]
 80061b6:	1bf3      	subs	r3, r6, r7
 80061b8:	4413      	add	r3, r2
 80061ba:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80061bc:	6824      	ldr	r4, [r4, #0]
    rem_len = (u16_t)(rem_len - q->len);
 80061be:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80061c0:	2c00      	cmp	r4, #0
 80061c2:	d1d9      	bne.n	8006178 <pbuf_realloc+0x2c>
 80061c4:	4643      	mov	r3, r8
 80061c6:	f240 12af 	movw	r2, #431	; 0x1af
 80061ca:	4651      	mov	r1, sl
 80061cc:	4648      	mov	r0, r9
 80061ce:	f004 fdd5 	bl	800ad7c <iprintf>
 80061d2:	e7d1      	b.n	8006178 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 80061d4:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80061d6:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80061d8:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80061da:	b108      	cbz	r0, 80061e0 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 80061dc:	f7ff fed6 	bl	8005f8c <pbuf_free>
  q->next = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	6023      	str	r3, [r4, #0]
}
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	08019b59 	.word	0x08019b59
 80061ec:	08019c5f 	.word	0x08019c5f
 80061f0:	08018c9a 	.word	0x08018c9a
 80061f4:	08019c8f 	.word	0x08019c8f
 80061f8:	08019c77 	.word	0x08019c77

080061fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061fc:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80061fe:	2200      	movs	r2, #0
 8006200:	b290      	uxth	r0, r2
 8006202:	3201      	adds	r2, #1
 8006204:	b903      	cbnz	r3, 8006208 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8006206:	4770      	bx	lr
    p = p->next;
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	e7f9      	b.n	8006200 <pbuf_clen+0x4>

0800620c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800620c:	b158      	cbz	r0, 8006226 <pbuf_ref+0x1a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800620e:	7b83      	ldrb	r3, [r0, #14]
 8006210:	3301      	adds	r3, #1
 8006212:	b2db      	uxtb	r3, r3
 8006214:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006216:	b933      	cbnz	r3, 8006226 <pbuf_ref+0x1a>
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <pbuf_ref+0x1c>)
 800621a:	4904      	ldr	r1, [pc, #16]	; (800622c <pbuf_ref+0x20>)
 800621c:	4804      	ldr	r0, [pc, #16]	; (8006230 <pbuf_ref+0x24>)
 800621e:	f240 3242 	movw	r2, #834	; 0x342
 8006222:	f004 bdab 	b.w	800ad7c <iprintf>
  }
}
 8006226:	4770      	bx	lr
 8006228:	08019b59 	.word	0x08019b59
 800622c:	08019cab 	.word	0x08019cab
 8006230:	08018c9a 	.word	0x08018c9a

08006234 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006238:	4604      	mov	r4, r0
 800623a:	b100      	cbz	r0, 800623e <pbuf_cat+0xa>
 800623c:	b961      	cbnz	r1, 8006258 <pbuf_cat+0x24>
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <pbuf_cat+0x60>)
 8006244:	4914      	ldr	r1, [pc, #80]	; (8006298 <pbuf_cat+0x64>)
 8006246:	4815      	ldr	r0, [pc, #84]	; (800629c <pbuf_cat+0x68>)
 8006248:	f240 3259 	movw	r2, #857	; 0x359
 800624c:	f004 bd96 	b.w	800ad7c <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006250:	8929      	ldrh	r1, [r5, #8]
 8006252:	440b      	add	r3, r1
 8006254:	8123      	strh	r3, [r4, #8]
 8006256:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	8923      	ldrh	r3, [r4, #8]
 800625c:	2a00      	cmp	r2, #0
 800625e:	d1f7      	bne.n	8006250 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006260:	8962      	ldrh	r2, [r4, #10]
 8006262:	429a      	cmp	r2, r3
 8006264:	d00f      	beq.n	8006286 <pbuf_cat+0x52>
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <pbuf_cat+0x60>)
 8006268:	490d      	ldr	r1, [pc, #52]	; (80062a0 <pbuf_cat+0x6c>)
 800626a:	480c      	ldr	r0, [pc, #48]	; (800629c <pbuf_cat+0x68>)
 800626c:	f240 3262 	movw	r2, #866	; 0x362
 8006270:	f004 fd84 	bl	800ad7c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	b133      	cbz	r3, 8006286 <pbuf_cat+0x52>
 8006278:	4b06      	ldr	r3, [pc, #24]	; (8006294 <pbuf_cat+0x60>)
 800627a:	490a      	ldr	r1, [pc, #40]	; (80062a4 <pbuf_cat+0x70>)
 800627c:	4807      	ldr	r0, [pc, #28]	; (800629c <pbuf_cat+0x68>)
 800627e:	f240 3263 	movw	r2, #867	; 0x363
 8006282:	f004 fd7b 	bl	800ad7c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006286:	892a      	ldrh	r2, [r5, #8]
 8006288:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800628a:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800628c:	4413      	add	r3, r2
 800628e:	8123      	strh	r3, [r4, #8]
}
 8006290:	bd70      	pop	{r4, r5, r6, pc}
 8006292:	bf00      	nop
 8006294:	08019b59 	.word	0x08019b59
 8006298:	08019cbd 	.word	0x08019cbd
 800629c:	08018c9a 	.word	0x08018c9a
 80062a0:	08019cf2 	.word	0x08019cf2
 80062a4:	08019d1f 	.word	0x08019d1f

080062a8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80062a8:	b510      	push	{r4, lr}
 80062aa:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 80062ac:	f7ff ffc2 	bl	8006234 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80062b0:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80062b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80062b6:	f7ff bfa9 	b.w	800620c <pbuf_ref>
	...

080062bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80062bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80062c2:	4605      	mov	r5, r0
 80062c4:	b120      	cbz	r0, 80062d0 <pbuf_copy+0x14>
 80062c6:	b119      	cbz	r1, 80062d0 <pbuf_copy+0x14>
 80062c8:	8902      	ldrh	r2, [r0, #8]
 80062ca:	890b      	ldrh	r3, [r1, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d20a      	bcs.n	80062e6 <pbuf_copy+0x2a>
 80062d0:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <pbuf_copy+0xe8>)
 80062d2:	4935      	ldr	r1, [pc, #212]	; (80063a8 <pbuf_copy+0xec>)
 80062d4:	f240 32c9 	movw	r2, #969	; 0x3c9
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80062d8:	4834      	ldr	r0, [pc, #208]	; (80063ac <pbuf_copy+0xf0>)
 80062da:	f004 fd4f 	bl	800ad7c <iprintf>
 80062de:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80062e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 80062e6:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80062e8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80063a4 <pbuf_copy+0xe8>
 80062ec:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80063bc <pbuf_copy+0x100>
 80062f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80063ac <pbuf_copy+0xf0>
  size_t offset_to = 0, offset_from = 0, len;
 80062f4:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80062f6:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 80062fa:	8962      	ldrh	r2, [r4, #10]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80062fc:	6868      	ldr	r0, [r5, #4]
 80062fe:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006300:	eba8 0807 	sub.w	r8, r8, r7
 8006304:	1b92      	subs	r2, r2, r6
 8006306:	4590      	cmp	r8, r2
 8006308:	bf28      	it	cs
 800630a:	4690      	movcs	r8, r2
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800630c:	4431      	add	r1, r6
 800630e:	4438      	add	r0, r7
 8006310:	4642      	mov	r2, r8
 8006312:	f004 fd1d 	bl	800ad50 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006316:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 8006318:	4447      	add	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800631a:	429f      	cmp	r7, r3
    offset_from += len;
 800631c:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800631e:	d906      	bls.n	800632e <pbuf_copy+0x72>
 8006320:	465b      	mov	r3, fp
 8006322:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006326:	4651      	mov	r1, sl
 8006328:	4648      	mov	r0, r9
 800632a:	f004 fd27 	bl	800ad7c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800632e:	8963      	ldrh	r3, [r4, #10]
 8006330:	429e      	cmp	r6, r3
 8006332:	d906      	bls.n	8006342 <pbuf_copy+0x86>
 8006334:	491e      	ldr	r1, [pc, #120]	; (80063b0 <pbuf_copy+0xf4>)
 8006336:	465b      	mov	r3, fp
 8006338:	f240 32da 	movw	r2, #986	; 0x3da
 800633c:	4648      	mov	r0, r9
 800633e:	f004 fd1d 	bl	800ad7c <iprintf>
    if (offset_from >= p_from->len) {
 8006342:	8963      	ldrh	r3, [r4, #10]
 8006344:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 8006346:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8006348:	bf24      	itt	cs
 800634a:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800634c:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800634e:	429f      	cmp	r7, r3
 8006350:	d108      	bne.n	8006364 <pbuf_copy+0xa8>
      p_to = p_to->next;
 8006352:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006354:	b92d      	cbnz	r5, 8006362 <pbuf_copy+0xa6>
 8006356:	b314      	cbz	r4, 800639e <pbuf_copy+0xe2>
 8006358:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <pbuf_copy+0xe8>)
 800635a:	4916      	ldr	r1, [pc, #88]	; (80063b4 <pbuf_copy+0xf8>)
 800635c:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006360:	e7ba      	b.n	80062d8 <pbuf_copy+0x1c>
      offset_to = 0;
 8006362:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006364:	b17c      	cbz	r4, 8006386 <pbuf_copy+0xca>
 8006366:	8962      	ldrh	r2, [r4, #10]
 8006368:	8923      	ldrh	r3, [r4, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	d10b      	bne.n	8006386 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	b14b      	cbz	r3, 8006386 <pbuf_copy+0xca>
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <pbuf_copy+0xe8>)
 8006374:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006378:	490f      	ldr	r1, [pc, #60]	; (80063b8 <pbuf_copy+0xfc>)
 800637a:	480c      	ldr	r0, [pc, #48]	; (80063ac <pbuf_copy+0xf0>)
 800637c:	f004 fcfe 	bl	800ad7c <iprintf>
 8006380:	f06f 0005 	mvn.w	r0, #5
 8006384:	e7ad      	b.n	80062e2 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006386:	896a      	ldrh	r2, [r5, #10]
 8006388:	892b      	ldrh	r3, [r5, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	d105      	bne.n	800639a <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	b11b      	cbz	r3, 800639a <pbuf_copy+0xde>
 8006392:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <pbuf_copy+0xe8>)
 8006394:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006398:	e7ee      	b.n	8006378 <pbuf_copy+0xbc>
  } while (p_from);
 800639a:	2c00      	cmp	r4, #0
 800639c:	d1ab      	bne.n	80062f6 <pbuf_copy+0x3a>
  return ERR_OK;
 800639e:	4620      	mov	r0, r4
 80063a0:	e79f      	b.n	80062e2 <pbuf_copy+0x26>
 80063a2:	bf00      	nop
 80063a4:	08019b59 	.word	0x08019b59
 80063a8:	08019d66 	.word	0x08019d66
 80063ac:	08018c9a 	.word	0x08018c9a
 80063b0:	08019dad 	.word	0x08019dad
 80063b4:	08019dc8 	.word	0x08019dc8
 80063b8:	08019dd5 	.word	0x08019dd5
 80063bc:	08019d96 	.word	0x08019d96

080063c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4688      	mov	r8, r1
 80063c6:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80063c8:	4606      	mov	r6, r0
 80063ca:	b950      	cbnz	r0, 80063e2 <pbuf_copy_partial+0x22>
 80063cc:	4b1b      	ldr	r3, [pc, #108]	; (800643c <pbuf_copy_partial+0x7c>)
 80063ce:	491c      	ldr	r1, [pc, #112]	; (8006440 <pbuf_copy_partial+0x80>)
 80063d0:	481c      	ldr	r0, [pc, #112]	; (8006444 <pbuf_copy_partial+0x84>)
 80063d2:	f240 420a 	movw	r2, #1034	; 0x40a
 80063d6:	f004 fcd1 	bl	800ad7c <iprintf>
 80063da:	4637      	mov	r7, r6
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 80063dc:	4638      	mov	r0, r7
 80063de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80063e2:	bb49      	cbnz	r1, 8006438 <pbuf_copy_partial+0x78>
 80063e4:	4b15      	ldr	r3, [pc, #84]	; (800643c <pbuf_copy_partial+0x7c>)
 80063e6:	4918      	ldr	r1, [pc, #96]	; (8006448 <pbuf_copy_partial+0x88>)
 80063e8:	4816      	ldr	r0, [pc, #88]	; (8006444 <pbuf_copy_partial+0x84>)
 80063ea:	f240 420b 	movw	r2, #1035	; 0x40b
 80063ee:	f004 fcc5 	bl	800ad7c <iprintf>
 80063f2:	4647      	mov	r7, r8
 80063f4:	e7f2      	b.n	80063dc <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80063f6:	8975      	ldrh	r5, [r6, #10]
 80063f8:	b153      	cbz	r3, 8006410 <pbuf_copy_partial+0x50>
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	d308      	bcc.n	8006410 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 80063fe:	1b5b      	subs	r3, r3, r5
 8006400:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006402:	6836      	ldr	r6, [r6, #0]
 8006404:	f1b9 0f00 	cmp.w	r9, #0
 8006408:	d0e8      	beq.n	80063dc <pbuf_copy_partial+0x1c>
 800640a:	2e00      	cmp	r6, #0
 800640c:	d1f3      	bne.n	80063f6 <pbuf_copy_partial+0x36>
 800640e:	e7e5      	b.n	80063dc <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8006410:	1aec      	subs	r4, r5, r3
 8006412:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8006414:	454c      	cmp	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006416:	6871      	ldr	r1, [r6, #4]
 8006418:	bf28      	it	cs
 800641a:	464c      	movcs	r4, r9
 800641c:	4622      	mov	r2, r4
 800641e:	4419      	add	r1, r3
 8006420:	eb08 0007 	add.w	r0, r8, r7
 8006424:	f004 fc94 	bl	800ad50 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006428:	4427      	add	r7, r4
      len = (u16_t)(len - buf_copy_len);
 800642a:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800642e:	b2bf      	uxth	r7, r7
      len = (u16_t)(len - buf_copy_len);
 8006430:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	e7e4      	b.n	8006402 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 8006438:	2700      	movs	r7, #0
 800643a:	e7e3      	b.n	8006404 <pbuf_copy_partial+0x44>
 800643c:	08019b59 	.word	0x08019b59
 8006440:	08019dff 	.word	0x08019dff
 8006444:	08018c9a 	.word	0x08018c9a
 8006448:	08019e1e 	.word	0x08019e1e

0800644c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006450:	460a      	mov	r2, r1
 8006452:	8929      	ldrh	r1, [r5, #8]
 8006454:	f7ff fdfe 	bl	8006054 <pbuf_alloc>
  if (q == NULL) {
 8006458:	4604      	mov	r4, r0
 800645a:	b150      	cbz	r0, 8006472 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800645c:	4629      	mov	r1, r5
 800645e:	f7ff ff2d 	bl	80062bc <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006462:	b130      	cbz	r0, 8006472 <pbuf_clone+0x26>
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <pbuf_clone+0x2c>)
 8006466:	4905      	ldr	r1, [pc, #20]	; (800647c <pbuf_clone+0x30>)
 8006468:	4805      	ldr	r0, [pc, #20]	; (8006480 <pbuf_clone+0x34>)
 800646a:	f240 5224 	movw	r2, #1316	; 0x524
 800646e:	f004 fc85 	bl	800ad7c <iprintf>
  return q;
}
 8006472:	4620      	mov	r0, r4
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	08019b59 	.word	0x08019b59
 800647c:	08019f1e 	.word	0x08019f1e
 8006480:	08018c9a 	.word	0x08018c9a

08006484 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8006484:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <tcp_new_port+0x4c>)
 8006486:	8813      	ldrh	r3, [r2, #0]
{
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800648e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 8006492:	3301      	adds	r3, #1
 8006494:	b29b      	uxth	r3, r3
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006496:	4d0f      	ldr	r5, [pc, #60]	; (80064d4 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006498:	42b3      	cmp	r3, r6
 800649a:	bf08      	it	eq
 800649c:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
 80064a0:	2104      	movs	r1, #4
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80064a2:	f855 4b04 	ldr.w	r4, [r5], #4
 80064a6:	6824      	ldr	r4, [r4, #0]
 80064a8:	b934      	cbnz	r4, 80064b8 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80064aa:	3901      	subs	r1, #1
 80064ac:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80064b0:	d1f7      	bne.n	80064a2 <tcp_new_port+0x1e>
 80064b2:	8013      	strh	r3, [r2, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80064b4:	4618      	mov	r0, r3
 80064b6:	e007      	b.n	80064c8 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 80064b8:	8ae7      	ldrh	r7, [r4, #22]
 80064ba:	429f      	cmp	r7, r3
 80064bc:	d105      	bne.n	80064ca <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80064be:	3801      	subs	r0, #1
 80064c0:	b280      	uxth	r0, r0
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d1e5      	bne.n	8006492 <tcp_new_port+0xe>
 80064c6:	8013      	strh	r3, [r2, #0]
}
 80064c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80064ca:	68e4      	ldr	r4, [r4, #12]
 80064cc:	e7ec      	b.n	80064a8 <tcp_new_port+0x24>
 80064ce:	bf00      	nop
 80064d0:	20000040 	.word	0x20000040
 80064d4:	0800bee0 	.word	0x0800bee0

080064d8 <tcp_close_shutdown_fin>:
{
 80064d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80064da:	4604      	mov	r4, r0
 80064dc:	b930      	cbnz	r0, 80064ec <tcp_close_shutdown_fin+0x14>
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <tcp_close_shutdown_fin+0x54>)
 80064e0:	4913      	ldr	r1, [pc, #76]	; (8006530 <tcp_close_shutdown_fin+0x58>)
 80064e2:	4814      	ldr	r0, [pc, #80]	; (8006534 <tcp_close_shutdown_fin+0x5c>)
 80064e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80064e8:	f004 fc48 	bl	800ad7c <iprintf>
  switch (pcb->state) {
 80064ec:	7d23      	ldrb	r3, [r4, #20]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d003      	beq.n	80064fa <tcp_close_shutdown_fin+0x22>
 80064f2:	2b07      	cmp	r3, #7
 80064f4:	d00c      	beq.n	8006510 <tcp_close_shutdown_fin+0x38>
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d108      	bne.n	800650c <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80064fa:	4620      	mov	r0, r4
 80064fc:	f002 fd94 	bl	8009028 <tcp_send_fin>
      if (err == ERR_OK) {
 8006500:	b960      	cbnz	r0, 800651c <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8006502:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 8006504:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8006506:	4620      	mov	r0, r4
 8006508:	f002 fef0 	bl	80092ec <tcp_output>
  switch (pcb->state) {
 800650c:	2000      	movs	r0, #0
}
 800650e:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8006510:	4620      	mov	r0, r4
 8006512:	f002 fd89 	bl	8009028 <tcp_send_fin>
      if (err == ERR_OK) {
 8006516:	b908      	cbnz	r0, 800651c <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8006518:	2309      	movs	r3, #9
 800651a:	e7f3      	b.n	8006504 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	d1f6      	bne.n	800650e <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006520:	8b63      	ldrh	r3, [r4, #26]
 8006522:	f043 0308 	orr.w	r3, r3, #8
 8006526:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8006528:	e7f0      	b.n	800650c <tcp_close_shutdown_fin+0x34>
 800652a:	bf00      	nop
 800652c:	08019f2f 	.word	0x08019f2f
 8006530:	08019fa0 	.word	0x08019fa0
 8006534:	08018c9a 	.word	0x08018c9a

08006538 <tcp_init>:
{
 8006538:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800653a:	f004 fc37 	bl	800adac <rand>
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <tcp_init+0x14>)
 8006540:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8006544:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8006548:	8018      	strh	r0, [r3, #0]
}
 800654a:	bd08      	pop	{r3, pc}
 800654c:	20000040 	.word	0x20000040

08006550 <tcp_free>:
{
 8006550:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006552:	7d03      	ldrb	r3, [r0, #20]
 8006554:	2b01      	cmp	r3, #1
{
 8006556:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006558:	d105      	bne.n	8006566 <tcp_free+0x16>
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <tcp_free+0x24>)
 800655c:	4906      	ldr	r1, [pc, #24]	; (8006578 <tcp_free+0x28>)
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <tcp_free+0x2c>)
 8006560:	22d4      	movs	r2, #212	; 0xd4
 8006562:	f004 fc0b 	bl	800ad7c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8006566:	4621      	mov	r1, r4
 8006568:	2001      	movs	r0, #1
}
 800656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800656e:	f7ff badf 	b.w	8005b30 <memp_free>
 8006572:	bf00      	nop
 8006574:	08019f2f 	.word	0x08019f2f
 8006578:	08019fac 	.word	0x08019fac
 800657c:	08018c9a 	.word	0x08018c9a

08006580 <tcp_bind>:
{
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8006582:	4d23      	ldr	r5, [pc, #140]	; (8006610 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006584:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8006586:	2900      	cmp	r1, #0
 8006588:	bf18      	it	ne
 800658a:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800658c:	b948      	cbnz	r0, 80065a2 <tcp_bind+0x22>
 800658e:	4b21      	ldr	r3, [pc, #132]	; (8006614 <tcp_bind+0x94>)
 8006590:	4921      	ldr	r1, [pc, #132]	; (8006618 <tcp_bind+0x98>)
 8006592:	4822      	ldr	r0, [pc, #136]	; (800661c <tcp_bind+0x9c>)
 8006594:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006598:	f004 fbf0 	bl	800ad7c <iprintf>
 800659c:	f06f 000f 	mvn.w	r0, #15
}
 80065a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80065a2:	7d03      	ldrb	r3, [r0, #20]
 80065a4:	b14b      	cbz	r3, 80065ba <tcp_bind+0x3a>
 80065a6:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <tcp_bind+0x94>)
 80065a8:	491d      	ldr	r1, [pc, #116]	; (8006620 <tcp_bind+0xa0>)
 80065aa:	481c      	ldr	r0, [pc, #112]	; (800661c <tcp_bind+0x9c>)
 80065ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 80065b0:	f004 fbe4 	bl	800ad7c <iprintf>
 80065b4:	f06f 0005 	mvn.w	r0, #5
 80065b8:	e7f2      	b.n	80065a0 <tcp_bind+0x20>
  if (port == 0) {
 80065ba:	b932      	cbnz	r2, 80065ca <tcp_bind+0x4a>
    port = tcp_new_port();
 80065bc:	f7ff ff62 	bl	8006484 <tcp_new_port>
    if (port == 0) {
 80065c0:	4602      	mov	r2, r0
 80065c2:	b950      	cbnz	r0, 80065da <tcp_bind+0x5a>
      return ERR_BUF;
 80065c4:	f06f 0001 	mvn.w	r0, #1
 80065c8:	e7ea      	b.n	80065a0 <tcp_bind+0x20>
 80065ca:	4816      	ldr	r0, [pc, #88]	; (8006624 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80065cc:	f850 1b04 	ldr.w	r1, [r0], #4
 80065d0:	6809      	ldr	r1, [r1, #0]
 80065d2:	b971      	cbnz	r1, 80065f2 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 80065d4:	3301      	adds	r3, #1
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d1f8      	bne.n	80065cc <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80065de:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80065e0:	4b11      	ldr	r3, [pc, #68]	; (8006628 <tcp_bind+0xa8>)
  pcb->local_port = port;
 80065e2:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	60e2      	str	r2, [r4, #12]
 80065e8:	601c      	str	r4, [r3, #0]
 80065ea:	f003 f955 	bl	8009898 <tcp_timer_needed>
  return ERR_OK;
 80065ee:	2000      	movs	r0, #0
 80065f0:	e7d6      	b.n	80065a0 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 80065f2:	8ace      	ldrh	r6, [r1, #22]
 80065f4:	4296      	cmp	r6, r2
 80065f6:	d105      	bne.n	8006604 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 80065f8:	680f      	ldr	r7, [r1, #0]
 80065fa:	b12f      	cbz	r7, 8006608 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 80065fc:	682e      	ldr	r6, [r5, #0]
 80065fe:	b11e      	cbz	r6, 8006608 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006600:	42b7      	cmp	r7, r6
 8006602:	d001      	beq.n	8006608 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006604:	68c9      	ldr	r1, [r1, #12]
 8006606:	e7e4      	b.n	80065d2 <tcp_bind+0x52>
              return ERR_USE;
 8006608:	f06f 0007 	mvn.w	r0, #7
 800660c:	e7c8      	b.n	80065a0 <tcp_bind+0x20>
 800660e:	bf00      	nop
 8006610:	0800be4c 	.word	0x0800be4c
 8006614:	08019f2f 	.word	0x08019f2f
 8006618:	08019fbd 	.word	0x08019fbd
 800661c:	08018c9a 	.word	0x08018c9a
 8006620:	08019fd3 	.word	0x08019fd3
 8006624:	0800bee0 	.word	0x0800bee0
 8006628:	2000e494 	.word	0x2000e494

0800662c <tcp_listen_with_backlog_and_err>:
{
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006630:	4605      	mov	r5, r0
 8006632:	b968      	cbnz	r0, 8006650 <tcp_listen_with_backlog_and_err+0x24>
 8006634:	4b29      	ldr	r3, [pc, #164]	; (80066dc <tcp_listen_with_backlog_and_err+0xb0>)
 8006636:	492a      	ldr	r1, [pc, #168]	; (80066e0 <tcp_listen_with_backlog_and_err+0xb4>)
 8006638:	482a      	ldr	r0, [pc, #168]	; (80066e4 <tcp_listen_with_backlog_and_err+0xb8>)
 800663a:	f240 3259 	movw	r2, #857	; 0x359
 800663e:	f004 fb9d 	bl	800ad7c <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8006642:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006644:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8006648:	b106      	cbz	r6, 800664c <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800664a:	7033      	strb	r3, [r6, #0]
}
 800664c:	4620      	mov	r0, r4
 800664e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006650:	7d07      	ldrb	r7, [r0, #20]
 8006652:	b157      	cbz	r7, 800666a <tcp_listen_with_backlog_and_err+0x3e>
 8006654:	4b21      	ldr	r3, [pc, #132]	; (80066dc <tcp_listen_with_backlog_and_err+0xb0>)
 8006656:	4924      	ldr	r1, [pc, #144]	; (80066e8 <tcp_listen_with_backlog_and_err+0xbc>)
 8006658:	4822      	ldr	r0, [pc, #136]	; (80066e4 <tcp_listen_with_backlog_and_err+0xb8>)
 800665a:	f240 325a 	movw	r2, #858	; 0x35a
 800665e:	f004 fb8d 	bl	800ad7c <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8006662:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006664:	f06f 030e 	mvn.w	r3, #14
 8006668:	e7ee      	b.n	8006648 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800666a:	2002      	movs	r0, #2
 800666c:	f7ff fa44 	bl	8005af8 <memp_malloc>
  if (lpcb == NULL) {
 8006670:	4604      	mov	r4, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	d02f      	beq.n	80066d6 <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8006676:	692b      	ldr	r3, [r5, #16]
 8006678:	6103      	str	r3, [r0, #16]
  lpcb->state = LISTEN;
 800667a:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 800667c:	8aeb      	ldrh	r3, [r5, #22]
 800667e:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8006680:	7502      	strb	r2, [r0, #20]
  lpcb->prio = pcb->prio;
 8006682:	7d6a      	ldrb	r2, [r5, #21]
 8006684:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8006686:	7a6a      	ldrb	r2, [r5, #9]
 8006688:	7242      	strb	r2, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800668a:	7207      	strb	r7, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800668c:	7aea      	ldrb	r2, [r5, #11]
 800668e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8006690:	7aaa      	ldrb	r2, [r5, #10]
 8006692:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006694:	682a      	ldr	r2, [r5, #0]
 8006696:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8006698:	b13b      	cbz	r3, 80066aa <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800669a:	4a14      	ldr	r2, [pc, #80]	; (80066ec <tcp_listen_with_backlog_and_err+0xc0>)
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	42ab      	cmp	r3, r5
 80066a0:	d111      	bne.n	80066c6 <tcp_listen_with_backlog_and_err+0x9a>
 80066a2:	68eb      	ldr	r3, [r5, #12]
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	2300      	movs	r3, #0
 80066a8:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff ff50 	bl	8006550 <tcp_free>
  lpcb->accept = tcp_accept_null;
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <tcp_listen_with_backlog_and_err+0xc4>)
 80066b2:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80066b4:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <tcp_listen_with_backlog_and_err+0xc8>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	60e2      	str	r2, [r4, #12]
 80066ba:	601c      	str	r4, [r3, #0]
 80066bc:	f003 f8ec 	bl	8009898 <tcp_timer_needed>
  res = ERR_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e7c1      	b.n	8006648 <tcp_listen_with_backlog_and_err+0x1c>
 80066c4:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ed      	beq.n	80066a6 <tcp_listen_with_backlog_and_err+0x7a>
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	42aa      	cmp	r2, r5
 80066ce:	d1f9      	bne.n	80066c4 <tcp_listen_with_backlog_and_err+0x98>
 80066d0:	68ea      	ldr	r2, [r5, #12]
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e7e7      	b.n	80066a6 <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 80066d6:	f04f 33ff 	mov.w	r3, #4294967295
 80066da:	e7b5      	b.n	8006648 <tcp_listen_with_backlog_and_err+0x1c>
 80066dc:	08019f2f 	.word	0x08019f2f
 80066e0:	08019ffb 	.word	0x08019ffb
 80066e4:	08018c9a 	.word	0x08018c9a
 80066e8:	0801a028 	.word	0x0801a028
 80066ec:	2000e494 	.word	0x2000e494
 80066f0:	08007261 	.word	0x08007261
 80066f4:	2000e490 	.word	0x2000e490

080066f8 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80066f8:	2200      	movs	r2, #0
 80066fa:	f7ff bf97 	b.w	800662c <tcp_listen_with_backlog_and_err>
	...

08006700 <tcp_update_rcv_ann_wnd>:
{
 8006700:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006702:	4604      	mov	r4, r0
 8006704:	b930      	cbnz	r0, 8006714 <tcp_update_rcv_ann_wnd+0x14>
 8006706:	4b15      	ldr	r3, [pc, #84]	; (800675c <tcp_update_rcv_ann_wnd+0x5c>)
 8006708:	4915      	ldr	r1, [pc, #84]	; (8006760 <tcp_update_rcv_ann_wnd+0x60>)
 800670a:	4816      	ldr	r0, [pc, #88]	; (8006764 <tcp_update_rcv_ann_wnd+0x64>)
 800670c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006710:	f004 fb34 	bl	800ad7c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006714:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006716:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006718:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800671a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800671c:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8006720:	1ac8      	subs	r0, r1, r3
 8006722:	42b2      	cmp	r2, r6
 8006724:	4428      	add	r0, r5
 8006726:	bf94      	ite	ls
 8006728:	1a82      	subls	r2, r0, r2
 800672a:	1b82      	subhi	r2, r0, r6
 800672c:	2a00      	cmp	r2, #0
 800672e:	db01      	blt.n	8006734 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006730:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8006732:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006734:	1aea      	subs	r2, r5, r3
 8006736:	2a00      	cmp	r2, #0
 8006738:	dd02      	ble.n	8006740 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800673a:	2000      	movs	r0, #0
 800673c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800673e:	e7f8      	b.n	8006732 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006740:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006742:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006746:	d306      	bcc.n	8006756 <tcp_update_rcv_ann_wnd+0x56>
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <tcp_update_rcv_ann_wnd+0x5c>)
 800674a:	4907      	ldr	r1, [pc, #28]	; (8006768 <tcp_update_rcv_ann_wnd+0x68>)
 800674c:	4805      	ldr	r0, [pc, #20]	; (8006764 <tcp_update_rcv_ann_wnd+0x64>)
 800674e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006752:	f004 fb13 	bl	800ad7c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006756:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8006758:	2000      	movs	r0, #0
 800675a:	e7ea      	b.n	8006732 <tcp_update_rcv_ann_wnd+0x32>
 800675c:	08019f2f 	.word	0x08019f2f
 8006760:	0801a05f 	.word	0x0801a05f
 8006764:	08018c9a 	.word	0x08018c9a
 8006768:	0801a083 	.word	0x0801a083

0800676c <tcp_recved>:
{
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006770:	4605      	mov	r5, r0
 8006772:	b940      	cbnz	r0, 8006786 <tcp_recved+0x1a>
}
 8006774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006778:	4b17      	ldr	r3, [pc, #92]	; (80067d8 <tcp_recved+0x6c>)
 800677a:	4918      	ldr	r1, [pc, #96]	; (80067dc <tcp_recved+0x70>)
 800677c:	4818      	ldr	r0, [pc, #96]	; (80067e0 <tcp_recved+0x74>)
 800677e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006782:	f004 bafb 	b.w	800ad7c <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006786:	7d03      	ldrb	r3, [r0, #20]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d106      	bne.n	800679a <tcp_recved+0x2e>
 800678c:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <tcp_recved+0x6c>)
 800678e:	4915      	ldr	r1, [pc, #84]	; (80067e4 <tcp_recved+0x78>)
 8006790:	4813      	ldr	r0, [pc, #76]	; (80067e0 <tcp_recved+0x74>)
 8006792:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006796:	f004 faf1 	bl	800ad7c <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800679a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800679c:	1911      	adds	r1, r2, r4
 800679e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80067a0:	f640 3368 	movw	r3, #2920	; 0xb68
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d813      	bhi.n	80067d0 <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80067a8:	428a      	cmp	r2, r1
 80067aa:	bf88      	it	hi
 80067ac:	4619      	movhi	r1, r3
 80067ae:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7ff ffa5 	bl	8006700 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80067b6:	f240 23d9 	movw	r3, #729	; 0x2d9
 80067ba:	4298      	cmp	r0, r3
 80067bc:	d90a      	bls.n	80067d4 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 80067be:	8b6b      	ldrh	r3, [r5, #26]
 80067c0:	f043 0302 	orr.w	r3, r3, #2
 80067c4:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 80067c6:	4628      	mov	r0, r5
}
 80067c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 80067cc:	f002 bd8e 	b.w	80092ec <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80067d0:	4619      	mov	r1, r3
 80067d2:	e7ec      	b.n	80067ae <tcp_recved+0x42>
}
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	bf00      	nop
 80067d8:	08019f2f 	.word	0x08019f2f
 80067dc:	0801a09d 	.word	0x0801a09d
 80067e0:	08018c9a 	.word	0x08018c9a
 80067e4:	0801a0b5 	.word	0x0801a0b5

080067e8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80067e8:	b510      	push	{r4, lr}
  if (seg != NULL) {
 80067ea:	4604      	mov	r4, r0
 80067ec:	b148      	cbz	r0, 8006802 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 80067ee:	6840      	ldr	r0, [r0, #4]
 80067f0:	b108      	cbz	r0, 80067f6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80067f2:	f7ff fbcb 	bl	8005f8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80067f6:	4621      	mov	r1, r4
 80067f8:	2003      	movs	r0, #3
  }
}
 80067fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80067fe:	f7ff b997 	b.w	8005b30 <memp_free>
}
 8006802:	bd10      	pop	{r4, pc}

08006804 <tcp_segs_free>:
{
 8006804:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8006806:	b900      	cbnz	r0, 800680a <tcp_segs_free+0x6>
}
 8006808:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800680a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800680c:	f7ff ffec 	bl	80067e8 <tcp_seg_free>
    seg = next;
 8006810:	4620      	mov	r0, r4
 8006812:	e7f8      	b.n	8006806 <tcp_segs_free+0x2>

08006814 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006814:	b930      	cbnz	r0, 8006824 <tcp_setprio+0x10>
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <tcp_setprio+0x14>)
 8006818:	4904      	ldr	r1, [pc, #16]	; (800682c <tcp_setprio+0x18>)
 800681a:	4805      	ldr	r0, [pc, #20]	; (8006830 <tcp_setprio+0x1c>)
 800681c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006820:	f004 baac 	b.w	800ad7c <iprintf>

  pcb->prio = prio;
 8006824:	7541      	strb	r1, [r0, #21]
}
 8006826:	4770      	bx	lr
 8006828:	08019f2f 	.word	0x08019f2f
 800682c:	0801a0db 	.word	0x0801a0db
 8006830:	08018c9a 	.word	0x08018c9a

08006834 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006834:	b100      	cbz	r0, 8006838 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006836:	6101      	str	r1, [r0, #16]
  }
}
 8006838:	4770      	bx	lr
	...

0800683c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006840:	4604      	mov	r4, r0
 8006842:	b158      	cbz	r0, 800685c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006844:	7d03      	ldrb	r3, [r0, #20]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d106      	bne.n	8006858 <tcp_recv+0x1c>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <tcp_recv+0x24>)
 800684c:	4905      	ldr	r1, [pc, #20]	; (8006864 <tcp_recv+0x28>)
 800684e:	4806      	ldr	r0, [pc, #24]	; (8006868 <tcp_recv+0x2c>)
 8006850:	f240 72df 	movw	r2, #2015	; 0x7df
 8006854:	f004 fa92 	bl	800ad7c <iprintf>
    pcb->recv = recv;
 8006858:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800685c:	bd38      	pop	{r3, r4, r5, pc}
 800685e:	bf00      	nop
 8006860:	08019f2f 	.word	0x08019f2f
 8006864:	0801a0f4 	.word	0x0801a0f4
 8006868:	08018c9a 	.word	0x08018c9a

0800686c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006870:	4604      	mov	r4, r0
 8006872:	b150      	cbz	r0, 800688a <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006874:	7d03      	ldrb	r3, [r0, #20]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d106      	bne.n	8006888 <tcp_sent+0x1c>
 800687a:	4b04      	ldr	r3, [pc, #16]	; (800688c <tcp_sent+0x20>)
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <tcp_sent+0x24>)
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <tcp_sent+0x28>)
 8006880:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8006884:	f004 fa7a 	bl	800ad7c <iprintf>
    pcb->sent = sent;
 8006888:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800688a:	bd38      	pop	{r3, r4, r5, pc}
 800688c:	08019f2f 	.word	0x08019f2f
 8006890:	0801a11b 	.word	0x0801a11b
 8006894:	08018c9a 	.word	0x08018c9a

08006898 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800689c:	4604      	mov	r4, r0
 800689e:	b158      	cbz	r0, 80068b8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80068a0:	7d03      	ldrb	r3, [r0, #20]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d106      	bne.n	80068b4 <tcp_err+0x1c>
 80068a6:	4b05      	ldr	r3, [pc, #20]	; (80068bc <tcp_err+0x24>)
 80068a8:	4905      	ldr	r1, [pc, #20]	; (80068c0 <tcp_err+0x28>)
 80068aa:	4806      	ldr	r0, [pc, #24]	; (80068c4 <tcp_err+0x2c>)
 80068ac:	f640 020d 	movw	r2, #2061	; 0x80d
 80068b0:	f004 fa64 	bl	800ad7c <iprintf>
    pcb->errf = err;
 80068b4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	bf00      	nop
 80068bc:	08019f2f 	.word	0x08019f2f
 80068c0:	0801a142 	.word	0x0801a142
 80068c4:	08018c9a 	.word	0x08018c9a

080068c8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80068c8:	b118      	cbz	r0, 80068d2 <tcp_accept+0xa>
 80068ca:	7d03      	ldrb	r3, [r0, #20]
 80068cc:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 80068ce:	bf08      	it	eq
 80068d0:	6181      	streq	r1, [r0, #24]
  }
}
 80068d2:	4770      	bx	lr

080068d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	460e      	mov	r6, r1
 80068d8:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80068da:	4604      	mov	r4, r0
 80068dc:	b940      	cbnz	r0, 80068f0 <tcp_poll+0x1c>
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 80068de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <tcp_poll+0x38>)
 80068e4:	490a      	ldr	r1, [pc, #40]	; (8006910 <tcp_poll+0x3c>)
 80068e6:	480b      	ldr	r0, [pc, #44]	; (8006914 <tcp_poll+0x40>)
 80068e8:	f640 023d 	movw	r2, #2109	; 0x83d
 80068ec:	f004 ba46 	b.w	800ad7c <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80068f0:	7d03      	ldrb	r3, [r0, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d106      	bne.n	8006904 <tcp_poll+0x30>
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <tcp_poll+0x38>)
 80068f8:	4907      	ldr	r1, [pc, #28]	; (8006918 <tcp_poll+0x44>)
 80068fa:	4806      	ldr	r0, [pc, #24]	; (8006914 <tcp_poll+0x40>)
 80068fc:	f640 023e 	movw	r2, #2110	; 0x83e
 8006900:	f004 fa3c 	bl	800ad7c <iprintf>
  pcb->pollinterval = interval;
 8006904:	7765      	strb	r5, [r4, #29]
  pcb->poll = poll;
 8006906:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
}
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	08019f2f 	.word	0x08019f2f
 8006910:	0801a168 	.word	0x0801a168
 8006914:	08018c9a 	.word	0x08018c9a
 8006918:	0801a17e 	.word	0x0801a17e

0800691c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800691c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800691e:	4604      	mov	r4, r0
 8006920:	b940      	cbnz	r0, 8006934 <tcp_pcb_purge+0x18>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8006922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <tcp_pcb_purge+0x4c>)
 8006928:	4910      	ldr	r1, [pc, #64]	; (800696c <tcp_pcb_purge+0x50>)
 800692a:	4811      	ldr	r0, [pc, #68]	; (8006970 <tcp_pcb_purge+0x54>)
 800692c:	f640 0251 	movw	r2, #2129	; 0x851
 8006930:	f004 ba24 	b.w	800ad7c <iprintf>
  if (pcb->state != CLOSED &&
 8006934:	7d03      	ldrb	r3, [r0, #20]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d915      	bls.n	8006966 <tcp_pcb_purge+0x4a>
 800693a:	2b0a      	cmp	r3, #10
 800693c:	d013      	beq.n	8006966 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800693e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8006940:	b118      	cbz	r0, 800694a <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8006942:	f7ff fb23 	bl	8005f8c <pbuf_free>
      pcb->refused_data = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800694a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800694e:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8006950:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006952:	f7ff ff57 	bl	8006804 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006956:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006958:	f7ff ff54 	bl	8006804 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8006962:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8006966:	bd10      	pop	{r4, pc}
 8006968:	08019f2f 	.word	0x08019f2f
 800696c:	0801a19c 	.word	0x0801a19c
 8006970:	08018c9a 	.word	0x08018c9a

08006974 <tcp_slowtmr>:
{
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8006978:	4eaf      	ldr	r6, [pc, #700]	; (8006c38 <tcp_slowtmr+0x2c4>)
 800697a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006c44 <tcp_slowtmr+0x2d0>
 800697e:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006980:	4fae      	ldr	r7, [pc, #696]	; (8006c3c <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 8006982:	3301      	adds	r3, #1
 8006984:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8006986:	4bae      	ldr	r3, [pc, #696]	; (8006c40 <tcp_slowtmr+0x2cc>)
 8006988:	781a      	ldrb	r2, [r3, #0]
{
 800698a:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800698c:	3201      	adds	r2, #1
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	9304      	str	r3, [sp, #16]
  pcb = tcp_active_pcbs;
 8006992:	4bac      	ldr	r3, [pc, #688]	; (8006c44 <tcp_slowtmr+0x2d0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006994:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8006c6c <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 8006998:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800699a:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800699e:	b96c      	cbnz	r4, 80069bc <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 80069a0:	4fa9      	ldr	r7, [pc, #676]	; (8006c48 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80069a2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8006c3c <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 80069a6:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80069a8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8006c70 <tcp_slowtmr+0x2fc>
 80069ac:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8006c6c <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	f040 81aa 	bne.w	8006d0a <tcp_slowtmr+0x396>
}
 80069b6:	b007      	add	sp, #28
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80069bc:	7d23      	ldrb	r3, [r4, #20]
 80069be:	b933      	cbnz	r3, 80069ce <tcp_slowtmr+0x5a>
 80069c0:	49a2      	ldr	r1, [pc, #648]	; (8006c4c <tcp_slowtmr+0x2d8>)
 80069c2:	463b      	mov	r3, r7
 80069c4:	f240 42be 	movw	r2, #1214	; 0x4be
 80069c8:	4640      	mov	r0, r8
 80069ca:	f004 f9d7 	bl	800ad7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80069ce:	7d23      	ldrb	r3, [r4, #20]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d106      	bne.n	80069e2 <tcp_slowtmr+0x6e>
 80069d4:	499e      	ldr	r1, [pc, #632]	; (8006c50 <tcp_slowtmr+0x2dc>)
 80069d6:	463b      	mov	r3, r7
 80069d8:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80069dc:	4640      	mov	r0, r8
 80069de:	f004 f9cd 	bl	800ad7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80069e2:	7d23      	ldrb	r3, [r4, #20]
 80069e4:	2b0a      	cmp	r3, #10
 80069e6:	d106      	bne.n	80069f6 <tcp_slowtmr+0x82>
 80069e8:	499a      	ldr	r1, [pc, #616]	; (8006c54 <tcp_slowtmr+0x2e0>)
 80069ea:	463b      	mov	r3, r7
 80069ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80069f0:	4640      	mov	r0, r8
 80069f2:	f004 f9c3 	bl	800ad7c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	7fa2      	ldrb	r2, [r4, #30]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d103      	bne.n	8006a08 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006a00:	68e5      	ldr	r5, [r4, #12]
      continue;
 8006a02:	46a1      	mov	r9, r4
 8006a04:	462c      	mov	r4, r5
 8006a06:	e7ca      	b.n	800699e <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006a08:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8006a0a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006a0c:	2a02      	cmp	r2, #2
 8006a0e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006a12:	d178      	bne.n	8006b06 <tcp_slowtmr+0x192>
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	d978      	bls.n	8006b0a <tcp_slowtmr+0x196>
      ++pcb_remove;
 8006a18:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8006a1c:	7d23      	ldrb	r3, [r4, #20]
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d10b      	bne.n	8006a3a <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 8006a22:	8b62      	ldrh	r2, [r4, #26]
 8006a24:	06d2      	lsls	r2, r2, #27
 8006a26:	d508      	bpl.n	8006a3a <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a28:	6832      	ldr	r2, [r6, #0]
 8006a2a:	6a21      	ldr	r1, [r4, #32]
 8006a2c:	1a52      	subs	r2, r2, r1
 8006a2e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006a30:	bf84      	itt	hi
 8006a32:	f10b 0b01 	addhi.w	fp, fp, #1
 8006a36:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006a3a:	7a65      	ldrb	r5, [r4, #9]
 8006a3c:	f015 0508 	ands.w	r5, r5, #8
 8006a40:	d019      	beq.n	8006a76 <tcp_slowtmr+0x102>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d002      	beq.n	8006a4c <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 8006a46:	2b07      	cmp	r3, #7
 8006a48:	f040 8126 	bne.w	8006c98 <tcp_slowtmr+0x324>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a4c:	6831      	ldr	r1, [r6, #0]
 8006a4e:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006a50:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a54:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006a56:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8006a5a:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8006a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a62:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a66:	4291      	cmp	r1, r2
 8006a68:	f240 8104 	bls.w	8006c74 <tcp_slowtmr+0x300>
        ++pcb_remove;
 8006a6c:	f10b 0b01 	add.w	fp, fp, #1
 8006a70:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8006a74:	2501      	movs	r5, #1
    if (pcb->state == SYN_RCVD) {
 8006a76:	7d23      	ldrb	r3, [r4, #20]
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	f040 810f 	bne.w	8006c9c <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a7e:	6833      	ldr	r3, [r6, #0]
 8006a80:	6a22      	ldr	r2, [r4, #32]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006a86:	d803      	bhi.n	8006a90 <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 8006a88:	f1bb 0f00 	cmp.w	fp, #0
 8006a8c:	f000 811b 	beq.w	8006cc6 <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 8006a90:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8006a92:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8006a96:	f7ff ff41 	bl	800691c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006a9a:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 8006a9e:	f1b9 0f00 	cmp.w	r9, #0
 8006aa2:	f000 8103 	beq.w	8006cac <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006aa6:	42a3      	cmp	r3, r4
 8006aa8:	d106      	bne.n	8006ab8 <tcp_slowtmr+0x144>
 8006aaa:	496b      	ldr	r1, [pc, #428]	; (8006c58 <tcp_slowtmr+0x2e4>)
 8006aac:	463b      	mov	r3, r7
 8006aae:	f240 526d 	movw	r2, #1389	; 0x56d
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f004 f962 	bl	800ad7c <iprintf>
        prev->next = pcb->next;
 8006ab8:	68e3      	ldr	r3, [r4, #12]
 8006aba:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8006abe:	b15d      	cbz	r5, 8006ad8 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ac0:	8b23      	ldrh	r3, [r4, #24]
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	8ae3      	ldrh	r3, [r4, #22]
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	1d23      	adds	r3, r4, #4
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ace:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006ad0:	4623      	mov	r3, r4
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f002 fb92 	bl	80091fc <tcp_rst>
      err_arg = pcb->callback_arg;
 8006ad8:	6923      	ldr	r3, [r4, #16]
      pcb = pcb->next;
 8006ada:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8006adc:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 8006ade:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8006ae0:	4c5e      	ldr	r4, [pc, #376]	; (8006c5c <tcp_slowtmr+0x2e8>)
      tcp_free(pcb2);
 8006ae2:	f7ff fd35 	bl	8006550 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006aea:	f1bb 0f00 	cmp.w	fp, #0
 8006aee:	d008      	beq.n	8006b02 <tcp_slowtmr+0x18e>
 8006af0:	9b05      	ldr	r3, [sp, #20]
 8006af2:	f06f 010c 	mvn.w	r1, #12
 8006af6:	4618      	mov	r0, r3
 8006af8:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8006afa:	7823      	ldrb	r3, [r4, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f47f af48 	bne.w	8006992 <tcp_slowtmr+0x1e>
 8006b02:	464c      	mov	r4, r9
 8006b04:	e77d      	b.n	8006a02 <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	e785      	b.n	8006a16 <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 8006b0a:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8006b0e:	f1bb 0f00 	cmp.w	fp, #0
 8006b12:	d045      	beq.n	8006ba0 <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006b14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b16:	b133      	cbz	r3, 8006b26 <tcp_slowtmr+0x1b2>
 8006b18:	4951      	ldr	r1, [pc, #324]	; (8006c60 <tcp_slowtmr+0x2ec>)
 8006b1a:	463b      	mov	r3, r7
 8006b1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006b20:	4640      	mov	r0, r8
 8006b22:	f004 f92b 	bl	800ad7c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006b26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b28:	b933      	cbnz	r3, 8006b38 <tcp_slowtmr+0x1c4>
 8006b2a:	494e      	ldr	r1, [pc, #312]	; (8006c64 <tcp_slowtmr+0x2f0>)
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006b32:	4640      	mov	r0, r8
 8006b34:	f004 f922 	bl	800ad7c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006b38:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8006b3c:	2b0b      	cmp	r3, #11
 8006b3e:	f63f af6b 	bhi.w	8006a18 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006b42:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8006b46:	4b48      	ldr	r3, [pc, #288]	; (8006c68 <tcp_slowtmr+0x2f4>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 8006b4c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d30b      	bcc.n	8006b6c <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 8006b54:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8006b58:	b189      	cbz	r1, 8006b7e <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f002 f904 	bl	8008d68 <tcp_split_unsent_seg>
 8006b60:	b990      	cbnz	r0, 8006b88 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 8006b62:	4620      	mov	r0, r4
 8006b64:	f002 fbc2 	bl	80092ec <tcp_output>
 8006b68:	b130      	cbz	r0, 8006b78 <tcp_slowtmr+0x204>
 8006b6a:	e00d      	b.n	8006b88 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8006b70:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8006b72:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 8006b76:	d2ed      	bcs.n	8006b54 <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 8006b78:	f04f 0b00 	mov.w	fp, #0
 8006b7c:	e74e      	b.n	8006a1c <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f002 fdbc 	bl	80096fc <tcp_zero_window_probe>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d1f7      	bne.n	8006b78 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006b88:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 8006b8c:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006b90:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8006b92:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006b96:	d8ef      	bhi.n	8006b78 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 8006b98:	3301      	adds	r3, #1
 8006b9a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8006b9e:	e73d      	b.n	8006a1c <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006ba0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006ba2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006ba6:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8006ba8:	bf9c      	itt	ls
 8006baa:	3301      	addls	r3, #1
 8006bac:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8006bae:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8006bb2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	dbde      	blt.n	8006b78 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f002 fa64 	bl	8009088 <tcp_rexmit_rto_prepare>
 8006bc0:	b128      	cbz	r0, 8006bce <tcp_slowtmr+0x25a>
 8006bc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1d7      	bne.n	8006b78 <tcp_slowtmr+0x204>
 8006bc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0d4      	beq.n	8006b78 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 8006bce:	7d23      	ldrb	r3, [r4, #20]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d015      	beq.n	8006c00 <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006bd4:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8006bd8:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006bdc:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006be0:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8006be4:	4a20      	ldr	r2, [pc, #128]	; (8006c68 <tcp_slowtmr+0x2f4>)
 8006be6:	290c      	cmp	r1, #12
 8006be8:	bf94      	ite	ls
 8006bea:	1852      	addls	r2, r2, r1
 8006bec:	320c      	addhi	r2, #12
 8006bee:	7dd2      	ldrb	r2, [r2, #23]
 8006bf0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006bf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	bfa8      	it	ge
 8006bfa:	4613      	movge	r3, r2
 8006bfc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006c00:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8006c04:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c08:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->cwnd = pcb->mss;
 8006c0a:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	bf28      	it	cs
 8006c12:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006c14:	006b      	lsls	r3, r5, #1
 8006c16:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 8006c18:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006c1a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
            pcb->rtime = 0;
 8006c1e:	f04f 0000 	mov.w	r0, #0
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006c22:	bf98      	it	ls
 8006c24:	460b      	movls	r3, r1
            pcb->rtime = 0;
 8006c26:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8006c28:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006c2c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8006c30:	4620      	mov	r0, r4
 8006c32:	f002 fd05 	bl	8009640 <tcp_rexmit_rto_commit>
 8006c36:	e6f1      	b.n	8006a1c <tcp_slowtmr+0xa8>
 8006c38:	2000e48c 	.word	0x2000e48c
 8006c3c:	08019f2f 	.word	0x08019f2f
 8006c40:	2000020d 	.word	0x2000020d
 8006c44:	2000e488 	.word	0x2000e488
 8006c48:	2000e498 	.word	0x2000e498
 8006c4c:	0801a1b7 	.word	0x0801a1b7
 8006c50:	0801a1e1 	.word	0x0801a1e1
 8006c54:	0801a20b 	.word	0x0801a20b
 8006c58:	0801a29f 	.word	0x0801a29f
 8006c5c:	2000e484 	.word	0x2000e484
 8006c60:	0801a238 	.word	0x0801a238
 8006c64:	0801a26a 	.word	0x0801a26a
 8006c68:	0800bee0 	.word	0x0800bee0
 8006c6c:	08018c9a 	.word	0x08018c9a
 8006c70:	0801a2f4 	.word	0x0801a2f4
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006c74:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8006c78:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <tcp_slowtmr+0x404>)
 8006c7a:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 8006c7e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c82:	4299      	cmp	r1, r3
 8006c84:	d908      	bls.n	8006c98 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 8006c86:	4620      	mov	r0, r4
 8006c88:	f002 fd10 	bl	80096ac <tcp_keepalive>
        if (err == ERR_OK) {
 8006c8c:	b920      	cbnz	r0, 8006c98 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 8006c8e:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8006c92:	3301      	adds	r3, #1
 8006c94:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 8006c98:	2500      	movs	r5, #0
 8006c9a:	e6ec      	b.n	8006a76 <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	f47f aef3 	bne.w	8006a88 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006ca2:	6833      	ldr	r3, [r6, #0]
 8006ca4:	6a22      	ldr	r2, [r4, #32]
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	2bf0      	cmp	r3, #240	; 0xf0
 8006caa:	e6ec      	b.n	8006a86 <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d006      	beq.n	8006cbe <tcp_slowtmr+0x34a>
 8006cb0:	4932      	ldr	r1, [pc, #200]	; (8006d7c <tcp_slowtmr+0x408>)
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	f240 5271 	movw	r2, #1393	; 0x571
 8006cb8:	4640      	mov	r0, r8
 8006cba:	f004 f85f 	bl	800ad7c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	f8ca 3000 	str.w	r3, [sl]
 8006cc4:	e6fb      	b.n	8006abe <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 8006cc6:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006cc8:	7f62      	ldrb	r2, [r4, #29]
      pcb = pcb->next;
 8006cca:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006ccc:	3301      	adds	r3, #1
 8006cce:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006cd0:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006cd2:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006cd4:	f63f ae95 	bhi.w	8006a02 <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 8006cd8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8006d88 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 8006cdc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8006ce0:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8006ce4:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 8006ce8:	b91b      	cbnz	r3, 8006cf2 <tcp_slowtmr+0x37e>
          tcp_output(prev);
 8006cea:	4620      	mov	r0, r4
 8006cec:	f002 fafe 	bl	80092ec <tcp_output>
 8006cf0:	e687      	b.n	8006a02 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006cf2:	6920      	ldr	r0, [r4, #16]
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006cf8:	f899 3000 	ldrb.w	r3, [r9]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f ae48 	bne.w	8006992 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f47f ae7d 	bne.w	8006a02 <tcp_slowtmr+0x8e>
 8006d08:	e7ef      	b.n	8006cea <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006d0a:	7d2b      	ldrb	r3, [r5, #20]
 8006d0c:	2b0a      	cmp	r3, #10
 8006d0e:	d006      	beq.n	8006d1e <tcp_slowtmr+0x3aa>
 8006d10:	4643      	mov	r3, r8
 8006d12:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006d16:	4651      	mov	r1, sl
 8006d18:	4648      	mov	r0, r9
 8006d1a:	f004 f82f 	bl	800ad7c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d1e:	6833      	ldr	r3, [r6, #0]
 8006d20:	6a2a      	ldr	r2, [r5, #32]
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	2bf0      	cmp	r3, #240	; 0xf0
 8006d26:	d910      	bls.n	8006d4a <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f7ff fdf7 	bl	800691c <tcp_pcb_purge>
      if (prev != NULL) {
 8006d2e:	b97c      	cbnz	r4, 8006d50 <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	42ab      	cmp	r3, r5
 8006d34:	d006      	beq.n	8006d44 <tcp_slowtmr+0x3d0>
 8006d36:	4912      	ldr	r1, [pc, #72]	; (8006d80 <tcp_slowtmr+0x40c>)
 8006d38:	4643      	mov	r3, r8
 8006d3a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006d3e:	4648      	mov	r0, r9
 8006d40:	f004 f81c 	bl	800ad7c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006d44:	68eb      	ldr	r3, [r5, #12]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	e00e      	b.n	8006d68 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 8006d4a:	462c      	mov	r4, r5
 8006d4c:	68ed      	ldr	r5, [r5, #12]
 8006d4e:	e62f      	b.n	80069b0 <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	42ab      	cmp	r3, r5
 8006d54:	d106      	bne.n	8006d64 <tcp_slowtmr+0x3f0>
 8006d56:	490b      	ldr	r1, [pc, #44]	; (8006d84 <tcp_slowtmr+0x410>)
 8006d58:	4643      	mov	r3, r8
 8006d5a:	f240 52af 	movw	r2, #1455	; 0x5af
 8006d5e:	4648      	mov	r0, r9
 8006d60:	f004 f80c 	bl	800ad7c <iprintf>
        prev->next = pcb->next;
 8006d64:	68eb      	ldr	r3, [r5, #12]
 8006d66:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006d68:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f7ff fbef 	bl	8006550 <tcp_free>
      pcb = pcb->next;
 8006d72:	465d      	mov	r5, fp
 8006d74:	e61c      	b.n	80069b0 <tcp_slowtmr+0x3c>
 8006d76:	bf00      	nop
 8006d78:	000124f8 	.word	0x000124f8
 8006d7c:	0801a2ca 	.word	0x0801a2ca
 8006d80:	0801a34a 	.word	0x0801a34a
 8006d84:	0801a323 	.word	0x0801a323
 8006d88:	2000e484 	.word	0x2000e484

08006d8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006d90:	460c      	mov	r4, r1
 8006d92:	b931      	cbnz	r1, 8006da2 <tcp_pcb_remove+0x16>
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <tcp_pcb_remove+0xa0>)
 8006d96:	4926      	ldr	r1, [pc, #152]	; (8006e30 <tcp_pcb_remove+0xa4>)
 8006d98:	4826      	ldr	r0, [pc, #152]	; (8006e34 <tcp_pcb_remove+0xa8>)
 8006d9a:	f640 0283 	movw	r2, #2179	; 0x883
 8006d9e:	f003 ffed 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006da2:	b935      	cbnz	r5, 8006db2 <tcp_pcb_remove+0x26>
 8006da4:	4b21      	ldr	r3, [pc, #132]	; (8006e2c <tcp_pcb_remove+0xa0>)
 8006da6:	4924      	ldr	r1, [pc, #144]	; (8006e38 <tcp_pcb_remove+0xac>)
 8006da8:	4822      	ldr	r0, [pc, #136]	; (8006e34 <tcp_pcb_remove+0xa8>)
 8006daa:	f640 0284 	movw	r2, #2180	; 0x884
 8006dae:	f003 ffe5 	bl	800ad7c <iprintf>

  TCP_RMV(pcblist, pcb);
 8006db2:	682b      	ldr	r3, [r5, #0]
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d116      	bne.n	8006de6 <tcp_pcb_remove+0x5a>
 8006db8:	68e3      	ldr	r3, [r4, #12]
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fdab 	bl	800691c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006dc6:	7d23      	ldrb	r3, [r4, #20]
 8006dc8:	2b0a      	cmp	r3, #10
 8006dca:	d114      	bne.n	8006df6 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006dcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006dce:	bb23      	cbnz	r3, 8006e1a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006dd0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006dd2:	b1f3      	cbz	r3, 8006e12 <tcp_pcb_remove+0x86>
 8006dd4:	4b15      	ldr	r3, [pc, #84]	; (8006e2c <tcp_pcb_remove+0xa0>)
 8006dd6:	4919      	ldr	r1, [pc, #100]	; (8006e3c <tcp_pcb_remove+0xb0>)
 8006dd8:	4816      	ldr	r0, [pc, #88]	; (8006e34 <tcp_pcb_remove+0xa8>)
 8006dda:	f640 0294 	movw	r2, #2196	; 0x894
 8006dde:	f003 ffcd 	bl	800ad7c <iprintf>
 8006de2:	e016      	b.n	8006e12 <tcp_pcb_remove+0x86>
 8006de4:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0e8      	beq.n	8006dbc <tcp_pcb_remove+0x30>
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	42a2      	cmp	r2, r4
 8006dee:	d1f9      	bne.n	8006de4 <tcp_pcb_remove+0x58>
 8006df0:	68e2      	ldr	r2, [r4, #12]
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	e7e2      	b.n	8006dbc <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d00b      	beq.n	8006e12 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 8006dfa:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8006dfc:	07da      	lsls	r2, r3, #31
 8006dfe:	d5e5      	bpl.n	8006dcc <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 8006e00:	f043 0302 	orr.w	r3, r3, #2
 8006e04:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8006e06:	4620      	mov	r0, r4
 8006e08:	f002 fa70 	bl	80092ec <tcp_output>
  if (pcb->state != LISTEN) {
 8006e0c:	7d23      	ldrb	r3, [r4, #20]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d1dc      	bne.n	8006dcc <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006e12:	2300      	movs	r3, #0
 8006e14:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006e16:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <tcp_pcb_remove+0xa0>)
 8006e1c:	4908      	ldr	r1, [pc, #32]	; (8006e40 <tcp_pcb_remove+0xb4>)
 8006e1e:	4805      	ldr	r0, [pc, #20]	; (8006e34 <tcp_pcb_remove+0xa8>)
 8006e20:	f640 0293 	movw	r2, #2195	; 0x893
 8006e24:	f003 ffaa 	bl	800ad7c <iprintf>
 8006e28:	e7d2      	b.n	8006dd0 <tcp_pcb_remove+0x44>
 8006e2a:	bf00      	nop
 8006e2c:	08019f2f 	.word	0x08019f2f
 8006e30:	0801a370 	.word	0x0801a370
 8006e34:	08018c9a 	.word	0x08018c9a
 8006e38:	0801a38c 	.word	0x0801a38c
 8006e3c:	0801a3c4 	.word	0x0801a3c4
 8006e40:	0801a3ac 	.word	0x0801a3ac

08006e44 <tcp_close_shutdown>:
{
 8006e44:	b530      	push	{r4, r5, lr}
 8006e46:	460d      	mov	r5, r1
 8006e48:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	b930      	cbnz	r0, 8006e5c <tcp_close_shutdown+0x18>
 8006e4e:	4b4b      	ldr	r3, [pc, #300]	; (8006f7c <tcp_close_shutdown+0x138>)
 8006e50:	494b      	ldr	r1, [pc, #300]	; (8006f80 <tcp_close_shutdown+0x13c>)
 8006e52:	484c      	ldr	r0, [pc, #304]	; (8006f84 <tcp_close_shutdown+0x140>)
 8006e54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006e58:	f003 ff90 	bl	800ad7c <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006e5c:	7d23      	ldrb	r3, [r4, #20]
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	d040      	beq.n	8006ee4 <tcp_close_shutdown+0xa0>
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	d001      	beq.n	8006e6a <tcp_close_shutdown+0x26>
 8006e66:	2b07      	cmp	r3, #7
 8006e68:	d13c      	bne.n	8006ee4 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006e6a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006e6c:	b922      	cbnz	r2, 8006e78 <tcp_close_shutdown+0x34>
 8006e6e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006e70:	f640 3268 	movw	r2, #2920	; 0xb68
 8006e74:	4291      	cmp	r1, r2
 8006e76:	d035      	beq.n	8006ee4 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006e78:	8b63      	ldrh	r3, [r4, #26]
 8006e7a:	06db      	lsls	r3, r3, #27
 8006e7c:	d406      	bmi.n	8006e8c <tcp_close_shutdown+0x48>
 8006e7e:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <tcp_close_shutdown+0x138>)
 8006e80:	4941      	ldr	r1, [pc, #260]	; (8006f88 <tcp_close_shutdown+0x144>)
 8006e82:	4840      	ldr	r0, [pc, #256]	; (8006f84 <tcp_close_shutdown+0x140>)
 8006e84:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006e88:	f003 ff78 	bl	800ad7c <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006e8c:	8b23      	ldrh	r3, [r4, #24]
 8006e8e:	9302      	str	r3, [sp, #8]
 8006e90:	8ae3      	ldrh	r3, [r4, #22]
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	1d23      	adds	r3, r4, #4
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e9a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f002 f9ac 	bl	80091fc <tcp_rst>
      tcp_pcb_purge(pcb);
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f7ff fd39 	bl	800691c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006eaa:	4a38      	ldr	r2, [pc, #224]	; (8006f8c <tcp_close_shutdown+0x148>)
 8006eac:	6813      	ldr	r3, [r2, #0]
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	d110      	bne.n	8006ed4 <tcp_close_shutdown+0x90>
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60e3      	str	r3, [r4, #12]
 8006eba:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <tcp_close_shutdown+0x14c>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8006ec0:	4b34      	ldr	r3, [pc, #208]	; (8006f94 <tcp_close_shutdown+0x150>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	d11d      	bne.n	8006f04 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 8006ec8:	f001 fb24 	bl	8008514 <tcp_trigger_input_pcb_close>
}
 8006ecc:	2000      	movs	r0, #0
 8006ece:	b005      	add	sp, #20
 8006ed0:	bd30      	pop	{r4, r5, pc}
 8006ed2:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0ee      	beq.n	8006eb6 <tcp_close_shutdown+0x72>
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	42a2      	cmp	r2, r4
 8006edc:	d1f9      	bne.n	8006ed2 <tcp_close_shutdown+0x8e>
 8006ede:	68e2      	ldr	r2, [r4, #12]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e7e8      	b.n	8006eb6 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d01a      	beq.n	8006f1e <tcp_close_shutdown+0xda>
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d039      	beq.n	8006f60 <tcp_close_shutdown+0x11c>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13f      	bne.n	8006f70 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 8006ef0:	8ae3      	ldrh	r3, [r4, #22]
 8006ef2:	b13b      	cbz	r3, 8006f04 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ef4:	4a28      	ldr	r2, [pc, #160]	; (8006f98 <tcp_close_shutdown+0x154>)
 8006ef6:	6813      	ldr	r3, [r2, #0]
 8006ef8:	42a3      	cmp	r3, r4
 8006efa:	d108      	bne.n	8006f0e <tcp_close_shutdown+0xca>
 8006efc:	68e3      	ldr	r3, [r4, #12]
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	2300      	movs	r3, #0
 8006f02:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8006f04:	4620      	mov	r0, r4
 8006f06:	f7ff fb23 	bl	8006550 <tcp_free>
      break;
 8006f0a:	e7df      	b.n	8006ecc <tcp_close_shutdown+0x88>
 8006f0c:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f6      	beq.n	8006f00 <tcp_close_shutdown+0xbc>
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	42a2      	cmp	r2, r4
 8006f16:	d1f9      	bne.n	8006f0c <tcp_close_shutdown+0xc8>
 8006f18:	68e2      	ldr	r2, [r4, #12]
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	e7f0      	b.n	8006f00 <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006f1e:	491f      	ldr	r1, [pc, #124]	; (8006f9c <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 8006f20:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006f22:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8006f26:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f28:	b9a2      	cbnz	r2, 8006f54 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d1f8      	bne.n	8006f22 <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006f30:	481b      	ldr	r0, [pc, #108]	; (8006fa0 <tcp_close_shutdown+0x15c>)
 8006f32:	4621      	mov	r1, r4
 8006f34:	f7ff ff2a 	bl	8006d8c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006f38:	7d23      	ldrb	r3, [r4, #20]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d105      	bne.n	8006f4a <tcp_close_shutdown+0x106>
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <tcp_close_shutdown+0x138>)
 8006f40:	4918      	ldr	r1, [pc, #96]	; (8006fa4 <tcp_close_shutdown+0x160>)
 8006f42:	4810      	ldr	r0, [pc, #64]	; (8006f84 <tcp_close_shutdown+0x140>)
 8006f44:	22df      	movs	r2, #223	; 0xdf
 8006f46:	f003 ff19 	bl	800ad7c <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	2002      	movs	r0, #2
 8006f4e:	f7fe fdef 	bl	8005b30 <memp_free>
}
 8006f52:	e7bb      	b.n	8006ecc <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 8006f54:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8006f56:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8006f58:	bf08      	it	eq
 8006f5a:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006f5c:	68d2      	ldr	r2, [r2, #12]
 8006f5e:	e7e3      	b.n	8006f28 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006f60:	480a      	ldr	r0, [pc, #40]	; (8006f8c <tcp_close_shutdown+0x148>)
 8006f62:	4621      	mov	r1, r4
 8006f64:	f7ff ff12 	bl	8006d8c <tcp_pcb_remove>
 8006f68:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <tcp_close_shutdown+0x14c>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e7c9      	b.n	8006f04 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 8006f70:	4620      	mov	r0, r4
}
 8006f72:	b005      	add	sp, #20
 8006f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8006f78:	f7ff baae 	b.w	80064d8 <tcp_close_shutdown_fin>
 8006f7c:	08019f2f 	.word	0x08019f2f
 8006f80:	0801a3dd 	.word	0x0801a3dd
 8006f84:	08018c9a 	.word	0x08018c9a
 8006f88:	0801a3fd 	.word	0x0801a3fd
 8006f8c:	2000e488 	.word	0x2000e488
 8006f90:	2000e484 	.word	0x2000e484
 8006f94:	2000e49c 	.word	0x2000e49c
 8006f98:	2000e494 	.word	0x2000e494
 8006f9c:	0800bee0 	.word	0x0800bee0
 8006fa0:	2000e490 	.word	0x2000e490
 8006fa4:	0801a416 	.word	0x0801a416

08006fa8 <tcp_close>:
{
 8006fa8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006faa:	b158      	cbz	r0, 8006fc4 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8006fac:	7d03      	ldrb	r3, [r0, #20]
 8006fae:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006fb0:	bf1e      	ittt	ne
 8006fb2:	8b43      	ldrhne	r3, [r0, #26]
 8006fb4:	f043 0310 	orrne.w	r3, r3, #16
 8006fb8:	8343      	strhne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8006fba:	2101      	movs	r1, #1
}
 8006fbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8006fc0:	f7ff bf40 	b.w	8006e44 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <tcp_close+0x30>)
 8006fc6:	4905      	ldr	r1, [pc, #20]	; (8006fdc <tcp_close+0x34>)
 8006fc8:	4805      	ldr	r0, [pc, #20]	; (8006fe0 <tcp_close+0x38>)
 8006fca:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006fce:	f003 fed5 	bl	800ad7c <iprintf>
}
 8006fd2:	f06f 000f 	mvn.w	r0, #15
 8006fd6:	bd08      	pop	{r3, pc}
 8006fd8:	08019f2f 	.word	0x08019f2f
 8006fdc:	0801a42f 	.word	0x0801a42f
 8006fe0:	08018c9a 	.word	0x08018c9a

08006fe4 <tcp_recv_null>:
{
 8006fe4:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006fe6:	4608      	mov	r0, r1
{
 8006fe8:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006fea:	b949      	cbnz	r1, 8007000 <tcp_recv_null+0x1c>
 8006fec:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <tcp_recv_null+0x3c>)
 8006fee:	490d      	ldr	r1, [pc, #52]	; (8007024 <tcp_recv_null+0x40>)
 8006ff0:	480d      	ldr	r0, [pc, #52]	; (8007028 <tcp_recv_null+0x44>)
 8006ff2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006ff6:	f003 fec1 	bl	800ad7c <iprintf>
 8006ffa:	f06f 000f 	mvn.w	r0, #15
}
 8006ffe:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 8007000:	b13a      	cbz	r2, 8007012 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8007002:	8911      	ldrh	r1, [r2, #8]
 8007004:	f7ff fbb2 	bl	800676c <tcp_recved>
    pbuf_free(p);
 8007008:	4620      	mov	r0, r4
 800700a:	f7fe ffbf 	bl	8005f8c <pbuf_free>
  return ERR_OK;
 800700e:	2000      	movs	r0, #0
 8007010:	e7f5      	b.n	8006ffe <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 8007012:	b91b      	cbnz	r3, 800701c <tcp_recv_null+0x38>
}
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007018:	f7ff bfc6 	b.w	8006fa8 <tcp_close>
  return ERR_OK;
 800701c:	4610      	mov	r0, r2
 800701e:	e7ee      	b.n	8006ffe <tcp_recv_null+0x1a>
 8007020:	08019f2f 	.word	0x08019f2f
 8007024:	0801a446 	.word	0x0801a446
 8007028:	08018c9a 	.word	0x08018c9a

0800702c <tcp_process_refused_data>:
{
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800702e:	4604      	mov	r4, r0
 8007030:	b950      	cbnz	r0, 8007048 <tcp_process_refused_data+0x1c>
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <tcp_process_refused_data+0x80>)
 8007034:	491e      	ldr	r1, [pc, #120]	; (80070b0 <tcp_process_refused_data+0x84>)
 8007036:	481f      	ldr	r0, [pc, #124]	; (80070b4 <tcp_process_refused_data+0x88>)
 8007038:	f240 6209 	movw	r2, #1545	; 0x609
 800703c:	f003 fe9e 	bl	800ad7c <iprintf>
 8007040:	f06f 050f 	mvn.w	r5, #15
}
 8007044:	4628      	mov	r0, r5
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8007048:	6f46      	ldr	r6, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800704a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800704e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007054:	b1e5      	cbz	r5, 8007090 <tcp_process_refused_data+0x64>
 8007056:	4601      	mov	r1, r0
 8007058:	4632      	mov	r2, r6
 800705a:	6900      	ldr	r0, [r0, #16]
 800705c:	47a8      	blx	r5
 800705e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007060:	b9e8      	cbnz	r0, 800709e <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007062:	06bb      	lsls	r3, r7, #26
 8007064:	d5ee      	bpl.n	8007044 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007066:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007068:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800706c:	f640 3268 	movw	r2, #2920	; 0xb68
 8007070:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 8007072:	bf1c      	itt	ne
 8007074:	3301      	addne	r3, #1
 8007076:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007078:	2e00      	cmp	r6, #0
 800707a:	d0e3      	beq.n	8007044 <tcp_process_refused_data+0x18>
 800707c:	2300      	movs	r3, #0
 800707e:	6920      	ldr	r0, [r4, #16]
 8007080:	461a      	mov	r2, r3
 8007082:	4621      	mov	r1, r4
 8007084:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007086:	300d      	adds	r0, #13
 8007088:	d1dc      	bne.n	8007044 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800708a:	f06f 050c 	mvn.w	r5, #12
 800708e:	e7d9      	b.n	8007044 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007090:	4601      	mov	r1, r0
 8007092:	462b      	mov	r3, r5
 8007094:	4632      	mov	r2, r6
 8007096:	4628      	mov	r0, r5
 8007098:	f7ff ffa4 	bl	8006fe4 <tcp_recv_null>
 800709c:	e7df      	b.n	800705e <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800709e:	350d      	adds	r5, #13
 80070a0:	d0f3      	beq.n	800708a <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 80070a2:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80070a4:	f06f 0504 	mvn.w	r5, #4
 80070a8:	e7cc      	b.n	8007044 <tcp_process_refused_data+0x18>
 80070aa:	bf00      	nop
 80070ac:	08019f2f 	.word	0x08019f2f
 80070b0:	0801a461 	.word	0x0801a461
 80070b4:	08018c9a 	.word	0x08018c9a

080070b8 <tcp_fasttmr>:
{
 80070b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80070bc:	4d1b      	ldr	r5, [pc, #108]	; (800712c <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80070be:	4f1c      	ldr	r7, [pc, #112]	; (8007130 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80070c0:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80070c2:	4e1c      	ldr	r6, [pc, #112]	; (8007134 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80070c4:	3301      	adds	r3, #1
 80070c6:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80070c8:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80070ca:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80070ce:	b90c      	cbnz	r4, 80070d4 <tcp_fasttmr+0x1c>
}
 80070d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 80070d4:	782b      	ldrb	r3, [r5, #0]
 80070d6:	7fa2      	ldrb	r2, [r4, #30]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d024      	beq.n	8007126 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 80070dc:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80070de:	8b63      	ldrh	r3, [r4, #26]
 80070e0:	07d9      	lsls	r1, r3, #31
 80070e2:	d509      	bpl.n	80070f8 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 80070e4:	f043 0302 	orr.w	r3, r3, #2
 80070e8:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 80070ea:	4620      	mov	r0, r4
 80070ec:	f002 f8fe 	bl	80092ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80070f0:	8b63      	ldrh	r3, [r4, #26]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 80070f8:	8b63      	ldrh	r3, [r4, #26]
 80070fa:	071a      	lsls	r2, r3, #28
 80070fc:	d505      	bpl.n	800710a <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80070fe:	f023 0308 	bic.w	r3, r3, #8
 8007102:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007104:	4620      	mov	r0, r4
 8007106:	f7ff f9e7 	bl	80064d8 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800710a:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800710c:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007110:	b13b      	cbz	r3, 8007122 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8007112:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8007114:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8007118:	f7ff ff88 	bl	800702c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800711c:	7833      	ldrb	r3, [r6, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1d2      	bne.n	80070c8 <tcp_fasttmr+0x10>
{
 8007122:	464c      	mov	r4, r9
 8007124:	e7d3      	b.n	80070ce <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8007126:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800712a:	e7fa      	b.n	8007122 <tcp_fasttmr+0x6a>
 800712c:	2000020d 	.word	0x2000020d
 8007130:	2000e488 	.word	0x2000e488
 8007134:	2000e484 	.word	0x2000e484

08007138 <tcp_tmr>:
{
 8007138:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800713a:	f7ff ffbd 	bl	80070b8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800713e:	4a06      	ldr	r2, [pc, #24]	; (8007158 <tcp_tmr+0x20>)
 8007140:	7853      	ldrb	r3, [r2, #1]
 8007142:	3301      	adds	r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	7053      	strb	r3, [r2, #1]
 8007148:	07db      	lsls	r3, r3, #31
 800714a:	d503      	bpl.n	8007154 <tcp_tmr+0x1c>
}
 800714c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007150:	f7ff bc10 	b.w	8006974 <tcp_slowtmr>
}
 8007154:	bd08      	pop	{r3, pc}
 8007156:	bf00      	nop
 8007158:	2000020d 	.word	0x2000020d

0800715c <tcp_abandon>:
{
 800715c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007162:	4604      	mov	r4, r0
 8007164:	b948      	cbnz	r0, 800717a <tcp_abandon+0x1e>
 8007166:	4b34      	ldr	r3, [pc, #208]	; (8007238 <tcp_abandon+0xdc>)
 8007168:	4934      	ldr	r1, [pc, #208]	; (800723c <tcp_abandon+0xe0>)
 800716a:	4835      	ldr	r0, [pc, #212]	; (8007240 <tcp_abandon+0xe4>)
 800716c:	f240 223d 	movw	r2, #573	; 0x23d
}
 8007170:	b004      	add	sp, #16
 8007172:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007176:	f003 be01 	b.w	800ad7c <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800717a:	7d03      	ldrb	r3, [r0, #20]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <tcp_abandon+0x32>
 8007180:	4b2d      	ldr	r3, [pc, #180]	; (8007238 <tcp_abandon+0xdc>)
 8007182:	4930      	ldr	r1, [pc, #192]	; (8007244 <tcp_abandon+0xe8>)
 8007184:	482e      	ldr	r0, [pc, #184]	; (8007240 <tcp_abandon+0xe4>)
 8007186:	f44f 7210 	mov.w	r2, #576	; 0x240
 800718a:	f003 fdf7 	bl	800ad7c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800718e:	7d23      	ldrb	r3, [r4, #20]
 8007190:	2b0a      	cmp	r3, #10
 8007192:	d109      	bne.n	80071a8 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007194:	482c      	ldr	r0, [pc, #176]	; (8007248 <tcp_abandon+0xec>)
 8007196:	4621      	mov	r1, r4
 8007198:	f7ff fdf8 	bl	8006d8c <tcp_pcb_remove>
    tcp_free(pcb);
 800719c:	4620      	mov	r0, r4
}
 800719e:	b004      	add	sp, #16
 80071a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 80071a4:	f7ff b9d4 	b.w	8006550 <tcp_free>
    seqno = pcb->snd_nxt;
 80071a8:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80071ac:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80071b0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80071b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 80071b8:	8ae5      	ldrh	r5, [r4, #22]
 80071ba:	b99b      	cbnz	r3, 80071e4 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 80071bc:	b13d      	cbz	r5, 80071ce <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80071be:	4a23      	ldr	r2, [pc, #140]	; (800724c <tcp_abandon+0xf0>)
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	d106      	bne.n	80071d4 <tcp_abandon+0x78>
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	2500      	movs	r5, #0
 80071cc:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80071ce:	462e      	mov	r6, r5
 80071d0:	e00f      	b.n	80071f2 <tcp_abandon+0x96>
 80071d2:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f8      	beq.n	80071ca <tcp_abandon+0x6e>
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	42a2      	cmp	r2, r4
 80071dc:	d1f9      	bne.n	80071d2 <tcp_abandon+0x76>
 80071de:	68e2      	ldr	r2, [r4, #12]
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	e7f2      	b.n	80071ca <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80071e4:	481a      	ldr	r0, [pc, #104]	; (8007250 <tcp_abandon+0xf4>)
 80071e6:	4621      	mov	r1, r4
 80071e8:	f7ff fdd0 	bl	8006d8c <tcp_pcb_remove>
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <tcp_abandon+0xf8>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80071f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80071f4:	b108      	cbz	r0, 80071fa <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 80071f6:	f7ff fb05 	bl	8006804 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80071fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80071fc:	b108      	cbz	r0, 8007202 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 80071fe:	f7ff fb01 	bl	8006804 <tcp_segs_free>
    if (send_rst) {
 8007202:	b156      	cbz	r6, 800721a <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007204:	8b23      	ldrh	r3, [r4, #24]
 8007206:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800720a:	1d23      	adds	r3, r4, #4
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4652      	mov	r2, sl
 8007210:	4623      	mov	r3, r4
 8007212:	4649      	mov	r1, r9
 8007214:	4620      	mov	r0, r4
 8007216:	f001 fff1 	bl	80091fc <tcp_rst>
    tcp_free(pcb);
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff f998 	bl	8006550 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007220:	b13f      	cbz	r7, 8007232 <tcp_abandon+0xd6>
 8007222:	f06f 010c 	mvn.w	r1, #12
 8007226:	4640      	mov	r0, r8
 8007228:	463b      	mov	r3, r7
}
 800722a:	b004      	add	sp, #16
 800722c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007230:	4718      	bx	r3
}
 8007232:	b004      	add	sp, #16
 8007234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007238:	08019f2f 	.word	0x08019f2f
 800723c:	0801a4a1 	.word	0x0801a4a1
 8007240:	08018c9a 	.word	0x08018c9a
 8007244:	0801a4ba 	.word	0x0801a4ba
 8007248:	2000e498 	.word	0x2000e498
 800724c:	2000e494 	.word	0x2000e494
 8007250:	2000e488 	.word	0x2000e488
 8007254:	2000e484 	.word	0x2000e484

08007258 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007258:	2101      	movs	r1, #1
 800725a:	f7ff bf7f 	b.w	800715c <tcp_abandon>
	...

08007260 <tcp_accept_null>:
{
 8007260:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007262:	460c      	mov	r4, r1
 8007264:	b931      	cbnz	r1, 8007274 <tcp_accept_null+0x14>
 8007266:	4b06      	ldr	r3, [pc, #24]	; (8007280 <tcp_accept_null+0x20>)
 8007268:	4906      	ldr	r1, [pc, #24]	; (8007284 <tcp_accept_null+0x24>)
 800726a:	4807      	ldr	r0, [pc, #28]	; (8007288 <tcp_accept_null+0x28>)
 800726c:	f240 320f 	movw	r2, #783	; 0x30f
 8007270:	f003 fd84 	bl	800ad7c <iprintf>
  tcp_abort(pcb);
 8007274:	4620      	mov	r0, r4
 8007276:	f7ff ffef 	bl	8007258 <tcp_abort>
}
 800727a:	f06f 000c 	mvn.w	r0, #12
 800727e:	bd10      	pop	{r4, pc}
 8007280:	08019f2f 	.word	0x08019f2f
 8007284:	0801a4eb 	.word	0x0801a4eb
 8007288:	08018c9a 	.word	0x08018c9a

0800728c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007290:	4605      	mov	r5, r0
 8007292:	b930      	cbnz	r0, 80072a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 8007294:	4b09      	ldr	r3, [pc, #36]	; (80072bc <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8007296:	490a      	ldr	r1, [pc, #40]	; (80072c0 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8007298:	480a      	ldr	r0, [pc, #40]	; (80072c4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800729a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800729e:	f003 fd6d 	bl	800ad7c <iprintf>

  while (pcb != NULL) {
 80072a2:	b904      	cbnz	r4, 80072a6 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	68e6      	ldr	r6, [r4, #12]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d102      	bne.n	80072b6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff ffd1 	bl	8007258 <tcp_abort>
{
 80072b6:	4634      	mov	r4, r6
 80072b8:	e7f3      	b.n	80072a2 <tcp_netif_ip_addr_changed_pcblist+0x16>
 80072ba:	bf00      	nop
 80072bc:	08019f2f 	.word	0x08019f2f
 80072c0:	0801a508 	.word	0x0801a508
 80072c4:	08018c9a 	.word	0x08018c9a

080072c8 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072c8:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <tcp_kill_state+0x34>)
 80072ca:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <tcp_kill_state+0x38>)
{
 80072ce:	b430      	push	{r4, r5}
  inactivity = 0;
 80072d0:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072d2:	681d      	ldr	r5, [r3, #0]
{
 80072d4:	4604      	mov	r4, r0
  inactive = NULL;
 80072d6:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072d8:	b919      	cbnz	r1, 80072e2 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 80072da:	b168      	cbz	r0, 80072f8 <tcp_kill_state+0x30>
}
 80072dc:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 80072de:	f7ff bf3d 	b.w	800715c <tcp_abandon>
    if (pcb->state == state) {
 80072e2:	7d0b      	ldrb	r3, [r1, #20]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d105      	bne.n	80072f4 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072e8:	6a0b      	ldr	r3, [r1, #32]
 80072ea:	1aeb      	subs	r3, r5, r3
 80072ec:	4293      	cmp	r3, r2
 80072ee:	bf24      	itt	cs
 80072f0:	461a      	movcs	r2, r3
 80072f2:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072f4:	68c9      	ldr	r1, [r1, #12]
 80072f6:	e7ef      	b.n	80072d8 <tcp_kill_state+0x10>
}
 80072f8:	bc30      	pop	{r4, r5}
 80072fa:	4770      	bx	lr
 80072fc:	2000e488 	.word	0x2000e488
 8007300:	2000e48c 	.word	0x2000e48c

08007304 <tcp_alloc>:
{
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007308:	2001      	movs	r0, #1
 800730a:	f7fe fbf5 	bl	8005af8 <memp_malloc>
  if (pcb == NULL) {
 800730e:	4603      	mov	r3, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d136      	bne.n	8007382 <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007314:	4e3f      	ldr	r6, [pc, #252]	; (8007414 <tcp_alloc+0x110>)
 8007316:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 8007318:	2800      	cmp	r0, #0
 800731a:	d157      	bne.n	80073cc <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800731c:	4b3e      	ldr	r3, [pc, #248]	; (8007418 <tcp_alloc+0x114>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800731e:	4d3f      	ldr	r5, [pc, #252]	; (800741c <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007320:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007322:	682f      	ldr	r7, [r5, #0]
  inactivity = 0;
 8007324:	4601      	mov	r1, r0
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007326:	2b00      	cmp	r3, #0
 8007328:	d15b      	bne.n	80073e2 <tcp_alloc+0xde>
  if (inactive != NULL) {
 800732a:	b108      	cbz	r0, 8007330 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800732c:	f7ff ff94 	bl	8007258 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007330:	2001      	movs	r0, #1
 8007332:	f7fe fbe1 	bl	8005af8 <memp_malloc>
    if (pcb == NULL) {
 8007336:	4603      	mov	r3, r0
 8007338:	bb18      	cbnz	r0, 8007382 <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800733a:	2009      	movs	r0, #9
 800733c:	f7ff ffc4 	bl	80072c8 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007340:	2001      	movs	r0, #1
 8007342:	f7fe fbd9 	bl	8005af8 <memp_malloc>
      if (pcb == NULL) {
 8007346:	4603      	mov	r3, r0
 8007348:	b9d8      	cbnz	r0, 8007382 <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800734a:	2008      	movs	r0, #8
 800734c:	f7ff ffbc 	bl	80072c8 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007350:	2001      	movs	r0, #1
 8007352:	f7fe fbd1 	bl	8005af8 <memp_malloc>
        if (pcb == NULL) {
 8007356:	4603      	mov	r3, r0
 8007358:	b998      	cbnz	r0, 8007382 <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800735a:	0622      	lsls	r2, r4, #24
 800735c:	d449      	bmi.n	80073f2 <tcp_alloc+0xee>
  if (mprio == 0) {
 800735e:	b15c      	cbz	r4, 8007378 <tcp_alloc+0x74>
 8007360:	4621      	mov	r1, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007362:	6832      	ldr	r2, [r6, #0]
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007364:	682e      	ldr	r6, [r5, #0]
  mprio--;
 8007366:	3901      	subs	r1, #1
 8007368:	b2c9      	uxtb	r1, r1
  inactivity = 0;
 800736a:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800736c:	2a00      	cmp	r2, #0
 800736e:	d142      	bne.n	80073f6 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 8007370:	b113      	cbz	r3, 8007378 <tcp_alloc+0x74>
    tcp_abort(inactive);
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff ff70 	bl	8007258 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007378:	2001      	movs	r0, #1
 800737a:	f7fe fbbd 	bl	8005af8 <memp_malloc>
  if (pcb != NULL) {
 800737e:	4603      	mov	r3, r0
 8007380:	b310      	cbz	r0, 80073c8 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007382:	2298      	movs	r2, #152	; 0x98
 8007384:	4618      	mov	r0, r3
 8007386:	2100      	movs	r1, #0
 8007388:	f003 fcf0 	bl	800ad6c <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800738c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8007390:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007394:	4a22      	ldr	r2, [pc, #136]	; (8007420 <tcp_alloc+0x11c>)
 8007396:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007398:	22ff      	movs	r2, #255	; 0xff
 800739a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800739c:	2206      	movs	r2, #6
 800739e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80073a2:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 80073a4:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <tcp_alloc+0x120>)
 80073a6:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 80073a8:	4a1c      	ldr	r2, [pc, #112]	; (800741c <tcp_alloc+0x118>)
    pcb->prio = prio;
 80073aa:	7544      	strb	r4, [r0, #21]
    pcb->tmr = tcp_ticks;
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <tcp_alloc+0x124>)
 80073b2:	7812      	ldrb	r2, [r2, #0]
 80073b4:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 80073b6:	4a1d      	ldr	r2, [pc, #116]	; (800742c <tcp_alloc+0x128>)
 80073b8:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 80073ba:	4a1d      	ldr	r2, [pc, #116]	; (8007430 <tcp_alloc+0x12c>)
 80073bc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80073c0:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <tcp_alloc+0x130>)
 80073c2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 80073cc:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 80073ce:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80073d0:	0719      	lsls	r1, r3, #28
 80073d2:	d504      	bpl.n	80073de <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073d4:	f023 0308 	bic.w	r3, r3, #8
 80073d8:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80073da:	f7ff f87d 	bl	80064d8 <tcp_close_shutdown_fin>
{
 80073de:	4628      	mov	r0, r5
 80073e0:	e79a      	b.n	8007318 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	1aba      	subs	r2, r7, r2
 80073e6:	428a      	cmp	r2, r1
 80073e8:	bf24      	itt	cs
 80073ea:	4618      	movcs	r0, r3
 80073ec:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	e799      	b.n	8007326 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80073f2:	217f      	movs	r1, #127	; 0x7f
 80073f4:	e7b5      	b.n	8007362 <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 80073f6:	7d57      	ldrb	r7, [r2, #21]
 80073f8:	428f      	cmp	r7, r1
 80073fa:	d304      	bcc.n	8007406 <tcp_alloc+0x102>
 80073fc:	d107      	bne.n	800740e <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80073fe:	6a15      	ldr	r5, [r2, #32]
 8007400:	1b75      	subs	r5, r6, r5
 8007402:	4285      	cmp	r5, r0
 8007404:	d303      	bcc.n	800740e <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 8007406:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 8007408:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 800740a:	1a30      	subs	r0, r6, r0
 800740c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800740e:	68d2      	ldr	r2, [r2, #12]
 8007410:	e7ac      	b.n	800736c <tcp_alloc+0x68>
 8007412:	bf00      	nop
 8007414:	2000e488 	.word	0x2000e488
 8007418:	2000e498 	.word	0x2000e498
 800741c:	2000e48c 	.word	0x2000e48c
 8007420:	0b680b68 	.word	0x0b680b68
 8007424:	0218ffff 	.word	0x0218ffff
 8007428:	2000020d 	.word	0x2000020d
 800742c:	16d00001 	.word	0x16d00001
 8007430:	08006fe5 	.word	0x08006fe5
 8007434:	006ddd00 	.word	0x006ddd00

08007438 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007438:	2040      	movs	r0, #64	; 0x40
 800743a:	f7ff bf63 	b.w	8007304 <tcp_alloc>
	...

08007440 <tcp_next_iss>:
{
 8007440:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007442:	b930      	cbnz	r0, 8007452 <tcp_next_iss+0x12>
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <tcp_next_iss+0x20>)
 8007446:	4907      	ldr	r1, [pc, #28]	; (8007464 <tcp_next_iss+0x24>)
 8007448:	4807      	ldr	r0, [pc, #28]	; (8007468 <tcp_next_iss+0x28>)
 800744a:	f640 02af 	movw	r2, #2223	; 0x8af
 800744e:	f003 fc95 	bl	800ad7c <iprintf>
  iss += tcp_ticks;       /* XXX */
 8007452:	4b06      	ldr	r3, [pc, #24]	; (800746c <tcp_next_iss+0x2c>)
 8007454:	4a06      	ldr	r2, [pc, #24]	; (8007470 <tcp_next_iss+0x30>)
 8007456:	6858      	ldr	r0, [r3, #4]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	4410      	add	r0, r2
 800745c:	6058      	str	r0, [r3, #4]
}
 800745e:	bd08      	pop	{r3, pc}
 8007460:	08019f2f 	.word	0x08019f2f
 8007464:	0801a53c 	.word	0x0801a53c
 8007468:	08018c9a 	.word	0x08018c9a
 800746c:	20000040 	.word	0x20000040
 8007470:	2000e48c 	.word	0x2000e48c

08007474 <tcp_eff_send_mss_netif>:
{
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4604      	mov	r4, r0
 8007478:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800747a:	b932      	cbnz	r2, 800748a <tcp_eff_send_mss_netif+0x16>
 800747c:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <tcp_eff_send_mss_netif+0x30>)
 800747e:	490a      	ldr	r1, [pc, #40]	; (80074a8 <tcp_eff_send_mss_netif+0x34>)
 8007480:	480a      	ldr	r0, [pc, #40]	; (80074ac <tcp_eff_send_mss_netif+0x38>)
 8007482:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007486:	f003 fc79 	bl	800ad7c <iprintf>
    if (outif == NULL) {
 800748a:	b14d      	cbz	r5, 80074a0 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800748c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800748e:	b13b      	cbz	r3, 80074a0 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007490:	2b28      	cmp	r3, #40	; 0x28
 8007492:	bf86      	itte	hi
 8007494:	3b28      	subhi	r3, #40	; 0x28
 8007496:	b29b      	uxthhi	r3, r3
 8007498:	2300      	movls	r3, #0
    sendmss = LWIP_MIN(sendmss, mss_s);
 800749a:	429c      	cmp	r4, r3
 800749c:	bf28      	it	cs
 800749e:	461c      	movcs	r4, r3
}
 80074a0:	4620      	mov	r0, r4
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	08019f2f 	.word	0x08019f2f
 80074a8:	0801a556 	.word	0x0801a556
 80074ac:	08018c9a 	.word	0x08018c9a

080074b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80074b4:	4604      	mov	r4, r0
 80074b6:	b180      	cbz	r0, 80074da <tcp_netif_ip_addr_changed+0x2a>
 80074b8:	6803      	ldr	r3, [r0, #0]
 80074ba:	b173      	cbz	r3, 80074da <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <tcp_netif_ip_addr_changed+0x3c>)
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	f7ff fee4 	bl	800728c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80074c4:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <tcp_netif_ip_addr_changed+0x40>)
 80074c6:	4620      	mov	r0, r4
 80074c8:	6819      	ldr	r1, [r3, #0]
 80074ca:	f7ff fedf 	bl	800728c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80074ce:	b125      	cbz	r5, 80074da <tcp_netif_ip_addr_changed+0x2a>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b113      	cbz	r3, 80074da <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <tcp_netif_ip_addr_changed+0x44>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	b903      	cbnz	r3, 80074dc <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 80074da:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80074dc:	6819      	ldr	r1, [r3, #0]
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80074e2:	bf04      	itt	eq
 80074e4:	682a      	ldreq	r2, [r5, #0]
 80074e6:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	e7f5      	b.n	80074d8 <tcp_netif_ip_addr_changed+0x28>
 80074ec:	2000e488 	.word	0x2000e488
 80074f0:	2000e494 	.word	0x2000e494
 80074f4:	2000e490 	.word	0x2000e490

080074f8 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <tcp_get_next_optbyte+0x24>)
 80074fa:	8813      	ldrh	r3, [r2, #0]
 80074fc:	1c59      	adds	r1, r3, #1
 80074fe:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8007500:	6851      	ldr	r1, [r2, #4]
 8007502:	4610      	mov	r0, r2
 8007504:	b111      	cbz	r1, 800750c <tcp_get_next_optbyte+0x14>
 8007506:	8912      	ldrh	r2, [r2, #8]
 8007508:	4293      	cmp	r3, r2
 800750a:	d203      	bcs.n	8007514 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800750c:	68c2      	ldr	r2, [r0, #12]
 800750e:	4413      	add	r3, r2
 8007510:	7d18      	ldrb	r0, [r3, #20]
 8007512:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8007514:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 8007516:	b2db      	uxtb	r3, r3
 8007518:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800751a:	4770      	bx	lr
 800751c:	20000210 	.word	0x20000210

08007520 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8007520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8007524:	4606      	mov	r6, r0
 8007526:	b930      	cbnz	r0, 8007536 <tcp_parseopt+0x16>
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <tcp_parseopt+0x84>)
 800752a:	491f      	ldr	r1, [pc, #124]	; (80075a8 <tcp_parseopt+0x88>)
 800752c:	481f      	ldr	r0, [pc, #124]	; (80075ac <tcp_parseopt+0x8c>)
 800752e:	f240 727d 	movw	r2, #1917	; 0x77d
 8007532:	f003 fc23 	bl	800ad7c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8007536:	4d1e      	ldr	r5, [pc, #120]	; (80075b0 <tcp_parseopt+0x90>)
 8007538:	8a2f      	ldrh	r7, [r5, #16]
 800753a:	b17f      	cbz	r7, 800755c <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800753c:	2300      	movs	r3, #0
 800753e:	802b      	strh	r3, [r5, #0]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007540:	f240 58b3 	movw	r8, #1459	; 0x5b3
 8007544:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007548:	882b      	ldrh	r3, [r5, #0]
 800754a:	42bb      	cmp	r3, r7
 800754c:	d206      	bcs.n	800755c <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800754e:	f7ff ffd3 	bl	80074f8 <tcp_get_next_optbyte>
      switch (opt) {
 8007552:	2801      	cmp	r0, #1
 8007554:	d0f8      	beq.n	8007548 <tcp_parseopt+0x28>
 8007556:	2802      	cmp	r0, #2
 8007558:	d002      	beq.n	8007560 <tcp_parseopt+0x40>
 800755a:	b9c8      	cbnz	r0, 8007590 <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800755c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007560:	f7ff ffca 	bl	80074f8 <tcp_get_next_optbyte>
 8007564:	2804      	cmp	r0, #4
 8007566:	d1f9      	bne.n	800755c <tcp_parseopt+0x3c>
 8007568:	882b      	ldrh	r3, [r5, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	42bb      	cmp	r3, r7
 800756e:	daf5      	bge.n	800755c <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8007570:	f7ff ffc2 	bl	80074f8 <tcp_get_next_optbyte>
 8007574:	0200      	lsls	r0, r0, #8
 8007576:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8007578:	f7ff ffbe 	bl	80074f8 <tcp_get_next_optbyte>
 800757c:	ea44 0300 	orr.w	r3, r4, r0
 8007580:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007582:	1e5a      	subs	r2, r3, #1
 8007584:	b292      	uxth	r2, r2
 8007586:	4542      	cmp	r2, r8
 8007588:	bf88      	it	hi
 800758a:	464b      	movhi	r3, r9
 800758c:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800758e:	e7db      	b.n	8007548 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 8007590:	f7ff ffb2 	bl	80074f8 <tcp_get_next_optbyte>
          if (data < 2) {
 8007594:	2801      	cmp	r0, #1
 8007596:	d9e1      	bls.n	800755c <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 8007598:	882b      	ldrh	r3, [r5, #0]
 800759a:	3b02      	subs	r3, #2
 800759c:	4418      	add	r0, r3
 800759e:	8028      	strh	r0, [r5, #0]
 80075a0:	e7d2      	b.n	8007548 <tcp_parseopt+0x28>
 80075a2:	bf00      	nop
 80075a4:	0801a63c 	.word	0x0801a63c
 80075a8:	0801a6b0 	.word	0x0801a6b0
 80075ac:	08018c9a 	.word	0x08018c9a
 80075b0:	20000210 	.word	0x20000210

080075b4 <tcp_input_delayed_close>:
{
 80075b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80075b6:	4604      	mov	r4, r0
 80075b8:	b930      	cbnz	r0, 80075c8 <tcp_input_delayed_close+0x14>
 80075ba:	4b0f      	ldr	r3, [pc, #60]	; (80075f8 <tcp_input_delayed_close+0x44>)
 80075bc:	490f      	ldr	r1, [pc, #60]	; (80075fc <tcp_input_delayed_close+0x48>)
 80075be:	4810      	ldr	r0, [pc, #64]	; (8007600 <tcp_input_delayed_close+0x4c>)
 80075c0:	f240 225a 	movw	r2, #602	; 0x25a
 80075c4:	f003 fbda 	bl	800ad7c <iprintf>
  if (recv_flags & TF_CLOSED) {
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <tcp_input_delayed_close+0x50>)
 80075ca:	7c98      	ldrb	r0, [r3, #18]
 80075cc:	f010 0010 	ands.w	r0, r0, #16
 80075d0:	d011      	beq.n	80075f6 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80075d2:	8b63      	ldrh	r3, [r4, #26]
 80075d4:	06db      	lsls	r3, r3, #27
 80075d6:	d406      	bmi.n	80075e6 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80075d8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80075dc:	b11b      	cbz	r3, 80075e6 <tcp_input_delayed_close+0x32>
 80075de:	6920      	ldr	r0, [r4, #16]
 80075e0:	f06f 010e 	mvn.w	r1, #14
 80075e4:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80075e6:	4808      	ldr	r0, [pc, #32]	; (8007608 <tcp_input_delayed_close+0x54>)
 80075e8:	4621      	mov	r1, r4
 80075ea:	f7ff fbcf 	bl	8006d8c <tcp_pcb_remove>
    tcp_free(pcb);
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7fe ffae 	bl	8006550 <tcp_free>
 80075f4:	2001      	movs	r0, #1
}
 80075f6:	bd10      	pop	{r4, pc}
 80075f8:	0801a63c 	.word	0x0801a63c
 80075fc:	0801a6ca 	.word	0x0801a6ca
 8007600:	08018c9a 	.word	0x08018c9a
 8007604:	20000210 	.word	0x20000210
 8007608:	2000e488 	.word	0x2000e488

0800760c <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007610:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80076c0 <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007614:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80076b8 <tcp_free_acked_segments.isra.0+0xac>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8007618:	4606      	mov	r6, r0
 800761a:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800761c:	460c      	mov	r4, r1
  while (seg_list != NULL &&
 800761e:	2c00      	cmp	r4, #0
 8007620:	d037      	beq.n	8007692 <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	6858      	ldr	r0, [r3, #4]
 8007626:	f7fd ff80 	bl	800552a <lwip_htonl>
 800762a:	68e3      	ldr	r3, [r4, #12]
 800762c:	8925      	ldrh	r5, [r4, #8]
 800762e:	4682      	mov	sl, r0
 8007630:	8998      	ldrh	r0, [r3, #12]
 8007632:	f7fd ff77 	bl	8005524 <lwip_htons>
 8007636:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800763a:	f010 0003 	ands.w	r0, r0, #3
 800763e:	eba5 0303 	sub.w	r3, r5, r3
 8007642:	bf18      	it	ne
 8007644:	2001      	movne	r0, #1
 8007646:	eb03 050a 	add.w	r5, r3, sl
 800764a:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800764c:	2d00      	cmp	r5, #0
 800764e:	dc21      	bgt.n	8007694 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 8007650:	e9d4 a000 	ldrd	sl, r0, [r4]
 8007654:	f7fe fdd2 	bl	80061fc <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007658:	8833      	ldrh	r3, [r6, #0]
 800765a:	4283      	cmp	r3, r0
    clen = pbuf_clen(next->p);
 800765c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800765e:	d206      	bcs.n	800766e <tcp_free_acked_segments.isra.0+0x62>
 8007660:	4913      	ldr	r1, [pc, #76]	; (80076b0 <tcp_free_acked_segments.isra.0+0xa4>)
 8007662:	4814      	ldr	r0, [pc, #80]	; (80076b4 <tcp_free_acked_segments.isra.0+0xa8>)
 8007664:	464b      	mov	r3, r9
 8007666:	f240 4257 	movw	r2, #1111	; 0x457
 800766a:	f003 fb87 	bl	800ad7c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800766e:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007670:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007674:	1b45      	subs	r5, r0, r5
 8007676:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007678:	8923      	ldrh	r3, [r4, #8]
    tcp_seg_free(next);
 800767a:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800767c:	4413      	add	r3, r2
 800767e:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 8007682:	f7ff f8b1 	bl	80067e8 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8007686:	8833      	ldrh	r3, [r6, #0]
 8007688:	b17b      	cbz	r3, 80076aa <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800768a:	f1ba 0f00 	cmp.w	sl, #0
 800768e:	d10c      	bne.n	80076aa <tcp_free_acked_segments.isra.0+0x9e>
 8007690:	b11f      	cbz	r7, 800769a <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 8007692:	2400      	movs	r4, #0
}
 8007694:	4620      	mov	r0, r4
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <tcp_free_acked_segments.isra.0+0xac>)
 800769c:	4907      	ldr	r1, [pc, #28]	; (80076bc <tcp_free_acked_segments.isra.0+0xb0>)
 800769e:	4805      	ldr	r0, [pc, #20]	; (80076b4 <tcp_free_acked_segments.isra.0+0xa8>)
 80076a0:	f240 4261 	movw	r2, #1121	; 0x461
 80076a4:	f003 fb6a 	bl	800ad7c <iprintf>
  while (seg_list != NULL &&
 80076a8:	e7f3      	b.n	8007692 <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 80076aa:	4654      	mov	r4, sl
 80076ac:	e7b7      	b.n	800761e <tcp_free_acked_segments.isra.0+0x12>
 80076ae:	bf00      	nop
 80076b0:	0801a6ef 	.word	0x0801a6ef
 80076b4:	08018c9a 	.word	0x08018c9a
 80076b8:	0801a63c 	.word	0x0801a63c
 80076bc:	0801a717 	.word	0x0801a717
 80076c0:	20000210 	.word	0x20000210

080076c4 <tcp_receive>:
{
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80076c6:	4604      	mov	r4, r0
 80076c8:	b930      	cbnz	r0, 80076d8 <tcp_receive+0x14>
 80076ca:	4bb4      	ldr	r3, [pc, #720]	; (800799c <tcp_receive+0x2d8>)
 80076cc:	49b4      	ldr	r1, [pc, #720]	; (80079a0 <tcp_receive+0x2dc>)
 80076ce:	48b5      	ldr	r0, [pc, #724]	; (80079a4 <tcp_receive+0x2e0>)
 80076d0:	f240 427b 	movw	r2, #1147	; 0x47b
 80076d4:	f003 fb52 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80076d8:	7d23      	ldrb	r3, [r4, #20]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d806      	bhi.n	80076ec <tcp_receive+0x28>
 80076de:	4baf      	ldr	r3, [pc, #700]	; (800799c <tcp_receive+0x2d8>)
 80076e0:	49b1      	ldr	r1, [pc, #708]	; (80079a8 <tcp_receive+0x2e4>)
 80076e2:	48b0      	ldr	r0, [pc, #704]	; (80079a4 <tcp_receive+0x2e0>)
 80076e4:	f240 427c 	movw	r2, #1148	; 0x47c
 80076e8:	f003 fb48 	bl	800ad7c <iprintf>
  if (flags & TCP_ACK) {
 80076ec:	4daf      	ldr	r5, [pc, #700]	; (80079ac <tcp_receive+0x2e8>)
 80076ee:	7f2b      	ldrb	r3, [r5, #28]
 80076f0:	06de      	lsls	r6, r3, #27
 80076f2:	d57d      	bpl.n	80077f0 <tcp_receive+0x12c>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80076f4:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 80076f8:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80076fa:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80076fe:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007700:	1af7      	subs	r7, r6, r3
 8007702:	2f00      	cmp	r7, #0
 8007704:	db0a      	blt.n	800771c <tcp_receive+0x58>
 8007706:	429e      	cmp	r6, r3
 8007708:	d102      	bne.n	8007710 <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800770a:	1a86      	subs	r6, r0, r2
 800770c:	2e00      	cmp	r6, #0
 800770e:	db05      	blt.n	800771c <tcp_receive+0x58>
 8007710:	4290      	cmp	r0, r2
 8007712:	d110      	bne.n	8007736 <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007714:	68ee      	ldr	r6, [r5, #12]
 8007716:	89f6      	ldrh	r6, [r6, #14]
 8007718:	428e      	cmp	r6, r1
 800771a:	d90c      	bls.n	8007736 <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800771c:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800771e:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007722:	89f6      	ldrh	r6, [r6, #14]
 8007724:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
 8007728:	b2b7      	uxth	r7, r6
      pcb->snd_wl2 = ackno;
 800772a:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800772e:	45bc      	cmp	ip, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007730:	bf38      	it	cc
 8007732:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007736:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8007738:	1b93      	subs	r3, r2, r6
 800773a:	2b00      	cmp	r3, #0
 800773c:	f300 8148 	bgt.w	80079d0 <tcp_receive+0x30c>
      if (tcplen == 0) {
 8007740:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	f040 8140 	bne.w	80079c8 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007748:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800774c:	6da7      	ldr	r7, [r4, #88]	; 0x58
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800774e:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007750:	443b      	add	r3, r7
 8007752:	428b      	cmp	r3, r1
 8007754:	f040 8138 	bne.w	80079c8 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 8007758:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	f2c0 8133 	blt.w	80079c8 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 8007762:	4296      	cmp	r6, r2
 8007764:	f040 8130 	bne.w	80079c8 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8007768:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800776c:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800776e:	bf1c      	itt	ne
 8007770:	3301      	addne	r3, #1
 8007772:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8007776:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800777a:	2b03      	cmp	r3, #3
 800777c:	d90f      	bls.n	800779e <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800777e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007782:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007784:	4413      	add	r3, r2
 8007786:	b29b      	uxth	r3, r3
 8007788:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800778c:	429a      	cmp	r2, r3
 800778e:	bf88      	it	hi
 8007790:	460b      	movhi	r3, r1
 8007792:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8007796:	4620      	mov	r0, r4
 8007798:	f001 fcfc 	bl	8009194 <tcp_rexmit_fast>
      if (!found_dupack) {
 800779c:	e000      	b.n	80077a0 <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 800779e:	d0fa      	beq.n	8007796 <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80077a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077a2:	b328      	cbz	r0, 80077f0 <tcp_receive+0x12c>
 80077a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077a6:	69aa      	ldr	r2, [r5, #24]
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	da20      	bge.n	80077f0 <tcp_receive+0x12c>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80077ae:	4b80      	ldr	r3, [pc, #512]	; (80079b0 <tcp_receive+0x2ec>)
      m = (s16_t)(m - (pcb->sa >> 3));
 80077b0:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80077b4:	881a      	ldrh	r2, [r3, #0]
 80077b6:	b280      	uxth	r0, r0
 80077b8:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 80077ba:	f3c7 06cf 	ubfx	r6, r7, #3, #16
 80077be:	1b89      	subs	r1, r1, r6
 80077c0:	b20b      	sxth	r3, r1
      if (m < 0) {
 80077c2:	2b00      	cmp	r3, #0
        m = (s16_t) - m;
 80077c4:	bfb8      	it	lt
 80077c6:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 80077c8:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
        m = (s16_t) - m;
 80077cc:	bfbc      	itt	lt
 80077ce:	1980      	addlt	r0, r0, r6
 80077d0:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 80077d2:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      pcb->sa = (s16_t)(pcb->sa + m);
 80077d6:	fa17 f181 	uxtah	r1, r7, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 80077da:	4413      	add	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 80077dc:	b209      	sxth	r1, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 80077de:	b29b      	uxth	r3, r3
 80077e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80077e2:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 80077e6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80077ea:	2300      	movs	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 80077ec:	87a1      	strh	r1, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 80077ee:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80077f0:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80077f2:	6a2b      	ldr	r3, [r5, #32]
 80077f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f000 818c 	beq.w	8007b14 <tcp_receive+0x450>
 80077fc:	7d21      	ldrb	r1, [r4, #20]
 80077fe:	2906      	cmp	r1, #6
 8007800:	f200 8188 	bhi.w	8007b14 <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007804:	1ad7      	subs	r7, r2, r3
 8007806:	2f01      	cmp	r7, #1
 8007808:	f100 8173 	bmi.w	8007af2 <tcp_receive+0x42e>
 800780c:	f1c3 0101 	rsb	r1, r3, #1
 8007810:	1a09      	subs	r1, r1, r0
 8007812:	4411      	add	r1, r2
 8007814:	2900      	cmp	r1, #0
 8007816:	f300 816c 	bgt.w	8007af2 <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 800781a:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800781c:	b936      	cbnz	r6, 800782c <tcp_receive+0x168>
 800781e:	4b5f      	ldr	r3, [pc, #380]	; (800799c <tcp_receive+0x2d8>)
 8007820:	4964      	ldr	r1, [pc, #400]	; (80079b4 <tcp_receive+0x2f0>)
 8007822:	4860      	ldr	r0, [pc, #384]	; (80079a4 <tcp_receive+0x2e0>)
 8007824:	f240 5294 	movw	r2, #1428	; 0x594
 8007828:	f003 faa8 	bl	800ad7c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800782c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007830:	429f      	cmp	r7, r3
 8007832:	d906      	bls.n	8007842 <tcp_receive+0x17e>
 8007834:	4b59      	ldr	r3, [pc, #356]	; (800799c <tcp_receive+0x2d8>)
 8007836:	4960      	ldr	r1, [pc, #384]	; (80079b8 <tcp_receive+0x2f4>)
 8007838:	485a      	ldr	r0, [pc, #360]	; (80079a4 <tcp_receive+0x2e0>)
 800783a:	f240 5295 	movw	r2, #1429	; 0x595
 800783e:	f003 fa9d 	bl	800ad7c <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007842:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007844:	891b      	ldrh	r3, [r3, #8]
      off = (u16_t)off32;
 8007846:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007848:	42bb      	cmp	r3, r7
 800784a:	d206      	bcs.n	800785a <tcp_receive+0x196>
 800784c:	4b53      	ldr	r3, [pc, #332]	; (800799c <tcp_receive+0x2d8>)
 800784e:	495b      	ldr	r1, [pc, #364]	; (80079bc <tcp_receive+0x2f8>)
 8007850:	4854      	ldr	r0, [pc, #336]	; (80079a4 <tcp_receive+0x2e0>)
 8007852:	f240 5297 	movw	r2, #1431	; 0x597
 8007856:	f003 fa91 	bl	800ad7c <iprintf>
      inseg.len -= off;
 800785a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800785c:	1bdb      	subs	r3, r3, r7
 800785e:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007860:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007862:	891b      	ldrh	r3, [r3, #8]
 8007864:	1bdb      	subs	r3, r3, r7
 8007866:	b29b      	uxth	r3, r3
        p->len = 0;
 8007868:	2100      	movs	r1, #0
      while (p->len < off) {
 800786a:	8972      	ldrh	r2, [r6, #10]
 800786c:	42ba      	cmp	r2, r7
 800786e:	f0c0 813a 	bcc.w	8007ae6 <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 8007872:	4639      	mov	r1, r7
 8007874:	4630      	mov	r0, r6
 8007876:	f7fe fb55 	bl	8005f24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800787a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800787c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800787e:	622b      	str	r3, [r5, #32]
 8007880:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007882:	6a29      	ldr	r1, [r5, #32]
 8007884:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007886:	1a8b      	subs	r3, r1, r2
 8007888:	2b00      	cmp	r3, #0
 800788a:	f2c0 813e 	blt.w	8007b0a <tcp_receive+0x446>
 800788e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8007890:	1c4b      	adds	r3, r1, #1
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	1a1b      	subs	r3, r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	f300 8137 	bgt.w	8007b0a <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 800789c:	4291      	cmp	r1, r2
 800789e:	f040 8134 	bne.w	8007b0a <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 80078a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80078a4:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 80078a6:	8998      	ldrh	r0, [r3, #12]
 80078a8:	f7fd fe3c 	bl	8005524 <lwip_htons>
 80078ac:	f010 0003 	ands.w	r0, r0, #3
 80078b0:	bf18      	it	ne
 80078b2:	2001      	movne	r0, #1
        if (tcplen > pcb->rcv_wnd) {
 80078b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80078b6:	4430      	add	r0, r6
 80078b8:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 80078ba:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 80078bc:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 80078be:	d23e      	bcs.n	800793e <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80078c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80078c2:	8998      	ldrh	r0, [r3, #12]
 80078c4:	f7fd fe2e 	bl	8005524 <lwip_htons>
 80078c8:	07c6      	lsls	r6, r0, #31
 80078ca:	d50d      	bpl.n	80078e8 <tcp_receive+0x224>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80078cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80078ce:	899e      	ldrh	r6, [r3, #12]
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7fd fe27 	bl	8005524 <lwip_htons>
 80078d6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80078da:	f7fd fe23 	bl	8005524 <lwip_htons>
 80078de:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 80078e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80078e4:	4306      	orrs	r6, r0
 80078e6:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 80078e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80078ea:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80078ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80078ee:	8998      	ldrh	r0, [r3, #12]
 80078f0:	f7fd fe18 	bl	8005524 <lwip_htons>
 80078f4:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 80078f6:	bf48      	it	mi
 80078f8:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 80078fa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 80078fc:	bf44      	itt	mi
 80078fe:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007902:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 8007904:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8007906:	f7fe fc21 	bl	800614c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800790a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800790c:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800790e:	8998      	ldrh	r0, [r3, #12]
 8007910:	f7fd fe08 	bl	8005524 <lwip_htons>
 8007914:	f010 0003 	ands.w	r0, r0, #3
 8007918:	bf18      	it	ne
 800791a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800791c:	6a2b      	ldr	r3, [r5, #32]
 800791e:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8007920:	4430      	add	r0, r6
 8007922:	b280      	uxth	r0, r0
 8007924:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007926:	4418      	add	r0, r3
 8007928:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800792a:	4413      	add	r3, r2
 800792c:	4298      	cmp	r0, r3
 800792e:	d006      	beq.n	800793e <tcp_receive+0x27a>
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <tcp_receive+0x2d8>)
 8007932:	4923      	ldr	r1, [pc, #140]	; (80079c0 <tcp_receive+0x2fc>)
 8007934:	481b      	ldr	r0, [pc, #108]	; (80079a4 <tcp_receive+0x2e0>)
 8007936:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800793a:	f003 fa1f 	bl	800ad7c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800793e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8007940:	6a2b      	ldr	r3, [r5, #32]
 8007942:	4413      	add	r3, r2
 8007944:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007948:	4293      	cmp	r3, r2
 800794a:	d206      	bcs.n	800795a <tcp_receive+0x296>
 800794c:	4b13      	ldr	r3, [pc, #76]	; (800799c <tcp_receive+0x2d8>)
 800794e:	491d      	ldr	r1, [pc, #116]	; (80079c4 <tcp_receive+0x300>)
 8007950:	4814      	ldr	r0, [pc, #80]	; (80079a4 <tcp_receive+0x2e0>)
 8007952:	f240 6207 	movw	r2, #1543	; 0x607
 8007956:	f003 fa11 	bl	800ad7c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800795a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800795c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800795e:	1a9b      	subs	r3, r3, r2
 8007960:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8007962:	4620      	mov	r0, r4
 8007964:	f7fe fecc 	bl	8006700 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8007968:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800796a:	891a      	ldrh	r2, [r3, #8]
 800796c:	b112      	cbz	r2, 8007974 <tcp_receive+0x2b0>
          recv_data = inseg.p;
 800796e:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007974:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8007976:	8998      	ldrh	r0, [r3, #12]
 8007978:	f7fd fdd4 	bl	8005524 <lwip_htons>
 800797c:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800797e:	bf42      	ittt	mi
 8007980:	7cab      	ldrbmi	r3, [r5, #18]
 8007982:	f043 0320 	orrmi.w	r3, r3, #32
 8007986:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 8007988:	8b63      	ldrh	r3, [r4, #26]
 800798a:	07da      	lsls	r2, r3, #31
 800798c:	f140 80b9 	bpl.w	8007b02 <tcp_receive+0x43e>
 8007990:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	e0b5      	b.n	8007b06 <tcp_receive+0x442>
 800799a:	bf00      	nop
 800799c:	0801a63c 	.word	0x0801a63c
 80079a0:	0801a737 	.word	0x0801a737
 80079a4:	08018c9a 	.word	0x08018c9a
 80079a8:	0801a750 	.word	0x0801a750
 80079ac:	20000210 	.word	0x20000210
 80079b0:	2000e48c 	.word	0x2000e48c
 80079b4:	0801a769 	.word	0x0801a769
 80079b8:	0801a779 	.word	0x0801a779
 80079bc:	0801a788 	.word	0x0801a788
 80079c0:	0801a798 	.word	0x0801a798
 80079c4:	0801a7cf 	.word	0x0801a7cf
        pcb->dupacks = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ce:	e6e7      	b.n	80077a0 <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80079d2:	1a51      	subs	r1, r2, r1
 80079d4:	2900      	cmp	r1, #0
 80079d6:	f300 8082 	bgt.w	8007ade <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 80079da:	8b61      	ldrh	r1, [r4, #26]
 80079dc:	0748      	lsls	r0, r1, #29
 80079de:	d509      	bpl.n	80079f4 <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 80079e0:	f021 0104 	bic.w	r1, r1, #4
 80079e4:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80079e6:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 80079ea:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 80079ee:	2100      	movs	r1, #0
 80079f0:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80079f4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80079f8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 80079fa:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 80079fc:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80079fe:	eb01 01e0 	add.w	r1, r1, r0, asr #3
 8007a02:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8007a06:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8007a10:	d926      	bls.n	8007a60 <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 8007a12:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8007a16:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8007a1a:	428a      	cmp	r2, r1
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007a1c:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8007a1e:	d915      	bls.n	8007a4c <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007a20:	8b62      	ldrh	r2, [r4, #26]
 8007a22:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007a26:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8007a28:	bf14      	ite	ne
 8007a2a:	2001      	movne	r0, #1
 8007a2c:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8007a2e:	fb12 f200 	smulbb	r2, r2, r0
 8007a32:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8007a34:	429a      	cmp	r2, r3
 8007a36:	bf94      	ite	ls
 8007a38:	188b      	addls	r3, r1, r2
 8007a3a:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	d901      	bls.n	8007a46 <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 8007a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007a46:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8007a4a:	e009      	b.n	8007a60 <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8007a4c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8007a50:	4413      	add	r3, r2
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d82d      	bhi.n	8007ab4 <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	d92d      	bls.n	8007ab8 <tcp_receive+0x3f4>
 8007a5c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007a60:	f104 0666 	add.w	r6, r4, #102	; 0x66
 8007a64:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7ff fdcf 	bl	800760c <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007a6e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007a70:	6720      	str	r0, [r4, #112]	; 0x70
 8007a72:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff fdc9 	bl	800760c <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 8007a7a:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007a7c:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8007a7e:	fab2 f382 	clz	r3, r2
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	425b      	negs	r3, r3
 8007a86:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8007a8c:	b908      	cbnz	r0, 8007a92 <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 8007a8e:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007a92:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8007a96:	8aa9      	ldrh	r1, [r5, #20]
 8007a98:	440b      	add	r3, r1
 8007a9a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8007a9e:	8b63      	ldrh	r3, [r4, #26]
 8007aa0:	051f      	lsls	r7, r3, #20
 8007aa2:	f57f ae7d 	bpl.w	80077a0 <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 8007aa6:	b9ba      	cbnz	r2, 8007ad8 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 8007aa8:	b960      	cbnz	r0, 8007ac4 <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 8007aaa:	8b63      	ldrh	r3, [r4, #26]
 8007aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ab0:	8363      	strh	r3, [r4, #26]
 8007ab2:	e675      	b.n	80077a0 <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8007ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007ab8:	1a5b      	subs	r3, r3, r1
 8007aba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007abe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8007ac0:	440b      	add	r3, r1
 8007ac2:	e7bb      	b.n	8007a3c <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007ac4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8007ac6:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007ac8:	6858      	ldr	r0, [r3, #4]
 8007aca:	f7fd fd2e 	bl	800552a <lwip_htonl>
 8007ace:	1a30      	subs	r0, r6, r0
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f73f ae65 	bgt.w	80077a0 <tcp_receive+0xdc>
 8007ad6:	e7e8      	b.n	8007aaa <tcp_receive+0x3e6>
 8007ad8:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8007ada:	68d3      	ldr	r3, [r2, #12]
 8007adc:	e7f4      	b.n	8007ac8 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f001 fbd2 	bl	8009288 <tcp_send_empty_ack>
 8007ae4:	e65c      	b.n	80077a0 <tcp_receive+0xdc>
        off -= p->len;
 8007ae6:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 8007ae8:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 8007aea:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 8007aec:	b2bf      	uxth	r7, r7
        p = p->next;
 8007aee:	6836      	ldr	r6, [r6, #0]
 8007af0:	e6bb      	b.n	800786a <tcp_receive+0x1a6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007af2:	1a9b      	subs	r3, r3, r2
 8007af4:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8007af6:	bfbe      	ittt	lt
 8007af8:	8b63      	ldrhlt	r3, [r4, #26]
 8007afa:	f043 0302 	orrlt.w	r3, r3, #2
 8007afe:	8363      	strhlt	r3, [r4, #26]
 8007b00:	e6bf      	b.n	8007882 <tcp_receive+0x1be>
        tcp_ack(pcb);
 8007b02:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8007b06:	8363      	strh	r3, [r4, #26]
}
 8007b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 8007b0a:	4620      	mov	r0, r4
}
 8007b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 8007b10:	f001 bbba 	b.w	8009288 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007b14:	1a99      	subs	r1, r3, r2
 8007b16:	2900      	cmp	r1, #0
 8007b18:	db05      	blt.n	8007b26 <tcp_receive+0x462>
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	ddf0      	ble.n	8007b08 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 8007b26:	8b63      	ldrh	r3, [r4, #26]
 8007b28:	e734      	b.n	8007994 <tcp_receive+0x2d0>
 8007b2a:	bf00      	nop

08007b2c <tcp_input>:
{
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007b30:	4606      	mov	r6, r0
{
 8007b32:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007b34:	b928      	cbnz	r0, 8007b42 <tcp_input+0x16>
 8007b36:	4ba0      	ldr	r3, [pc, #640]	; (8007db8 <tcp_input+0x28c>)
 8007b38:	49a0      	ldr	r1, [pc, #640]	; (8007dbc <tcp_input+0x290>)
 8007b3a:	48a1      	ldr	r0, [pc, #644]	; (8007dc0 <tcp_input+0x294>)
 8007b3c:	2283      	movs	r2, #131	; 0x83
 8007b3e:	f003 f91d 	bl	800ad7c <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 8007b42:	4da0      	ldr	r5, [pc, #640]	; (8007dc4 <tcp_input+0x298>)
 8007b44:	6873      	ldr	r3, [r6, #4]
 8007b46:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 8007b48:	8973      	ldrh	r3, [r6, #10]
 8007b4a:	2b13      	cmp	r3, #19
 8007b4c:	f240 80a2 	bls.w	8007c94 <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007b50:	4f9d      	ldr	r7, [pc, #628]	; (8007dc8 <tcp_input+0x29c>)
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6978      	ldr	r0, [r7, #20]
 8007b56:	f7fd f8f4 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 8007b5a:	46b8      	mov	r8, r7
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	f040 8098 	bne.w	8007c94 <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007b6a:	2be0      	cmp	r3, #224	; 0xe0
 8007b6c:	f000 8092 	beq.w	8007c94 <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007b70:	68eb      	ldr	r3, [r5, #12]
 8007b72:	8998      	ldrh	r0, [r3, #12]
 8007b74:	f7fd fcd6 	bl	8005524 <lwip_htons>
 8007b78:	0a81      	lsrs	r1, r0, #10
 8007b7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007b7e:	2913      	cmp	r1, #19
 8007b80:	f240 8088 	bls.w	8007c94 <tcp_input+0x168>
 8007b84:	8933      	ldrh	r3, [r6, #8]
 8007b86:	428b      	cmp	r3, r1
 8007b88:	b28a      	uxth	r2, r1
 8007b8a:	f0c0 8083 	bcc.w	8007c94 <tcp_input+0x168>
  if (p->len >= hdrlen_bytes) {
 8007b8e:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 8007b90:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007b92:	f1a2 0314 	sub.w	r3, r2, #20
 8007b96:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8007b98:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007b9a:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 8007b9c:	d33c      	bcc.n	8007c18 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007b9e:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 8007ba0:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007ba2:	f7fe f9bf 	bl	8005f24 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007ba6:	68ec      	ldr	r4, [r5, #12]
 8007ba8:	8820      	ldrh	r0, [r4, #0]
 8007baa:	f7fd fcbb 	bl	8005524 <lwip_htons>
 8007bae:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007bb0:	68ec      	ldr	r4, [r5, #12]
 8007bb2:	8860      	ldrh	r0, [r4, #2]
 8007bb4:	f7fd fcb6 	bl	8005524 <lwip_htons>
 8007bb8:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007bba:	68ec      	ldr	r4, [r5, #12]
 8007bbc:	6860      	ldr	r0, [r4, #4]
 8007bbe:	f7fd fcb4 	bl	800552a <lwip_htonl>
 8007bc2:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007bc4:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007bc6:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007bc8:	68a0      	ldr	r0, [r4, #8]
 8007bca:	f7fd fcae 	bl	800552a <lwip_htonl>
 8007bce:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007bd0:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007bd2:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007bd4:	89e0      	ldrh	r0, [r4, #14]
 8007bd6:	f7fd fca5 	bl	8005524 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007bda:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007bdc:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007bde:	8998      	ldrh	r0, [r3, #12]
 8007be0:	f7fd fca0 	bl	8005524 <lwip_htons>
 8007be4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 8007be8:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007bea:	0783      	lsls	r3, r0, #30
  tcplen = p->tot_len;
 8007bec:	8932      	ldrh	r2, [r6, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007bee:	d14c      	bne.n	8007c8a <tcp_input+0x15e>
  tcplen = p->tot_len;
 8007bf0:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bf2:	4b76      	ldr	r3, [pc, #472]	; (8007dcc <tcp_input+0x2a0>)
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007bf4:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007df4 <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bf8:	681c      	ldr	r4, [r3, #0]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007bfa:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8007dc0 <tcp_input+0x294>
 8007bfe:	4699      	mov	r9, r3
 8007c00:	4b6d      	ldr	r3, [pc, #436]	; (8007db8 <tcp_input+0x28c>)
  prev = NULL;
 8007c02:	2700      	movs	r7, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	d14b      	bne.n	8007ca0 <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c08:	4b71      	ldr	r3, [pc, #452]	; (8007dd0 <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c0a:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8007db8 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c0e:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c10:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8007df8 <tcp_input+0x2cc>
 8007c14:	4f6a      	ldr	r7, [pc, #424]	; (8007dc0 <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c16:	e145      	b.n	8007ea4 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007c18:	6833      	ldr	r3, [r6, #0]
 8007c1a:	b92b      	cbnz	r3, 8007c28 <tcp_input+0xfc>
 8007c1c:	4b66      	ldr	r3, [pc, #408]	; (8007db8 <tcp_input+0x28c>)
 8007c1e:	496d      	ldr	r1, [pc, #436]	; (8007dd4 <tcp_input+0x2a8>)
 8007c20:	4867      	ldr	r0, [pc, #412]	; (8007dc0 <tcp_input+0x294>)
 8007c22:	22c2      	movs	r2, #194	; 0xc2
 8007c24:	f003 f8aa 	bl	800ad7c <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 8007c28:	2114      	movs	r1, #20
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7fe f97a 	bl	8005f24 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 8007c30:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007c32:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    tcphdr_opt1len = p->len;
 8007c36:	812c      	strh	r4, [r5, #8]
    pbuf_remove_header(p, tcphdr_opt1len);
 8007c38:	4621      	mov	r1, r4
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f7fe f972 	bl	8005f24 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8007c40:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007c42:	eba9 0704 	sub.w	r7, r9, r4
    if (opt2len > p->next->len) {
 8007c46:	8943      	ldrh	r3, [r0, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007c48:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 8007c4a:	42bb      	cmp	r3, r7
 8007c4c:	d322      	bcc.n	8007c94 <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007c4e:	6843      	ldr	r3, [r0, #4]
 8007c50:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 8007c52:	4639      	mov	r1, r7
 8007c54:	f7fe f966 	bl	8005f24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007c58:	8933      	ldrh	r3, [r6, #8]
 8007c5a:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007c5c:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007c5e:	eba4 0409 	sub.w	r4, r4, r9
 8007c62:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007c64:	b12b      	cbz	r3, 8007c72 <tcp_input+0x146>
 8007c66:	4b54      	ldr	r3, [pc, #336]	; (8007db8 <tcp_input+0x28c>)
 8007c68:	495b      	ldr	r1, [pc, #364]	; (8007dd8 <tcp_input+0x2ac>)
 8007c6a:	4855      	ldr	r0, [pc, #340]	; (8007dc0 <tcp_input+0x294>)
 8007c6c:	22df      	movs	r2, #223	; 0xdf
 8007c6e:	f003 f885 	bl	800ad7c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007c72:	6833      	ldr	r3, [r6, #0]
 8007c74:	8932      	ldrh	r2, [r6, #8]
 8007c76:	891b      	ldrh	r3, [r3, #8]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d094      	beq.n	8007ba6 <tcp_input+0x7a>
 8007c7c:	4b4e      	ldr	r3, [pc, #312]	; (8007db8 <tcp_input+0x28c>)
 8007c7e:	4957      	ldr	r1, [pc, #348]	; (8007ddc <tcp_input+0x2b0>)
 8007c80:	484f      	ldr	r0, [pc, #316]	; (8007dc0 <tcp_input+0x294>)
 8007c82:	22e0      	movs	r2, #224	; 0xe0
 8007c84:	f003 f87a 	bl	800ad7c <iprintf>
 8007c88:	e78d      	b.n	8007ba6 <tcp_input+0x7a>
    tcplen++;
 8007c8a:	1c53      	adds	r3, r2, #1
 8007c8c:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 8007c8e:	429a      	cmp	r2, r3
    tcplen++;
 8007c90:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 8007c92:	d9ae      	bls.n	8007bf2 <tcp_input+0xc6>
  pbuf_free(p);
 8007c94:	4630      	mov	r0, r6
}
 8007c96:	b007      	add	sp, #28
 8007c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8007c9c:	f7fe b976 	b.w	8005f8c <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007ca0:	7d22      	ldrb	r2, [r4, #20]
 8007ca2:	b92a      	cbnz	r2, 8007cb0 <tcp_input+0x184>
 8007ca4:	22fb      	movs	r2, #251	; 0xfb
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	4650      	mov	r0, sl
 8007caa:	f003 f867 	bl	800ad7c <iprintf>
 8007cae:	4b42      	ldr	r3, [pc, #264]	; (8007db8 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007cb0:	7d22      	ldrb	r2, [r4, #20]
 8007cb2:	2a0a      	cmp	r2, #10
 8007cb4:	d105      	bne.n	8007cc2 <tcp_input+0x196>
 8007cb6:	494a      	ldr	r1, [pc, #296]	; (8007de0 <tcp_input+0x2b4>)
 8007cb8:	22fc      	movs	r2, #252	; 0xfc
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f003 f85e 	bl	800ad7c <iprintf>
 8007cc0:	4b3d      	ldr	r3, [pc, #244]	; (8007db8 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007cc2:	7d22      	ldrb	r2, [r4, #20]
 8007cc4:	2a01      	cmp	r2, #1
 8007cc6:	d105      	bne.n	8007cd4 <tcp_input+0x1a8>
 8007cc8:	4946      	ldr	r1, [pc, #280]	; (8007de4 <tcp_input+0x2b8>)
 8007cca:	22fd      	movs	r2, #253	; 0xfd
 8007ccc:	4650      	mov	r0, sl
 8007cce:	f003 f855 	bl	800ad7c <iprintf>
 8007cd2:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007cd4:	7a20      	ldrb	r0, [r4, #8]
 8007cd6:	68e1      	ldr	r1, [r4, #12]
 8007cd8:	b138      	cbz	r0, 8007cea <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007cda:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007cde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007ce2:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ce4:	b2d2      	uxtb	r2, r2
 8007ce6:	4290      	cmp	r0, r2
 8007ce8:	d162      	bne.n	8007db0 <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 8007cea:	68ea      	ldr	r2, [r5, #12]
 8007cec:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8007cf0:	8810      	ldrh	r0, [r2, #0]
 8007cf2:	4584      	cmp	ip, r0
 8007cf4:	d15c      	bne.n	8007db0 <tcp_input+0x284>
 8007cf6:	8ae0      	ldrh	r0, [r4, #22]
 8007cf8:	8852      	ldrh	r2, [r2, #2]
 8007cfa:	4290      	cmp	r0, r2
 8007cfc:	d158      	bne.n	8007db0 <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 8007cfe:	6860      	ldr	r0, [r4, #4]
 8007d00:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007d04:	4290      	cmp	r0, r2
 8007d06:	d153      	bne.n	8007db0 <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007d08:	6820      	ldr	r0, [r4, #0]
 8007d0a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007d0e:	4290      	cmp	r0, r2
 8007d10:	d14e      	bne.n	8007db0 <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007d12:	42a1      	cmp	r1, r4
 8007d14:	f040 83f1 	bne.w	80084fa <tcp_input+0x9ce>
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <tcp_input+0x28c>)
 8007d1a:	4933      	ldr	r1, [pc, #204]	; (8007de8 <tcp_input+0x2bc>)
 8007d1c:	4828      	ldr	r0, [pc, #160]	; (8007dc0 <tcp_input+0x294>)
 8007d1e:	f240 120d 	movw	r2, #269	; 0x10d
 8007d22:	f003 f82b 	bl	800ad7c <iprintf>
      if (prev != NULL) {
 8007d26:	b137      	cbz	r7, 8007d36 <tcp_input+0x20a>
        prev->next = pcb->next;
 8007d28:	68e3      	ldr	r3, [r4, #12]
 8007d2a:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 8007d2c:	f8d9 3000 	ldr.w	r3, [r9]
 8007d30:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007d32:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d106      	bne.n	8007d4a <tcp_input+0x21e>
 8007d3c:	4b1e      	ldr	r3, [pc, #120]	; (8007db8 <tcp_input+0x28c>)
 8007d3e:	492b      	ldr	r1, [pc, #172]	; (8007dec <tcp_input+0x2c0>)
 8007d40:	481f      	ldr	r0, [pc, #124]	; (8007dc0 <tcp_input+0x294>)
 8007d42:	f240 1215 	movw	r2, #277	; 0x115
 8007d46:	f003 f819 	bl	800ad7c <iprintf>
    inseg.len = p->tot_len;
 8007d4a:	8932      	ldrh	r2, [r6, #8]
 8007d4c:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 8007d4e:	68ea      	ldr	r2, [r5, #12]
    inseg.p = p;
 8007d50:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.next = NULL;
 8007d52:	2300      	movs	r3, #0
    recv_data = NULL;
 8007d54:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    inseg.next = NULL;
 8007d58:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 8007d5a:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 8007d5c:	82ab      	strh	r3, [r5, #20]
    if (flags & TCP_PSH) {
 8007d5e:	7f2b      	ldrb	r3, [r5, #28]
 8007d60:	071b      	lsls	r3, r3, #28
 8007d62:	d503      	bpl.n	8007d6c <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 8007d64:	7b73      	ldrb	r3, [r6, #13]
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 8007d6c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007d6e:	4e20      	ldr	r6, [pc, #128]	; (8007df0 <tcp_input+0x2c4>)
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8131 	beq.w	8007fd8 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff f958 	bl	800702c <tcp_process_refused_data>
 8007d7c:	300d      	adds	r0, #13
 8007d7e:	d007      	beq.n	8007d90 <tcp_input+0x264>
 8007d80:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 8128 	beq.w	8007fd8 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007d88:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8124 	beq.w	8007fd8 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8007d90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d92:	b913      	cbnz	r3, 8007d9a <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 8007d94:	4620      	mov	r0, r4
 8007d96:	f001 fa77 	bl	8009288 <tcp_send_empty_ack>
    if (inseg.p != NULL) {
 8007d9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 8007d9c:	2400      	movs	r4, #0
 8007d9e:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 8007da0:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 8007da2:	b110      	cbz	r0, 8007daa <tcp_input+0x27e>
      pbuf_free(inseg.p);
 8007da4:	f7fe f8f2 	bl	8005f8c <pbuf_free>
      inseg.p = NULL;
 8007da8:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8007daa:	b007      	add	sp, #28
 8007dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007db0:	4627      	mov	r7, r4
 8007db2:	460c      	mov	r4, r1
 8007db4:	e726      	b.n	8007c04 <tcp_input+0xd8>
 8007db6:	bf00      	nop
 8007db8:	0801a63c 	.word	0x0801a63c
 8007dbc:	0801a7ee 	.word	0x0801a7ee
 8007dc0:	08018c9a 	.word	0x08018c9a
 8007dc4:	20000210 	.word	0x20000210
 8007dc8:	200080f4 	.word	0x200080f4
 8007dcc:	2000e488 	.word	0x2000e488
 8007dd0:	2000e498 	.word	0x2000e498
 8007dd4:	0801a806 	.word	0x0801a806
 8007dd8:	0801a816 	.word	0x0801a816
 8007ddc:	0801a822 	.word	0x0801a822
 8007de0:	0801a868 	.word	0x0801a868
 8007de4:	0801a892 	.word	0x0801a892
 8007de8:	0801a8b9 	.word	0x0801a8b9
 8007dec:	0801a8e4 	.word	0x0801a8e4
 8007df0:	2000e49c 	.word	0x2000e49c
 8007df4:	0801a841 	.word	0x0801a841
 8007df8:	0801a90e 	.word	0x0801a90e
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007dfc:	7d23      	ldrb	r3, [r4, #20]
 8007dfe:	2b0a      	cmp	r3, #10
 8007e00:	d006      	beq.n	8007e10 <tcp_input+0x2e4>
 8007e02:	465b      	mov	r3, fp
 8007e04:	f240 121f 	movw	r2, #287	; 0x11f
 8007e08:	4651      	mov	r1, sl
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f002 ffb6 	bl	800ad7c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e10:	7a22      	ldrb	r2, [r4, #8]
 8007e12:	b13a      	cbz	r2, 8007e24 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e1c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d13e      	bne.n	8007ea2 <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 8007e24:	68eb      	ldr	r3, [r5, #12]
 8007e26:	8b20      	ldrh	r0, [r4, #24]
 8007e28:	881a      	ldrh	r2, [r3, #0]
 8007e2a:	4290      	cmp	r0, r2
 8007e2c:	d139      	bne.n	8007ea2 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 8007e2e:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8007e30:	8ae1      	ldrh	r1, [r4, #22]
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d135      	bne.n	8007ea2 <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 8007e36:	6862      	ldr	r2, [r4, #4]
 8007e38:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d130      	bne.n	8007ea2 <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d12b      	bne.n	8007ea2 <tcp_input+0x376>
  if (flags & TCP_RST) {
 8007e4a:	7f2b      	ldrb	r3, [r5, #28]
 8007e4c:	075f      	lsls	r7, r3, #29
 8007e4e:	f53f af21 	bmi.w	8007c94 <tcp_input+0x168>
  if (flags & TCP_SYN) {
 8007e52:	079a      	lsls	r2, r3, #30
 8007e54:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 8007e56:	d514      	bpl.n	8007e82 <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007e58:	6a2a      	ldr	r2, [r5, #32]
 8007e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	d415      	bmi.n	8007e8c <tcp_input+0x360>
 8007e60:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 8007e64:	eba3 030c 	sub.w	r3, r3, ip
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	dc0f      	bgt.n	8007e8c <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e6c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8007e70:	4b89      	ldr	r3, [pc, #548]	; (8008098 <tcp_input+0x56c>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	69a9      	ldr	r1, [r5, #24]
 8007e76:	3304      	adds	r3, #4
 8007e78:	443a      	add	r2, r7
 8007e7a:	4620      	mov	r0, r4
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007e7c:	f001 f9be 	bl	80091fc <tcp_rst>
 8007e80:	e708      	b.n	8007c94 <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 8007e82:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 8007e84:	bf42      	ittt	mi
 8007e86:	4b85      	ldrmi	r3, [pc, #532]	; (800809c <tcp_input+0x570>)
 8007e88:	681b      	ldrmi	r3, [r3, #0]
 8007e8a:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	f43f af01 	beq.w	8007c94 <tcp_input+0x168>
    tcp_ack_now(pcb);
 8007e92:	8b63      	ldrh	r3, [r4, #26]
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f001 fa26 	bl	80092ec <tcp_output>
        pbuf_free(p);
 8007ea0:	e6f8      	b.n	8007c94 <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ea2:	68e4      	ldr	r4, [r4, #12]
 8007ea4:	2c00      	cmp	r4, #0
 8007ea6:	d1a9      	bne.n	8007dfc <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007ea8:	4a7d      	ldr	r2, [pc, #500]	; (80080a0 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007eaa:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007eae:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 8007eb0:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007eb2:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007eb6:	4607      	mov	r7, r0
 8007eb8:	b98f      	cbnz	r7, 8007ede <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007eba:	8988      	ldrh	r0, [r1, #12]
 8007ebc:	f7fd fb32 	bl	8005524 <lwip_htons>
 8007ec0:	0742      	lsls	r2, r0, #29
 8007ec2:	f53f aee7 	bmi.w	8007c94 <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ec6:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ec8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 8007eca:	8818      	ldrh	r0, [r3, #0]
 8007ecc:	6a2a      	ldr	r2, [r5, #32]
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	4b70      	ldr	r3, [pc, #448]	; (8008098 <tcp_input+0x56c>)
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	440a      	add	r2, r1
 8007eda:	3304      	adds	r3, #4
 8007edc:	e30a      	b.n	80084f4 <tcp_input+0x9c8>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007ede:	f897 c008 	ldrb.w	ip, [r7, #8]
 8007ee2:	f1bc 0f00 	cmp.w	ip, #0
 8007ee6:	d005      	beq.n	8007ef4 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007ee8:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 8007eec:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	459c      	cmp	ip, r3
 8007ef2:	d10b      	bne.n	8007f0c <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 8007ef4:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8007ef8:	8afb      	ldrh	r3, [r7, #22]
 8007efa:	4563      	cmp	r3, ip
 8007efc:	d106      	bne.n	8007f0c <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	4553      	cmp	r3, sl
 8007f02:	f000 82e1 	beq.w	80084c8 <tcp_input+0x99c>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 82de 	beq.w	80084c8 <tcp_input+0x99c>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007f0c:	463c      	mov	r4, r7
 8007f0e:	68ff      	ldr	r7, [r7, #12]
 8007f10:	e7d2      	b.n	8007eb8 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 8007f12:	079a      	lsls	r2, r3, #30
 8007f14:	f57f aebe 	bpl.w	8007c94 <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 8007f18:	7d78      	ldrb	r0, [r7, #21]
 8007f1a:	f7ff f9f3 	bl	8007304 <tcp_alloc>
    if (npcb == NULL) {
 8007f1e:	4604      	mov	r4, r0
 8007f20:	b948      	cbnz	r0, 8007f36 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f43f aeb5 	beq.w	8007c94 <tcp_input+0x168>
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	6938      	ldr	r0, [r7, #16]
 8007f32:	4798      	blx	r3
 8007f34:	e6ae      	b.n	8007c94 <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007f36:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8007f3a:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007f3c:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007f3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007f42:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8007f48:	7813      	ldrb	r3, [r2, #0]
 8007f4a:	7852      	ldrb	r2, [r2, #1]
 8007f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007f50:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8007f52:	2303      	movs	r3, #3
 8007f54:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8007f56:	6a2b      	ldr	r3, [r5, #32]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007f5c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007f5e:	f7ff fa6f 	bl	8007440 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007f62:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 8007f64:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007f6a:	693b      	ldr	r3, [r7, #16]
    npcb->snd_nxt = iss;
 8007f6c:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 8007f6e:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007f70:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 8007f72:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8007f74:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007f76:	7a7b      	ldrb	r3, [r7, #9]
 8007f78:	f003 030c 	and.w	r3, r3, #12
 8007f7c:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007f7e:	7a3b      	ldrb	r3, [r7, #8]
 8007f80:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8007f82:	f8d9 3000 	ldr.w	r3, [r9]
 8007f86:	60e3      	str	r3, [r4, #12]
 8007f88:	f8c9 4000 	str.w	r4, [r9]
 8007f8c:	f001 fc84 	bl	8009898 <tcp_timer_needed>
 8007f90:	4b44      	ldr	r3, [pc, #272]	; (80080a4 <tcp_input+0x578>)
 8007f92:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 8007f94:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 8007f96:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007f98:	f7ff fac2 	bl	8007520 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007f9c:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007f9e:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8007fa0:	89db      	ldrh	r3, [r3, #14]
 8007fa2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007fa6:	1d22      	adds	r2, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007fa8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007fac:	4610      	mov	r0, r2
 8007fae:	9205      	str	r2, [sp, #20]
 8007fb0:	f7fc fd4a 	bl	8004a48 <ip4_route>
 8007fb4:	9a05      	ldr	r2, [sp, #20]
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f7ff fa5b 	bl	8007474 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007fbe:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007fc0:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 ff9c 	bl	8008f00 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f43f af66 	beq.w	8007e9a <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 8007fce:	4651      	mov	r1, sl
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f7ff f8c3 	bl	800715c <tcp_abandon>
      return;
 8007fd6:	e65d      	b.n	8007c94 <tcp_input+0x168>
  if (flags & TCP_RST) {
 8007fd8:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 8007fda:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 8007fdc:	0753      	lsls	r3, r2, #29
 8007fde:	d537      	bpl.n	8008050 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 8007fe0:	7d21      	ldrb	r1, [r4, #20]
 8007fe2:	2902      	cmp	r1, #2
 8007fe4:	d11e      	bne.n	8008024 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 8007fe6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d107      	bne.n	8007ffe <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 8007fee:	7cab      	ldrb	r3, [r5, #18]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007ff6:	8b63      	ldrh	r3, [r4, #26]
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 8007ffc:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8007ffe:	7cab      	ldrb	r3, [r5, #18]
 8008000:	0718      	lsls	r0, r3, #28
 8008002:	f140 8200 	bpl.w	8008406 <tcp_input+0x8da>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008006:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800800a:	b11b      	cbz	r3, 8008014 <tcp_input+0x4e8>
 800800c:	6920      	ldr	r0, [r4, #16]
 800800e:	f06f 010d 	mvn.w	r1, #13
 8008012:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008014:	4824      	ldr	r0, [pc, #144]	; (80080a8 <tcp_input+0x57c>)
 8008016:	4621      	mov	r1, r4
 8008018:	f7fe feb8 	bl	8006d8c <tcp_pcb_remove>
        tcp_free(pcb);
 800801c:	4620      	mov	r0, r4
 800801e:	f7fe fa97 	bl	8006550 <tcp_free>
 8008022:	e6ba      	b.n	8007d9a <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 8008024:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008026:	6a2b      	ldr	r3, [r5, #32]
 8008028:	429a      	cmp	r2, r3
 800802a:	d007      	beq.n	800803c <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	d4e6      	bmi.n	8007ffe <tcp_input+0x4d2>
 8008030:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008032:	1a9b      	subs	r3, r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	dce2      	bgt.n	8007ffe <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8008038:	8b63      	ldrh	r3, [r4, #26]
 800803a:	e010      	b.n	800805e <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800803c:	2900      	cmp	r1, #0
 800803e:	d1d6      	bne.n	8007fee <tcp_input+0x4c2>
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <tcp_input+0x580>)
 8008042:	491b      	ldr	r1, [pc, #108]	; (80080b0 <tcp_input+0x584>)
 8008044:	481b      	ldr	r0, [pc, #108]	; (80080b4 <tcp_input+0x588>)
 8008046:	f44f 724e 	mov.w	r2, #824	; 0x338
 800804a:	f002 fe97 	bl	800ad7c <iprintf>
 800804e:	e7ce      	b.n	8007fee <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008050:	0797      	lsls	r7, r2, #30
 8008052:	8b63      	ldrh	r3, [r4, #26]
 8008054:	d506      	bpl.n	8008064 <tcp_input+0x538>
 8008056:	7d22      	ldrb	r2, [r4, #20]
 8008058:	3a02      	subs	r2, #2
 800805a:	2a01      	cmp	r2, #1
 800805c:	d902      	bls.n	8008064 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800805e:	f043 0302 	orr.w	r3, r3, #2
 8008062:	e7cb      	b.n	8007ffc <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008064:	06d8      	lsls	r0, r3, #27
    pcb->tmr = tcp_ticks;
 8008066:	bf5e      	ittt	pl
 8008068:	4b0c      	ldrpl	r3, [pc, #48]	; (800809c <tcp_input+0x570>)
 800806a:	681b      	ldrpl	r3, [r3, #0]
 800806c:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8008074:	4620      	mov	r0, r4
 8008076:	f7ff fa53 	bl	8007520 <tcp_parseopt>
  switch (pcb->state) {
 800807a:	7d23      	ldrb	r3, [r4, #20]
 800807c:	3b02      	subs	r3, #2
 800807e:	2b07      	cmp	r3, #7
 8008080:	d8bd      	bhi.n	8007ffe <tcp_input+0x4d2>
 8008082:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008086:	0019      	.short	0x0019
 8008088:	011400a7 	.word	0x011400a7
 800808c:	01610119 	.word	0x01610119
 8008090:	017a0114 	.word	0x017a0114
 8008094:	01ab      	.short	0x01ab
 8008096:	bf00      	nop
 8008098:	20008104 	.word	0x20008104
 800809c:	2000e48c 	.word	0x2000e48c
 80080a0:	2000e490 	.word	0x2000e490
 80080a4:	2000e484 	.word	0x2000e484
 80080a8:	2000e488 	.word	0x2000e488
 80080ac:	0801a63c 	.word	0x0801a63c
 80080b0:	0801a93b 	.word	0x0801a93b
 80080b4:	08018c9a 	.word	0x08018c9a
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80080b8:	7f2b      	ldrb	r3, [r5, #28]
 80080ba:	f003 0212 	and.w	r2, r3, #18
 80080be:	2a12      	cmp	r2, #18
 80080c0:	d16b      	bne.n	800819a <tcp_input+0x66e>
          && (ackno == pcb->lastack + 1)) {
 80080c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80080c4:	69a9      	ldr	r1, [r5, #24]
 80080c6:	3201      	adds	r2, #1
 80080c8:	428a      	cmp	r2, r1
 80080ca:	d166      	bne.n	800819a <tcp_input+0x66e>
        pcb->rcv_nxt = seqno + 1;
 80080cc:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 80080ce:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 80080d0:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 80080d2:	68ea      	ldr	r2, [r5, #12]
        pcb->rcv_nxt = seqno + 1;
 80080d4:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80080d6:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80080d8:	3b01      	subs	r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 80080da:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80080dc:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80080de:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 80080e0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080e4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80080e8:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 80080ea:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80080ec:	4610      	mov	r0, r2
 80080ee:	8e67      	ldrh	r7, [r4, #50]	; 0x32
 80080f0:	9205      	str	r2, [sp, #20]
 80080f2:	f7fc fca9 	bl	8004a48 <ip4_route>
 80080f6:	9a05      	ldr	r2, [sp, #20]
 80080f8:	4601      	mov	r1, r0
 80080fa:	4638      	mov	r0, r7
 80080fc:	f7ff f9ba 	bl	8007474 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008100:	f241 131c 	movw	r3, #4380	; 0x111c
 8008104:	0042      	lsls	r2, r0, #1
 8008106:	429a      	cmp	r2, r3
 8008108:	4617      	mov	r7, r2
 800810a:	bf38      	it	cc
 800810c:	461f      	movcc	r7, r3
 800810e:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008112:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008114:	ea4f 0180 	mov.w	r1, r0, lsl #2
 8008118:	d933      	bls.n	8008182 <tcp_input+0x656>
 800811a:	b28b      	uxth	r3, r1
 800811c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008120:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8008124:	b933      	cbnz	r3, 8008134 <tcp_input+0x608>
 8008126:	4ba4      	ldr	r3, [pc, #656]	; (80083b8 <tcp_input+0x88c>)
 8008128:	49a4      	ldr	r1, [pc, #656]	; (80083bc <tcp_input+0x890>)
 800812a:	48a5      	ldr	r0, [pc, #660]	; (80083c0 <tcp_input+0x894>)
 800812c:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008130:	f002 fe24 	bl	800ad7c <iprintf>
        --pcb->snd_queuelen;
 8008134:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8008138:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800813a:	3b01      	subs	r3, #1
 800813c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 8008140:	bb1f      	cbnz	r7, 800818a <tcp_input+0x65e>
          rseg = pcb->unsent;
 8008142:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008144:	b937      	cbnz	r7, 8008154 <tcp_input+0x628>
 8008146:	4b9c      	ldr	r3, [pc, #624]	; (80083b8 <tcp_input+0x88c>)
 8008148:	499e      	ldr	r1, [pc, #632]	; (80083c4 <tcp_input+0x898>)
 800814a:	489d      	ldr	r0, [pc, #628]	; (80083c0 <tcp_input+0x894>)
 800814c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008150:	f002 fe14 	bl	800ad7c <iprintf>
          pcb->unsent = rseg->next;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 8008158:	4638      	mov	r0, r7
 800815a:	f7fe fb45 	bl	80067e8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800815e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008160:	b9b3      	cbnz	r3, 8008190 <tcp_input+0x664>
          pcb->rtime = -1;
 8008162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008166:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008168:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800816c:	2b00      	cmp	r3, #0
 800816e:	f43f af63 	beq.w	8008038 <tcp_input+0x50c>
 8008172:	6920      	ldr	r0, [r4, #16]
 8008174:	2200      	movs	r2, #0
 8008176:	4621      	mov	r1, r4
 8008178:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800817a:	300d      	adds	r0, #13
 800817c:	f47f af5c 	bne.w	8008038 <tcp_input+0x50c>
 8008180:	e60b      	b.n	8007d9a <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008182:	429a      	cmp	r2, r3
 8008184:	bf88      	it	hi
 8008186:	b293      	uxthhi	r3, r2
 8008188:	e7c8      	b.n	800811c <tcp_input+0x5f0>
          pcb->unacked = rseg->next;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6723      	str	r3, [r4, #112]	; 0x70
 800818e:	e7e3      	b.n	8008158 <tcp_input+0x62c>
          pcb->rtime = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8008194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008198:	e7e6      	b.n	8008168 <tcp_input+0x63c>
      else if (flags & TCP_ACK) {
 800819a:	06d9      	lsls	r1, r3, #27
 800819c:	f57f af2f 	bpl.w	8007ffe <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081a0:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081a2:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 80081a4:	8818      	ldrh	r0, [r3, #0]
 80081a6:	6a2a      	ldr	r2, [r5, #32]
 80081a8:	9002      	str	r0, [sp, #8]
 80081aa:	885b      	ldrh	r3, [r3, #2]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	4b86      	ldr	r3, [pc, #536]	; (80083c8 <tcp_input+0x89c>)
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	440a      	add	r2, r1
 80081b4:	3304      	adds	r3, #4
 80081b6:	69a9      	ldr	r1, [r5, #24]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f001 f81f 	bl	80091fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80081be:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80081c2:	2b05      	cmp	r3, #5
 80081c4:	f63f af1b 	bhi.w	8007ffe <tcp_input+0x4d2>
          pcb->rtime = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 fa53 	bl	8009678 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 80081d2:	e714      	b.n	8007ffe <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 80081d4:	7f2b      	ldrb	r3, [r5, #28]
 80081d6:	06da      	lsls	r2, r3, #27
 80081d8:	d55c      	bpl.n	8008294 <tcp_input+0x768>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80081da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80081dc:	69a9      	ldr	r1, [r5, #24]
 80081de:	43db      	mvns	r3, r3
 80081e0:	42cb      	cmn	r3, r1
 80081e2:	d448      	bmi.n	8008276 <tcp_input+0x74a>
 80081e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80081e6:	1acb      	subs	r3, r1, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc44      	bgt.n	8008276 <tcp_input+0x74a>
          pcb->state = ESTABLISHED;
 80081ec:	2304      	movs	r3, #4
 80081ee:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 80081f0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80081f2:	b91b      	cbnz	r3, 80081fc <tcp_input+0x6d0>
            tcp_abort(pcb);
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7ff f82f 	bl	8007258 <tcp_abort>
            goto aborted;
 80081fa:	e5ce      	b.n	8007d9a <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	b933      	cbnz	r3, 800820e <tcp_input+0x6e2>
 8008200:	4b6d      	ldr	r3, [pc, #436]	; (80083b8 <tcp_input+0x88c>)
 8008202:	4972      	ldr	r1, [pc, #456]	; (80083cc <tcp_input+0x8a0>)
 8008204:	486e      	ldr	r0, [pc, #440]	; (80083c0 <tcp_input+0x894>)
 8008206:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800820a:	f002 fdb7 	bl	800ad7c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800820e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0ee      	beq.n	80081f4 <tcp_input+0x6c8>
 8008216:	6920      	ldr	r0, [r4, #16]
 8008218:	2200      	movs	r2, #0
 800821a:	4621      	mov	r1, r4
 800821c:	4798      	blx	r3
          if (err != ERR_OK) {
 800821e:	b118      	cbz	r0, 8008228 <tcp_input+0x6fc>
            if (err != ERR_ABRT) {
 8008220:	300d      	adds	r0, #13
 8008222:	f43f adba 	beq.w	8007d9a <tcp_input+0x26e>
 8008226:	e7e5      	b.n	80081f4 <tcp_input+0x6c8>
          tcp_receive(pcb);
 8008228:	4620      	mov	r0, r4
 800822a:	f7ff fa4b 	bl	80076c4 <tcp_receive>
          if (recv_acked != 0) {
 800822e:	4a68      	ldr	r2, [pc, #416]	; (80083d0 <tcp_input+0x8a4>)
 8008230:	8a93      	ldrh	r3, [r2, #20]
 8008232:	b10b      	cbz	r3, 8008238 <tcp_input+0x70c>
            recv_acked--;
 8008234:	3b01      	subs	r3, #1
 8008236:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008238:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800823a:	f241 131c 	movw	r3, #4380	; 0x111c
 800823e:	0041      	lsls	r1, r0, #1
 8008240:	4299      	cmp	r1, r3
 8008242:	468c      	mov	ip, r1
 8008244:	bf38      	it	cc
 8008246:	469c      	movcc	ip, r3
 8008248:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800824c:	ea4f 0780 	mov.w	r7, r0, lsl #2
 8008250:	d90d      	bls.n	800826e <tcp_input+0x742>
 8008252:	b2bb      	uxth	r3, r7
 8008254:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8008258:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800825a:	0698      	lsls	r0, r3, #26
 800825c:	f57f aecf 	bpl.w	8007ffe <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8008260:	8b63      	ldrh	r3, [r4, #26]
 8008262:	f043 0302 	orr.w	r3, r3, #2
 8008266:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 8008268:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800826a:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800826c:	e6c7      	b.n	8007ffe <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800826e:	4299      	cmp	r1, r3
 8008270:	bf88      	it	hi
 8008272:	b28b      	uxthhi	r3, r1
 8008274:	e7ee      	b.n	8008254 <tcp_input+0x728>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008276:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008278:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800827a:	881f      	ldrh	r7, [r3, #0]
 800827c:	6a2a      	ldr	r2, [r5, #32]
 800827e:	9702      	str	r7, [sp, #8]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	4b50      	ldr	r3, [pc, #320]	; (80083c8 <tcp_input+0x89c>)
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4402      	add	r2, r0
 800828a:	3304      	adds	r3, #4
 800828c:	4620      	mov	r0, r4
 800828e:	f000 ffb5 	bl	80091fc <tcp_rst>
    if (err != ERR_ABRT) {
 8008292:	e6b4      	b.n	8007ffe <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008294:	079f      	lsls	r7, r3, #30
 8008296:	f57f aeb2 	bpl.w	8007ffe <tcp_input+0x4d2>
 800829a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829c:	6a2a      	ldr	r2, [r5, #32]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4293      	cmp	r3, r2
 80082a2:	f47f aeac 	bne.w	8007ffe <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 ff32 	bl	8009110 <tcp_rexmit>
    if (err != ERR_ABRT) {
 80082ac:	e6a7      	b.n	8007ffe <tcp_input+0x4d2>
      tcp_receive(pcb);
 80082ae:	4620      	mov	r0, r4
 80082b0:	f7ff fa08 	bl	80076c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80082b4:	7cab      	ldrb	r3, [r5, #18]
 80082b6:	e7d0      	b.n	800825a <tcp_input+0x72e>
      tcp_receive(pcb);
 80082b8:	4620      	mov	r0, r4
 80082ba:	f7ff fa03 	bl	80076c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80082be:	7cab      	ldrb	r3, [r5, #18]
 80082c0:	f013 0f20 	tst.w	r3, #32
 80082c4:	7f2b      	ldrb	r3, [r5, #28]
 80082c6:	d031      	beq.n	800832c <tcp_input+0x800>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082c8:	f013 0f10 	tst.w	r3, #16
 80082cc:	8b63      	ldrh	r3, [r4, #26]
 80082ce:	d028      	beq.n	8008322 <tcp_input+0x7f6>
 80082d0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80082d2:	69aa      	ldr	r2, [r5, #24]
 80082d4:	4291      	cmp	r1, r2
 80082d6:	d124      	bne.n	8008322 <tcp_input+0x7f6>
 80082d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80082da:	bb12      	cbnz	r2, 8008322 <tcp_input+0x7f6>
          tcp_ack_now(pcb);
 80082dc:	f043 0302 	orr.w	r3, r3, #2
 80082e0:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7fe fb1a 	bl	800691c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80082e8:	f8d9 3000 	ldr.w	r3, [r9]
 80082ec:	429c      	cmp	r4, r3
 80082ee:	d10a      	bne.n	8008306 <tcp_input+0x7da>
        TCP_RMV_ACTIVE(pcb);
 80082f0:	68e3      	ldr	r3, [r4, #12]
 80082f2:	f8c9 3000 	str.w	r3, [r9]
 80082f6:	e008      	b.n	800830a <tcp_input+0x7de>
          TCP_RMV_ACTIVE(pcb);
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	4294      	cmp	r4, r2
 80082fc:	d102      	bne.n	8008304 <tcp_input+0x7d8>
        TCP_RMV_ACTIVE(pcb);
 80082fe:	68e2      	ldr	r2, [r4, #12]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	e002      	b.n	800830a <tcp_input+0x7de>
 8008304:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f6      	bne.n	80082f8 <tcp_input+0x7cc>
        TCP_RMV_ACTIVE(pcb);
 800830a:	4b32      	ldr	r3, [pc, #200]	; (80083d4 <tcp_input+0x8a8>)
 800830c:	2201      	movs	r2, #1
 800830e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008310:	230a      	movs	r3, #10
 8008312:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008314:	4b30      	ldr	r3, [pc, #192]	; (80083d8 <tcp_input+0x8ac>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	60e2      	str	r2, [r4, #12]
 800831a:	601c      	str	r4, [r3, #0]
 800831c:	f001 fabc 	bl	8009898 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 8008320:	e66d      	b.n	8007ffe <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8008328:	2308      	movs	r3, #8
 800832a:	e79e      	b.n	800826a <tcp_input+0x73e>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800832c:	06d9      	lsls	r1, r3, #27
 800832e:	f57f ae66 	bpl.w	8007ffe <tcp_input+0x4d2>
 8008332:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008334:	69ab      	ldr	r3, [r5, #24]
 8008336:	429a      	cmp	r2, r3
 8008338:	f47f ae61 	bne.w	8007ffe <tcp_input+0x4d2>
 800833c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800833e:	2b00      	cmp	r3, #0
 8008340:	f47f ae5d 	bne.w	8007ffe <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 8008344:	2306      	movs	r3, #6
 8008346:	e790      	b.n	800826a <tcp_input+0x73e>
      tcp_receive(pcb);
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff f9bb 	bl	80076c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800834e:	7cab      	ldrb	r3, [r5, #18]
 8008350:	069a      	lsls	r2, r3, #26
 8008352:	f57f ae54 	bpl.w	8007ffe <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 8008356:	8b63      	ldrh	r3, [r4, #26]
 8008358:	f043 0302 	orr.w	r3, r3, #2
 800835c:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800835e:	4620      	mov	r0, r4
 8008360:	f7fe fadc 	bl	800691c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008364:	f8d9 3000 	ldr.w	r3, [r9]
 8008368:	429c      	cmp	r4, r3
 800836a:	d0c1      	beq.n	80082f0 <tcp_input+0x7c4>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0cc      	beq.n	800830a <tcp_input+0x7de>
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	4294      	cmp	r4, r2
 8008374:	d0c3      	beq.n	80082fe <tcp_input+0x7d2>
 8008376:	4613      	mov	r3, r2
 8008378:	e7f8      	b.n	800836c <tcp_input+0x840>
      tcp_receive(pcb);
 800837a:	4620      	mov	r0, r4
 800837c:	f7ff f9a2 	bl	80076c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008380:	7f2b      	ldrb	r3, [r5, #28]
 8008382:	06db      	lsls	r3, r3, #27
 8008384:	f57f ae3b 	bpl.w	8007ffe <tcp_input+0x4d2>
 8008388:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800838a:	69ab      	ldr	r3, [r5, #24]
 800838c:	429a      	cmp	r2, r3
 800838e:	f47f ae36 	bne.w	8007ffe <tcp_input+0x4d2>
 8008392:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008394:	2b00      	cmp	r3, #0
 8008396:	f47f ae32 	bne.w	8007ffe <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800839a:	4620      	mov	r0, r4
 800839c:	f7fe fabe 	bl	800691c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80083a0:	f8d9 3000 	ldr.w	r3, [r9]
 80083a4:	429c      	cmp	r4, r3
 80083a6:	d0a3      	beq.n	80082f0 <tcp_input+0x7c4>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0ae      	beq.n	800830a <tcp_input+0x7de>
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4294      	cmp	r4, r2
 80083b0:	d0a5      	beq.n	80082fe <tcp_input+0x7d2>
 80083b2:	4613      	mov	r3, r2
 80083b4:	e7f8      	b.n	80083a8 <tcp_input+0x87c>
 80083b6:	bf00      	nop
 80083b8:	0801a63c 	.word	0x0801a63c
 80083bc:	0801a95b 	.word	0x0801a95b
 80083c0:	08018c9a 	.word	0x08018c9a
 80083c4:	0801a971 	.word	0x0801a971
 80083c8:	20008104 	.word	0x20008104
 80083cc:	0801a984 	.word	0x0801a984
 80083d0:	20000210 	.word	0x20000210
 80083d4:	2000e484 	.word	0x2000e484
 80083d8:	2000e498 	.word	0x2000e498
      tcp_receive(pcb);
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff f971 	bl	80076c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80083e2:	7f2b      	ldrb	r3, [r5, #28]
 80083e4:	06df      	lsls	r7, r3, #27
 80083e6:	f57f ae0a 	bpl.w	8007ffe <tcp_input+0x4d2>
 80083ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80083ec:	69ab      	ldr	r3, [r5, #24]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	f47f ae05 	bne.w	8007ffe <tcp_input+0x4d2>
 80083f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f47f ae01 	bne.w	8007ffe <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 80083fc:	7cab      	ldrb	r3, [r5, #18]
 80083fe:	f043 0310 	orr.w	r3, r3, #16
 8008402:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 8008404:	e5fb      	b.n	8007ffe <tcp_input+0x4d2>
        if (recv_acked > 0) {
 8008406:	8aaa      	ldrh	r2, [r5, #20]
 8008408:	b11a      	cbz	r2, 8008412 <tcp_input+0x8e6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800840a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800840c:	b9db      	cbnz	r3, 8008446 <tcp_input+0x91a>
          recv_acked = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 8008412:	4620      	mov	r0, r4
 8008414:	f7ff f8ce 	bl	80075b4 <tcp_input_delayed_close>
 8008418:	2800      	cmp	r0, #0
 800841a:	f47f acbe 	bne.w	8007d9a <tcp_input+0x26e>
        if (recv_data != NULL) {
 800841e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008420:	b323      	cbz	r3, 800846c <tcp_input+0x940>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008422:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008424:	b133      	cbz	r3, 8008434 <tcp_input+0x908>
 8008426:	4b37      	ldr	r3, [pc, #220]	; (8008504 <tcp_input+0x9d8>)
 8008428:	4937      	ldr	r1, [pc, #220]	; (8008508 <tcp_input+0x9dc>)
 800842a:	4838      	ldr	r0, [pc, #224]	; (800850c <tcp_input+0x9e0>)
 800842c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008430:	f002 fca4 	bl	800ad7c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008434:	8b63      	ldrh	r3, [r4, #26]
 8008436:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8008438:	f013 0310 	ands.w	r3, r3, #16
 800843c:	d009      	beq.n	8008452 <tcp_input+0x926>
            pbuf_free(recv_data);
 800843e:	4610      	mov	r0, r2
 8008440:	f7fd fda4 	bl	8005f8c <pbuf_free>
 8008444:	e6d6      	b.n	80081f4 <tcp_input+0x6c8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008446:	6920      	ldr	r0, [r4, #16]
 8008448:	4621      	mov	r1, r4
 800844a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800844c:	300d      	adds	r0, #13
 800844e:	d1de      	bne.n	800840e <tcp_input+0x8e2>
 8008450:	e4a3      	b.n	8007d9a <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008452:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8008456:	b1f7      	cbz	r7, 8008496 <tcp_input+0x96a>
 8008458:	6920      	ldr	r0, [r4, #16]
 800845a:	4621      	mov	r1, r4
 800845c:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800845e:	f110 0f0d 	cmn.w	r0, #13
 8008462:	f43f ac9a 	beq.w	8007d9a <tcp_input+0x26e>
          if (err != ERR_OK) {
 8008466:	b108      	cbz	r0, 800846c <tcp_input+0x940>
            pcb->refused_data = recv_data;
 8008468:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800846a:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800846c:	7cab      	ldrb	r3, [r5, #18]
 800846e:	0699      	lsls	r1, r3, #26
 8008470:	d505      	bpl.n	800847e <tcp_input+0x952>
          if (pcb->refused_data != NULL) {
 8008472:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008474:	b1ab      	cbz	r3, 80084a2 <tcp_input+0x976>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008476:	7b5a      	ldrb	r2, [r3, #13]
 8008478:	f042 0220 	orr.w	r2, r2, #32
 800847c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800847e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 8008480:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8008482:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008484:	f7ff f896 	bl	80075b4 <tcp_input_delayed_close>
 8008488:	2800      	cmp	r0, #0
 800848a:	f47f ac86 	bne.w	8007d9a <tcp_input+0x26e>
        tcp_output(pcb);
 800848e:	4620      	mov	r0, r4
 8008490:	f000 ff2c 	bl	80092ec <tcp_output>
 8008494:	e481      	b.n	8007d9a <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008496:	463b      	mov	r3, r7
 8008498:	4621      	mov	r1, r4
 800849a:	4638      	mov	r0, r7
 800849c:	f7fe fda2 	bl	8006fe4 <tcp_recv_null>
 80084a0:	e7dd      	b.n	800845e <tcp_input+0x932>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80084a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80084a4:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80084a8:	f640 3268 	movw	r2, #2920	; 0xb68
 80084ac:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 80084ae:	bf1c      	itt	ne
 80084b0:	3301      	addne	r3, #1
 80084b2:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	d0e2      	beq.n	800847e <tcp_input+0x952>
 80084b8:	2300      	movs	r3, #0
 80084ba:	6920      	ldr	r0, [r4, #16]
 80084bc:	461a      	mov	r2, r3
 80084be:	4621      	mov	r1, r4
 80084c0:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 80084c2:	300d      	adds	r0, #13
 80084c4:	d1db      	bne.n	800847e <tcp_input+0x952>
 80084c6:	e468      	b.n	8007d9a <tcp_input+0x26e>
      if (prev != NULL) {
 80084c8:	b11c      	cbz	r4, 80084d2 <tcp_input+0x9a6>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80084ce:	6017      	str	r7, [r2, #0]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80084d0:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 80084d2:	7f2b      	ldrb	r3, [r5, #28]
 80084d4:	0758      	lsls	r0, r3, #29
 80084d6:	f53f abdd 	bmi.w	8007c94 <tcp_input+0x168>
  if (flags & TCP_ACK) {
 80084da:	f013 0a10 	ands.w	sl, r3, #16
 80084de:	f43f ad18 	beq.w	8007f12 <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084e2:	880b      	ldrh	r3, [r1, #0]
 80084e4:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 80084e6:	6a2a      	ldr	r2, [r5, #32]
 80084e8:	e9cd c301 	strd	ip, r3, [sp, #4]
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <tcp_input+0x9e4>)
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4402      	add	r2, r0
 80084f2:	3304      	adds	r3, #4
 80084f4:	69a9      	ldr	r1, [r5, #24]
 80084f6:	4638      	mov	r0, r7
 80084f8:	e4c0      	b.n	8007e7c <tcp_input+0x350>
      if (prev != NULL) {
 80084fa:	2f00      	cmp	r7, #0
 80084fc:	f47f ac14 	bne.w	8007d28 <tcp_input+0x1fc>
 8008500:	e423      	b.n	8007d4a <tcp_input+0x21e>
 8008502:	bf00      	nop
 8008504:	0801a63c 	.word	0x0801a63c
 8008508:	0801a9a2 	.word	0x0801a9a2
 800850c:	08018c9a 	.word	0x08018c9a
 8008510:	20008104 	.word	0x20008104

08008514 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8008514:	4a02      	ldr	r2, [pc, #8]	; (8008520 <tcp_trigger_input_pcb_close+0xc>)
 8008516:	7c93      	ldrb	r3, [r2, #18]
 8008518:	f043 0310 	orr.w	r3, r3, #16
 800851c:	7493      	strb	r3, [r2, #18]
}
 800851e:	4770      	bx	lr
 8008520:	20000210 	.word	0x20000210

08008524 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8008524:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8008526:	4604      	mov	r4, r0
 8008528:	b930      	cbnz	r0, 8008538 <tcp_output_segment_busy+0x14>
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <tcp_output_segment_busy+0x20>)
 800852c:	4906      	ldr	r1, [pc, #24]	; (8008548 <tcp_output_segment_busy+0x24>)
 800852e:	4807      	ldr	r0, [pc, #28]	; (800854c <tcp_output_segment_busy+0x28>)
 8008530:	f240 529a 	movw	r2, #1434	; 0x59a
 8008534:	f002 fc22 	bl	800ad7c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800853c:	3801      	subs	r0, #1
 800853e:	bf18      	it	ne
 8008540:	2001      	movne	r0, #1
 8008542:	bd10      	pop	{r4, pc}
 8008544:	0801a9bc 	.word	0x0801a9bc
 8008548:	0801aa31 	.word	0x0801aa31
 800854c:	08018c9a 	.word	0x08018c9a

08008550 <tcp_pbuf_prealloc>:
{
 8008550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008554:	9d08      	ldr	r5, [sp, #32]
 8008556:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 800855a:	4680      	mov	r8, r0
 800855c:	460c      	mov	r4, r1
 800855e:	4617      	mov	r7, r2
 8008560:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8008562:	b92d      	cbnz	r5, 8008570 <tcp_pbuf_prealloc+0x20>
 8008564:	4b1c      	ldr	r3, [pc, #112]	; (80085d8 <tcp_pbuf_prealloc+0x88>)
 8008566:	491d      	ldr	r1, [pc, #116]	; (80085dc <tcp_pbuf_prealloc+0x8c>)
 8008568:	481d      	ldr	r0, [pc, #116]	; (80085e0 <tcp_pbuf_prealloc+0x90>)
 800856a:	22e9      	movs	r2, #233	; 0xe9
 800856c:	f002 fc06 	bl	800ad7c <iprintf>
  if (length < max_length) {
 8008570:	42bc      	cmp	r4, r7
 8008572:	d22e      	bcs.n	80085d2 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8008574:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8008578:	079a      	lsls	r2, r3, #30
 800857a:	d409      	bmi.n	8008590 <tcp_pbuf_prealloc+0x40>
 800857c:	8b6b      	ldrh	r3, [r5, #26]
 800857e:	065b      	lsls	r3, r3, #25
 8008580:	d427      	bmi.n	80085d2 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 8008582:	f1b9 0f00 	cmp.w	r9, #0
 8008586:	d003      	beq.n	8008590 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 8008588:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800858a:	b90b      	cbnz	r3, 8008590 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800858c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800858e:	b303      	cbz	r3, 80085d2 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008590:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 8008594:	f025 0103 	bic.w	r1, r5, #3
 8008598:	42b9      	cmp	r1, r7
 800859a:	460a      	mov	r2, r1
 800859c:	bf28      	it	cs
 800859e:	463a      	movcs	r2, r7
 80085a0:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80085a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7fd fd54 	bl	8006054 <pbuf_alloc>
  if (p == NULL) {
 80085ac:	4605      	mov	r5, r0
 80085ae:	b168      	cbz	r0, 80085cc <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80085b0:	6803      	ldr	r3, [r0, #0]
 80085b2:	b133      	cbz	r3, 80085c2 <tcp_pbuf_prealloc+0x72>
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <tcp_pbuf_prealloc+0x88>)
 80085b6:	490b      	ldr	r1, [pc, #44]	; (80085e4 <tcp_pbuf_prealloc+0x94>)
 80085b8:	4809      	ldr	r0, [pc, #36]	; (80085e0 <tcp_pbuf_prealloc+0x90>)
 80085ba:	f240 120b 	movw	r2, #267	; 0x10b
 80085be:	f002 fbdd 	bl	800ad7c <iprintf>
  *oversize = p->len - length;
 80085c2:	896b      	ldrh	r3, [r5, #10]
 80085c4:	1b1b      	subs	r3, r3, r4
 80085c6:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 80085c8:	812c      	strh	r4, [r5, #8]
 80085ca:	816c      	strh	r4, [r5, #10]
}
 80085cc:	4628      	mov	r0, r5
 80085ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d2:	4621      	mov	r1, r4
 80085d4:	e7e5      	b.n	80085a2 <tcp_pbuf_prealloc+0x52>
 80085d6:	bf00      	nop
 80085d8:	0801a9bc 	.word	0x0801a9bc
 80085dc:	0801aa56 	.word	0x0801aa56
 80085e0:	08018c9a 	.word	0x08018c9a
 80085e4:	0801aa75 	.word	0x0801aa75

080085e8 <tcp_create_segment>:
{
 80085e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	460e      	mov	r6, r1
 80085ee:	f89d a020 	ldrb.w	sl, [sp, #32]
 80085f2:	4690      	mov	r8, r2
 80085f4:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80085f6:	4607      	mov	r7, r0
 80085f8:	b928      	cbnz	r0, 8008606 <tcp_create_segment+0x1e>
 80085fa:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <tcp_create_segment+0xcc>)
 80085fc:	492e      	ldr	r1, [pc, #184]	; (80086b8 <tcp_create_segment+0xd0>)
 80085fe:	482f      	ldr	r0, [pc, #188]	; (80086bc <tcp_create_segment+0xd4>)
 8008600:	22a3      	movs	r2, #163	; 0xa3
 8008602:	f002 fbbb 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008606:	b92e      	cbnz	r6, 8008614 <tcp_create_segment+0x2c>
 8008608:	4b2a      	ldr	r3, [pc, #168]	; (80086b4 <tcp_create_segment+0xcc>)
 800860a:	492d      	ldr	r1, [pc, #180]	; (80086c0 <tcp_create_segment+0xd8>)
 800860c:	482b      	ldr	r0, [pc, #172]	; (80086bc <tcp_create_segment+0xd4>)
 800860e:	22a4      	movs	r2, #164	; 0xa4
 8008610:	f002 fbb4 	bl	800ad7c <iprintf>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008614:	2003      	movs	r0, #3
 8008616:	f7fd fa6f 	bl	8005af8 <memp_malloc>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800861a:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800861e:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008622:	4604      	mov	r4, r0
 8008624:	b928      	cbnz	r0, 8008632 <tcp_create_segment+0x4a>
    pbuf_free(p);
 8008626:	4630      	mov	r0, r6
 8008628:	f7fd fcb0 	bl	8005f8c <pbuf_free>
}
 800862c:	4620      	mov	r0, r4
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 8008632:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8008636:	2300      	movs	r3, #0
  seg->p = p;
 8008638:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800863c:	8933      	ldrh	r3, [r6, #8]
 800863e:	42ab      	cmp	r3, r5
 8008640:	fa1f fa85 	uxth.w	sl, r5
 8008644:	d205      	bcs.n	8008652 <tcp_create_segment+0x6a>
 8008646:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <tcp_create_segment+0xcc>)
 8008648:	491e      	ldr	r1, [pc, #120]	; (80086c4 <tcp_create_segment+0xdc>)
 800864a:	481c      	ldr	r0, [pc, #112]	; (80086bc <tcp_create_segment+0xd4>)
 800864c:	22b0      	movs	r2, #176	; 0xb0
 800864e:	f002 fb95 	bl	800ad7c <iprintf>
  seg->len = p->tot_len - optlen;
 8008652:	8933      	ldrh	r3, [r6, #8]
 8008654:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008658:	4630      	mov	r0, r6
  seg->len = p->tot_len - optlen;
 800865a:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800865c:	2114      	movs	r1, #20
 800865e:	f7fd fc5d 	bl	8005f1c <pbuf_add_header>
 8008662:	4606      	mov	r6, r0
 8008664:	b120      	cbz	r0, 8008670 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 8008666:	4620      	mov	r0, r4
 8008668:	f7fe f8be 	bl	80067e8 <tcp_seg_free>
    return NULL;
 800866c:	2400      	movs	r4, #0
 800866e:	e7dd      	b.n	800862c <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008670:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008672:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008674:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8008678:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800867c:	f7fc ff52 	bl	8005524 <lwip_htons>
 8008680:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008684:	8b38      	ldrh	r0, [r7, #24]
 8008686:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800868a:	f7fc ff4b 	bl	8005524 <lwip_htons>
 800868e:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008692:	4648      	mov	r0, r9
 8008694:	68e7      	ldr	r7, [r4, #12]
 8008696:	f7fc ff48 	bl	800552a <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800869a:	08ad      	lsrs	r5, r5, #2
 800869c:	3505      	adds	r5, #5
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800869e:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80086a0:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 80086a4:	68e7      	ldr	r7, [r4, #12]
 80086a6:	f7fc ff3d 	bl	8005524 <lwip_htons>
  seg->tcphdr->urgp = 0;
 80086aa:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80086ac:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 80086ae:	749e      	strb	r6, [r3, #18]
 80086b0:	74de      	strb	r6, [r3, #19]
  return seg;
 80086b2:	e7bb      	b.n	800862c <tcp_create_segment+0x44>
 80086b4:	0801a9bc 	.word	0x0801a9bc
 80086b8:	0801aa89 	.word	0x0801aa89
 80086bc:	08018c9a 	.word	0x08018c9a
 80086c0:	0801aaa9 	.word	0x0801aaa9
 80086c4:	0801aaca 	.word	0x0801aaca

080086c8 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80086c8:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80086ce:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80086d0:	4606      	mov	r6, r0
 80086d2:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80086d4:	2022      	movs	r0, #34	; 0x22
 80086d6:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 80086da:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80086dc:	f7fd fcba 	bl	8006054 <pbuf_alloc>
  if (p != NULL) {
 80086e0:	4605      	mov	r5, r0
 80086e2:	b348      	cbz	r0, 8008738 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80086e4:	8943      	ldrh	r3, [r0, #10]
 80086e6:	2b13      	cmp	r3, #19
 80086e8:	d806      	bhi.n	80086f8 <tcp_output_alloc_header_common.constprop.0+0x30>
 80086ea:	4b15      	ldr	r3, [pc, #84]	; (8008740 <tcp_output_alloc_header_common.constprop.0+0x78>)
 80086ec:	4915      	ldr	r1, [pc, #84]	; (8008744 <tcp_output_alloc_header_common.constprop.0+0x7c>)
 80086ee:	4816      	ldr	r0, [pc, #88]	; (8008748 <tcp_output_alloc_header_common.constprop.0+0x80>)
 80086f0:	f240 7223 	movw	r2, #1827	; 0x723
 80086f4:	f002 fb42 	bl	800ad7c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 80086f8:	4640      	mov	r0, r8
    tcphdr = (struct tcp_hdr *)p->payload;
 80086fa:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 80086fc:	f7fc ff12 	bl	8005524 <lwip_htons>
 8008700:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8008702:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8008706:	f7fc ff0d 	bl	8005524 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800870a:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800870c:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800870e:	4630      	mov	r0, r6
 8008710:	f7fc ff0b 	bl	800552a <lwip_htonl>
 8008714:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8008716:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800871a:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800871e:	f7fc ff01 	bl	8005524 <lwip_htons>
 8008722:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8008724:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 8008728:	f7fc fefc 	bl	8005524 <lwip_htons>
    tcphdr->chksum = 0;
 800872c:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800872e:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 8008730:	7423      	strb	r3, [r4, #16]
 8008732:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008734:	74a3      	strb	r3, [r4, #18]
 8008736:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873e:	bf00      	nop
 8008740:	0801a9bc 	.word	0x0801a9bc
 8008744:	0801aadf 	.word	0x0801aadf
 8008748:	08018c9a 	.word	0x08018c9a

0800874c <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800874c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800874e:	460d      	mov	r5, r1
 8008750:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8008752:	4604      	mov	r4, r0
 8008754:	b930      	cbnz	r0, 8008764 <tcp_output_alloc_header.constprop.0+0x18>
 8008756:	4b0d      	ldr	r3, [pc, #52]	; (800878c <tcp_output_alloc_header.constprop.0+0x40>)
 8008758:	490d      	ldr	r1, [pc, #52]	; (8008790 <tcp_output_alloc_header.constprop.0+0x44>)
 800875a:	480e      	ldr	r0, [pc, #56]	; (8008794 <tcp_output_alloc_header.constprop.0+0x48>)
 800875c:	f240 7242 	movw	r2, #1858	; 0x742
 8008760:	f002 fb0c 	bl	800ad7c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8008764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	2310      	movs	r3, #16
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	8b23      	ldrh	r3, [r4, #24]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	8ae3      	ldrh	r3, [r4, #22]
 8008772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008774:	4632      	mov	r2, r6
 8008776:	4629      	mov	r1, r5
 8008778:	f7ff ffa6 	bl	80086c8 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800877c:	b118      	cbz	r0, 8008786 <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800877e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008782:	4413      	add	r3, r2
 8008784:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 8008786:	b004      	add	sp, #16
 8008788:	bd70      	pop	{r4, r5, r6, pc}
 800878a:	bf00      	nop
 800878c:	0801a9bc 	.word	0x0801a9bc
 8008790:	0801ab0d 	.word	0x0801ab0d
 8008794:	08018c9a 	.word	0x08018c9a

08008798 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8008798:	b930      	cbnz	r0, 80087a8 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800879a:	4b04      	ldr	r3, [pc, #16]	; (80087ac <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800879c:	4904      	ldr	r1, [pc, #16]	; (80087b0 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800879e:	4805      	ldr	r0, [pc, #20]	; (80087b4 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 80087a0:	f240 7256 	movw	r2, #1878	; 0x756
 80087a4:	f002 baea 	b.w	800ad7c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	0801a9bc 	.word	0x0801a9bc
 80087b0:	0801ab32 	.word	0x0801ab32
 80087b4:	08018c9a 	.word	0x08018c9a

080087b8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80087b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ba:	4604      	mov	r4, r0
 80087bc:	b085      	sub	sp, #20
 80087be:	4617      	mov	r7, r2
 80087c0:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80087c2:	460d      	mov	r5, r1
 80087c4:	b931      	cbnz	r1, 80087d4 <tcp_output_control_segment+0x1c>
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <tcp_output_control_segment+0x64>)
 80087c8:	4915      	ldr	r1, [pc, #84]	; (8008820 <tcp_output_control_segment+0x68>)
 80087ca:	4816      	ldr	r0, [pc, #88]	; (8008824 <tcp_output_control_segment+0x6c>)
 80087cc:	f240 7287 	movw	r2, #1927	; 0x787
 80087d0:	f002 fad4 	bl	800ad7c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80087d4:	b164      	cbz	r4, 80087f0 <tcp_output_control_segment+0x38>
 80087d6:	7a20      	ldrb	r0, [r4, #8]
 80087d8:	b150      	cbz	r0, 80087f0 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 80087da:	f7fd fb1d 	bl	8005e18 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 80087de:	b968      	cbnz	r0, 80087fc <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 80087e0:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80087e4:	4628      	mov	r0, r5
 80087e6:	f7fd fbd1 	bl	8005f8c <pbuf_free>
  return err;
}
 80087ea:	4620      	mov	r0, r4
 80087ec:	b005      	add	sp, #20
 80087ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7fc f929 	bl	8004a48 <ip4_route>
  if (netif == NULL) {
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d0f2      	beq.n	80087e0 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 80087fa:	b164      	cbz	r4, 8008816 <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 80087fc:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80087fe:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8008800:	9002      	str	r0, [sp, #8]
 8008802:	2206      	movs	r2, #6
 8008804:	e9cd 4200 	strd	r4, r2, [sp]
 8008808:	4639      	mov	r1, r7
 800880a:	4632      	mov	r2, r6
 800880c:	4628      	mov	r0, r5
 800880e:	f7fc fa87 	bl	8004d20 <ip4_output_if>
 8008812:	4604      	mov	r4, r0
 8008814:	e7e6      	b.n	80087e4 <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 8008816:	23ff      	movs	r3, #255	; 0xff
 8008818:	e7f2      	b.n	8008800 <tcp_output_control_segment+0x48>
 800881a:	bf00      	nop
 800881c:	0801a9bc 	.word	0x0801a9bc
 8008820:	0801ab58 	.word	0x0801ab58
 8008824:	08018c9a 	.word	0x08018c9a

08008828 <tcp_write>:
{
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	ed2d 8b02 	vpush	{d8}
 8008830:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8008832:	4604      	mov	r4, r0
{
 8008834:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 8008836:	2300      	movs	r3, #0
{
 8008838:	9107      	str	r1, [sp, #28]
 800883a:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800883c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8008840:	b968      	cbnz	r0, 800885e <tcp_write+0x36>
 8008842:	4bab      	ldr	r3, [pc, #684]	; (8008af0 <tcp_write+0x2c8>)
 8008844:	49ab      	ldr	r1, [pc, #684]	; (8008af4 <tcp_write+0x2cc>)
 8008846:	f44f 72cf 	mov.w	r2, #414	; 0x19e
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800884a:	48ab      	ldr	r0, [pc, #684]	; (8008af8 <tcp_write+0x2d0>)
 800884c:	f002 fa96 	bl	800ad7c <iprintf>
 8008850:	f06f 000f 	mvn.w	r0, #15
}
 8008854:	b00f      	add	sp, #60	; 0x3c
 8008856:	ecbd 8b02 	vpop	{d8}
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800885e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8008862:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	4293      	cmp	r3, r2
 8008868:	bf28      	it	cs
 800886a:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800886c:	2b00      	cmp	r3, #0
 800886e:	bf08      	it	eq
 8008870:	4613      	moveq	r3, r2
 8008872:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	b923      	cbnz	r3, 8008882 <tcp_write+0x5a>
 8008878:	4b9d      	ldr	r3, [pc, #628]	; (8008af0 <tcp_write+0x2c8>)
 800887a:	49a0      	ldr	r1, [pc, #640]	; (8008afc <tcp_write+0x2d4>)
 800887c:	f240 12ad 	movw	r2, #429	; 0x1ad
 8008880:	e7e3      	b.n	800884a <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 8008882:	7d03      	ldrb	r3, [r0, #20]
 8008884:	2b07      	cmp	r3, #7
 8008886:	d003      	beq.n	8008890 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 8008888:	3b02      	subs	r3, #2
 800888a:	2b02      	cmp	r3, #2
 800888c:	f200 825b 	bhi.w	8008d46 <tcp_write+0x51e>
  } else if (len == 0) {
 8008890:	9b04      	ldr	r3, [sp, #16]
 8008892:	b1db      	cbz	r3, 80088cc <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 8008894:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8008898:	9a04      	ldr	r2, [sp, #16]
 800889a:	4293      	cmp	r3, r2
 800889c:	d206      	bcs.n	80088ac <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800889e:	8b63      	ldrh	r3, [r4, #26]
 80088a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a4:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	e7d3      	b.n	8008854 <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80088ac:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 80088b0:	2a07      	cmp	r2, #7
 80088b2:	d8f4      	bhi.n	800889e <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 80088b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088b6:	b302      	cbz	r2, 80088fa <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80088b8:	b943      	cbnz	r3, 80088cc <tcp_write+0xa4>
 80088ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088bc:	b933      	cbnz	r3, 80088cc <tcp_write+0xa4>
 80088be:	4b8c      	ldr	r3, [pc, #560]	; (8008af0 <tcp_write+0x2c8>)
 80088c0:	498f      	ldr	r1, [pc, #572]	; (8008b00 <tcp_write+0x2d8>)
 80088c2:	f240 1255 	movw	r2, #341	; 0x155
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80088c6:	488c      	ldr	r0, [pc, #560]	; (8008af8 <tcp_write+0x2d0>)
 80088c8:	f002 fa58 	bl	800ad7c <iprintf>
  if (pcb->unsent != NULL) {
 80088cc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 80088ce:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80088d2:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 80088d4:	b9de      	cbnz	r6, 800890e <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80088d6:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 80088da:	2f00      	cmp	r7, #0
 80088dc:	f000 81bc 	beq.w	8008c58 <tcp_write+0x430>
 80088e0:	4b83      	ldr	r3, [pc, #524]	; (8008af0 <tcp_write+0x2c8>)
 80088e2:	4988      	ldr	r1, [pc, #544]	; (8008b04 <tcp_write+0x2dc>)
 80088e4:	4884      	ldr	r0, [pc, #528]	; (8008af8 <tcp_write+0x2d0>)
 80088e6:	f240 224a 	movw	r2, #586	; 0x24a
 80088ea:	f002 fa47 	bl	800ad7c <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80088ee:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 80088f0:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 80088f2:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 80088f4:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 80088f6:	4637      	mov	r7, r6
 80088f8:	e089      	b.n	8008a0e <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80088fa:	b913      	cbnz	r3, 8008902 <tcp_write+0xda>
 80088fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0e4      	beq.n	80088cc <tcp_write+0xa4>
 8008902:	4b7b      	ldr	r3, [pc, #492]	; (8008af0 <tcp_write+0x2c8>)
 8008904:	4980      	ldr	r1, [pc, #512]	; (8008b08 <tcp_write+0x2e0>)
 8008906:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800890a:	e7dc      	b.n	80088c6 <tcp_write+0x9e>
 800890c:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800890e:	f8d6 a000 	ldr.w	sl, [r6]
 8008912:	46b0      	mov	r8, r6
 8008914:	f1ba 0f00 	cmp.w	sl, #0
 8008918:	d1f8      	bne.n	800890c <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800891a:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800891c:	8933      	ldrh	r3, [r6, #8]
 800891e:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8008920:	00ad      	lsls	r5, r5, #2
 8008922:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008926:	442b      	add	r3, r5
 8008928:	429a      	cmp	r2, r3
 800892a:	da06      	bge.n	800893a <tcp_write+0x112>
 800892c:	4b70      	ldr	r3, [pc, #448]	; (8008af0 <tcp_write+0x2c8>)
 800892e:	4977      	ldr	r1, [pc, #476]	; (8008b0c <tcp_write+0x2e4>)
 8008930:	4871      	ldr	r0, [pc, #452]	; (8008af8 <tcp_write+0x2d0>)
 8008932:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008936:	f002 fa21 	bl	800ad7c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800893a:	8937      	ldrh	r7, [r6, #8]
 800893c:	9b06      	ldr	r3, [sp, #24]
 800893e:	1bdf      	subs	r7, r3, r7
 8008940:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 8008942:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8008946:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    space = mss_local - (last_unsent->len + unsent_optlen);
 800894a:	b2bf      	uxth	r7, r7
    if (oversize > 0) {
 800894c:	2d00      	cmp	r5, #0
 800894e:	d067      	beq.n	8008a20 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8008950:	42bd      	cmp	r5, r7
 8008952:	d906      	bls.n	8008962 <tcp_write+0x13a>
 8008954:	4b66      	ldr	r3, [pc, #408]	; (8008af0 <tcp_write+0x2c8>)
 8008956:	496e      	ldr	r1, [pc, #440]	; (8008b10 <tcp_write+0x2e8>)
 8008958:	4867      	ldr	r0, [pc, #412]	; (8008af8 <tcp_write+0x2d0>)
 800895a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800895e:	f002 fa0d 	bl	800ad7c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8008962:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8008966:	9a04      	ldr	r2, [sp, #16]
 8008968:	429a      	cmp	r2, r3
 800896a:	bf28      	it	cs
 800896c:	461a      	movcs	r2, r3
 800896e:	42ba      	cmp	r2, r7
 8008970:	4615      	mov	r5, r2
 8008972:	bf28      	it	cs
 8008974:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 8008976:	1b5b      	subs	r3, r3, r5
 8008978:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800897a:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800897c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 8008980:	b2bf      	uxth	r7, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8008982:	b153      	cbz	r3, 800899a <tcp_write+0x172>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	42ab      	cmp	r3, r5
 8008988:	f000 816b 	beq.w	8008c62 <tcp_write+0x43a>
 800898c:	4b58      	ldr	r3, [pc, #352]	; (8008af0 <tcp_write+0x2c8>)
 800898e:	4961      	ldr	r1, [pc, #388]	; (8008b14 <tcp_write+0x2ec>)
 8008990:	4859      	ldr	r0, [pc, #356]	; (8008af8 <tcp_write+0x2d0>)
 8008992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008996:	f002 f9f1 	bl	800ad7c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	429d      	cmp	r5, r3
 800899e:	f080 8160 	bcs.w	8008c62 <tcp_write+0x43a>
 80089a2:	2f00      	cmp	r7, #0
 80089a4:	f000 8155 	beq.w	8008c52 <tcp_write+0x42a>
 80089a8:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 80089ac:	f1b9 0f00 	cmp.w	r9, #0
 80089b0:	f000 8150 	beq.w	8008c54 <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089b4:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089b8:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089ba:	45b9      	cmp	r9, r7
 80089bc:	bfa8      	it	ge
 80089be:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089c0:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 80089c2:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80089c6:	d52d      	bpl.n	8008a24 <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80089c8:	2301      	movs	r3, #1
 80089ca:	9302      	str	r3, [sp, #8]
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	463a      	mov	r2, r7
 80089d0:	e9cd 4300 	strd	r4, r3, [sp]
 80089d4:	4631      	mov	r1, r6
 80089d6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 80089da:	2000      	movs	r0, #0
 80089dc:	f7ff fdb8 	bl	8008550 <tcp_pbuf_prealloc>
 80089e0:	4683      	mov	fp, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f000 81ac 	beq.w	8008d40 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80089e8:	9b07      	ldr	r3, [sp, #28]
 80089ea:	6840      	ldr	r0, [r0, #4]
 80089ec:	4632      	mov	r2, r6
 80089ee:	1959      	adds	r1, r3, r5
 80089f0:	f002 f9ae 	bl	800ad50 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80089f4:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 80089f6:	f7fd fc01 	bl	80061fc <pbuf_clen>
 80089fa:	9b05      	ldr	r3, [sp, #20]
 80089fc:	4403      	add	r3, r0
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	9305      	str	r3, [sp, #20]
  u16_t extendlen = 0;
 8008a02:	f04f 0900 	mov.w	r9, #0
      pos += seglen;
 8008a06:	19af      	adds	r7, r5, r6
 8008a08:	b2bf      	uxth	r7, r7
 8008a0a:	4646      	mov	r6, r8
 8008a0c:	46da      	mov	sl, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a0e:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 8008a10:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a14:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 8008a18:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8008a1e:	e0e7      	b.n	8008bf0 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008a20:	462e      	mov	r6, r5
 8008a22:	e7ba      	b.n	800899a <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008a24:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8008a28:	465a      	mov	r2, fp
 8008a2a:	f8db b000 	ldr.w	fp, [fp]
 8008a2e:	f1bb 0f00 	cmp.w	fp, #0
 8008a32:	d1f9      	bne.n	8008a28 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8008a34:	7b13      	ldrb	r3, [r2, #12]
 8008a36:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 8008a3a:	d10f      	bne.n	8008a5c <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008a3c:	8951      	ldrh	r1, [r2, #10]
 8008a3e:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8008a40:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008a42:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d109      	bne.n	8008a5c <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008a48:	b135      	cbz	r5, 8008a58 <tcp_write+0x230>
 8008a4a:	4b29      	ldr	r3, [pc, #164]	; (8008af0 <tcp_write+0x2c8>)
 8008a4c:	4932      	ldr	r1, [pc, #200]	; (8008b18 <tcp_write+0x2f0>)
 8008a4e:	482a      	ldr	r0, [pc, #168]	; (8008af8 <tcp_write+0x2d0>)
 8008a50:	f240 2231 	movw	r2, #561	; 0x231
 8008a54:	f002 f992 	bl	800ad7c <iprintf>
          extendlen = seglen;
 8008a58:	46b1      	mov	r9, r6
 8008a5a:	e7d4      	b.n	8008a06 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	4631      	mov	r1, r6
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7fd faf7 	bl	8006054 <pbuf_alloc>
 8008a66:	4683      	mov	fp, r0
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	f000 8169 	beq.w	8008d40 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8008a6e:	9b07      	ldr	r3, [sp, #28]
 8008a70:	442b      	add	r3, r5
 8008a72:	6043      	str	r3, [r0, #4]
 8008a74:	e7bf      	b.n	80089f6 <tcp_write+0x1ce>
    u16_t left = len - pos;
 8008a76:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008a78:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 8008a7a:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bf28      	it	cs
 8008a82:	4613      	movcs	r3, r2
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d047      	beq.n	8008b20 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008a90:	fabb f38b 	clz	r3, fp
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	9b08      	ldr	r3, [sp, #32]
 8008a9a:	ee18 1a10 	vmov	r1, s16
 8008a9e:	e9cd 4300 	strd	r4, r3, [sp]
 8008aa2:	2036      	movs	r0, #54	; 0x36
 8008aa4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8008aa8:	f7ff fd52 	bl	8008550 <tcp_pbuf_prealloc>
 8008aac:	4606      	mov	r6, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d057      	beq.n	8008b62 <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008ab2:	8943      	ldrh	r3, [r0, #10]
 8008ab4:	ee18 2a10 	vmov	r2, s16
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d206      	bcs.n	8008aca <tcp_write+0x2a2>
 8008abc:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <tcp_write+0x2c8>)
 8008abe:	4917      	ldr	r1, [pc, #92]	; (8008b1c <tcp_write+0x2f4>)
 8008ac0:	480d      	ldr	r0, [pc, #52]	; (8008af8 <tcp_write+0x2d0>)
 8008ac2:	f240 2266 	movw	r2, #614	; 0x266
 8008ac6:	f002 f959 	bl	800ad7c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8008aca:	9b07      	ldr	r3, [sp, #28]
 8008acc:	6870      	ldr	r0, [r6, #4]
 8008ace:	ee18 2a10 	vmov	r2, s16
 8008ad2:	19d9      	adds	r1, r3, r7
 8008ad4:	f002 f93c 	bl	800ad50 <memcpy>
    queuelen += pbuf_clen(p);
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7fd fb8f 	bl	80061fc <pbuf_clen>
 8008ade:	9b05      	ldr	r3, [sp, #20]
 8008ae0:	4403      	add	r3, r0
 8008ae2:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8008ae4:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 8008ae6:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8008ae8:	d964      	bls.n	8008bb4 <tcp_write+0x38c>
      pbuf_free(p);
 8008aea:	4630      	mov	r0, r6
 8008aec:	e037      	b.n	8008b5e <tcp_write+0x336>
 8008aee:	bf00      	nop
 8008af0:	0801a9bc 	.word	0x0801a9bc
 8008af4:	0801ab81 	.word	0x0801ab81
 8008af8:	08018c9a 	.word	0x08018c9a
 8008afc:	0801ab98 	.word	0x0801ab98
 8008b00:	0801abc9 	.word	0x0801abc9
 8008b04:	0801acb3 	.word	0x0801acb3
 8008b08:	0801ac03 	.word	0x0801ac03
 8008b0c:	0801ac35 	.word	0x0801ac35
 8008b10:	0801ac4c 	.word	0x0801ac4c
 8008b14:	0801ac6c 	.word	0x0801ac6c
 8008b18:	0801ac8a 	.word	0x0801ac8a
 8008b1c:	0801ace2 	.word	0x0801ace2
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008b20:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8008b24:	b133      	cbz	r3, 8008b34 <tcp_write+0x30c>
 8008b26:	4b89      	ldr	r3, [pc, #548]	; (8008d4c <tcp_write+0x524>)
 8008b28:	4989      	ldr	r1, [pc, #548]	; (8008d50 <tcp_write+0x528>)
 8008b2a:	488a      	ldr	r0, [pc, #552]	; (8008d54 <tcp_write+0x52c>)
 8008b2c:	f240 2271 	movw	r2, #625	; 0x271
 8008b30:	f002 f924 	bl	800ad7c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008b34:	ee18 1a10 	vmov	r1, s16
 8008b38:	2201      	movs	r2, #1
 8008b3a:	2036      	movs	r0, #54	; 0x36
 8008b3c:	f7fd fa8a 	bl	8006054 <pbuf_alloc>
 8008b40:	b178      	cbz	r0, 8008b62 <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b46:	443a      	add	r2, r7
 8008b48:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008b50:	2036      	movs	r0, #54	; 0x36
 8008b52:	f7fd fa7f 	bl	8006054 <pbuf_alloc>
 8008b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b58:	4606      	mov	r6, r0
 8008b5a:	bb38      	cbnz	r0, 8008bac <tcp_write+0x384>
        pbuf_free(p2);
 8008b5c:	4618      	mov	r0, r3
      pbuf_free(p);
 8008b5e:	f7fd fa15 	bl	8005f8c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008b62:	8b63      	ldrh	r3, [r4, #26]
 8008b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b68:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 8008b6a:	f1ba 0f00 	cmp.w	sl, #0
 8008b6e:	d002      	beq.n	8008b76 <tcp_write+0x34e>
    pbuf_free(concat_p);
 8008b70:	4650      	mov	r0, sl
 8008b72:	f7fd fa0b 	bl	8005f8c <pbuf_free>
  if (queue != NULL) {
 8008b76:	f1bb 0f00 	cmp.w	fp, #0
 8008b7a:	d002      	beq.n	8008b82 <tcp_write+0x35a>
    tcp_segs_free(queue);
 8008b7c:	4658      	mov	r0, fp
 8008b7e:	f7fd fe41 	bl	8006804 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008b82:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f43f ae8d 	beq.w	80088a6 <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008b8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f47f ae89 	bne.w	80088a6 <tcp_write+0x7e>
 8008b94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f47f ae85 	bne.w	80088a6 <tcp_write+0x7e>
 8008b9c:	4b6b      	ldr	r3, [pc, #428]	; (8008d4c <tcp_write+0x524>)
 8008b9e:	496e      	ldr	r1, [pc, #440]	; (8008d58 <tcp_write+0x530>)
 8008ba0:	486c      	ldr	r0, [pc, #432]	; (8008d54 <tcp_write+0x52c>)
 8008ba2:	f240 3227 	movw	r2, #807	; 0x327
 8008ba6:	f002 f8e9 	bl	800ad7c <iprintf>
 8008baa:	e67c      	b.n	80088a6 <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008bac:	4619      	mov	r1, r3
 8008bae:	f7fd fb41 	bl	8006234 <pbuf_cat>
 8008bb2:	e791      	b.n	8008ad8 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4631      	mov	r1, r6
 8008bba:	9200      	str	r2, [sp, #0]
 8008bbc:	443b      	add	r3, r7
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff fd12 	bl	80085e8 <tcp_create_segment>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0cb      	beq.n	8008b62 <tcp_write+0x33a>
    if (queue == NULL) {
 8008bca:	f1bb 0f00 	cmp.w	fp, #0
 8008bce:	d03e      	beq.n	8008c4e <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd2:	b933      	cbnz	r3, 8008be2 <tcp_write+0x3ba>
 8008bd4:	4b5d      	ldr	r3, [pc, #372]	; (8008d4c <tcp_write+0x524>)
 8008bd6:	4961      	ldr	r1, [pc, #388]	; (8008d5c <tcp_write+0x534>)
 8008bd8:	485e      	ldr	r0, [pc, #376]	; (8008d54 <tcp_write+0x52c>)
 8008bda:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008bde:	f002 f8cd 	bl	800ad7c <iprintf>
      prev_seg->next = seg;
 8008be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be4:	601e      	str	r6, [r3, #0]
    pos += seglen;
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	441f      	add	r7, r3
 8008bec:	b2bf      	uxth	r7, r7
 8008bee:	9609      	str	r6, [sp, #36]	; 0x24
  while (pos < len) {
 8008bf0:	9b04      	ldr	r3, [sp, #16]
 8008bf2:	429f      	cmp	r7, r3
 8008bf4:	f4ff af3f 	bcc.w	8008a76 <tcp_write+0x24e>
 8008bf8:	4657      	mov	r7, sl
 8008bfa:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 8008bfc:	b14d      	cbz	r5, 8008c12 <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 8008bfe:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8008c02:	f1bb 0f00 	cmp.w	fp, #0
 8008c06:	d12f      	bne.n	8008c68 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 8008c08:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008c0c:	441d      	add	r5, r3
 8008c0e:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 8008c12:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8008c16:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d03d      	beq.n	8008c9a <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008c1e:	f1b8 0f00 	cmp.w	r8, #0
 8008c22:	d106      	bne.n	8008c32 <tcp_write+0x40a>
 8008c24:	4b49      	ldr	r3, [pc, #292]	; (8008d4c <tcp_write+0x524>)
 8008c26:	494e      	ldr	r1, [pc, #312]	; (8008d60 <tcp_write+0x538>)
 8008c28:	484a      	ldr	r0, [pc, #296]	; (8008d54 <tcp_write+0x52c>)
 8008c2a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008c2e:	f002 f8a5 	bl	800ad7c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8008c32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7fd fafc 	bl	8006234 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008c3c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008c40:	893a      	ldrh	r2, [r7, #8]
 8008c42:	4413      	add	r3, r2
 8008c44:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 8008c48:	f8c8 a000 	str.w	sl, [r8]
 8008c4c:	e04d      	b.n	8008cea <tcp_write+0x4c2>
 8008c4e:	4683      	mov	fp, r0
 8008c50:	e7c9      	b.n	8008be6 <tcp_write+0x3be>
  u16_t extendlen = 0;
 8008c52:	46b9      	mov	r9, r7
 8008c54:	462f      	mov	r7, r5
 8008c56:	e6da      	b.n	8008a0e <tcp_write+0x1e6>
 8008c58:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 8008c5a:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008c5c:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 8008c5e:	46ba      	mov	sl, r7
 8008c60:	e6d5      	b.n	8008a0e <tcp_write+0x1e6>
 8008c62:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 8008c64:	46b9      	mov	r9, r7
 8008c66:	e7c9      	b.n	8008bfc <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 8008c68:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8008c6c:	442b      	add	r3, r5
 8008c6e:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 8008c72:	f8db 3000 	ldr.w	r3, [fp]
 8008c76:	b96b      	cbnz	r3, 8008c94 <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8008c78:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008c7c:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 8008c80:	9907      	ldr	r1, [sp, #28]
 8008c82:	4418      	add	r0, r3
 8008c84:	462a      	mov	r2, r5
 8008c86:	f002 f863 	bl	800ad50 <memcpy>
        p->len += oversize_used;
 8008c8a:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8008c8e:	442b      	add	r3, r5
 8008c90:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8008c94:	f8db b000 	ldr.w	fp, [fp]
 8008c98:	e7b3      	b.n	8008c02 <tcp_write+0x3da>
  } else if (extendlen > 0) {
 8008c9a:	f1b9 0f00 	cmp.w	r9, #0
 8008c9e:	d01f      	beq.n	8008ce0 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d002      	beq.n	8008cac <tcp_write+0x484>
 8008ca6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008caa:	b933      	cbnz	r3, 8008cba <tcp_write+0x492>
 8008cac:	4b27      	ldr	r3, [pc, #156]	; (8008d4c <tcp_write+0x524>)
 8008cae:	492d      	ldr	r1, [pc, #180]	; (8008d64 <tcp_write+0x53c>)
 8008cb0:	4828      	ldr	r0, [pc, #160]	; (8008d54 <tcp_write+0x52c>)
 8008cb2:	f240 22e6 	movw	r2, #742	; 0x2e6
 8008cb6:	f002 f861 	bl	800ad7c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008cba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cbe:	891a      	ldrh	r2, [r3, #8]
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	444a      	add	r2, r9
 8008cc4:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 8008cc6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008cc8:	b941      	cbnz	r1, 8008cdc <tcp_write+0x4b4>
    p->len += extendlen;
 8008cca:	895a      	ldrh	r2, [r3, #10]
 8008ccc:	444a      	add	r2, r9
 8008cce:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8008cd0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008cd4:	4499      	add	r9, r3
 8008cd6:	f8a8 9008 	strh.w	r9, [r8, #8]
 8008cda:	e7b5      	b.n	8008c48 <tcp_write+0x420>
      p->tot_len += extendlen;
 8008cdc:	460b      	mov	r3, r1
 8008cde:	e7ee      	b.n	8008cbe <tcp_write+0x496>
  if (last_unsent == NULL) {
 8008ce0:	f1b8 0f00 	cmp.w	r8, #0
 8008ce4:	d1b0      	bne.n	8008c48 <tcp_write+0x420>
    pcb->unsent = queue;
 8008ce6:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 8008cea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008cec:	9a04      	ldr	r2, [sp, #16]
 8008cee:	4413      	add	r3, r2
 8008cf0:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 8008cf2:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 8008cfa:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 8008cfc:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8008d00:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8008d04:	b153      	cbz	r3, 8008d1c <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008d06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d08:	b943      	cbnz	r3, 8008d1c <tcp_write+0x4f4>
 8008d0a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008d0c:	b933      	cbnz	r3, 8008d1c <tcp_write+0x4f4>
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <tcp_write+0x524>)
 8008d10:	4911      	ldr	r1, [pc, #68]	; (8008d58 <tcp_write+0x530>)
 8008d12:	4810      	ldr	r0, [pc, #64]	; (8008d54 <tcp_write+0x52c>)
 8008d14:	f240 3212 	movw	r2, #786	; 0x312
 8008d18:	f002 f830 	bl	800ad7c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8008d1c:	b176      	cbz	r6, 8008d3c <tcp_write+0x514>
 8008d1e:	68f0      	ldr	r0, [r6, #12]
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f43f ad97 	beq.w	8008854 <tcp_write+0x2c>
 8008d26:	9b08      	ldr	r3, [sp, #32]
 8008d28:	f013 0402 	ands.w	r4, r3, #2
 8008d2c:	d106      	bne.n	8008d3c <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008d2e:	8985      	ldrh	r5, [r0, #12]
 8008d30:	2008      	movs	r0, #8
 8008d32:	f7fc fbf7 	bl	8005524 <lwip_htons>
 8008d36:	68f3      	ldr	r3, [r6, #12]
 8008d38:	4328      	orrs	r0, r5
 8008d3a:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e589      	b.n	8008854 <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008d40:	f04f 0b00 	mov.w	fp, #0
 8008d44:	e70d      	b.n	8008b62 <tcp_write+0x33a>
    return ERR_CONN;
 8008d46:	f06f 000a 	mvn.w	r0, #10
 8008d4a:	e583      	b.n	8008854 <tcp_write+0x2c>
 8008d4c:	0801a9bc 	.word	0x0801a9bc
 8008d50:	0801ad20 	.word	0x0801ad20
 8008d54:	08018c9a 	.word	0x08018c9a
 8008d58:	0801adac 	.word	0x0801adac
 8008d5c:	0801ad2e 	.word	0x0801ad2e
 8008d60:	0801ad3f 	.word	0x0801ad3f
 8008d64:	0801ad77 	.word	0x0801ad77

08008d68 <tcp_split_unsent_seg>:
{
 8008d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008d6e:	4606      	mov	r6, r0
 8008d70:	b930      	cbnz	r0, 8008d80 <tcp_split_unsent_seg+0x18>
 8008d72:	4b5d      	ldr	r3, [pc, #372]	; (8008ee8 <tcp_split_unsent_seg+0x180>)
 8008d74:	495d      	ldr	r1, [pc, #372]	; (8008eec <tcp_split_unsent_seg+0x184>)
 8008d76:	485e      	ldr	r0, [pc, #376]	; (8008ef0 <tcp_split_unsent_seg+0x188>)
 8008d78:	f240 324b 	movw	r2, #843	; 0x34b
 8008d7c:	f001 fffe 	bl	800ad7c <iprintf>
  useg = pcb->unsent;
 8008d80:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 8008d82:	b914      	cbnz	r4, 8008d8a <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
 8008d88:	e009      	b.n	8008d9e <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 8008d8a:	b95d      	cbnz	r5, 8008da4 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8008d8c:	4b56      	ldr	r3, [pc, #344]	; (8008ee8 <tcp_split_unsent_seg+0x180>)
 8008d8e:	4959      	ldr	r1, [pc, #356]	; (8008ef4 <tcp_split_unsent_seg+0x18c>)
 8008d90:	4857      	ldr	r0, [pc, #348]	; (8008ef0 <tcp_split_unsent_seg+0x188>)
 8008d92:	f240 3253 	movw	r2, #851	; 0x353
 8008d96:	f001 fff1 	bl	800ad7c <iprintf>
    return ERR_VAL;
 8008d9a:	f06f 0005 	mvn.w	r0, #5
}
 8008d9e:	b003      	add	sp, #12
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 8008da4:	8923      	ldrh	r3, [r4, #8]
 8008da6:	42ab      	cmp	r3, r5
 8008da8:	d801      	bhi.n	8008dae <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 8008daa:	2000      	movs	r0, #0
 8008dac:	e7f7      	b.n	8008d9e <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8008dae:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8008db0:	42ab      	cmp	r3, r5
 8008db2:	d206      	bcs.n	8008dc2 <tcp_split_unsent_seg+0x5a>
 8008db4:	4b4c      	ldr	r3, [pc, #304]	; (8008ee8 <tcp_split_unsent_seg+0x180>)
 8008db6:	4950      	ldr	r1, [pc, #320]	; (8008ef8 <tcp_split_unsent_seg+0x190>)
 8008db8:	484d      	ldr	r0, [pc, #308]	; (8008ef0 <tcp_split_unsent_seg+0x188>)
 8008dba:	f240 325b 	movw	r2, #859	; 0x35b
 8008dbe:	f001 ffdd 	bl	800ad7c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8008dc2:	8923      	ldrh	r3, [r4, #8]
 8008dc4:	b933      	cbnz	r3, 8008dd4 <tcp_split_unsent_seg+0x6c>
 8008dc6:	4b48      	ldr	r3, [pc, #288]	; (8008ee8 <tcp_split_unsent_seg+0x180>)
 8008dc8:	494c      	ldr	r1, [pc, #304]	; (8008efc <tcp_split_unsent_seg+0x194>)
 8008dca:	4849      	ldr	r0, [pc, #292]	; (8008ef0 <tcp_split_unsent_seg+0x188>)
 8008dcc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8008dd0:	f001 ffd4 	bl	800ad7c <iprintf>
  optflags = useg->flags;
 8008dd4:	f894 b00a 	ldrb.w	fp, [r4, #10]
  remainder = useg->len - split;
 8008dd8:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008ddc:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 8008de0:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008de4:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 8008de8:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8008dec:	fa17 f181 	uxtah	r1, r7, r1
 8008df0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008df4:	b289      	uxth	r1, r1
 8008df6:	2036      	movs	r0, #54	; 0x36
 8008df8:	f7fd f92c 	bl	8006054 <pbuf_alloc>
  if (p == NULL) {
 8008dfc:	4681      	mov	r9, r0
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d0c0      	beq.n	8008d84 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 8008e02:	6860      	ldr	r0, [r4, #4]
 8008e04:	8922      	ldrh	r2, [r4, #8]
 8008e06:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008e08:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	4642      	mov	r2, r8
 8008e14:	4439      	add	r1, r7
 8008e16:	f7fd fad3 	bl	80063c0 <pbuf_copy_partial>
 8008e1a:	4540      	cmp	r0, r8
 8008e1c:	d15f      	bne.n	8008ede <tcp_split_unsent_seg+0x176>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	8998      	ldrh	r0, [r3, #12]
 8008e22:	f7fc fb7f 	bl	8005524 <lwip_htons>
  if (split_flags & TCP_PSH) {
 8008e26:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008e2a:	b2c7      	uxtb	r7, r0
 8008e2c:	bf0e      	itee	eq
 8008e2e:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8008e32:	f007 0737 	andne.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8008e36:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 8008e3a:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008e3c:	68e3      	ldr	r3, [r4, #12]
 8008e3e:	6858      	ldr	r0, [r3, #4]
    remainder_flags |= TCP_FIN;
 8008e40:	bf44      	itt	mi
 8008e42:	f048 0801 	orrmi.w	r8, r8, #1
    split_flags &= ~TCP_FIN;
 8008e46:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008e4a:	f7fc fb6e 	bl	800552a <lwip_htonl>
 8008e4e:	4642      	mov	r2, r8
 8008e50:	182b      	adds	r3, r5, r0
 8008e52:	f8cd b000 	str.w	fp, [sp]
 8008e56:	4649      	mov	r1, r9
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff fbc5 	bl	80085e8 <tcp_create_segment>
  if (seg == NULL) {
 8008e5e:	4680      	mov	r8, r0
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d03c      	beq.n	8008ede <tcp_split_unsent_seg+0x176>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008e64:	6860      	ldr	r0, [r4, #4]
 8008e66:	f7fd f9c9 	bl	80061fc <pbuf_clen>
 8008e6a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8008e6e:	1a18      	subs	r0, r3, r0
 8008e70:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008e74:	6860      	ldr	r0, [r4, #4]
 8008e76:	8901      	ldrh	r1, [r0, #8]
 8008e78:	eba5 050a 	sub.w	r5, r5, sl
 8008e7c:	fa11 f185 	uxtah	r1, r1, r5
 8008e80:	b289      	uxth	r1, r1
 8008e82:	f7fd f963 	bl	800614c <pbuf_realloc>
  useg->len -= remainder;
 8008e86:	8923      	ldrh	r3, [r4, #8]
 8008e88:	fa1f f985 	uxth.w	r9, r5
 8008e8c:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008e8e:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 8008e90:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008e94:	4638      	mov	r0, r7
 8008e96:	899d      	ldrh	r5, [r3, #12]
 8008e98:	f7fc fb44 	bl	8005524 <lwip_htons>
 8008e9c:	68e3      	ldr	r3, [r4, #12]
 8008e9e:	4328      	orrs	r0, r5
 8008ea0:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008ea2:	6860      	ldr	r0, [r4, #4]
 8008ea4:	f7fd f9aa 	bl	80061fc <pbuf_clen>
 8008ea8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8008eac:	4418      	add	r0, r3
 8008eae:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008eb2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008eb6:	f7fd f9a1 	bl	80061fc <pbuf_clen>
 8008eba:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8008ebe:	4418      	add	r0, r3
  seg->next = useg->next;
 8008ec0:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008ec2:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 8008ec6:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 8008eca:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 8008ece:	f8d8 0000 	ldr.w	r0, [r8]
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f47f af69 	bne.w	8008daa <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 8008ed8:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 8008edc:	e75f      	b.n	8008d9e <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f7fd f854 	bl	8005f8c <pbuf_free>
 8008ee4:	e74e      	b.n	8008d84 <tcp_split_unsent_seg+0x1c>
 8008ee6:	bf00      	nop
 8008ee8:	0801a9bc 	.word	0x0801a9bc
 8008eec:	0801adca 	.word	0x0801adca
 8008ef0:	08018c9a 	.word	0x08018c9a
 8008ef4:	0801adec 	.word	0x0801adec
 8008ef8:	0801ae0e 	.word	0x0801ae0e
 8008efc:	0801ae1b 	.word	0x0801ae1b

08008f00 <tcp_enqueue_flags>:
{
 8008f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008f04:	f011 0803 	ands.w	r8, r1, #3
{
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008f0c:	d106      	bne.n	8008f1c <tcp_enqueue_flags+0x1c>
 8008f0e:	4b3e      	ldr	r3, [pc, #248]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008f10:	493e      	ldr	r1, [pc, #248]	; (800900c <tcp_enqueue_flags+0x10c>)
 8008f12:	483f      	ldr	r0, [pc, #252]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008f14:	f240 4211 	movw	r2, #1041	; 0x411
 8008f18:	f001 ff30 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008f1c:	b934      	cbnz	r4, 8008f2c <tcp_enqueue_flags+0x2c>
 8008f1e:	4b3a      	ldr	r3, [pc, #232]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008f20:	493c      	ldr	r1, [pc, #240]	; (8009014 <tcp_enqueue_flags+0x114>)
 8008f22:	483b      	ldr	r0, [pc, #236]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008f24:	f240 4213 	movw	r2, #1043	; 0x413
 8008f28:	f001 ff28 	bl	800ad7c <iprintf>
  if (flags & TCP_SYN) {
 8008f2c:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008f30:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8008f34:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008f38:	4649      	mov	r1, r9
 8008f3a:	2036      	movs	r0, #54	; 0x36
 8008f3c:	f7fd f88a 	bl	8006054 <pbuf_alloc>
 8008f40:	4605      	mov	r5, r0
 8008f42:	b940      	cbnz	r0, 8008f56 <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008f44:	8b63      	ldrh	r3, [r4, #26]
 8008f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f4a:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008f50:	b003      	add	sp, #12
 8008f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008f56:	8943      	ldrh	r3, [r0, #10]
 8008f58:	454b      	cmp	r3, r9
 8008f5a:	d206      	bcs.n	8008f6a <tcp_enqueue_flags+0x6a>
 8008f5c:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008f5e:	492e      	ldr	r1, [pc, #184]	; (8009018 <tcp_enqueue_flags+0x118>)
 8008f60:	482b      	ldr	r0, [pc, #172]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008f62:	f240 4239 	movw	r2, #1081	; 0x439
 8008f66:	f001 ff09 	bl	800ad7c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008f6a:	9700      	str	r7, [sp, #0]
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008f70:	4632      	mov	r2, r6
 8008f72:	4620      	mov	r0, r4
 8008f74:	f7ff fb38 	bl	80085e8 <tcp_create_segment>
 8008f78:	4605      	mov	r5, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0e2      	beq.n	8008f44 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008f7e:	68c3      	ldr	r3, [r0, #12]
 8008f80:	079a      	lsls	r2, r3, #30
 8008f82:	d006      	beq.n	8008f92 <tcp_enqueue_flags+0x92>
 8008f84:	4b20      	ldr	r3, [pc, #128]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008f86:	4925      	ldr	r1, [pc, #148]	; (800901c <tcp_enqueue_flags+0x11c>)
 8008f88:	4821      	ldr	r0, [pc, #132]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008f8a:	f240 4242 	movw	r2, #1090	; 0x442
 8008f8e:	f001 fef5 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008f92:	892b      	ldrh	r3, [r5, #8]
 8008f94:	b133      	cbz	r3, 8008fa4 <tcp_enqueue_flags+0xa4>
 8008f96:	4b1c      	ldr	r3, [pc, #112]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008f98:	4921      	ldr	r1, [pc, #132]	; (8009020 <tcp_enqueue_flags+0x120>)
 8008f9a:	481d      	ldr	r0, [pc, #116]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008f9c:	f240 4243 	movw	r2, #1091	; 0x443
 8008fa0:	f001 feec 	bl	800ad7c <iprintf>
  if (pcb->unsent == NULL) {
 8008fa4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008fa6:	bb4b      	cbnz	r3, 8008ffc <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 8008fa8:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008fb0:	f1b8 0f00 	cmp.w	r8, #0
 8008fb4:	d002      	beq.n	8008fbc <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 8008fb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008fb8:	3301      	adds	r3, #1
 8008fba:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8008fbc:	07f3      	lsls	r3, r6, #31
    tcp_set_flags(pcb, TF_FIN);
 8008fbe:	bf48      	it	mi
 8008fc0:	8b63      	ldrhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008fc2:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 8008fc4:	bf44      	itt	mi
 8008fc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008fca:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008fcc:	f7fd f916 	bl	80061fc <pbuf_clen>
 8008fd0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8008fd4:	4418      	add	r0, r3
 8008fd6:	b280      	uxth	r0, r0
 8008fd8:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d0b7      	beq.n	8008f50 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008fe0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008fe2:	b948      	cbnz	r0, 8008ff8 <tcp_enqueue_flags+0xf8>
 8008fe4:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	d1b2      	bne.n	8008f50 <tcp_enqueue_flags+0x50>
 8008fea:	4b07      	ldr	r3, [pc, #28]	; (8009008 <tcp_enqueue_flags+0x108>)
 8008fec:	490d      	ldr	r1, [pc, #52]	; (8009024 <tcp_enqueue_flags+0x124>)
 8008fee:	4808      	ldr	r0, [pc, #32]	; (8009010 <tcp_enqueue_flags+0x110>)
 8008ff0:	f240 4265 	movw	r2, #1125	; 0x465
 8008ff4:	f001 fec2 	bl	800ad7c <iprintf>
  return ERR_OK;
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	e7a9      	b.n	8008f50 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1fb      	bne.n	8008ffc <tcp_enqueue_flags+0xfc>
    useg->next = seg;
 8009004:	6015      	str	r5, [r2, #0]
 8009006:	e7d0      	b.n	8008faa <tcp_enqueue_flags+0xaa>
 8009008:	0801a9bc 	.word	0x0801a9bc
 800900c:	0801ae29 	.word	0x0801ae29
 8009010:	08018c9a 	.word	0x08018c9a
 8009014:	0801ae7e 	.word	0x0801ae7e
 8009018:	0801ae9d 	.word	0x0801ae9d
 800901c:	0801aed6 	.word	0x0801aed6
 8009020:	0801aeee 	.word	0x0801aeee
 8009024:	0801af18 	.word	0x0801af18

08009028 <tcp_send_fin>:
{
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800902a:	4604      	mov	r4, r0
 800902c:	b930      	cbnz	r0, 800903c <tcp_send_fin+0x14>
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <tcp_send_fin+0x54>)
 8009030:	4913      	ldr	r1, [pc, #76]	; (8009080 <tcp_send_fin+0x58>)
 8009032:	4814      	ldr	r0, [pc, #80]	; (8009084 <tcp_send_fin+0x5c>)
 8009034:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009038:	f001 fea0 	bl	800ad7c <iprintf>
  if (pcb->unsent != NULL) {
 800903c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800903e:	b14d      	cbz	r5, 8009054 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009040:	462f      	mov	r7, r5
 8009042:	682d      	ldr	r5, [r5, #0]
 8009044:	2d00      	cmp	r5, #0
 8009046:	d1fb      	bne.n	8009040 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8998      	ldrh	r0, [r3, #12]
 800904c:	f7fc fa6a 	bl	8005524 <lwip_htons>
 8009050:	0743      	lsls	r3, r0, #29
 8009052:	d005      	beq.n	8009060 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009054:	4620      	mov	r0, r4
 8009056:	2101      	movs	r1, #1
}
 8009058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800905c:	f7ff bf50 	b.w	8008f00 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2001      	movs	r0, #1
 8009064:	899e      	ldrh	r6, [r3, #12]
 8009066:	f7fc fa5d 	bl	8005524 <lwip_htons>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4330      	orrs	r0, r6
 800906e:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009070:	8b63      	ldrh	r3, [r4, #26]
 8009072:	f043 0320 	orr.w	r3, r3, #32
 8009076:	8363      	strh	r3, [r4, #26]
}
 8009078:	4628      	mov	r0, r5
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	0801a9bc 	.word	0x0801a9bc
 8009080:	0801af40 	.word	0x0801af40
 8009084:	08018c9a 	.word	0x08018c9a

08009088 <tcp_rexmit_rto_prepare>:
{
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800908c:	4604      	mov	r4, r0
 800908e:	b930      	cbnz	r0, 800909e <tcp_rexmit_rto_prepare+0x16>
 8009090:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <tcp_rexmit_rto_prepare+0x7c>)
 8009092:	491d      	ldr	r1, [pc, #116]	; (8009108 <tcp_rexmit_rto_prepare+0x80>)
 8009094:	481d      	ldr	r0, [pc, #116]	; (800910c <tcp_rexmit_rto_prepare+0x84>)
 8009096:	f240 6263 	movw	r2, #1635	; 0x663
 800909a:	f001 fe6f 	bl	800ad7c <iprintf>
  if (pcb->unacked == NULL) {
 800909e:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80090a0:	b945      	cbnz	r5, 80090b4 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 80090a2:	f06f 0005 	mvn.w	r0, #5
}
 80090a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 80090aa:	f7ff fa3b 	bl	8008524 <tcp_output_segment_busy>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d1f7      	bne.n	80090a2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80090b2:	682d      	ldr	r5, [r5, #0]
 80090b4:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 80090b6:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f6      	bne.n	80090aa <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 80090bc:	f7ff fa32 	bl	8008524 <tcp_output_segment_busy>
 80090c0:	4606      	mov	r6, r0
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d1ed      	bne.n	80090a2 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 80090c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090c8:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 80090ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 80090cc:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 80090d0:	8b63      	ldrh	r3, [r4, #26]
 80090d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80090d6:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80090d8:	68eb      	ldr	r3, [r5, #12]
 80090da:	6858      	ldr	r0, [r3, #4]
 80090dc:	f7fc fa25 	bl	800552a <lwip_htonl>
 80090e0:	68eb      	ldr	r3, [r5, #12]
 80090e2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80090e6:	4607      	mov	r7, r0
 80090e8:	8998      	ldrh	r0, [r3, #12]
 80090ea:	f7fc fa1b 	bl	8005524 <lwip_htons>
 80090ee:	f010 0303 	ands.w	r3, r0, #3
 80090f2:	bf18      	it	ne
 80090f4:	2301      	movne	r3, #1
 80090f6:	4447      	add	r7, r8
 80090f8:	443b      	add	r3, r7
 80090fa:	64e3      	str	r3, [r4, #76]	; 0x4c
  pcb->rttest = 0;
 80090fc:	6366      	str	r6, [r4, #52]	; 0x34
  return ERR_OK;
 80090fe:	4630      	mov	r0, r6
 8009100:	e7d1      	b.n	80090a6 <tcp_rexmit_rto_prepare+0x1e>
 8009102:	bf00      	nop
 8009104:	0801a9bc 	.word	0x0801a9bc
 8009108:	0801af5a 	.word	0x0801af5a
 800910c:	08018c9a 	.word	0x08018c9a

08009110 <tcp_rexmit>:
{
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8009112:	4604      	mov	r4, r0
 8009114:	b930      	cbnz	r0, 8009124 <tcp_rexmit+0x14>
 8009116:	4b1c      	ldr	r3, [pc, #112]	; (8009188 <tcp_rexmit+0x78>)
 8009118:	491c      	ldr	r1, [pc, #112]	; (800918c <tcp_rexmit+0x7c>)
 800911a:	481d      	ldr	r0, [pc, #116]	; (8009190 <tcp_rexmit+0x80>)
 800911c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8009120:	f001 fe2c 	bl	800ad7c <iprintf>
  if (pcb->unacked == NULL) {
 8009124:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009126:	b915      	cbnz	r5, 800912e <tcp_rexmit+0x1e>
    return ERR_VAL;
 8009128:	f06f 0005 	mvn.w	r0, #5
}
 800912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800912e:	4628      	mov	r0, r5
 8009130:	f7ff f9f8 	bl	8008524 <tcp_output_segment_busy>
 8009134:	2800      	cmp	r0, #0
 8009136:	d1f7      	bne.n	8009128 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	6723      	str	r3, [r4, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800913c:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  while (*cur_seg &&
 8009140:	6833      	ldr	r3, [r6, #0]
 8009142:	b993      	cbnz	r3, 800916a <tcp_rexmit+0x5a>
  seg->next = *cur_seg;
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009148:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800914a:	682b      	ldr	r3, [r5, #0]
 800914c:	b90b      	cbnz	r3, 8009152 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800914e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009152:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009156:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009158:	bf18      	it	ne
 800915a:	3301      	addne	r3, #1
  pcb->rttest = 0;
 800915c:	f04f 0000 	mov.w	r0, #0
    ++pcb->nrtx;
 8009160:	bf18      	it	ne
 8009162:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 8009166:	6360      	str	r0, [r4, #52]	; 0x34
  return ERR_OK;
 8009168:	e7e0      	b.n	800912c <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	6858      	ldr	r0, [r3, #4]
 800916e:	f7fc f9dc 	bl	800552a <lwip_htonl>
 8009172:	68eb      	ldr	r3, [r5, #12]
 8009174:	4607      	mov	r7, r0
 8009176:	6858      	ldr	r0, [r3, #4]
 8009178:	f7fc f9d7 	bl	800552a <lwip_htonl>
 800917c:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800917e:	2800      	cmp	r0, #0
 8009180:	dae0      	bge.n	8009144 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 8009182:	6836      	ldr	r6, [r6, #0]
 8009184:	e7dc      	b.n	8009140 <tcp_rexmit+0x30>
 8009186:	bf00      	nop
 8009188:	0801a9bc 	.word	0x0801a9bc
 800918c:	0801af7e 	.word	0x0801af7e
 8009190:	08018c9a 	.word	0x08018c9a

08009194 <tcp_rexmit_fast>:
{
 8009194:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009196:	4604      	mov	r4, r0
 8009198:	b930      	cbnz	r0, 80091a8 <tcp_rexmit_fast+0x14>
 800919a:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <tcp_rexmit_fast+0x5c>)
 800919c:	4915      	ldr	r1, [pc, #84]	; (80091f4 <tcp_rexmit_fast+0x60>)
 800919e:	4816      	ldr	r0, [pc, #88]	; (80091f8 <tcp_rexmit_fast+0x64>)
 80091a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80091a4:	f001 fdea 	bl	800ad7c <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80091a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80091aa:	b303      	cbz	r3, 80091ee <tcp_rexmit_fast+0x5a>
 80091ac:	8b63      	ldrh	r3, [r4, #26]
 80091ae:	075b      	lsls	r3, r3, #29
 80091b0:	d41d      	bmi.n	80091ee <tcp_rexmit_fast+0x5a>
    if (tcp_rexmit(pcb) == ERR_OK) {
 80091b2:	4620      	mov	r0, r4
 80091b4:	f7ff ffac 	bl	8009110 <tcp_rexmit>
 80091b8:	b9c8      	cbnz	r0, 80091ee <tcp_rexmit_fast+0x5a>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80091ba:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80091be:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 80091c2:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80091c4:	4299      	cmp	r1, r3
 80091c6:	bf28      	it	cs
 80091c8:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80091ca:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80091cc:	005d      	lsls	r5, r3, #1
        pcb->ssthresh = 2 * pcb->mss;
 80091ce:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80091d2:	ea4f 0261 	mov.w	r2, r1, asr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80091d6:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 80091d8:	bf88      	it	hi
 80091da:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80091dc:	4413      	add	r3, r2
 80091de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80091e2:	8b63      	ldrh	r3, [r4, #26]
        pcb->ssthresh = 2 * pcb->mss;
 80091e4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 80091e8:	f043 0304 	orr.w	r3, r3, #4
 80091ec:	8363      	strh	r3, [r4, #26]
}
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	0801a9bc 	.word	0x0801a9bc
 80091f4:	0801af96 	.word	0x0801af96
 80091f8:	08018c9a 	.word	0x08018c9a

080091fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80091fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009204:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8009208:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 800920c:	4606      	mov	r6, r0
 800920e:	460f      	mov	r7, r1
 8009210:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8009212:	461d      	mov	r5, r3
 8009214:	b933      	cbnz	r3, 8009224 <tcp_rst+0x28>
 8009216:	4b18      	ldr	r3, [pc, #96]	; (8009278 <tcp_rst+0x7c>)
 8009218:	4918      	ldr	r1, [pc, #96]	; (800927c <tcp_rst+0x80>)
 800921a:	4819      	ldr	r0, [pc, #100]	; (8009280 <tcp_rst+0x84>)
 800921c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8009220:	f001 fdac 	bl	800ad7c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8009224:	f1b8 0f00 	cmp.w	r8, #0
 8009228:	d106      	bne.n	8009238 <tcp_rst+0x3c>
 800922a:	4b13      	ldr	r3, [pc, #76]	; (8009278 <tcp_rst+0x7c>)
 800922c:	4915      	ldr	r1, [pc, #84]	; (8009284 <tcp_rst+0x88>)
 800922e:	4814      	ldr	r0, [pc, #80]	; (8009280 <tcp_rst+0x84>)
 8009230:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8009234:	f001 fda2 	bl	800ad7c <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8009238:	4638      	mov	r0, r7
 800923a:	f7fc f976 	bl	800552a <lwip_htonl>
 800923e:	2314      	movs	r3, #20
 8009240:	f646 010b 	movw	r1, #26635	; 0x680b
 8009244:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009248:	4602      	mov	r2, r0
 800924a:	f8cd a000 	str.w	sl, [sp]
 800924e:	4620      	mov	r0, r4
 8009250:	464b      	mov	r3, r9
 8009252:	2100      	movs	r1, #0
 8009254:	f7ff fa38 	bl	80086c8 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009258:	4604      	mov	r4, r0
 800925a:	b150      	cbz	r0, 8009272 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800925c:	f7ff fa9c 	bl	8008798 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009260:	4643      	mov	r3, r8
 8009262:	462a      	mov	r2, r5
 8009264:	4621      	mov	r1, r4
 8009266:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009268:	b004      	add	sp, #16
 800926a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800926e:	f7ff baa3 	b.w	80087b8 <tcp_output_control_segment>
}
 8009272:	b004      	add	sp, #16
 8009274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009278:	0801a9bc 	.word	0x0801a9bc
 800927c:	0801afb3 	.word	0x0801afb3
 8009280:	08018c9a 	.word	0x08018c9a
 8009284:	0801afcd 	.word	0x0801afcd

08009288 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009288:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800928a:	4604      	mov	r4, r0
 800928c:	b930      	cbnz	r0, 800929c <tcp_send_empty_ack+0x14>
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <tcp_send_empty_ack+0x58>)
 8009290:	4914      	ldr	r1, [pc, #80]	; (80092e4 <tcp_send_empty_ack+0x5c>)
 8009292:	4815      	ldr	r0, [pc, #84]	; (80092e8 <tcp_send_empty_ack+0x60>)
 8009294:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8009298:	f001 fd70 	bl	800ad7c <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800929c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800929e:	f7fc f944 	bl	800552a <lwip_htonl>
 80092a2:	2100      	movs	r1, #0
 80092a4:	4602      	mov	r2, r0
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff fa50 	bl	800874c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80092ac:	4605      	mov	r5, r0
 80092ae:	b930      	cbnz	r0, 80092be <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80092b0:	8b63      	ldrh	r3, [r4, #26]
 80092b2:	f043 0303 	orr.w	r3, r3, #3
 80092b6:	8363      	strh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80092b8:	f06f 0001 	mvn.w	r0, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80092be:	f7ff fa6b 	bl	8008798 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80092c2:	1d23      	adds	r3, r4, #4
 80092c4:	4622      	mov	r2, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	4620      	mov	r0, r4
 80092ca:	f7ff fa75 	bl	80087b8 <tcp_output_control_segment>
  if (err != ERR_OK) {
 80092ce:	8b63      	ldrh	r3, [r4, #26]
 80092d0:	b118      	cbz	r0, 80092da <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80092d2:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80092d6:	8363      	strh	r3, [r4, #26]
 80092d8:	e7f0      	b.n	80092bc <tcp_send_empty_ack+0x34>
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	e7fa      	b.n	80092d6 <tcp_send_empty_ack+0x4e>
 80092e0:	0801a9bc 	.word	0x0801a9bc
 80092e4:	0801afe8 	.word	0x0801afe8
 80092e8:	08018c9a 	.word	0x08018c9a

080092ec <tcp_output>:
{
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80092f0:	4604      	mov	r4, r0
{
 80092f2:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80092f4:	b930      	cbnz	r0, 8009304 <tcp_output+0x18>
 80092f6:	4b8f      	ldr	r3, [pc, #572]	; (8009534 <tcp_output+0x248>)
 80092f8:	498f      	ldr	r1, [pc, #572]	; (8009538 <tcp_output+0x24c>)
 80092fa:	4890      	ldr	r0, [pc, #576]	; (800953c <tcp_output+0x250>)
 80092fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009300:	f001 fd3c 	bl	800ad7c <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009304:	7d23      	ldrb	r3, [r4, #20]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d106      	bne.n	8009318 <tcp_output+0x2c>
 800930a:	4b8a      	ldr	r3, [pc, #552]	; (8009534 <tcp_output+0x248>)
 800930c:	498c      	ldr	r1, [pc, #560]	; (8009540 <tcp_output+0x254>)
 800930e:	488b      	ldr	r0, [pc, #556]	; (800953c <tcp_output+0x250>)
 8009310:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009314:	f001 fd32 	bl	800ad7c <iprintf>
  if (tcp_input_pcb == pcb) {
 8009318:	4b8a      	ldr	r3, [pc, #552]	; (8009544 <tcp_output+0x258>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	42a3      	cmp	r3, r4
 800931e:	f000 8171 	beq.w	8009604 <tcp_output+0x318>
  seg = pcb->unsent;
 8009322:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 8009324:	b94d      	cbnz	r5, 800933a <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 8009326:	8b63      	ldrh	r3, [r4, #26]
 8009328:	0798      	lsls	r0, r3, #30
 800932a:	f140 8167 	bpl.w	80095fc <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800932e:	4620      	mov	r0, r4
}
 8009330:	b007      	add	sp, #28
 8009332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 8009336:	f7ff bfa7 	b.w	8009288 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800933a:	7a20      	ldrb	r0, [r4, #8]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800933c:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 8009340:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009344:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009348:	b340      	cbz	r0, 800939c <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800934a:	f7fc fd65 	bl	8005e18 <netif_get_by_index>
    return ip_route(src, dst);
 800934e:	4607      	mov	r7, r0
  if (netif == NULL) {
 8009350:	2800      	cmp	r0, #0
 8009352:	f000 8170 	beq.w	8009636 <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	b90b      	cbnz	r3, 800935e <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800935a:	6843      	ldr	r3, [r0, #4]
 800935c:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800935e:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009360:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009362:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009364:	bf28      	it	cs
 8009366:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009368:	f7fc f8df 	bl	800552a <lwip_htonl>
 800936c:	892b      	ldrh	r3, [r5, #8]
 800936e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009370:	1a9b      	subs	r3, r3, r2
 8009372:	4418      	add	r0, r3
 8009374:	4540      	cmp	r0, r8
 8009376:	d915      	bls.n	80093a4 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009378:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800937c:	4543      	cmp	r3, r8
 800937e:	d1d2      	bne.n	8009326 <tcp_output+0x3a>
 8009380:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1cf      	bne.n	8009326 <tcp_output+0x3a>
 8009386:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1cb      	bne.n	8009326 <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800938e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009392:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
      pcb->persist_probe = 0;
 8009396:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800939a:	e7c4      	b.n	8009326 <tcp_output+0x3a>
    return ip_route(src, dst);
 800939c:	4648      	mov	r0, r9
 800939e:	f7fb fb53 	bl	8004a48 <ip4_route>
 80093a2:	e7d4      	b.n	800934e <tcp_output+0x62>
  useg = pcb->unacked;
 80093a4:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 80093ac:	b126      	cbz	r6, 80093b8 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 80093ae:	4633      	mov	r3, r6
 80093b0:	6836      	ldr	r6, [r6, #0]
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	d1fb      	bne.n	80093ae <tcp_output+0xc2>
 80093b6:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 80093b8:	f8df a178 	ldr.w	sl, [pc, #376]	; 8009534 <tcp_output+0x248>
 80093bc:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800953c <tcp_output+0x250>
 80093c0:	e0de      	b.n	8009580 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 80093c2:	7d23      	ldrb	r3, [r4, #20]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d009      	beq.n	80093dc <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80093c8:	68eb      	ldr	r3, [r5, #12]
 80093ca:	2010      	movs	r0, #16
 80093cc:	899b      	ldrh	r3, [r3, #12]
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	f7fc f8a8 	bl	8005524 <lwip_htons>
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	68ea      	ldr	r2, [r5, #12]
 80093d8:	4318      	orrs	r0, r3
 80093da:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 80093dc:	4628      	mov	r0, r5
 80093de:	f7ff f8a1 	bl	8008524 <tcp_output_segment_busy>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d16f      	bne.n	80094c6 <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80093e6:	68eb      	ldr	r3, [r5, #12]
 80093e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	f7fc f89d 	bl	800552a <lwip_htonl>
 80093f0:	9b04      	ldr	r3, [sp, #16]
 80093f2:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80093f4:	68eb      	ldr	r3, [r5, #12]
 80093f6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80093f8:	9304      	str	r3, [sp, #16]
 80093fa:	f7fc f893 	bl	8005524 <lwip_htons>
 80093fe:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009400:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009402:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009406:	4413      	add	r3, r2
 8009408:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800940a:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800940c:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800940e:	07d2      	lsls	r2, r2, #31
 8009410:	d449      	bmi.n	80094a6 <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009412:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 8009416:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800941a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800941c:	bfbc      	itt	lt
 800941e:	2300      	movlt	r3, #0
 8009420:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 8009422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009424:	b94b      	cbnz	r3, 800943a <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 8009426:	4948      	ldr	r1, [pc, #288]	; (8009548 <tcp_output+0x25c>)
 8009428:	68eb      	ldr	r3, [r5, #12]
 800942a:	6809      	ldr	r1, [r1, #0]
 800942c:	9204      	str	r2, [sp, #16]
 800942e:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009430:	6858      	ldr	r0, [r3, #4]
 8009432:	f7fc f87a 	bl	800552a <lwip_htonl>
 8009436:	9a04      	ldr	r2, [sp, #16]
 8009438:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800943a:	6869      	ldr	r1, [r5, #4]
 800943c:	68eb      	ldr	r3, [r5, #12]
 800943e:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 8009440:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  seg->p->payload = seg->tcphdr;
 8009444:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009446:	1a18      	subs	r0, r3, r0
 8009448:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800944a:	ebac 0c00 	sub.w	ip, ip, r0
 800944e:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 8009452:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8009456:	ebac 0000 	sub.w	r0, ip, r0
 800945a:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800945c:	2100      	movs	r1, #0
 800945e:	7419      	strb	r1, [r3, #16]
 8009460:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8009462:	7aa9      	ldrb	r1, [r5, #10]
 8009464:	0089      	lsls	r1, r1, #2
 8009466:	f001 0104 	and.w	r1, r1, #4
 800946a:	3114      	adds	r1, #20
 800946c:	440b      	add	r3, r1
 800946e:	429a      	cmp	r2, r3
 8009470:	d006      	beq.n	8009480 <tcp_output+0x194>
 8009472:	4936      	ldr	r1, [pc, #216]	; (800954c <tcp_output+0x260>)
 8009474:	4653      	mov	r3, sl
 8009476:	f240 621c 	movw	r2, #1564	; 0x61c
 800947a:	4658      	mov	r0, fp
 800947c:	f001 fc7e 	bl	800ad7c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009480:	2306      	movs	r3, #6
 8009482:	9702      	str	r7, [sp, #8]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	7aa3      	ldrb	r3, [r4, #10]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	7ae3      	ldrb	r3, [r4, #11]
 800948c:	6868      	ldr	r0, [r5, #4]
 800948e:	464a      	mov	r2, r9
 8009490:	4621      	mov	r1, r4
 8009492:	f7fb fc45 	bl	8004d20 <ip4_output_if>
    if (err != ERR_OK) {
 8009496:	b1b0      	cbz	r0, 80094c6 <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009498:	8b63      	ldrh	r3, [r4, #26]
 800949a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949e:	8363      	strh	r3, [r4, #26]
}
 80094a0:	b007      	add	sp, #28
 80094a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80094a6:	464a      	mov	r2, r9
 80094a8:	4639      	mov	r1, r7
 80094aa:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	f7fd ffe0 	bl	8007474 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80094b4:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80094b8:	f7fc f837 	bl	800552a <lwip_htonl>
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	6158      	str	r0, [r3, #20]
    opts += 1;
 80094c0:	f103 0218 	add.w	r2, r3, #24
 80094c4:	e7a7      	b.n	8009416 <tcp_output+0x12a>
    pcb->unsent = seg->next;
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80094ca:	7d23      	ldrb	r3, [r4, #20]
 80094cc:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80094ce:	bf1e      	ittt	ne
 80094d0:	8b63      	ldrhne	r3, [r4, #26]
 80094d2:	f023 0303 	bicne.w	r3, r3, #3
 80094d6:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80094d8:	68eb      	ldr	r3, [r5, #12]
 80094da:	6858      	ldr	r0, [r3, #4]
 80094dc:	f7fc f825 	bl	800552a <lwip_htonl>
 80094e0:	8929      	ldrh	r1, [r5, #8]
 80094e2:	68eb      	ldr	r3, [r5, #12]
 80094e4:	9104      	str	r1, [sp, #16]
 80094e6:	9005      	str	r0, [sp, #20]
 80094e8:	8998      	ldrh	r0, [r3, #12]
 80094ea:	f7fc f81b 	bl	8005524 <lwip_htons>
 80094ee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80094f2:	f010 0303 	ands.w	r3, r0, #3
 80094f6:	440a      	add	r2, r1
 80094f8:	bf18      	it	ne
 80094fa:	2301      	movne	r3, #1
 80094fc:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80094fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 8009504:	bfb8      	it	lt
 8009506:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 8009508:	68ea      	ldr	r2, [r5, #12]
 800950a:	892b      	ldrh	r3, [r5, #8]
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	8990      	ldrh	r0, [r2, #12]
 8009510:	f7fc f808 	bl	8005524 <lwip_htons>
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	f010 0003 	ands.w	r0, r0, #3
 800951a:	bf18      	it	ne
 800951c:	2001      	movne	r0, #1
 800951e:	42d8      	cmn	r0, r3
 8009520:	f000 8085 	beq.w	800962e <tcp_output+0x342>
      seg->next = NULL;
 8009524:	2300      	movs	r3, #0
 8009526:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8009528:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800952a:	b98b      	cbnz	r3, 8009550 <tcp_output+0x264>
        pcb->unacked = seg;
 800952c:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800952e:	462e      	mov	r6, r5
 8009530:	e023      	b.n	800957a <tcp_output+0x28e>
 8009532:	bf00      	nop
 8009534:	0801a9bc 	.word	0x0801a9bc
 8009538:	0801b008 	.word	0x0801b008
 800953c:	08018c9a 	.word	0x08018c9a
 8009540:	0801b020 	.word	0x0801b020
 8009544:	2000e49c 	.word	0x2000e49c
 8009548:	2000e48c 	.word	0x2000e48c
 800954c:	0801b05d 	.word	0x0801b05d
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009550:	68eb      	ldr	r3, [r5, #12]
 8009552:	6858      	ldr	r0, [r3, #4]
 8009554:	f7fb ffe9 	bl	800552a <lwip_htonl>
 8009558:	68f2      	ldr	r2, [r6, #12]
 800955a:	9004      	str	r0, [sp, #16]
 800955c:	6850      	ldr	r0, [r2, #4]
 800955e:	f7fb ffe4 	bl	800552a <lwip_htonl>
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	1a18      	subs	r0, r3, r0
 8009566:	2800      	cmp	r0, #0
 8009568:	da5f      	bge.n	800962a <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800956a:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	2a00      	cmp	r2, #0
 8009572:	d149      	bne.n	8009608 <tcp_output+0x31c>
          seg->next = (*cur_seg);
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8009578:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800957a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800957c:	2d00      	cmp	r5, #0
 800957e:	d03a      	beq.n	80095f6 <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009580:	68eb      	ldr	r3, [r5, #12]
 8009582:	6858      	ldr	r0, [r3, #4]
 8009584:	f7fb ffd1 	bl	800552a <lwip_htonl>
 8009588:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800958a:	1ac0      	subs	r0, r0, r3
 800958c:	892b      	ldrh	r3, [r5, #8]
 800958e:	4418      	add	r0, r3
  while (seg != NULL &&
 8009590:	4540      	cmp	r0, r8
 8009592:	d82e      	bhi.n	80095f2 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 8009594:	68eb      	ldr	r3, [r5, #12]
 8009596:	8998      	ldrh	r0, [r3, #12]
 8009598:	f7fb ffc4 	bl	8005524 <lwip_htons>
 800959c:	0741      	lsls	r1, r0, #29
 800959e:	d506      	bpl.n	80095ae <tcp_output+0x2c2>
 80095a0:	4926      	ldr	r1, [pc, #152]	; (800963c <tcp_output+0x350>)
 80095a2:	4653      	mov	r3, sl
 80095a4:	f240 5236 	movw	r2, #1334	; 0x536
 80095a8:	4658      	mov	r0, fp
 80095aa:	f001 fbe7 	bl	800ad7c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80095ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f43f af06 	beq.w	80093c2 <tcp_output+0xd6>
 80095b6:	8b62      	ldrh	r2, [r4, #26]
 80095b8:	f012 0f44 	tst.w	r2, #68	; 0x44
 80095bc:	f47f af01 	bne.w	80093c2 <tcp_output+0xd6>
 80095c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80095c2:	b143      	cbz	r3, 80095d6 <tcp_output+0x2ea>
 80095c4:	6819      	ldr	r1, [r3, #0]
 80095c6:	2900      	cmp	r1, #0
 80095c8:	f47f aefb 	bne.w	80093c2 <tcp_output+0xd6>
 80095cc:	8919      	ldrh	r1, [r3, #8]
 80095ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80095d0:	4299      	cmp	r1, r3
 80095d2:	f4bf aef6 	bcs.w	80093c2 <tcp_output+0xd6>
 80095d6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f43f aef1 	beq.w	80093c2 <tcp_output+0xd6>
 80095e0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80095e4:	2b07      	cmp	r3, #7
 80095e6:	f63f aeec 	bhi.w	80093c2 <tcp_output+0xd6>
 80095ea:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80095ee:	f47f aee8 	bne.w	80093c2 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 80095f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80095f4:	b913      	cbnz	r3, 80095fc <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80095fc:	8b63      	ldrh	r3, [r4, #26]
 80095fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009602:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8009604:	2000      	movs	r0, #0
 8009606:	e74b      	b.n	80094a0 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009608:	68d2      	ldr	r2, [r2, #12]
 800960a:	9305      	str	r3, [sp, #20]
 800960c:	6850      	ldr	r0, [r2, #4]
 800960e:	f7fb ff8c 	bl	800552a <lwip_htonl>
 8009612:	68e9      	ldr	r1, [r5, #12]
 8009614:	9004      	str	r0, [sp, #16]
 8009616:	6848      	ldr	r0, [r1, #4]
 8009618:	f7fb ff87 	bl	800552a <lwip_htonl>
 800961c:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800961e:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009620:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 8009622:	2800      	cmp	r0, #0
 8009624:	daa6      	bge.n	8009574 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	e7a1      	b.n	800956e <tcp_output+0x282>
          useg->next = seg;
 800962a:	6035      	str	r5, [r6, #0]
 800962c:	e77f      	b.n	800952e <tcp_output+0x242>
      tcp_seg_free(seg);
 800962e:	4628      	mov	r0, r5
 8009630:	f7fd f8da 	bl	80067e8 <tcp_seg_free>
 8009634:	e7a1      	b.n	800957a <tcp_output+0x28e>
    return ERR_RTE;
 8009636:	f06f 0003 	mvn.w	r0, #3
 800963a:	e731      	b.n	80094a0 <tcp_output+0x1b4>
 800963c:	0801b046 	.word	0x0801b046

08009640 <tcp_rexmit_rto_commit>:
{
 8009640:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009642:	4604      	mov	r4, r0
 8009644:	b930      	cbnz	r0, 8009654 <tcp_rexmit_rto_commit+0x14>
 8009646:	4b09      	ldr	r3, [pc, #36]	; (800966c <tcp_rexmit_rto_commit+0x2c>)
 8009648:	4909      	ldr	r1, [pc, #36]	; (8009670 <tcp_rexmit_rto_commit+0x30>)
 800964a:	480a      	ldr	r0, [pc, #40]	; (8009674 <tcp_rexmit_rto_commit+0x34>)
 800964c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009650:	f001 fb94 	bl	800ad7c <iprintf>
  if (pcb->nrtx < 0xFF) {
 8009654:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009658:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800965a:	bf1c      	itt	ne
 800965c:	3301      	addne	r3, #1
 800965e:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 8009662:	4620      	mov	r0, r4
}
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 8009668:	f7ff be40 	b.w	80092ec <tcp_output>
 800966c:	0801a9bc 	.word	0x0801a9bc
 8009670:	0801b070 	.word	0x0801b070
 8009674:	08018c9a 	.word	0x08018c9a

08009678 <tcp_rexmit_rto>:
{
 8009678:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800967a:	4604      	mov	r4, r0
 800967c:	b930      	cbnz	r0, 800968c <tcp_rexmit_rto+0x14>
 800967e:	4b08      	ldr	r3, [pc, #32]	; (80096a0 <tcp_rexmit_rto+0x28>)
 8009680:	4908      	ldr	r1, [pc, #32]	; (80096a4 <tcp_rexmit_rto+0x2c>)
 8009682:	4809      	ldr	r0, [pc, #36]	; (80096a8 <tcp_rexmit_rto+0x30>)
 8009684:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8009688:	f001 fb78 	bl	800ad7c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800968c:	4620      	mov	r0, r4
 800968e:	f7ff fcfb 	bl	8009088 <tcp_rexmit_rto_prepare>
 8009692:	b920      	cbnz	r0, 800969e <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 8009694:	4620      	mov	r0, r4
}
 8009696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800969a:	f7ff bfd1 	b.w	8009640 <tcp_rexmit_rto_commit>
}
 800969e:	bd10      	pop	{r4, pc}
 80096a0:	0801a9bc 	.word	0x0801a9bc
 80096a4:	0801b093 	.word	0x0801b093
 80096a8:	08018c9a 	.word	0x08018c9a

080096ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80096ac:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80096ae:	4604      	mov	r4, r0
 80096b0:	b930      	cbnz	r0, 80096c0 <tcp_keepalive+0x14>
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <tcp_keepalive+0x44>)
 80096b4:	490f      	ldr	r1, [pc, #60]	; (80096f4 <tcp_keepalive+0x48>)
 80096b6:	4810      	ldr	r0, [pc, #64]	; (80096f8 <tcp_keepalive+0x4c>)
 80096b8:	f640 0224 	movw	r2, #2084	; 0x824
 80096bc:	f001 fb5e 	bl	800ad7c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80096c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80096c2:	3801      	subs	r0, #1
 80096c4:	f7fb ff31 	bl	800552a <lwip_htonl>
 80096c8:	2100      	movs	r1, #0
 80096ca:	4602      	mov	r2, r0
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7ff f83d 	bl	800874c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80096d2:	4605      	mov	r5, r0
 80096d4:	b148      	cbz	r0, 80096ea <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80096d6:	f7ff f85f 	bl	8008798 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80096da:	1d23      	adds	r3, r4, #4
 80096dc:	4622      	mov	r2, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80096e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80096e6:	f7ff b867 	b.w	80087b8 <tcp_output_control_segment>
}
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	0801a9bc 	.word	0x0801a9bc
 80096f4:	0801b0af 	.word	0x0801b0af
 80096f8:	08018c9a 	.word	0x08018c9a

080096fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009700:	4606      	mov	r6, r0
 8009702:	b930      	cbnz	r0, 8009712 <tcp_zero_window_probe+0x16>
 8009704:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <tcp_zero_window_probe+0xbc>)
 8009706:	492d      	ldr	r1, [pc, #180]	; (80097bc <tcp_zero_window_probe+0xc0>)
 8009708:	482d      	ldr	r0, [pc, #180]	; (80097c0 <tcp_zero_window_probe+0xc4>)
 800970a:	f640 024f 	movw	r2, #2127	; 0x84f
 800970e:	f001 fb35 	bl	800ad7c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8009712:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 8009714:	2d00      	cmp	r5, #0
 8009716:	d048      	beq.n	80097aa <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8009718:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800971c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800971e:	bf1c      	itt	ne
 8009720:	3301      	addne	r3, #1
 8009722:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009726:	68eb      	ldr	r3, [r5, #12]
 8009728:	8998      	ldrh	r0, [r3, #12]
 800972a:	f7fb fefb 	bl	8005524 <lwip_htons>
 800972e:	f010 0401 	ands.w	r4, r0, #1
 8009732:	bf18      	it	ne
 8009734:	892c      	ldrhne	r4, [r5, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009736:	68eb      	ldr	r3, [r5, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009738:	bf1c      	itt	ne
 800973a:	fab4 f484 	clzne	r4, r4
 800973e:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	f084 0101 	eor.w	r1, r4, #1
 8009746:	4630      	mov	r0, r6
 8009748:	f7ff f800 	bl	800874c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800974c:	4607      	mov	r7, r0
 800974e:	b378      	cbz	r0, 80097b0 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009750:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8009754:	b1f4      	cbz	r4, 8009794 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009756:	2011      	movs	r0, #17
 8009758:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800975c:	f7fb fee2 	bl	8005524 <lwip_htons>
 8009760:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 8009764:	4320      	orrs	r0, r4
 8009766:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800976a:	68eb      	ldr	r3, [r5, #12]
 800976c:	6858      	ldr	r0, [r3, #4]
 800976e:	f7fb fedc 	bl	800552a <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009772:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009774:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009776:	1a1b      	subs	r3, r3, r0
 8009778:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800977a:	bfb8      	it	lt
 800977c:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800977e:	4638      	mov	r0, r7
 8009780:	f7ff f80a 	bl	8008798 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009784:	1d33      	adds	r3, r6, #4
 8009786:	4632      	mov	r2, r6
 8009788:	4639      	mov	r1, r7
 800978a:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800978c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009790:	f7ff b812 	b.w	80087b8 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009794:	6868      	ldr	r0, [r5, #4]
 8009796:	892a      	ldrh	r2, [r5, #8]
 8009798:	8903      	ldrh	r3, [r0, #8]
 800979a:	1a9b      	subs	r3, r3, r2
 800979c:	b29b      	uxth	r3, r3
 800979e:	2201      	movs	r2, #1
 80097a0:	f108 0114 	add.w	r1, r8, #20
 80097a4:	f7fc fe0c 	bl	80063c0 <pbuf_copy_partial>
 80097a8:	e7df      	b.n	800976a <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 80097aa:	4628      	mov	r0, r5
}
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295
 80097b4:	e7fa      	b.n	80097ac <tcp_zero_window_probe+0xb0>
 80097b6:	bf00      	nop
 80097b8:	0801a9bc 	.word	0x0801a9bc
 80097bc:	0801b0ca 	.word	0x0801b0ca
 80097c0:	08018c9a 	.word	0x08018c9a

080097c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80097c8:	2006      	movs	r0, #6
{
 80097ca:	460e      	mov	r6, r1
 80097cc:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80097ce:	f7fc f993 	bl	8005af8 <memp_malloc>
  if (timeout == NULL) {
 80097d2:	b938      	cbnz	r0, 80097e4 <sys_timeout_abs+0x20>
        t->next = timeout;
        break;
      }
    }
  }
}
 80097d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80097d8:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <sys_timeout_abs+0x54>)
 80097da:	4910      	ldr	r1, [pc, #64]	; (800981c <sys_timeout_abs+0x58>)
 80097dc:	4810      	ldr	r0, [pc, #64]	; (8009820 <sys_timeout_abs+0x5c>)
 80097de:	22be      	movs	r2, #190	; 0xbe
 80097e0:	f001 bacc 	b.w	800ad7c <iprintf>
  if (next_timeout == NULL) {
 80097e4:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 80097e6:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 80097e8:	2300      	movs	r3, #0
 80097ea:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 80097ec:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 80097ee:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 80097f2:	b90b      	cbnz	r3, 80097f8 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 80097f4:	6010      	str	r0, [r2, #0]
}
 80097f6:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80097f8:	6859      	ldr	r1, [r3, #4]
 80097fa:	1a61      	subs	r1, r4, r1
 80097fc:	2900      	cmp	r1, #0
 80097fe:	da01      	bge.n	8009804 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 8009800:	6003      	str	r3, [r0, #0]
 8009802:	e7f7      	b.n	80097f4 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009804:	4619      	mov	r1, r3
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	b11b      	cbz	r3, 8009812 <sys_timeout_abs+0x4e>
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	1aa2      	subs	r2, r4, r2
 800980e:	2a00      	cmp	r2, #0
 8009810:	daf8      	bge.n	8009804 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 8009812:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 8009814:	6008      	str	r0, [r1, #0]
        break;
 8009816:	e7ee      	b.n	80097f6 <sys_timeout_abs+0x32>
 8009818:	0801b0ed 	.word	0x0801b0ed
 800981c:	0801b163 	.word	0x0801b163
 8009820:	08018c9a 	.word	0x08018c9a
 8009824:	2000024c 	.word	0x2000024c

08009828 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009828:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800982a:	6843      	ldr	r3, [r0, #4]
{
 800982c:	4604      	mov	r4, r0
  cyclic->handler();
 800982e:	4798      	blx	r3

  now = sys_now();
 8009830:	f7f7 fc68 	bl	8001104 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8009834:	4b07      	ldr	r3, [pc, #28]	; (8009854 <lwip_cyclic_timer+0x2c>)
 8009836:	6825      	ldr	r5, [r4, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800983a:	4907      	ldr	r1, [pc, #28]	; (8009858 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800983c:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800983e:	1a1a      	subs	r2, r3, r0
 8009840:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8009842:	bfb8      	it	lt
 8009844:	1940      	addlt	r0, r0, r5
 8009846:	4622      	mov	r2, r4
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009848:	bfa8      	it	ge
 800984a:	4618      	movge	r0, r3
#endif
  }
}
 800984c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009850:	f7ff bfb8 	b.w	80097c4 <sys_timeout_abs>
 8009854:	2000024c 	.word	0x2000024c
 8009858:	08009829 	.word	0x08009829

0800985c <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800985c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	460d      	mov	r5, r1
 8009866:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8009868:	d306      	bcc.n	8009878 <sys_timeout+0x1c>
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <sys_timeout+0x30>)
 800986c:	4908      	ldr	r1, [pc, #32]	; (8009890 <sys_timeout+0x34>)
 800986e:	4809      	ldr	r0, [pc, #36]	; (8009894 <sys_timeout+0x38>)
 8009870:	f240 1229 	movw	r2, #297	; 0x129
 8009874:	f001 fa82 	bl	800ad7c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8009878:	f7f7 fc44 	bl	8001104 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800987c:	4632      	mov	r2, r6
 800987e:	4629      	mov	r1, r5
 8009880:	4420      	add	r0, r4
#endif
}
 8009882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009886:	f7ff bf9d 	b.w	80097c4 <sys_timeout_abs>
 800988a:	bf00      	nop
 800988c:	0801b0ed 	.word	0x0801b0ed
 8009890:	0801b1a0 	.word	0x0801b1a0
 8009894:	08018c9a 	.word	0x08018c9a

08009898 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <tcp_timer_needed+0x24>)
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	b962      	cbnz	r2, 80098b8 <tcp_timer_needed+0x20>
 800989e:	4a08      	ldr	r2, [pc, #32]	; (80098c0 <tcp_timer_needed+0x28>)
 80098a0:	6812      	ldr	r2, [r2, #0]
 80098a2:	b912      	cbnz	r2, 80098aa <tcp_timer_needed+0x12>
 80098a4:	4a07      	ldr	r2, [pc, #28]	; (80098c4 <tcp_timer_needed+0x2c>)
 80098a6:	6812      	ldr	r2, [r2, #0]
 80098a8:	b132      	cbz	r2, 80098b8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80098aa:	2201      	movs	r2, #1
 80098ac:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80098ae:	4906      	ldr	r1, [pc, #24]	; (80098c8 <tcp_timer_needed+0x30>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	20fa      	movs	r0, #250	; 0xfa
 80098b4:	f7ff bfd2 	b.w	800985c <sys_timeout>
}
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	2000024c 	.word	0x2000024c
 80098c0:	2000e488 	.word	0x2000e488
 80098c4:	2000e498 	.word	0x2000e498
 80098c8:	080098cd 	.word	0x080098cd

080098cc <tcpip_tcp_timer>:
{
 80098cc:	b508      	push	{r3, lr}
  tcp_tmr();
 80098ce:	f7fd fc33 	bl	8007138 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <tcpip_tcp_timer+0x28>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	b913      	cbnz	r3, 80098de <tcpip_tcp_timer+0x12>
 80098d8:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <tcpip_tcp_timer+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	b133      	cbz	r3, 80098ec <tcpip_tcp_timer+0x20>
}
 80098de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80098e2:	4906      	ldr	r1, [pc, #24]	; (80098fc <tcpip_tcp_timer+0x30>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	20fa      	movs	r0, #250	; 0xfa
 80098e8:	f7ff bfb8 	b.w	800985c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 80098ec:	4a04      	ldr	r2, [pc, #16]	; (8009900 <tcpip_tcp_timer+0x34>)
 80098ee:	6093      	str	r3, [r2, #8]
}
 80098f0:	bd08      	pop	{r3, pc}
 80098f2:	bf00      	nop
 80098f4:	2000e488 	.word	0x2000e488
 80098f8:	2000e498 	.word	0x2000e498
 80098fc:	080098cd 	.word	0x080098cd
 8009900:	2000024c 	.word	0x2000024c

08009904 <sys_timeouts_init>:
{
 8009904:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8009906:	4c0f      	ldr	r4, [pc, #60]	; (8009944 <sys_timeouts_init+0x40>)
 8009908:	490f      	ldr	r1, [pc, #60]	; (8009948 <sys_timeouts_init+0x44>)
 800990a:	f104 0208 	add.w	r2, r4, #8
 800990e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009912:	f7ff ffa3 	bl	800985c <sys_timeout>
 8009916:	f104 0210 	add.w	r2, r4, #16
 800991a:	490b      	ldr	r1, [pc, #44]	; (8009948 <sys_timeouts_init+0x44>)
 800991c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009920:	f7ff ff9c 	bl	800985c <sys_timeout>
 8009924:	f104 0218 	add.w	r2, r4, #24
 8009928:	4907      	ldr	r1, [pc, #28]	; (8009948 <sys_timeouts_init+0x44>)
 800992a:	f64e 2060 	movw	r0, #60000	; 0xea60
 800992e:	f7ff ff95 	bl	800985c <sys_timeout>
 8009932:	f104 0220 	add.w	r2, r4, #32
 8009936:	4904      	ldr	r1, [pc, #16]	; (8009948 <sys_timeouts_init+0x44>)
}
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800993c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009940:	f7ff bf8c 	b.w	800985c <sys_timeout>
 8009944:	0800bf30 	.word	0x0800bf30
 8009948:	08009829 	.word	0x08009829

0800994c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800994e:	f7f7 fbd9 	bl	8001104 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8009952:	4d0b      	ldr	r5, [pc, #44]	; (8009980 <sys_check_timeouts+0x34>)
  now = sys_now();
 8009954:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 8009956:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 8009958:	b181      	cbz	r1, 800997c <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800995a:	684b      	ldr	r3, [r1, #4]
 800995c:	1ae2      	subs	r2, r4, r3
 800995e:	2a00      	cmp	r2, #0
 8009960:	db0c      	blt.n	800997c <sys_check_timeouts+0x30>
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
 8009962:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    next_timeout = tmptimeout->next;
 8009966:	680a      	ldr	r2, [r1, #0]
 8009968:	602a      	str	r2, [r5, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800996a:	2006      	movs	r0, #6
    current_timeout_due_time = tmptimeout->time;
 800996c:	606b      	str	r3, [r5, #4]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800996e:	f7fc f8df 	bl	8005b30 <memp_free>
    if (handler != NULL) {
 8009972:	2e00      	cmp	r6, #0
 8009974:	d0ef      	beq.n	8009956 <sys_check_timeouts+0xa>
      handler(arg);
 8009976:	4638      	mov	r0, r7
 8009978:	47b0      	blx	r6
 800997a:	e7ec      	b.n	8009956 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800997c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800997e:	bf00      	nop
 8009980:	2000024c 	.word	0x2000024c

08009984 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009984:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009986:	f001 fa11 	bl	800adac <rand>
 800998a:	4b03      	ldr	r3, [pc, #12]	; (8009998 <udp_init+0x14>)
 800998c:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8009990:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8009994:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 8009996:	bd08      	pop	{r3, pc}
 8009998:	20000048 	.word	0x20000048

0800999c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	4688      	mov	r8, r1
 80099a2:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80099a4:	4607      	mov	r7, r0
 80099a6:	b928      	cbnz	r0, 80099b4 <udp_input+0x18>
 80099a8:	4b5f      	ldr	r3, [pc, #380]	; (8009b28 <udp_input+0x18c>)
 80099aa:	4960      	ldr	r1, [pc, #384]	; (8009b2c <udp_input+0x190>)
 80099ac:	4860      	ldr	r0, [pc, #384]	; (8009b30 <udp_input+0x194>)
 80099ae:	22cf      	movs	r2, #207	; 0xcf
 80099b0:	f001 f9e4 	bl	800ad7c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80099b4:	f1b8 0f00 	cmp.w	r8, #0
 80099b8:	d105      	bne.n	80099c6 <udp_input+0x2a>
 80099ba:	4b5b      	ldr	r3, [pc, #364]	; (8009b28 <udp_input+0x18c>)
 80099bc:	495d      	ldr	r1, [pc, #372]	; (8009b34 <udp_input+0x198>)
 80099be:	485c      	ldr	r0, [pc, #368]	; (8009b30 <udp_input+0x194>)
 80099c0:	22d0      	movs	r2, #208	; 0xd0
 80099c2:	f001 f9db 	bl	800ad7c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80099c6:	897b      	ldrh	r3, [r7, #10]
 80099c8:	2b07      	cmp	r3, #7
 80099ca:	d805      	bhi.n	80099d8 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80099cc:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80099ce:	b005      	add	sp, #20
 80099d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80099d4:	f7fc bada 	b.w	8005f8c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80099d8:	4e57      	ldr	r6, [pc, #348]	; (8009b38 <udp_input+0x19c>)
  udphdr = (struct udp_hdr *)p->payload;
 80099da:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80099dc:	6831      	ldr	r1, [r6, #0]
 80099de:	6970      	ldr	r0, [r6, #20]
 80099e0:	f7fb f9af 	bl	8004d42 <ip4_addr_isbroadcast_u32>
 80099e4:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 80099e6:	8820      	ldrh	r0, [r4, #0]
 80099e8:	f7fb fd9c 	bl	8005524 <lwip_htons>
 80099ec:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 80099ee:	8860      	ldrh	r0, [r4, #2]
 80099f0:	f7fb fd98 	bl	8005524 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099f4:	4b51      	ldr	r3, [pc, #324]	; (8009b3c <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80099f6:	f8df c130 	ldr.w	ip, [pc, #304]	; 8009b28 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80099fa:	681c      	ldr	r4, [r3, #0]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80099fc:	4950      	ldr	r1, [pc, #320]	; (8009b40 <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 80099fe:	9003      	str	r0, [sp, #12]
  uncon_pcb = NULL;
 8009a00:	2500      	movs	r5, #0
  prev = NULL;
 8009a02:	46ab      	mov	fp, r5
 8009a04:	469a      	mov	sl, r3
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a06:	b99c      	cbnz	r4, 8009a30 <udp_input+0x94>
  if (pcb != NULL) {
 8009a08:	b925      	cbnz	r5, 8009a14 <udp_input+0x78>
  if (for_us) {
 8009a0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009a0e:	6973      	ldr	r3, [r6, #20]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d1db      	bne.n	80099cc <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8009a14:	2108      	movs	r1, #8
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7fc fa84 	bl	8005f24 <pbuf_remove_header>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d05e      	beq.n	8009ade <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8009a20:	4b41      	ldr	r3, [pc, #260]	; (8009b28 <udp_input+0x18c>)
 8009a22:	4948      	ldr	r1, [pc, #288]	; (8009b44 <udp_input+0x1a8>)
 8009a24:	4842      	ldr	r0, [pc, #264]	; (8009b30 <udp_input+0x194>)
 8009a26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8009a2a:	f001 f9a7 	bl	800ad7c <iprintf>
 8009a2e:	e7cd      	b.n	80099cc <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 8009a30:	8a62      	ldrh	r2, [r4, #18]
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	4282      	cmp	r2, r0
 8009a36:	d14d      	bne.n	8009ad4 <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8009a38:	f1b8 0f00 	cmp.w	r8, #0
 8009a3c:	d107      	bne.n	8009a4e <udp_input+0xb2>
 8009a3e:	4663      	mov	r3, ip
 8009a40:	483b      	ldr	r0, [pc, #236]	; (8009b30 <udp_input+0x194>)
 8009a42:	2288      	movs	r2, #136	; 0x88
 8009a44:	f001 f99a 	bl	800ad7c <iprintf>
 8009a48:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009b28 <udp_input+0x18c>
 8009a4c:	493c      	ldr	r1, [pc, #240]	; (8009b40 <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a4e:	7a20      	ldrb	r0, [r4, #8]
 8009a50:	b130      	cbz	r0, 8009a60 <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a52:	6872      	ldr	r2, [r6, #4]
 8009a54:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a58:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	4290      	cmp	r0, r2
 8009a5e:	d139      	bne.n	8009ad4 <udp_input+0x138>
    if (broadcast != 0) {
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	f1b9 0f00 	cmp.w	r9, #0
 8009a66:	d030      	beq.n	8009aca <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009a68:	b13a      	cbz	r2, 8009a7a <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009a6a:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d004      	beq.n	8009a7a <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009a70:	f8d8 3008 	ldr.w	r3, [r8, #8]
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009a74:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009a76:	4218      	tst	r0, r3
 8009a78:	d12c      	bne.n	8009ad4 <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009a7a:	7c20      	ldrb	r0, [r4, #16]
 8009a7c:	0743      	lsls	r3, r0, #29
 8009a7e:	d40e      	bmi.n	8009a9e <udp_input+0x102>
        if (uncon_pcb == NULL) {
 8009a80:	b35d      	cbz	r5, 8009ada <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8009a82:	f1b9 0f00 	cmp.w	r9, #0
 8009a86:	d00a      	beq.n	8009a9e <udp_input+0x102>
 8009a88:	6970      	ldr	r0, [r6, #20]
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d107      	bne.n	8009a9e <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8009a8e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	4283      	cmp	r3, r0
 8009a96:	d002      	beq.n	8009a9e <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8009a98:	4290      	cmp	r0, r2
 8009a9a:	bf08      	it	eq
 8009a9c:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 8009a9e:	8aa2      	ldrh	r2, [r4, #20]
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d116      	bne.n	8009ad4 <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009aa6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 8009aa8:	b112      	cbz	r2, 8009ab0 <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009aaa:	6930      	ldr	r0, [r6, #16]
 8009aac:	4282      	cmp	r2, r0
 8009aae:	d111      	bne.n	8009ad4 <udp_input+0x138>
        if (prev != NULL) {
 8009ab0:	f1bb 0f00 	cmp.w	fp, #0
 8009ab4:	d007      	beq.n	8009ac6 <udp_input+0x12a>
          prev->next = pcb->next;
 8009ab6:	68e3      	ldr	r3, [r4, #12]
 8009ab8:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 8009abc:	f8da 3000 	ldr.w	r3, [sl]
 8009ac0:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 8009ac2:	f8ca 4000 	str.w	r4, [sl]
 8009ac6:	4625      	mov	r5, r4
 8009ac8:	e7a4      	b.n	8009a14 <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009aca:	2a00      	cmp	r2, #0
 8009acc:	d0d5      	beq.n	8009a7a <udp_input+0xde>
 8009ace:	6970      	ldr	r0, [r6, #20]
 8009ad0:	4290      	cmp	r0, r2
 8009ad2:	d0d2      	beq.n	8009a7a <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ad4:	46a3      	mov	fp, r4
 8009ad6:	68e4      	ldr	r4, [r4, #12]
 8009ad8:	e795      	b.n	8009a06 <udp_input+0x6a>
 8009ada:	4625      	mov	r5, r4
 8009adc:	e7df      	b.n	8009a9e <udp_input+0x102>
    if (pcb != NULL) {
 8009ade:	b16d      	cbz	r5, 8009afc <udp_input+0x160>
      if (pcb->recv != NULL) {
 8009ae0:	69ac      	ldr	r4, [r5, #24]
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	f43f af72 	beq.w	80099cc <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009ae8:	9b02      	ldr	r3, [sp, #8]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	69e8      	ldr	r0, [r5, #28]
 8009aee:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <udp_input+0x1ac>)
 8009af0:	463a      	mov	r2, r7
 8009af2:	4629      	mov	r1, r5
 8009af4:	47a0      	blx	r4
}
 8009af6:	b005      	add	sp, #20
 8009af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	f47f af64 	bne.w	80099cc <udp_input+0x30>
 8009b04:	6973      	ldr	r3, [r6, #20]
 8009b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b0a:	2be0      	cmp	r3, #224	; 0xe0
 8009b0c:	f43f af5e 	beq.w	80099cc <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009b10:	89b1      	ldrh	r1, [r6, #12]
 8009b12:	3108      	adds	r1, #8
 8009b14:	b209      	sxth	r1, r1
 8009b16:	4638      	mov	r0, r7
 8009b18:	f7fc fa30 	bl	8005f7c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009b1c:	2103      	movs	r1, #3
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f7fa ff6e 	bl	8004a00 <icmp_dest_unreach>
 8009b24:	e752      	b.n	80099cc <udp_input+0x30>
 8009b26:	bf00      	nop
 8009b28:	0801b1d6 	.word	0x0801b1d6
 8009b2c:	0801b247 	.word	0x0801b247
 8009b30:	08018c9a 	.word	0x08018c9a
 8009b34:	0801b25f 	.word	0x0801b25f
 8009b38:	200080f4 	.word	0x200080f4
 8009b3c:	2000e4a0 	.word	0x2000e4a0
 8009b40:	0801b278 	.word	0x0801b278
 8009b44:	0801b29d 	.word	0x0801b29d
 8009b48:	20008104 	.word	0x20008104

08009b4c <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 8009b4c:	4b2d      	ldr	r3, [pc, #180]	; (8009c04 <udp_bind+0xb8>)
{
 8009b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 8009b52:	2900      	cmp	r1, #0
 8009b54:	bf08      	it	eq
 8009b56:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009b58:	b950      	cbnz	r0, 8009b70 <udp_bind+0x24>
 8009b5a:	4b2b      	ldr	r3, [pc, #172]	; (8009c08 <udp_bind+0xbc>)
 8009b5c:	492b      	ldr	r1, [pc, #172]	; (8009c0c <udp_bind+0xc0>)
 8009b5e:	482c      	ldr	r0, [pc, #176]	; (8009c10 <udp_bind+0xc4>)
 8009b60:	f240 32b7 	movw	r2, #951	; 0x3b7
 8009b64:	f001 f90a 	bl	800ad7c <iprintf>
 8009b68:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009b70:	4f28      	ldr	r7, [pc, #160]	; (8009c14 <udp_bind+0xc8>)
 8009b72:	683e      	ldr	r6, [r7, #0]
 8009b74:	4635      	mov	r5, r6
 8009b76:	b9d5      	cbnz	r5, 8009bae <udp_bind+0x62>
  if (port == 0) {
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	d140      	bne.n	8009bfe <udp_bind+0xb2>
 8009b7c:	4b26      	ldr	r3, [pc, #152]	; (8009c18 <udp_bind+0xcc>)
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009b84:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8009b88:	4572      	cmp	r2, lr
 8009b8a:	bf1a      	itte	ne
 8009b8c:	3201      	addne	r2, #1
 8009b8e:	b292      	uxthne	r2, r2
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009b90:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b94:	46b4      	mov	ip, r6
 8009b96:	f1bc 0f00 	cmp.w	ip, #0
 8009b9a:	d10e      	bne.n	8009bba <udp_bind+0x6e>
 8009b9c:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8009b9e:	680b      	ldr	r3, [r1, #0]
 8009ba0:	6003      	str	r3, [r0, #0]
  pcb->local_port = port;
 8009ba2:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 8009ba4:	b90d      	cbnz	r5, 8009baa <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 8009ba6:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 8009ba8:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 8009baa:	2000      	movs	r0, #0
 8009bac:	e7de      	b.n	8009b6c <udp_bind+0x20>
    if (pcb == ipcb) {
 8009bae:	4285      	cmp	r5, r0
 8009bb0:	d001      	beq.n	8009bb6 <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009bb2:	68ed      	ldr	r5, [r5, #12]
 8009bb4:	e7df      	b.n	8009b76 <udp_bind+0x2a>
      rebind = 1;
 8009bb6:	2501      	movs	r5, #1
 8009bb8:	e7de      	b.n	8009b78 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 8009bba:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 8009bbe:	4590      	cmp	r8, r2
 8009bc0:	d107      	bne.n	8009bd2 <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009bc2:	3c01      	subs	r4, #1
 8009bc4:	b2a4      	uxth	r4, r4
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	d1de      	bne.n	8009b88 <udp_bind+0x3c>
 8009bca:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 8009bcc:	f06f 0007 	mvn.w	r0, #7
 8009bd0:	e7cc      	b.n	8009b6c <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009bd2:	f8dc c00c 	ldr.w	ip, [ip, #12]
 8009bd6:	e7de      	b.n	8009b96 <udp_bind+0x4a>
      if (pcb != ipcb) {
 8009bd8:	4283      	cmp	r3, r0
 8009bda:	d00c      	beq.n	8009bf6 <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 8009bdc:	8a5c      	ldrh	r4, [r3, #18]
 8009bde:	4294      	cmp	r4, r2
 8009be0:	d109      	bne.n	8009bf6 <udp_bind+0xaa>
 8009be2:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8009be6:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 8009be8:	4564      	cmp	r4, ip
 8009bea:	d0ef      	beq.n	8009bcc <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8009bec:	f1bc 0f00 	cmp.w	ip, #0
 8009bf0:	d0ec      	beq.n	8009bcc <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 8009bf2:	2c00      	cmp	r4, #0
 8009bf4:	d0ea      	beq.n	8009bcc <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1ed      	bne.n	8009bd8 <udp_bind+0x8c>
 8009bfc:	e7cf      	b.n	8009b9e <udp_bind+0x52>
 8009bfe:	4633      	mov	r3, r6
 8009c00:	e7fa      	b.n	8009bf8 <udp_bind+0xac>
 8009c02:	bf00      	nop
 8009c04:	0800be4c 	.word	0x0800be4c
 8009c08:	0801b1d6 	.word	0x0801b1d6
 8009c0c:	0801b2b8 	.word	0x0801b2b8
 8009c10:	08018c9a 	.word	0x08018c9a
 8009c14:	2000e4a0 	.word	0x2000e4a0
 8009c18:	20000048 	.word	0x20000048

08009c1c <udp_sendto_if_src>:
{
 8009c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	b085      	sub	sp, #20
 8009c22:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
 8009c26:	460e      	mov	r6, r1
 8009c28:	4690      	mov	r8, r2
 8009c2a:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	b960      	cbnz	r0, 8009c4a <udp_sendto_if_src+0x2e>
 8009c30:	4b3e      	ldr	r3, [pc, #248]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009c32:	493f      	ldr	r1, [pc, #252]	; (8009d30 <udp_sendto_if_src+0x114>)
 8009c34:	f240 22d1 	movw	r2, #721	; 0x2d1
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8009c38:	483e      	ldr	r0, [pc, #248]	; (8009d34 <udp_sendto_if_src+0x118>)
 8009c3a:	f001 f89f 	bl	800ad7c <iprintf>
 8009c3e:	f06f 040f 	mvn.w	r4, #15
}
 8009c42:	4620      	mov	r0, r4
 8009c44:	b005      	add	sp, #20
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8009c4a:	b921      	cbnz	r1, 8009c56 <udp_sendto_if_src+0x3a>
 8009c4c:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009c4e:	493a      	ldr	r1, [pc, #232]	; (8009d38 <udp_sendto_if_src+0x11c>)
 8009c50:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009c54:	e7f0      	b.n	8009c38 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8009c56:	b922      	cbnz	r2, 8009c62 <udp_sendto_if_src+0x46>
 8009c58:	4b34      	ldr	r3, [pc, #208]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009c5a:	4938      	ldr	r1, [pc, #224]	; (8009d3c <udp_sendto_if_src+0x120>)
 8009c5c:	f240 22d3 	movw	r2, #723	; 0x2d3
 8009c60:	e7ea      	b.n	8009c38 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8009c62:	f1ba 0f00 	cmp.w	sl, #0
 8009c66:	d104      	bne.n	8009c72 <udp_sendto_if_src+0x56>
 8009c68:	4b30      	ldr	r3, [pc, #192]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009c6a:	4935      	ldr	r1, [pc, #212]	; (8009d40 <udp_sendto_if_src+0x124>)
 8009c6c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8009c70:	e7e2      	b.n	8009c38 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8009c72:	f1bb 0f00 	cmp.w	fp, #0
 8009c76:	d104      	bne.n	8009c82 <udp_sendto_if_src+0x66>
 8009c78:	4b2c      	ldr	r3, [pc, #176]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009c7a:	4932      	ldr	r1, [pc, #200]	; (8009d44 <udp_sendto_if_src+0x128>)
 8009c7c:	f240 22d5 	movw	r2, #725	; 0x2d5
 8009c80:	e7da      	b.n	8009c38 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 8009c82:	8a42      	ldrh	r2, [r0, #18]
 8009c84:	b13a      	cbz	r2, 8009c96 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8009c86:	8932      	ldrh	r2, [r6, #8]
 8009c88:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d909      	bls.n	8009ca4 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 8009c90:	f04f 34ff 	mov.w	r4, #4294967295
 8009c94:	e7d5      	b.n	8009c42 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009c96:	4601      	mov	r1, r0
 8009c98:	f7ff ff58 	bl	8009b4c <udp_bind>
    if (err != ERR_OK) {
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	d0f1      	beq.n	8009c86 <udp_sendto_if_src+0x6a>
 8009ca2:	e7ce      	b.n	8009c42 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8009ca4:	2108      	movs	r1, #8
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7fc f938 	bl	8005f1c <pbuf_add_header>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d03a      	beq.n	8009d26 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009cb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009cb4:	2108      	movs	r1, #8
 8009cb6:	2022      	movs	r0, #34	; 0x22
 8009cb8:	f7fc f9cc 	bl	8006054 <pbuf_alloc>
    if (q == NULL) {
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d0e6      	beq.n	8009c90 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 8009cc2:	8933      	ldrh	r3, [r6, #8]
 8009cc4:	b113      	cbz	r3, 8009ccc <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	f7fc faee 	bl	80062a8 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8009ccc:	896b      	ldrh	r3, [r5, #10]
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d806      	bhi.n	8009ce0 <udp_sendto_if_src+0xc4>
 8009cd2:	4b16      	ldr	r3, [pc, #88]	; (8009d2c <udp_sendto_if_src+0x110>)
 8009cd4:	491c      	ldr	r1, [pc, #112]	; (8009d48 <udp_sendto_if_src+0x12c>)
 8009cd6:	4817      	ldr	r0, [pc, #92]	; (8009d34 <udp_sendto_if_src+0x118>)
 8009cd8:	f240 320d 	movw	r2, #781	; 0x30d
 8009cdc:	f001 f84e 	bl	800ad7c <iprintf>
  udphdr->src = lwip_htons(pcb->local_port);
 8009ce0:	8a78      	ldrh	r0, [r7, #18]
  udphdr = (struct udp_hdr *)q->payload;
 8009ce2:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 8009ce4:	f7fb fc1e 	bl	8005524 <lwip_htons>
 8009ce8:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 8009cea:	4648      	mov	r0, r9
 8009cec:	f7fb fc1a 	bl	8005524 <lwip_htons>
  udphdr->chksum = 0x0000;
 8009cf0:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 8009cf2:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 8009cf4:	71a3      	strb	r3, [r4, #6]
 8009cf6:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8009cf8:	8928      	ldrh	r0, [r5, #8]
 8009cfa:	f7fb fc13 	bl	8005524 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009cfe:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 8009d00:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009d02:	f8cd b008 	str.w	fp, [sp, #8]
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	7abb      	ldrb	r3, [r7, #10]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	4642      	mov	r2, r8
 8009d10:	4651      	mov	r1, sl
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7fa ff8a 	bl	8004c2c <ip4_output_if_src>
  if (q != p) {
 8009d18:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009d1a:	4604      	mov	r4, r0
  if (q != p) {
 8009d1c:	d091      	beq.n	8009c42 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f7fc f934 	bl	8005f8c <pbuf_free>
    q = NULL;
 8009d24:	e78d      	b.n	8009c42 <udp_sendto_if_src+0x26>
 8009d26:	4635      	mov	r5, r6
 8009d28:	e7d0      	b.n	8009ccc <udp_sendto_if_src+0xb0>
 8009d2a:	bf00      	nop
 8009d2c:	0801b1d6 	.word	0x0801b1d6
 8009d30:	0801b2ce 	.word	0x0801b2ce
 8009d34:	08018c9a 	.word	0x08018c9a
 8009d38:	0801b2ed 	.word	0x0801b2ed
 8009d3c:	0801b30d 	.word	0x0801b30d
 8009d40:	0801b32f 	.word	0x0801b32f
 8009d44:	0801b351 	.word	0x0801b351
 8009d48:	0801b372 	.word	0x0801b372

08009d4c <udp_sendto_if>:
{
 8009d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d4e:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8009d50:	b950      	cbnz	r0, 8009d68 <udp_sendto_if+0x1c>
 8009d52:	4b18      	ldr	r3, [pc, #96]	; (8009db4 <udp_sendto_if+0x68>)
 8009d54:	4918      	ldr	r1, [pc, #96]	; (8009db8 <udp_sendto_if+0x6c>)
 8009d56:	f44f 7220 	mov.w	r2, #640	; 0x280
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8009d5a:	4818      	ldr	r0, [pc, #96]	; (8009dbc <udp_sendto_if+0x70>)
 8009d5c:	f001 f80e 	bl	800ad7c <iprintf>
 8009d60:	f06f 000f 	mvn.w	r0, #15
}
 8009d64:	b002      	add	sp, #8
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8009d68:	b921      	cbnz	r1, 8009d74 <udp_sendto_if+0x28>
 8009d6a:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <udp_sendto_if+0x68>)
 8009d6c:	4914      	ldr	r1, [pc, #80]	; (8009dc0 <udp_sendto_if+0x74>)
 8009d6e:	f240 2281 	movw	r2, #641	; 0x281
 8009d72:	e7f2      	b.n	8009d5a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8009d74:	b922      	cbnz	r2, 8009d80 <udp_sendto_if+0x34>
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <udp_sendto_if+0x68>)
 8009d78:	4912      	ldr	r1, [pc, #72]	; (8009dc4 <udp_sendto_if+0x78>)
 8009d7a:	f240 2282 	movw	r2, #642	; 0x282
 8009d7e:	e7ec      	b.n	8009d5a <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8009d80:	b924      	cbnz	r4, 8009d8c <udp_sendto_if+0x40>
 8009d82:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <udp_sendto_if+0x68>)
 8009d84:	4910      	ldr	r1, [pc, #64]	; (8009dc8 <udp_sendto_if+0x7c>)
 8009d86:	f240 2283 	movw	r2, #643	; 0x283
 8009d8a:	e7e6      	b.n	8009d5a <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009d8c:	6805      	ldr	r5, [r0, #0]
 8009d8e:	b11d      	cbz	r5, 8009d98 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8009d90:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009d94:	2ee0      	cmp	r6, #224	; 0xe0
 8009d96:	d105      	bne.n	8009da4 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 8009d98:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8009d9a:	e9cd 4500 	strd	r4, r5, [sp]
 8009d9e:	f7ff ff3d 	bl	8009c1c <udp_sendto_if_src>
 8009da2:	e7df      	b.n	8009d64 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8009da4:	6866      	ldr	r6, [r4, #4]
 8009da6:	42b5      	cmp	r5, r6
 8009da8:	d101      	bne.n	8009dae <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009daa:	4605      	mov	r5, r0
 8009dac:	e7f5      	b.n	8009d9a <udp_sendto_if+0x4e>
        return ERR_RTE;
 8009dae:	f06f 0003 	mvn.w	r0, #3
 8009db2:	e7d7      	b.n	8009d64 <udp_sendto_if+0x18>
 8009db4:	0801b1d6 	.word	0x0801b1d6
 8009db8:	0801b3a0 	.word	0x0801b3a0
 8009dbc:	08018c9a 	.word	0x08018c9a
 8009dc0:	0801b3bb 	.word	0x0801b3bb
 8009dc4:	0801b3d7 	.word	0x0801b3d7
 8009dc8:	0801b3f5 	.word	0x0801b3f5

08009dcc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	460d      	mov	r5, r1
 8009dd0:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	b948      	cbnz	r0, 8009dea <udp_connect+0x1e>
 8009dd6:	4b16      	ldr	r3, [pc, #88]	; (8009e30 <udp_connect+0x64>)
 8009dd8:	4916      	ldr	r1, [pc, #88]	; (8009e34 <udp_connect+0x68>)
 8009dda:	f240 4235 	movw	r2, #1077	; 0x435
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009dde:	4816      	ldr	r0, [pc, #88]	; (8009e38 <udp_connect+0x6c>)
 8009de0:	f000 ffcc 	bl	800ad7c <iprintf>
 8009de4:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 8009de8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009dea:	b921      	cbnz	r1, 8009df6 <udp_connect+0x2a>
 8009dec:	4b10      	ldr	r3, [pc, #64]	; (8009e30 <udp_connect+0x64>)
 8009dee:	4913      	ldr	r1, [pc, #76]	; (8009e3c <udp_connect+0x70>)
 8009df0:	f240 4236 	movw	r2, #1078	; 0x436
 8009df4:	e7f3      	b.n	8009dde <udp_connect+0x12>
  if (pcb->local_port == 0) {
 8009df6:	8a42      	ldrh	r2, [r0, #18]
 8009df8:	b16a      	cbz	r2, 8009e16 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8009dfa:	682b      	ldr	r3, [r5, #0]
 8009dfc:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009dfe:	7c23      	ldrb	r3, [r4, #16]
  pcb->remote_port = port;
 8009e00:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8009e02:	f043 0304 	orr.w	r3, r3, #4
 8009e06:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009e08:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <udp_connect+0x74>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	b940      	cbnz	r0, 8009e22 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 8009e10:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8009e12:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8009e14:	e7e8      	b.n	8009de8 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009e16:	4601      	mov	r1, r0
 8009e18:	f7ff fe98 	bl	8009b4c <udp_bind>
    if (err != ERR_OK) {
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d0ec      	beq.n	8009dfa <udp_connect+0x2e>
 8009e20:	e7e2      	b.n	8009de8 <udp_connect+0x1c>
    if (pcb == ipcb) {
 8009e22:	42a0      	cmp	r0, r4
 8009e24:	d001      	beq.n	8009e2a <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009e26:	68c0      	ldr	r0, [r0, #12]
 8009e28:	e7f1      	b.n	8009e0e <udp_connect+0x42>
      return ERR_OK;
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e7dc      	b.n	8009de8 <udp_connect+0x1c>
 8009e2e:	bf00      	nop
 8009e30:	0801b1d6 	.word	0x0801b1d6
 8009e34:	0801b48b 	.word	0x0801b48b
 8009e38:	08018c9a 	.word	0x08018c9a
 8009e3c:	0801b4a4 	.word	0x0801b4a4
 8009e40:	2000e4a0 	.word	0x2000e4a0

08009e44 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8009e44:	b930      	cbnz	r0, 8009e54 <udp_recv+0x10>
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <udp_recv+0x18>)
 8009e48:	4905      	ldr	r1, [pc, #20]	; (8009e60 <udp_recv+0x1c>)
 8009e4a:	4806      	ldr	r0, [pc, #24]	; (8009e64 <udp_recv+0x20>)
 8009e4c:	f240 428a 	movw	r2, #1162	; 0x48a
 8009e50:	f000 bf94 	b.w	800ad7c <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 8009e54:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	0801b1d6 	.word	0x0801b1d6
 8009e60:	0801b4dc 	.word	0x0801b4dc
 8009e64:	08018c9a 	.word	0x08018c9a

08009e68 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8009e68:	4601      	mov	r1, r0
 8009e6a:	b930      	cbnz	r0, 8009e7a <udp_remove+0x12>
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <udp_remove+0x3c>)
 8009e6e:	490e      	ldr	r1, [pc, #56]	; (8009ea8 <udp_remove+0x40>)
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <udp_remove+0x44>)
 8009e72:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8009e76:	f000 bf81 	b.w	800ad7c <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8009e7a:	4a0d      	ldr	r2, [pc, #52]	; (8009eb0 <udp_remove+0x48>)
 8009e7c:	6813      	ldr	r3, [r2, #0]
 8009e7e:	4283      	cmp	r3, r0
 8009e80:	d105      	bne.n	8009e8e <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8009e82:	68c3      	ldr	r3, [r0, #12]
 8009e84:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8009e86:	2000      	movs	r0, #0
 8009e88:	f7fb be52 	b.w	8005b30 <memp_free>
 8009e8c:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f9      	beq.n	8009e86 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d0f6      	beq.n	8009e86 <udp_remove+0x1e>
 8009e98:	428a      	cmp	r2, r1
 8009e9a:	d1f7      	bne.n	8009e8c <udp_remove+0x24>
        pcb2->next = pcb->next;
 8009e9c:	68ca      	ldr	r2, [r1, #12]
 8009e9e:	60da      	str	r2, [r3, #12]
        break;
 8009ea0:	e7f1      	b.n	8009e86 <udp_remove+0x1e>
 8009ea2:	bf00      	nop
 8009ea4:	0801b1d6 	.word	0x0801b1d6
 8009ea8:	0801b4f2 	.word	0x0801b4f2
 8009eac:	08018c9a 	.word	0x08018c9a
 8009eb0:	2000e4a0 	.word	0x2000e4a0

08009eb4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8009eb4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f7fb fe1e 	bl	8005af8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	b128      	cbz	r0, 8009ecc <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	f000 ff52 	bl	800ad6c <memset>
    pcb->ttl = UDP_TTL;
 8009ec8:	23ff      	movs	r3, #255	; 0xff
 8009eca:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8009ecc:	4620      	mov	r0, r4
 8009ece:	bd10      	pop	{r4, pc}

08009ed0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009ed0:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8009ed2:	b138      	cbz	r0, 8009ee4 <udp_netif_ip_addr_changed+0x14>
 8009ed4:	6803      	ldr	r3, [r0, #0]
 8009ed6:	b12b      	cbz	r3, 8009ee4 <udp_netif_ip_addr_changed+0x14>
 8009ed8:	b121      	cbz	r1, 8009ee4 <udp_netif_ip_addr_changed+0x14>
 8009eda:	680b      	ldr	r3, [r1, #0]
 8009edc:	b113      	cbz	r3, 8009ee4 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009ede:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <udp_netif_ip_addr_changed+0x28>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	b903      	cbnz	r3, 8009ee6 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 8009ee4:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8009ee6:	681c      	ldr	r4, [r3, #0]
 8009ee8:	6802      	ldr	r2, [r0, #0]
 8009eea:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 8009eec:	bf04      	itt	eq
 8009eee:	680a      	ldreq	r2, [r1, #0]
 8009ef0:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	e7f5      	b.n	8009ee2 <udp_netif_ip_addr_changed+0x12>
 8009ef6:	bf00      	nop
 8009ef8:	2000e4a0 	.word	0x2000e4a0

08009efc <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009efc:	8943      	ldrh	r3, [r0, #10]
 8009efe:	2b0e      	cmp	r3, #14
{
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8009f06:	d91a      	bls.n	8009f3e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009f08:	7bc3      	ldrb	r3, [r0, #15]
 8009f0a:	b91b      	cbnz	r3, 8009f14 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8009f0c:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8009f10:	3301      	adds	r3, #1
 8009f12:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009f14:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009f16:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8009f18:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8009f1a:	07d9      	lsls	r1, r3, #31
 8009f1c:	d50a      	bpl.n	8009f34 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d111      	bne.n	8009f46 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009f22:	7843      	ldrb	r3, [r0, #1]
 8009f24:	b933      	cbnz	r3, 8009f34 <ethernet_input+0x38>
 8009f26:	7883      	ldrb	r3, [r0, #2]
 8009f28:	2b5e      	cmp	r3, #94	; 0x5e
 8009f2a:	d103      	bne.n	8009f34 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009f2c:	7b63      	ldrb	r3, [r4, #13]
 8009f2e:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009f32:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009f34:	2e08      	cmp	r6, #8
 8009f36:	d010      	beq.n	8009f5a <ethernet_input+0x5e>
 8009f38:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8009f3c:	d01d      	beq.n	8009f7a <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f7fc f824 	bl	8005f8c <pbuf_free>
  return ERR_OK;
 8009f44:	e017      	b.n	8009f76 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009f46:	4914      	ldr	r1, [pc, #80]	; (8009f98 <ethernet_input+0x9c>)
 8009f48:	2206      	movs	r2, #6
 8009f4a:	f000 fef3 	bl	800ad34 <memcmp>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d1f0      	bne.n	8009f34 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 8009f52:	7b63      	ldrb	r3, [r4, #13]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	e7eb      	b.n	8009f32 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009f5a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8009f5e:	071a      	lsls	r2, r3, #28
 8009f60:	d5ed      	bpl.n	8009f3e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009f62:	210e      	movs	r1, #14
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7fb ffdd 	bl	8005f24 <pbuf_remove_header>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d1e7      	bne.n	8009f3e <ethernet_input+0x42>
        ip4_input(p, netif);
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7fa fd97 	bl	8004aa4 <ip4_input>
}
 8009f76:	2000      	movs	r0, #0
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009f7a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8009f7e:	071b      	lsls	r3, r3, #28
 8009f80:	d5dd      	bpl.n	8009f3e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8009f82:	210e      	movs	r1, #14
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7fb ffcd 	bl	8005f24 <pbuf_remove_header>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1d7      	bne.n	8009f3e <ethernet_input+0x42>
        etharp_input(p, netif);
 8009f8e:	4629      	mov	r1, r5
 8009f90:	4620      	mov	r0, r4
 8009f92:	f7fa f9e1 	bl	8004358 <etharp_input>
      break;
 8009f96:	e7ee      	b.n	8009f76 <ethernet_input+0x7a>
 8009f98:	0800bf5c 	.word	0x0800bf5c

08009f9c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8009f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8009fa2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	4616      	mov	r6, r2
 8009faa:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8009fac:	f7fb faba 	bl	8005524 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009fb0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8009fb2:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f7fb ffb1 	bl	8005f1c <pbuf_add_header>
 8009fba:	b9e0      	cbnz	r0, 8009ff6 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009fbc:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 8009fbe:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	600b      	str	r3, [r1, #0]
 8009fc6:	88bb      	ldrh	r3, [r7, #4]
 8009fc8:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8009fca:	6833      	ldr	r3, [r6, #0]
 8009fcc:	f8c1 3006 	str.w	r3, [r1, #6]
 8009fd0:	88b3      	ldrh	r3, [r6, #4]
 8009fd2:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8009fd4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009fd8:	2b06      	cmp	r3, #6
 8009fda:	d006      	beq.n	8009fea <ethernet_output+0x4e>
 8009fdc:	4b08      	ldr	r3, [pc, #32]	; (800a000 <ethernet_output+0x64>)
 8009fde:	4909      	ldr	r1, [pc, #36]	; (800a004 <ethernet_output+0x68>)
 8009fe0:	4809      	ldr	r0, [pc, #36]	; (800a008 <ethernet_output+0x6c>)
 8009fe2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009fe6:	f000 fec9 	bl	800ad7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009fea:	69a3      	ldr	r3, [r4, #24]
 8009fec:	4629      	mov	r1, r5
 8009fee:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8009ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8009ff4:	4718      	bx	r3
}
 8009ff6:	f06f 0001 	mvn.w	r0, #1
 8009ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffe:	bf00      	nop
 800a000:	0801b50a 	.word	0x0801b50a
 800a004:	0801b581 	.word	0x0801b581
 800a008:	08018c9a 	.word	0x08018c9a

0800a00c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a010:	4604      	mov	r4, r0
 800a012:	b1a8      	cbz	r0, 800a040 <fs_open+0x34>
 800a014:	b1a1      	cbz	r1, 800a040 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a016:	4d0c      	ldr	r5, [pc, #48]	; (800a048 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800a018:	6869      	ldr	r1, [r5, #4]
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7f6 f8d8 	bl	80001d0 <strcmp>
 800a020:	b940      	cbnz	r0, 800a034 <fs_open+0x28>
      file->data = (const char *)f->data;
 800a022:	68ab      	ldr	r3, [r5, #8]
 800a024:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800a026:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800a028:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800a02a:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800a02e:	7c2b      	ldrb	r3, [r5, #16]
 800a030:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800a032:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a034:	682d      	ldr	r5, [r5, #0]
 800a036:	2d00      	cmp	r5, #0
 800a038:	d1ee      	bne.n	800a018 <fs_open+0xc>
  return ERR_VAL;
 800a03a:	f06f 0005 	mvn.w	r0, #5
 800a03e:	e7f8      	b.n	800a032 <fs_open+0x26>
    return ERR_ARG;
 800a040:	f06f 000f 	mvn.w	r0, #15
 800a044:	e7f5      	b.n	800a032 <fs_open+0x26>
 800a046:	bf00      	nop
 800a048:	0800bf68 	.word	0x0800bf68

0800a04c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a04c:	4770      	bx	lr

0800a04e <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 800a04e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 800a052:	1a10      	subs	r0, r2, r0
 800a054:	4770      	bx	lr

0800a056 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	4605      	mov	r5, r0
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 800a05c:	8810      	ldrh	r0, [r2, #0]
{
 800a05e:	460f      	mov	r7, r1
 800a060:	4616      	mov	r6, r2
 800a062:	4698      	mov	r8, r3
  if (len == 0) {
 800a064:	b310      	cbz	r0, 800a0ac <http_write+0x56>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a066:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 800a068:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800a06c:	0064      	lsls	r4, r4, #1
 800a06e:	b2a4      	uxth	r4, r4
 800a070:	4294      	cmp	r4, r2
 800a072:	bf28      	it	cs
 800a074:	4614      	movcs	r4, r2
 800a076:	4284      	cmp	r4, r0
 800a078:	bf28      	it	cs
 800a07a:	4604      	movcs	r4, r0
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a07c:	4643      	mov	r3, r8
 800a07e:	4622      	mov	r2, r4
 800a080:	4639      	mov	r1, r7
 800a082:	4628      	mov	r0, r5
 800a084:	f7fe fbd0 	bl	8008828 <tcp_write>
    if (err == ERR_MEM) {
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d10c      	bne.n	800a0a6 <http_write+0x50>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a08c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800a090:	b132      	cbz	r2, 800a0a0 <http_write+0x4a>
 800a092:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800a096:	2a07      	cmp	r2, #7
 800a098:	d802      	bhi.n	800a0a0 <http_write+0x4a>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
        /* no need to try smaller sizes */
        len = 1;
      } else {
        len /= 2;
 800a09a:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a09c:	2c01      	cmp	r4, #1
 800a09e:	d8ed      	bhi.n	800a07c <http_write+0x26>
  if (err == ERR_OK) {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	8033      	strh	r3, [r6, #0]
 800a0a4:	e002      	b.n	800a0ac <http_write+0x56>
  if (err == ERR_OK) {
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d1fa      	bne.n	800a0a0 <http_write+0x4a>
    *length = len;
 800a0aa:	8034      	strh	r4, [r6, #0]
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
}
 800a0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a0b0 <http_state_eof>:
{
 800a0b0:	b510      	push	{r4, lr}
 800a0b2:	4604      	mov	r4, r0
  if (hs->handle) {
 800a0b4:	6940      	ldr	r0, [r0, #20]
 800a0b6:	b118      	cbz	r0, 800a0c0 <http_state_eof+0x10>
    fs_close(hs->handle);
 800a0b8:	f7ff ffc8 	bl	800a04c <fs_close>
    hs->handle = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 800a0c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a0c2:	b118      	cbz	r0, 800a0cc <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 800a0c4:	f7fb fae0 	bl	8005688 <mem_free>
    hs->ssi = NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 800a0cc:	6a20      	ldr	r0, [r4, #32]
 800a0ce:	b118      	cbz	r0, 800a0d8 <http_state_eof+0x28>
    pbuf_free(hs->req);
 800a0d0:	f7fb ff5c 	bl	8005f8c <pbuf_free>
    hs->req = NULL;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	6223      	str	r3, [r4, #32]
}
 800a0d8:	bd10      	pop	{r4, pc}
	...

0800a0dc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	460d      	mov	r5, r1
  err_t err;

  *uri = "/404.html";
 800a0e0:	490a      	ldr	r1, [pc, #40]	; (800a10c <http_get_404_file+0x30>)
 800a0e2:	6029      	str	r1, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	f7ff ff91 	bl	800a00c <fs_open>
  if (err != ERR_OK) {
 800a0ea:	b168      	cbz	r0, 800a108 <http_get_404_file+0x2c>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a0ec:	4908      	ldr	r1, [pc, #32]	; (800a110 <http_get_404_file+0x34>)
 800a0ee:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff ff8b 	bl	800a00c <fs_open>
    if (err != ERR_OK) {
 800a0f6:	b138      	cbz	r0, 800a108 <http_get_404_file+0x2c>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a0f8:	4906      	ldr	r1, [pc, #24]	; (800a114 <http_get_404_file+0x38>)
 800a0fa:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f7ff ff85 	bl	800a00c <fs_open>
      if (err != ERR_OK) {
 800a102:	b108      	cbz	r0, 800a108 <http_get_404_file+0x2c>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a104:	2400      	movs	r4, #0
 800a106:	602c      	str	r4, [r5, #0]
      }
    }
  }

  return &hs->file_handle;
}
 800a108:	4620      	mov	r0, r4
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	0801b5b2 	.word	0x0801b5b2
 800a110:	0801b5bc 	.word	0x0801b5bc
 800a114:	0801b5c5 	.word	0x0801b5c5

0800a118 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	460c      	mov	r4, r1
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a11c:	4615      	mov	r5, r2
 800a11e:	bb2a      	cbnz	r2, 800a16c <http_accept+0x54>
 800a120:	b321      	cbz	r1, 800a16c <http_accept+0x54>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a122:	2101      	movs	r1, #1
 800a124:	4620      	mov	r0, r4
 800a126:	f7fc fb75 	bl	8006814 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a12a:	20b0      	movs	r0, #176	; 0xb0
 800a12c:	f7fb fbf8 	bl	8005920 <mem_malloc>
  if (ret != NULL) {
 800a130:	4606      	mov	r6, r0
 800a132:	b1f0      	cbz	r0, 800a172 <http_accept+0x5a>
  memset(hs, 0, sizeof(struct http_state));
 800a134:	22b0      	movs	r2, #176	; 0xb0
 800a136:	4629      	mov	r1, r5
 800a138:	f000 fe18 	bl	800ad6c <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a13c:	4631      	mov	r1, r6
 800a13e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 800a140:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 800a142:	f7fc fb77 	bl	8006834 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a146:	490c      	ldr	r1, [pc, #48]	; (800a178 <http_accept+0x60>)
 800a148:	4620      	mov	r0, r4
 800a14a:	f7fc fb77 	bl	800683c <tcp_recv>
  altcp_err(pcb, http_err);
 800a14e:	490b      	ldr	r1, [pc, #44]	; (800a17c <http_accept+0x64>)
 800a150:	4620      	mov	r0, r4
 800a152:	f7fc fba1 	bl	8006898 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a156:	490a      	ldr	r1, [pc, #40]	; (800a180 <http_accept+0x68>)
 800a158:	4620      	mov	r0, r4
 800a15a:	2204      	movs	r2, #4
 800a15c:	f7fc fbba 	bl	80068d4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a160:	4908      	ldr	r1, [pc, #32]	; (800a184 <http_accept+0x6c>)
 800a162:	4620      	mov	r0, r4
 800a164:	f7fc fb82 	bl	800686c <tcp_sent>

  return ERR_OK;
}
 800a168:	4628      	mov	r0, r5
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800a16c:	f06f 0505 	mvn.w	r5, #5
 800a170:	e7fa      	b.n	800a168 <http_accept+0x50>
    return ERR_MEM;
 800a172:	f04f 35ff 	mov.w	r5, #4294967295
 800a176:	e7f7      	b.n	800a168 <http_accept+0x50>
 800a178:	0800a6ed 	.word	0x0800a6ed
 800a17c:	0800a189 	.word	0x0800a189
 800a180:	0800a6b1 	.word	0x0800a6b1
 800a184:	0800a699 	.word	0x0800a699

0800a188 <http_err>:
{
 800a188:	b510      	push	{r4, lr}
  if (hs != NULL) {
 800a18a:	4604      	mov	r4, r0
 800a18c:	b130      	cbz	r0, 800a19c <http_err+0x14>
    http_state_eof(hs);
 800a18e:	f7ff ff8f 	bl	800a0b0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800a192:	4620      	mov	r0, r4
}
 800a194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 800a198:	f7fb ba76 	b.w	8005688 <mem_free>
}
 800a19c:	bd10      	pop	{r4, pc}
	...

0800a1a0 <http_close_conn>:
{
 800a1a0:	b538      	push	{r3, r4, r5, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	f7fc fb44 	bl	8006834 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f7fc fb44 	bl	800683c <tcp_recv>
  altcp_err(pcb, NULL);
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7fc fb6e 	bl	8006898 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4611      	mov	r1, r2
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f7fc fb87 	bl	80068d4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f7fc fb4f 	bl	800686c <tcp_sent>
  if (hs != NULL) {
 800a1ce:	b12d      	cbz	r5, 800a1dc <http_close_conn+0x3c>
    http_state_eof(hs);
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f7ff ff6d 	bl	800a0b0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f7fb fa56 	bl	8005688 <mem_free>
  err = altcp_close(pcb);
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f7fc fee3 	bl	8006fa8 <tcp_close>
  if (err != ERR_OK) {
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b120      	cbz	r0, 800a1f0 <http_close_conn+0x50>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a1e6:	4903      	ldr	r1, [pc, #12]	; (800a1f4 <http_close_conn+0x54>)
 800a1e8:	2204      	movs	r2, #4
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f7fc fb72 	bl	80068d4 <tcp_poll>
}
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	0800a6b1 	.word	0x0800a6b1

0800a1f8 <http_send>:
{
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	ed2d 8b02 	vpush	{d8}
 800a200:	4607      	mov	r7, r0
 800a202:	b085      	sub	sp, #20
  if (hs == NULL) {
 800a204:	460d      	mov	r5, r1
 800a206:	2900      	cmp	r1, #0
 800a208:	f000 8233 	beq.w	800a672 <http_send+0x47a>
  if (hs->left == 0) {
 800a20c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800a20e:	b9bb      	cbnz	r3, 800a240 <http_send+0x48>
  if (hs->handle == NULL) {
 800a210:	6948      	ldr	r0, [r1, #20]
 800a212:	b950      	cbnz	r0, 800a22a <http_send+0x32>
    http_close_conn(pcb, hs);
 800a214:	4629      	mov	r1, r5
 800a216:	4638      	mov	r0, r7
 800a218:	f7ff ffc2 	bl	800a1a0 <http_close_conn>
      return 0;
 800a21c:	2600      	movs	r6, #0
}
 800a21e:	4630      	mov	r0, r6
 800a220:	b005      	add	sp, #20
 800a222:	ecbd 8b02 	vpop	{d8}
 800a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bytes_left = fs_bytes_left(hs->handle);
 800a22a:	f7ff ff10 	bl	800a04e <fs_bytes_left>
  if (bytes_left <= 0) {
 800a22e:	2800      	cmp	r0, #0
 800a230:	ddf0      	ble.n	800a214 <http_send+0x1c>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a232:	4b8a      	ldr	r3, [pc, #552]	; (800a45c <http_send+0x264>)
 800a234:	498a      	ldr	r1, [pc, #552]	; (800a460 <http_send+0x268>)
 800a236:	488b      	ldr	r0, [pc, #556]	; (800a464 <http_send+0x26c>)
 800a238:	f240 429d 	movw	r2, #1181	; 0x49d
 800a23c:	f000 fd9e 	bl	800ad7c <iprintf>
  if (hs->ssi) {
 800a240:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800a242:	69a9      	ldr	r1, [r5, #24]
 800a244:	2c00      	cmp	r4, #0
 800a246:	f000 81ff 	beq.w	800a648 <http_send+0x450>
  len = altcp_sndbuf(pcb);
 800a24a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a24e:	f8ad 300e 	strh.w	r3, [sp, #14]
  if (ssi->parsed > hs->file) {
 800a252:	6823      	ldr	r3, [r4, #0]
 800a254:	428b      	cmp	r3, r1
 800a256:	d82b      	bhi.n	800a2b0 <http_send+0xb8>
  u8_t data_to_send = 0;
 800a258:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 800a25a:	46b2      	mov	sl, r6
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800a25c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    if (len == 0) {
 800a260:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800a264:	2b04      	cmp	r3, #4
 800a266:	d001      	beq.n	800a26c <http_send+0x74>
 800a268:	68a1      	ldr	r1, [r4, #8]
 800a26a:	b121      	cbz	r1, 800a276 <http_send+0x7e>
 800a26c:	f1ba 0f00 	cmp.w	sl, #0
 800a270:	d046      	beq.n	800a300 <http_send+0x108>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800a272:	2b04      	cmp	r3, #4
 800a274:	d039      	beq.n	800a2ea <http_send+0xf2>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	69a9      	ldr	r1, [r5, #24]
 800a27a:	428b      	cmp	r3, r1
 800a27c:	d935      	bls.n	800a2ea <http_send+0xf2>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a27e:	1a5b      	subs	r3, r3, r1
 800a280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a284:	4293      	cmp	r3, r2
 800a286:	bfa8      	it	ge
 800a288:	4613      	movge	r3, r2
 800a28a:	f8ad 300e 	strh.w	r3, [sp, #14]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a28e:	f10d 020e 	add.w	r2, sp, #14
 800a292:	2300      	movs	r3, #0
 800a294:	4638      	mov	r0, r7
 800a296:	f7ff fede 	bl	800a056 <http_write>
    if (err == ERR_OK) {
 800a29a:	bb30      	cbnz	r0, 800a2ea <http_send+0xf2>
    hs->file += len;
 800a29c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a2a0:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 800a2a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 800a2a4:	440a      	add	r2, r1
    hs->left -= len;
 800a2a6:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 800a2a8:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 800a2aa:	626b      	str	r3, [r5, #36]	; 0x24
    data_to_send = 1;
 800a2ac:	2601      	movs	r6, #1
 800a2ae:	e01c      	b.n	800a2ea <http_send+0xf2>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a2b0:	1a5b      	subs	r3, r3, r1
 800a2b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	bfa8      	it	ge
 800a2ba:	4613      	movge	r3, r2
 800a2bc:	f8ad 300e 	strh.w	r3, [sp, #14]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a2c0:	f10d 020e 	add.w	r2, sp, #14
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff fec5 	bl	800a056 <http_write>
    if (err == ERR_OK) {
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	b9a8      	cbnz	r0, 800a2fc <http_send+0x104>
      hs->file += len;
 800a2d0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a2d4:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 800a2d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 800a2d8:	440a      	add	r2, r1
      hs->left -= len;
 800a2da:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 800a2dc:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 800a2de:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 800a2e0:	2601      	movs	r6, #1
    if (altcp_sndbuf(pcb) == 0) {
 800a2e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1b8      	bne.n	800a25c <http_send+0x64>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a2ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d196      	bne.n	800a21e <http_send+0x26>
 800a2f0:	6968      	ldr	r0, [r5, #20]
 800a2f2:	f7ff feac 	bl	800a04e <fs_bytes_left>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	dc91      	bgt.n	800a21e <http_send+0x26>
 800a2fa:	e78b      	b.n	800a214 <http_send+0x1c>
  u8_t data_to_send = 0;
 800a2fc:	2600      	movs	r6, #0
 800a2fe:	e7f0      	b.n	800a2e2 <http_send+0xea>
    if (len == 0) {
 800a300:	2a00      	cmp	r2, #0
 800a302:	d0f2      	beq.n	800a2ea <http_send+0xf2>
    switch (ssi->tag_state) {
 800a304:	2b04      	cmp	r3, #4
 800a306:	d8ad      	bhi.n	800a264 <http_send+0x6c>
 800a308:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a30c:	00170005 	.word	0x00170005
 800a310:	008b0032 	.word	0x008b0032
 800a314:	0169      	.short	0x0169
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	7811      	ldrb	r1, [r2, #0]
 800a31a:	293c      	cmp	r1, #60	; 0x3c
 800a31c:	d002      	beq.n	800a324 <http_send+0x12c>
 800a31e:	292f      	cmp	r1, #47	; 0x2f
 800a320:	d105      	bne.n	800a32e <http_send+0x136>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a322:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 800a324:	7423      	strb	r3, [r4, #16]
            ssi->tag_state = TAG_LEADIN;
 800a326:	2301      	movs	r3, #1
 800a328:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
            ssi->tag_index = 1;
 800a32c:	81a3      	strh	r3, [r4, #12]
        ssi->parse_left--;
 800a32e:	68a3      	ldr	r3, [r4, #8]
        ssi->parsed++;
 800a330:	3201      	adds	r2, #1
        ssi->parse_left--;
 800a332:	3b01      	subs	r3, #1
 800a334:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 800a336:	6022      	str	r2, [r4, #0]
        break;
 800a338:	e790      	b.n	800a25c <http_send+0x64>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800a33a:	494b      	ldr	r1, [pc, #300]	; (800a468 <http_send+0x270>)
 800a33c:	7c23      	ldrb	r3, [r4, #16]
 800a33e:	89a2      	ldrh	r2, [r4, #12]
 800a340:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800a344:	5c99      	ldrb	r1, [r3, r2]
 800a346:	b921      	cbnz	r1, 800a352 <http_send+0x15a>
          ssi->tag_index = 0;
 800a348:	81a1      	strh	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 800a34a:	2302      	movs	r3, #2
              ssi->tag_state = TAG_NONE;
 800a34c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 800a350:	e784      	b.n	800a25c <http_send+0x64>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	7818      	ldrb	r0, [r3, #0]
 800a356:	4288      	cmp	r0, r1
            ssi->tag_index++;
 800a358:	bf0b      	itete	eq
 800a35a:	3201      	addeq	r2, #1
            ssi->tag_state = TAG_NONE;
 800a35c:	2200      	movne	r2, #0
            ssi->tag_index++;
 800a35e:	81a2      	strheq	r2, [r4, #12]
            ssi->tag_state = TAG_NONE;
 800a360:	f884 20dc 	strbne.w	r2, [r4, #220]	; 0xdc
          ssi->parse_left--;
 800a364:	68a2      	ldr	r2, [r4, #8]
 800a366:	3a01      	subs	r2, #1
 800a368:	60a2      	str	r2, [r4, #8]
        ssi->parsed++;
 800a36a:	3301      	adds	r3, #1
 800a36c:	6023      	str	r3, [r4, #0]
        break;
 800a36e:	e775      	b.n	800a25c <http_send+0x64>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a370:	6821      	ldr	r1, [r4, #0]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f891 e000 	ldrb.w	lr, [r1]
 800a378:	b983      	cbnz	r3, 800a39c <http_send+0x1a4>
 800a37a:	f1ae 0009 	sub.w	r0, lr, #9
 800a37e:	b2c0      	uxtb	r0, r0
 800a380:	2817      	cmp	r0, #23
 800a382:	d80b      	bhi.n	800a39c <http_send+0x1a4>
 800a384:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a46c <http_send+0x274>
 800a388:	fa2c f000 	lsr.w	r0, ip, r0
 800a38c:	07c0      	lsls	r0, r0, #31
 800a38e:	d505      	bpl.n	800a39c <http_send+0x1a4>
          ssi->parse_left--;
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	3b01      	subs	r3, #1
 800a394:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 800a396:	3101      	adds	r1, #1
          ssi->parsed++;
 800a398:	6021      	str	r1, [r4, #0]
          break;
 800a39a:	e75f      	b.n	800a25c <http_send+0x64>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800a39c:	7c20      	ldrb	r0, [r4, #16]
 800a39e:	4a32      	ldr	r2, [pc, #200]	; (800a468 <http_send+0x270>)
 800a3a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a3a4:	6840      	ldr	r0, [r0, #4]
 800a3a6:	7800      	ldrb	r0, [r0, #0]
 800a3a8:	4570      	cmp	r0, lr
 800a3aa:	d009      	beq.n	800a3c0 <http_send+0x1c8>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800a3ac:	f1ae 0209 	sub.w	r2, lr, #9
 800a3b0:	b2d2      	uxtb	r2, r2
 800a3b2:	2a17      	cmp	r2, #23
 800a3b4:	d82b      	bhi.n	800a40e <http_send+0x216>
 800a3b6:	482d      	ldr	r0, [pc, #180]	; (800a46c <http_send+0x274>)
 800a3b8:	fa20 f202 	lsr.w	r2, r0, r2
 800a3bc:	07d2      	lsls	r2, r2, #31
 800a3be:	d526      	bpl.n	800a40e <http_send+0x216>
          if (ssi->tag_index == 0) {
 800a3c0:	b913      	cbnz	r3, 800a3c8 <http_send+0x1d0>
            ssi->tag_state = TAG_NONE;
 800a3c2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
 800a3c6:	e01d      	b.n	800a404 <http_send+0x20c>
            ssi->tag_state = TAG_LEADOUT;
 800a3c8:	2203      	movs	r2, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800a3ca:	2bff      	cmp	r3, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 800a3cc:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800a3d0:	d906      	bls.n	800a3e0 <http_send+0x1e8>
 800a3d2:	4b22      	ldr	r3, [pc, #136]	; (800a45c <http_send+0x264>)
 800a3d4:	4926      	ldr	r1, [pc, #152]	; (800a470 <http_send+0x278>)
 800a3d6:	4823      	ldr	r0, [pc, #140]	; (800a464 <http_send+0x26c>)
 800a3d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3dc:	f000 fcce 	bl	800ad7c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	7463      	strb	r3, [r4, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800a3e4:	4423      	add	r3, r4
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800a3ea:	7c23      	ldrb	r3, [r4, #16]
 800a3ec:	481e      	ldr	r0, [pc, #120]	; (800a468 <http_send+0x270>)
 800a3ee:	6821      	ldr	r1, [r4, #0]
 800a3f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a3f4:	7809      	ldrb	r1, [r1, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4299      	cmp	r1, r3
              ssi->tag_index = 1;
 800a3fc:	bf06      	itte	eq
 800a3fe:	2301      	moveq	r3, #1
 800a400:	81a3      	strheq	r3, [r4, #12]
              ssi->tag_index = 0;
 800a402:	81a2      	strhne	r2, [r4, #12]
        ssi->parse_left--;
 800a404:	68a3      	ldr	r3, [r4, #8]
 800a406:	3b01      	subs	r3, #1
 800a408:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	e7ad      	b.n	800a36a <http_send+0x172>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800a40e:	2b07      	cmp	r3, #7
 800a410:	d805      	bhi.n	800a41e <http_send+0x226>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	81a2      	strh	r2, [r4, #12]
 800a416:	4423      	add	r3, r4
 800a418:	780a      	ldrb	r2, [r1, #0]
 800a41a:	749a      	strb	r2, [r3, #18]
 800a41c:	e7f2      	b.n	800a404 <http_send+0x20c>
            ssi->tag_state = TAG_NONE;
 800a41e:	2300      	movs	r3, #0
 800a420:	e7cf      	b.n	800a3c2 <http_send+0x1ca>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a422:	6821      	ldr	r1, [r4, #0]
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f811 cb01 	ldrb.w	ip, [r1], #1
 800a42a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800a42e:	bb0b      	cbnz	r3, 800a474 <http_send+0x27c>
 800a430:	f1ac 0209 	sub.w	r2, ip, #9
 800a434:	fa5f fe82 	uxtb.w	lr, r2
 800a438:	f1be 0f17 	cmp.w	lr, #23
 800a43c:	bf9f      	itttt	ls
 800a43e:	4a0b      	ldrls	r2, [pc, #44]	; (800a46c <http_send+0x274>)
 800a440:	fa22 f20e 	lsrls.w	r2, r2, lr
 800a444:	43d2      	mvnls	r2, r2
 800a446:	f002 0201 	andls.w	r2, r2, #1
 800a44a:	bf88      	it	hi
 800a44c:	2201      	movhi	r2, #1
 800a44e:	f108 3eff 	add.w	lr, r8, #4294967295
 800a452:	b97a      	cbnz	r2, 800a474 <http_send+0x27c>
          ssi->parse_left--;
 800a454:	f8c4 e008 	str.w	lr, [r4, #8]
 800a458:	e79e      	b.n	800a398 <http_send+0x1a0>
 800a45a:	bf00      	nop
 800a45c:	0801b5d0 	.word	0x0801b5d0
 800a460:	0801b648 	.word	0x0801b648
 800a464:	08018c9a 	.word	0x08018c9a
 800a468:	08018bf8 	.word	0x08018bf8
 800a46c:	00800013 	.word	0x00800013
 800a470:	0801b67f 	.word	0x0801b67f
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800a474:	4880      	ldr	r0, [pc, #512]	; (800a678 <http_send+0x480>)
 800a476:	7c22      	ldrb	r2, [r4, #16]
 800a478:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800a47c:	f108 30ff 	add.w	r0, r8, #4294967295
 800a480:	6852      	ldr	r2, [r2, #4]
 800a482:	f812 e003 	ldrb.w	lr, [r2, r3]
          ssi->parse_left--;
 800a486:	60a0      	str	r0, [r4, #8]
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800a488:	45e6      	cmp	lr, ip
          ssi->parsed++;
 800a48a:	6021      	str	r1, [r4, #0]
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800a48c:	f040 80a5 	bne.w	800a5da <http_send+0x3e2>
          ssi->tag_index++;
 800a490:	3301      	adds	r3, #1
 800a492:	b29b      	uxth	r3, r3
 800a494:	81a3      	strh	r3, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800a496:	5cd3      	ldrb	r3, [r2, r3]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f47f aedf 	bne.w	800a25c <http_send+0x64>
  ssi = hs->ssi;
 800a49e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800a4a2:	f1b8 0f00 	cmp.w	r8, #0
 800a4a6:	d106      	bne.n	800a4b6 <http_send+0x2be>
 800a4a8:	4b74      	ldr	r3, [pc, #464]	; (800a67c <http_send+0x484>)
 800a4aa:	4975      	ldr	r1, [pc, #468]	; (800a680 <http_send+0x488>)
 800a4ac:	4875      	ldr	r0, [pc, #468]	; (800a684 <http_send+0x48c>)
 800a4ae:	f240 3206 	movw	r2, #774	; 0x306
 800a4b2:	f000 fc63 	bl	800ad7c <iprintf>
  if (httpd_ssi_handler
 800a4b6:	4a74      	ldr	r2, [pc, #464]	; (800a688 <http_send+0x490>)
 800a4b8:	6813      	ldr	r3, [r2, #0]
 800a4ba:	f108 0112 	add.w	r1, r8, #18
 800a4be:	ee08 1a10 	vmov	s16, r1
 800a4c2:	b13b      	cbz	r3, 800a4d4 <http_send+0x2dc>
      && httpd_tags && httpd_num_tags
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	b122      	cbz	r2, 800a4d4 <http_send+0x2dc>
 800a4ca:	f8d1 b008 	ldr.w	fp, [r1, #8]
 800a4ce:	f1bb 0f00 	cmp.w	fp, #0
 800a4d2:	d17c      	bne.n	800a5ce <http_send+0x3d6>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800a4d4:	ee18 0a10 	vmov	r0, s16
 800a4d8:	f7f5 fe84 	bl	80001e4 <strlen>
 800a4dc:	28a6      	cmp	r0, #166	; 0xa6
 800a4de:	d879      	bhi.n	800a5d4 <http_send+0x3dc>
 800a4e0:	2809      	cmp	r0, #9
 800a4e2:	bf28      	it	cs
 800a4e4:	2009      	movcs	r0, #9
 800a4e6:	4683      	mov	fp, r0
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800a4e8:	4b68      	ldr	r3, [pc, #416]	; (800a68c <http_send+0x494>)
 800a4ea:	f108 091b 	add.w	r9, r8, #27
 800a4ee:	464a      	mov	r2, r9
 800a4f0:	f103 0110 	add.w	r1, r3, #16
 800a4f4:	f853 0b04 	ldr.w	r0, [r3], #4
 800a4f8:	f842 0b04 	str.w	r0, [r2], #4
 800a4fc:	428b      	cmp	r3, r1
 800a4fe:	d1f9      	bne.n	800a4f4 <http_send+0x2fc>
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	8013      	strh	r3, [r2, #0]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800a504:	ee18 1a10 	vmov	r1, s16
 800a508:	465a      	mov	r2, fp
 800a50a:	f108 002d 	add.w	r0, r8, #45	; 0x2d
 800a50e:	f000 fc1f 	bl	800ad50 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800a512:	4b5f      	ldr	r3, [pc, #380]	; (800a690 <http_send+0x498>)
 800a514:	f10b 012d 	add.w	r1, fp, #45	; 0x2d
 800a518:	eb08 0201 	add.w	r2, r8, r1
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f848 0001 	str.w	r0, [r8, r1]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800a522:	44c3      	add	fp, r8
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800a524:	8899      	ldrh	r1, [r3, #4]
 800a526:	799b      	ldrb	r3, [r3, #6]
 800a528:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800a52a:	2300      	movs	r3, #0
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800a52c:	8091      	strh	r1, [r2, #4]
  len = strlen(ssi->tag_insert);
 800a52e:	4648      	mov	r0, r9
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800a530:	f88b 3034 	strb.w	r3, [fp, #52]	; 0x34
  len = strlen(ssi->tag_insert);
 800a534:	f7f5 fe56 	bl	80001e4 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800a538:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 800a53c:	4681      	mov	r9, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800a53e:	d306      	bcc.n	800a54e <http_send+0x356>
 800a540:	4b4e      	ldr	r3, [pc, #312]	; (800a67c <http_send+0x484>)
 800a542:	4954      	ldr	r1, [pc, #336]	; (800a694 <http_send+0x49c>)
 800a544:	484f      	ldr	r0, [pc, #316]	; (800a684 <http_send+0x48c>)
 800a546:	f240 323f 	movw	r2, #831	; 0x33f
 800a54a:	f000 fc17 	bl	800ad7c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800a54e:	f8a8 900e 	strh.w	r9, [r8, #14]
 800a552:	e016      	b.n	800a582 <http_send+0x38a>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a554:	f109 0901 	add.w	r9, r9, #1
 800a558:	45cb      	cmp	fp, r9
 800a55a:	ddbb      	ble.n	800a4d4 <http_send+0x2dc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800a55c:	f852 1029 	ldr.w	r1, [r2, r9, lsl #2]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	ee18 0a10 	vmov	r0, s16
 800a566:	9200      	str	r2, [sp, #0]
 800a568:	f7f5 fe32 	bl	80001d0 <strcmp>
 800a56c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a570:	2800      	cmp	r0, #0
 800a572:	d1ef      	bne.n	800a554 <http_send+0x35c>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800a574:	22c0      	movs	r2, #192	; 0xc0
 800a576:	f108 011b 	add.w	r1, r8, #27
 800a57a:	4648      	mov	r0, r9
 800a57c:	4798      	blx	r3
 800a57e:	f8a8 000e 	strh.w	r0, [r8, #14]
            ssi->tag_state = TAG_SENDING;
 800a582:	2204      	movs	r2, #4
 800a584:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
            if (ssi->tag_end > hs->file) {
 800a588:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_end = ssi->parsed;
 800a58a:	6822      	ldr	r2, [r4, #0]
 800a58c:	6062      	str	r2, [r4, #4]
            ssi->tag_index = 0;
 800a58e:	2300      	movs	r3, #0
            if (ssi->tag_end > hs->file) {
 800a590:	428a      	cmp	r2, r1
            ssi->tag_index = 0;
 800a592:	81a3      	strh	r3, [r4, #12]
            if (ssi->tag_end > hs->file) {
 800a594:	f67f ae62 	bls.w	800a25c <http_send+0x64>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800a598:	1a52      	subs	r2, r2, r1
 800a59a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a59e:	4282      	cmp	r2, r0
 800a5a0:	bfa8      	it	ge
 800a5a2:	4602      	movge	r2, r0
 800a5a4:	f8ad 200e 	strh.w	r2, [sp, #14]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f10d 020e 	add.w	r2, sp, #14
 800a5ae:	f7ff fd52 	bl	800a056 <http_write>
              if (err == ERR_OK) {
 800a5b2:	4682      	mov	sl, r0
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f47f ae51 	bne.w	800a25c <http_send+0x64>
            hs->file += len;
 800a5ba:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a5be:	69aa      	ldr	r2, [r5, #24]
            hs->left -= len;
 800a5c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            hs->file += len;
 800a5c2:	440a      	add	r2, r1
            hs->left -= len;
 800a5c4:	1a5b      	subs	r3, r3, r1
            hs->file += len;
 800a5c6:	61aa      	str	r2, [r5, #24]
            hs->left -= len;
 800a5c8:	626b      	str	r3, [r5, #36]	; 0x24
              data_to_send = 1;
 800a5ca:	2601      	movs	r6, #1
 800a5cc:	e646      	b.n	800a25c <http_send+0x64>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a5ce:	f04f 0900 	mov.w	r9, #0
 800a5d2:	e7c1      	b.n	800a558 <http_send+0x360>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800a5d4:	f04f 0b09 	mov.w	fp, #9
 800a5d8:	e786      	b.n	800a4e8 <http_send+0x2f0>
          ssi->tag_state = TAG_NONE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e6b6      	b.n	800a34c <http_send+0x154>
        if (ssi->tag_end > hs->file) {
 800a5de:	6863      	ldr	r3, [r4, #4]
 800a5e0:	69a9      	ldr	r1, [r5, #24]
 800a5e2:	428b      	cmp	r3, r1
 800a5e4:	d914      	bls.n	800a610 <http_send+0x418>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800a5e6:	1a5b      	subs	r3, r3, r1
 800a5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfa8      	it	ge
 800a5f0:	4613      	movge	r3, r2
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f8ad 300e 	strh.w	r3, [sp, #14]
          if (len != 0) {
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0de      	beq.n	800a5ba <http_send+0x3c2>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f10d 020e 	add.w	r2, sp, #14
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff fd27 	bl	800a056 <http_write>
          if (err == ERR_OK) {
 800a608:	2800      	cmp	r0, #0
 800a60a:	d0d6      	beq.n	800a5ba <http_send+0x3c2>
 800a60c:	4682      	mov	sl, r0
 800a60e:	e625      	b.n	800a25c <http_send+0x64>
          if (ssi->tag_index < ssi->tag_insert_len) {
 800a610:	89a1      	ldrh	r1, [r4, #12]
 800a612:	89e3      	ldrh	r3, [r4, #14]
 800a614:	4299      	cmp	r1, r3
 800a616:	d214      	bcs.n	800a642 <http_send+0x44a>
            len = (ssi->tag_insert_len - ssi->tag_index);
 800a618:	1a5b      	subs	r3, r3, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800a61a:	311b      	adds	r1, #27
            len = (ssi->tag_insert_len - ssi->tag_index);
 800a61c:	f8ad 300e 	strh.w	r3, [sp, #14]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800a620:	f10d 020e 	add.w	r2, sp, #14
 800a624:	2301      	movs	r3, #1
 800a626:	4421      	add	r1, r4
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff fd14 	bl	800a056 <http_write>
            if (err == ERR_OK) {
 800a62e:	4682      	mov	sl, r0
 800a630:	2800      	cmp	r0, #0
 800a632:	f47f ae13 	bne.w	800a25c <http_send+0x64>
              ssi->tag_index += len;
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800a63c:	4413      	add	r3, r2
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	e7c3      	b.n	800a5ca <http_send+0x3d2>
              ssi->tag_index = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	e681      	b.n	800a34c <http_send+0x154>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a648:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a64a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 800a64e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a652:	4283      	cmp	r3, r0
 800a654:	bf88      	it	hi
 800a656:	4613      	movhi	r3, r2
 800a658:	f8ad 300e 	strh.w	r3, [sp, #14]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a65c:	f10d 020e 	add.w	r2, sp, #14
 800a660:	4623      	mov	r3, r4
 800a662:	4638      	mov	r0, r7
 800a664:	f7ff fcf7 	bl	800a056 <http_write>
  if (err == ERR_OK) {
 800a668:	2800      	cmp	r0, #0
 800a66a:	f43f ae17 	beq.w	800a29c <http_send+0xa4>
  u8_t data_to_send = 0;
 800a66e:	4626      	mov	r6, r4
  return data_to_send;
 800a670:	e63b      	b.n	800a2ea <http_send+0xf2>
    return 0;
 800a672:	460e      	mov	r6, r1
 800a674:	e5d3      	b.n	800a21e <http_send+0x26>
 800a676:	bf00      	nop
 800a678:	08018bf8 	.word	0x08018bf8
 800a67c:	0801b5d0 	.word	0x0801b5d0
 800a680:	0801b696 	.word	0x0801b696
 800a684:	08018c9a 	.word	0x08018c9a
 800a688:	20000258 	.word	0x20000258
 800a68c:	0801b6a2 	.word	0x0801b6a2
 800a690:	0801b6b5 	.word	0x0801b6b5
 800a694:	0801949d 	.word	0x0801949d

0800a698 <http_sent>:
{
 800a698:	b508      	push	{r3, lr}
 800a69a:	4603      	mov	r3, r0
 800a69c:	4608      	mov	r0, r1
  if (hs == NULL) {
 800a69e:	4619      	mov	r1, r3
 800a6a0:	b123      	cbz	r3, 800a6ac <http_sent+0x14>
  hs->retries = 0;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
  http_send(pcb, hs);
 800a6a8:	f7ff fda6 	bl	800a1f8 <http_send>
}
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	bd08      	pop	{r3, pc}

0800a6b0 <http_poll>:
{
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	460c      	mov	r4, r1
  if (hs == NULL) {
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	b920      	cbnz	r0, 800a6c2 <http_poll+0x12>
      http_close_conn(pcb, hs);
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f7ff fd71 	bl	800a1a0 <http_close_conn>
}
 800a6be:	2000      	movs	r0, #0
 800a6c0:	bd10      	pop	{r4, pc}
    hs->retries++;
 800a6c2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a6ca:	2b04      	cmp	r3, #4
    hs->retries++;
 800a6cc:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a6d0:	d0f2      	beq.n	800a6b8 <http_poll+0x8>
    if (hs->handle) {
 800a6d2:	6943      	ldr	r3, [r0, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d0f2      	beq.n	800a6be <http_poll+0xe>
      if (http_send(pcb, hs)) {
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff fd8d 	bl	800a1f8 <http_send>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d0ed      	beq.n	800a6be <http_poll+0xe>
        altcp_output(pcb);
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7fe fe02 	bl	80092ec <tcp_output>
 800a6e8:	e7e9      	b.n	800a6be <http_poll+0xe>
	...

0800a6ec <http_recv>:
{
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	ed2d 8b02 	vpush	{d8}
 800a6f4:	b087      	sub	sp, #28
 800a6f6:	ee08 1a10 	vmov	s16, r1
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	b953      	cbnz	r3, 800a718 <http_recv+0x2c>
 800a702:	b15a      	cbz	r2, 800a71c <http_recv+0x30>
 800a704:	b9a8      	cbnz	r0, 800a732 <http_recv+0x46>
      altcp_recved(pcb, p->tot_len);
 800a706:	ee18 0a10 	vmov	r0, s16
 800a70a:	8929      	ldrh	r1, [r5, #8]
 800a70c:	f7fc f82e 	bl	800676c <tcp_recved>
      pbuf_free(p);
 800a710:	4628      	mov	r0, r5
 800a712:	f7fb fc3b 	bl	8005f8c <pbuf_free>
 800a716:	e001      	b.n	800a71c <http_recv+0x30>
    if (p != NULL) {
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d1f4      	bne.n	800a706 <http_recv+0x1a>
    http_close_conn(pcb, hs);
 800a71c:	ee18 0a10 	vmov	r0, s16
 800a720:	4621      	mov	r1, r4
 800a722:	f7ff fd3d 	bl	800a1a0 <http_close_conn>
}
 800a726:	2000      	movs	r0, #0
 800a728:	b007      	add	sp, #28
 800a72a:	ecbd 8b02 	vpop	{d8}
 800a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    altcp_recved(pcb, p->tot_len);
 800a732:	8911      	ldrh	r1, [r2, #8]
 800a734:	ee18 0a10 	vmov	r0, s16
 800a738:	f7fc f818 	bl	800676c <tcp_recved>
    if (hs->handle == NULL) {
 800a73c:	6963      	ldr	r3, [r4, #20]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 8212 	bne.w	800ab68 <http_recv+0x47c>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a744:	69a3      	ldr	r3, [r4, #24]
 800a746:	6a20      	ldr	r0, [r4, #32]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 8211 	bne.w	800ab70 <http_recv+0x484>
  if (hs->req == NULL) {
 800a74e:	2800      	cmp	r0, #0
 800a750:	f040 80e3 	bne.w	800a91a <http_recv+0x22e>
    hs->req = p;
 800a754:	6225      	str	r5, [r4, #32]
  pbuf_ref(p);
 800a756:	4628      	mov	r0, r5
 800a758:	f7fb fd58 	bl	800620c <pbuf_ref>
  if (hs->req->next != NULL) {
 800a75c:	6a20      	ldr	r0, [r4, #32]
 800a75e:	6803      	ldr	r3, [r0, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80de 	beq.w	800a922 <http_recv+0x236>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a766:	8907      	ldrh	r7, [r0, #8]
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a768:	4978      	ldr	r1, [pc, #480]	; (800a94c <http_recv+0x260>)
    data = httpd_req_buf;
 800a76a:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 800a94c <http_recv+0x260>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a76e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a772:	429f      	cmp	r7, r3
 800a774:	bf28      	it	cs
 800a776:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a778:	463a      	mov	r2, r7
 800a77a:	2300      	movs	r3, #0
 800a77c:	f7fb fe20 	bl	80063c0 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800a780:	2f06      	cmp	r7, #6
 800a782:	f240 81dc 	bls.w	800ab3e <http_recv+0x452>
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a786:	4972      	ldr	r1, [pc, #456]	; (800a950 <http_recv+0x264>)
 800a788:	463a      	mov	r2, r7
 800a78a:	4648      	mov	r0, r9
 800a78c:	f7fa fecf 	bl	800552e <lwip_strnstr>
    if (crlf != NULL) {
 800a790:	2800      	cmp	r0, #0
 800a792:	f000 81d4 	beq.w	800ab3e <http_recv+0x452>
      if (!strncmp(data, "GET ", 4)) {
 800a796:	496f      	ldr	r1, [pc, #444]	; (800a954 <http_recv+0x268>)
 800a798:	2204      	movs	r2, #4
 800a79a:	4648      	mov	r0, r9
 800a79c:	f000 fb53 	bl	800ae46 <strncmp>
 800a7a0:	4680      	mov	r8, r0
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f040 80c1 	bne.w	800a92a <http_recv+0x23e>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a7a8:	f109 0a04 	add.w	sl, r9, #4
 800a7ac:	1f3a      	subs	r2, r7, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a7ae:	b292      	uxth	r2, r2
 800a7b0:	4969      	ldr	r1, [pc, #420]	; (800a958 <http_recv+0x26c>)
 800a7b2:	9201      	str	r2, [sp, #4]
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	f7fa feba 	bl	800552e <lwip_strnstr>
      if (sp2 == NULL) {
 800a7ba:	9a01      	ldr	r2, [sp, #4]
 800a7bc:	4606      	mov	r6, r0
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	f000 80b9 	beq.w	800a936 <http_recv+0x24a>
      int is_09 = 0;
 800a7c4:	f8cd 8004 	str.w	r8, [sp, #4]
        sp1 = data + 3;
 800a7c8:	f109 0303 	add.w	r3, r9, #3
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a7cc:	429e      	cmp	r6, r3
 800a7ce:	f240 81b6 	bls.w	800ab3e <http_recv+0x452>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a7d2:	4962      	ldr	r1, [pc, #392]	; (800a95c <http_recv+0x270>)
 800a7d4:	463a      	mov	r2, r7
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	f7fa fea9 	bl	800552e <lwip_strnstr>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f000 81ae 	beq.w	800ab3e <http_recv+0x452>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a7e2:	eba6 060a 	sub.w	r6, r6, sl
          uri[uri_len] = 0;
 800a7e6:	b2b6      	uxth	r6, r6
          *sp1 = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f889 3003 	strb.w	r3, [r9, #3]
  size_t uri_len = strlen(uri);
 800a7ee:	4650      	mov	r0, sl
          uri[uri_len] = 0;
 800a7f0:	f80a 3006 	strb.w	r3, [sl, r6]
            return http_find_file(hs, uri, is_09);
 800a7f4:	f8cd a014 	str.w	sl, [sp, #20]
  size_t uri_len = strlen(uri);
 800a7f8:	f7f5 fcf4 	bl	80001e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a7fc:	4681      	mov	r9, r0
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f040 80b2 	bne.w	800a968 <http_recv+0x27c>
    params = (char *)strchr(uri, '?');
 800a804:	9805      	ldr	r0, [sp, #20]
 800a806:	213f      	movs	r1, #63	; 0x3f
 800a808:	f000 fb10 	bl	800ae2c <strchr>
    if (params != NULL) {
 800a80c:	4606      	mov	r6, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	f040 816d 	bne.w	800aaee <http_recv+0x402>
    if (httpd_num_cgis && httpd_cgis) {
 800a814:	4b52      	ldr	r3, [pc, #328]	; (800a960 <http_recv+0x274>)
 800a816:	f8d3 a44c 	ldr.w	sl, [r3, #1100]	; 0x44c
 800a81a:	f1ba 0f00 	cmp.w	sl, #0
 800a81e:	d041      	beq.n	800a8a4 <http_recv+0x1b8>
 800a820:	f8d3 9450 	ldr.w	r9, [r3, #1104]	; 0x450
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d03c      	beq.n	800a8a4 <http_recv+0x1b8>
 800a82a:	f8dd b014 	ldr.w	fp, [sp, #20]
      for (i = 0; i < httpd_num_cgis; i++) {
 800a82e:	45c2      	cmp	sl, r8
 800a830:	dd38      	ble.n	800a8a4 <http_recv+0x1b8>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800a832:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
 800a836:	f859 1038 	ldr.w	r1, [r9, r8, lsl #3]
 800a83a:	9302      	str	r3, [sp, #8]
 800a83c:	4658      	mov	r0, fp
 800a83e:	f7f5 fcc7 	bl	80001d0 <strcmp>
 800a842:	4607      	mov	r7, r0
 800a844:	2800      	cmp	r0, #0
 800a846:	f040 8165 	bne.w	800ab14 <http_recv+0x428>
  if (!params || (params[0] == '\0')) {
 800a84a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800a84e:	b306      	cbz	r6, 800a892 <http_recv+0x1a6>
 800a850:	7833      	ldrb	r3, [r6, #0]
 800a852:	b1f3      	cbz	r3, 800a892 <http_recv+0x1a6>
 800a854:	46d1      	mov	r9, sl
      pair = NULL;
 800a856:	4683      	mov	fp, r0
    http_cgi_params[loop] = pair;
 800a858:	f849 6b04 	str.w	r6, [r9], #4
    pair = strchr(pair, '&');
 800a85c:	2126      	movs	r1, #38	; 0x26
 800a85e:	4630      	mov	r0, r6
 800a860:	f000 fae4 	bl	800ae2c <strchr>
    if (pair) {
 800a864:	2800      	cmp	r0, #0
 800a866:	f000 8148 	beq.w	800aafa <http_recv+0x40e>
      *pair = '\0';
 800a86a:	4603      	mov	r3, r0
 800a86c:	f803 bb01 	strb.w	fp, [r3], #1
    equals = strchr(equals, '=');
 800a870:	213d      	movs	r1, #61	; 0x3d
 800a872:	4630      	mov	r0, r6
 800a874:	9303      	str	r3, [sp, #12]
 800a876:	f000 fad9 	bl	800ae2c <strchr>
    if (equals) {
 800a87a:	9b03      	ldr	r3, [sp, #12]
 800a87c:	b108      	cbz	r0, 800a882 <http_recv+0x196>
      *equals = '\0';
 800a87e:	f800 bb01 	strb.w	fp, [r0], #1
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a882:	3701      	adds	r7, #1
 800a884:	2f10      	cmp	r7, #16
      http_cgi_param_vals[loop] = NULL;
 800a886:	f8c9 003c 	str.w	r0, [r9, #60]	; 0x3c
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a88a:	d002      	beq.n	800a892 <http_recv+0x1a6>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 8132 	bne.w	800aaf6 <http_recv+0x40a>
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	4652      	mov	r2, sl
 800a896:	685e      	ldr	r6, [r3, #4]
 800a898:	4639      	mov	r1, r7
 800a89a:	f104 0370 	add.w	r3, r4, #112	; 0x70
 800a89e:	4640      	mov	r0, r8
 800a8a0:	47b0      	blx	r6
 800a8a2:	9005      	str	r0, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 800a8a4:	9905      	ldr	r1, [sp, #20]
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	4626      	mov	r6, r4
 800a8aa:	f7ff fbaf 	bl	800a00c <fs_open>
    if (err == ERR_OK) {
 800a8ae:	b138      	cbz	r0, 800a8c0 <http_recv+0x1d4>
      file = http_get_404_file(hs, &uri);
 800a8b0:	a905      	add	r1, sp, #20
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff fc12 	bl	800a0dc <http_get_404_file>
    if (file != NULL) {
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	f000 815c 	beq.w	800ab78 <http_recv+0x48c>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800a8c0:	f896 9010 	ldrb.w	r9, [r6, #16]
 800a8c4:	f019 0908 	ands.w	r9, r9, #8
 800a8c8:	f040 8130 	bne.w	800ab2c <http_recv+0x440>
        tag_check = http_uri_is_ssi(file, uri);
 800a8cc:	f8dd b014 	ldr.w	fp, [sp, #20]
    char *param = (char *)strstr(uri, "?");
 800a8d0:	213f      	movs	r1, #63	; 0x3f
 800a8d2:	4658      	mov	r0, fp
 800a8d4:	f000 faaa 	bl	800ae2c <strchr>
    if (param != NULL) {
 800a8d8:	4682      	mov	sl, r0
 800a8da:	b108      	cbz	r0, 800a8e0 <http_recv+0x1f4>
      *param = 0;
 800a8dc:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800a8e0:	212e      	movs	r1, #46	; 0x2e
 800a8e2:	4658      	mov	r0, fp
 800a8e4:	f000 faa2 	bl	800ae2c <strchr>
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f040 8115 	bne.w	800ab1a <http_recv+0x42e>
 800a8f0:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <http_recv+0x278>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800a8f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	4658      	mov	r0, fp
 800a8fa:	f7fa fe38 	bl	800556e <lwip_stricmp>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	f000 8111 	beq.w	800ab26 <http_recv+0x43a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800a904:	3701      	adds	r7, #1
 800a906:	2f05      	cmp	r7, #5
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	d1f2      	bne.n	800a8f2 <http_recv+0x206>
    if (param != NULL) {
 800a90c:	f1ba 0f00 	cmp.w	sl, #0
 800a910:	d07d      	beq.n	800aa0e <http_recv+0x322>
      *param = '?';
 800a912:	233f      	movs	r3, #63	; 0x3f
 800a914:	f88a 3000 	strb.w	r3, [sl]
 800a918:	e079      	b.n	800aa0e <http_recv+0x322>
    pbuf_cat(hs->req, p);
 800a91a:	4629      	mov	r1, r5
 800a91c:	f7fb fc8a 	bl	8006234 <pbuf_cat>
 800a920:	e719      	b.n	800a756 <http_recv+0x6a>
    data = (char *)p->payload;
 800a922:	f8d5 9004 	ldr.w	r9, [r5, #4]
    data_len = p->len;
 800a926:	896f      	ldrh	r7, [r5, #10]
    if (p->len != p->tot_len) {
 800a928:	e72a      	b.n	800a780 <http_recv+0x94>
        data[4] = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f889 3004 	strb.w	r3, [r9, #4]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a930:	f06f 030f 	mvn.w	r3, #15
 800a934:	e11e      	b.n	800ab74 <http_recv+0x488>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a936:	4906      	ldr	r1, [pc, #24]	; (800a950 <http_recv+0x264>)
 800a938:	4650      	mov	r0, sl
 800a93a:	f7fa fdf8 	bl	800552e <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a93e:	4606      	mov	r6, r0
 800a940:	2800      	cmp	r0, #0
 800a942:	f000 80fc 	beq.w	800ab3e <http_recv+0x452>
        is_09 = 1;
 800a946:	2301      	movs	r3, #1
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	e73d      	b.n	800a7c8 <http_recv+0xdc>
 800a94c:	20000264 	.word	0x20000264
 800a950:	0801b6c4 	.word	0x0801b6c4
 800a954:	0801b6bd 	.word	0x0801b6bd
 800a958:	0801b94c 	.word	0x0801b94c
 800a95c:	0801b6c2 	.word	0x0801b6c2
 800a960:	20000258 	.word	0x20000258
 800a964:	08018c30 	.word	0x08018c30
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a968:	1e47      	subs	r7, r0, #1
 800a96a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a96e:	2b2f      	cmp	r3, #47	; 0x2f
 800a970:	f47f af48 	bne.w	800a804 <http_recv+0x118>
 800a974:	4b87      	ldr	r3, [pc, #540]	; (800ab94 <http_recv+0x4a8>)
 800a976:	459a      	cmp	sl, r3
 800a978:	d102      	bne.n	800a980 <http_recv+0x294>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a97a:	2801      	cmp	r0, #1
 800a97c:	f47f af42 	bne.w	800a804 <http_recv+0x118>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a980:	2f3f      	cmp	r7, #63	; 0x3f
 800a982:	bf28      	it	cs
 800a984:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 800a986:	f1b9 0f01 	cmp.w	r9, #1
 800a98a:	d00a      	beq.n	800a9a2 <http_recv+0x2b6>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a98c:	4e82      	ldr	r6, [pc, #520]	; (800ab98 <http_recv+0x4ac>)
 800a98e:	463a      	mov	r2, r7
 800a990:	f206 400c 	addw	r0, r6, #1036	; 0x40c
 800a994:	4651      	mov	r1, sl
      http_uri_buf[copy_len] = 0;
 800a996:	443e      	add	r6, r7
      MEMCPY(http_uri_buf, uri, copy_len);
 800a998:	f000 f9da 	bl	800ad50 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	f886 340c 	strb.w	r3, [r6, #1036]	; 0x40c
 800a9a2:	4b7c      	ldr	r3, [pc, #496]	; (800ab94 <http_recv+0x4a8>)
 800a9a4:	f8df a210 	ldr.w	sl, [pc, #528]	; 800abb8 <http_recv+0x4cc>
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a9a8:	19da      	adds	r2, r3, r7
 800a9aa:	ee08 2a90 	vmov	s17, r2
        is_09 = 1;
 800a9ae:	f04f 0b00 	mov.w	fp, #0
      if (copy_len > 0) {
 800a9b2:	f1b9 0f01 	cmp.w	r9, #1
 800a9b6:	f000 808c 	beq.w	800aad2 <http_recv+0x3e6>
        if (len_left > 0) {
 800a9ba:	f1d7 063f 	rsbs	r6, r7, #63	; 0x3f
 800a9be:	f000 808b 	beq.w	800aad8 <http_recv+0x3ec>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a9c2:	f8da 1000 	ldr.w	r1, [sl]
 800a9c6:	9102      	str	r1, [sp, #8]
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	f7f5 fc0b 	bl	80001e4 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a9ce:	4286      	cmp	r6, r0
 800a9d0:	bf28      	it	cs
 800a9d2:	4606      	movcs	r6, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a9d4:	9902      	ldr	r1, [sp, #8]
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	ee18 0a90 	vmov	r0, s17
 800a9dc:	f000 f9b8 	bl	800ad50 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a9e0:	4b6d      	ldr	r3, [pc, #436]	; (800ab98 <http_recv+0x4ac>)
 800a9e2:	19d8      	adds	r0, r3, r7
 800a9e4:	4430      	add	r0, r6
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f880 240c 	strb.w	r2, [r0, #1036]	; 0x40c
        file_name = http_uri_buf;
 800a9ec:	f203 410c 	addw	r1, r3, #1036	; 0x40c
      err = fs_open(&hs->file_handle, file_name);
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	9102      	str	r1, [sp, #8]
 800a9f4:	f7ff fb0a 	bl	800a00c <fs_open>
 800a9f8:	4626      	mov	r6, r4
      if (err == ERR_OK) {
 800a9fa:	9902      	ldr	r1, [sp, #8]
 800a9fc:	4b65      	ldr	r3, [pc, #404]	; (800ab94 <http_recv+0x4a8>)
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d16c      	bne.n	800aadc <http_recv+0x3f0>
        tag_check = httpd_default_filenames[loop].shtml;
 800aa02:	4b66      	ldr	r3, [pc, #408]	; (800ab9c <http_recv+0x4b0>)
        uri = file_name;
 800aa04:	9105      	str	r1, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 800aa06:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 800aa0a:	f89b 9014 	ldrb.w	r9, [fp, #20]
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800aa0e:	6833      	ldr	r3, [r6, #0]
 800aa10:	b933      	cbnz	r3, 800aa20 <http_recv+0x334>
 800aa12:	4b63      	ldr	r3, [pc, #396]	; (800aba0 <http_recv+0x4b4>)
 800aa14:	4963      	ldr	r1, [pc, #396]	; (800aba4 <http_recv+0x4b8>)
 800aa16:	4864      	ldr	r0, [pc, #400]	; (800aba8 <http_recv+0x4bc>)
 800aa18:	f640 120b 	movw	r2, #2315	; 0x90b
 800aa1c:	f000 f9ae 	bl	800ad7c <iprintf>
    if (tag_check) {
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	d012      	beq.n	800aa4c <http_recv+0x360>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800aa26:	20e0      	movs	r0, #224	; 0xe0
 800aa28:	f7fa ff7a 	bl	8005920 <mem_malloc>
  if (ret != NULL) {
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	b168      	cbz	r0, 800aa4c <http_recv+0x360>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800aa30:	22e0      	movs	r2, #224	; 0xe0
 800aa32:	2100      	movs	r1, #0
 800aa34:	f000 f99a 	bl	800ad6c <memset>
        ssi->tag_index = 0;
 800aa38:	2300      	movs	r3, #0
        ssi->tag_state = TAG_NONE;
 800aa3a:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
        ssi->parse_left = file->len;
 800aa3e:	6872      	ldr	r2, [r6, #4]
        ssi->tag_index = 0;
 800aa40:	81bb      	strh	r3, [r7, #12]
        ssi->parsed = file->data;
 800aa42:	6833      	ldr	r3, [r6, #0]
 800aa44:	603b      	str	r3, [r7, #0]
        ssi->tag_end = file->data;
 800aa46:	e9c7 3201 	strd	r3, r2, [r7, #4]
        hs->ssi = ssi;
 800aa4a:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->file = file->data;
 800aa4c:	6833      	ldr	r3, [r6, #0]
 800aa4e:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800aa50:	6873      	ldr	r3, [r6, #4]
    hs->handle = file;
 800aa52:	6166      	str	r6, [r4, #20]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	da06      	bge.n	800aa66 <http_recv+0x37a>
 800aa58:	4b51      	ldr	r3, [pc, #324]	; (800aba0 <http_recv+0x4b4>)
 800aa5a:	4954      	ldr	r1, [pc, #336]	; (800abac <http_recv+0x4c0>)
 800aa5c:	4852      	ldr	r0, [pc, #328]	; (800aba8 <http_recv+0x4bc>)
 800aa5e:	f640 1234 	movw	r2, #2356	; 0x934
 800aa62:	f000 f98b 	bl	800ad7c <iprintf>
      hs->left = (u32_t)file->len;
 800aa66:	6873      	ldr	r3, [r6, #4]
 800aa68:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 800aa70:	6963      	ldr	r3, [r4, #20]
 800aa72:	7c1b      	ldrb	r3, [r3, #16]
 800aa74:	07da      	lsls	r2, r3, #31
 800aa76:	f100 8089 	bmi.w	800ab8c <http_recv+0x4a0>
 800aa7a:	4b49      	ldr	r3, [pc, #292]	; (800aba0 <http_recv+0x4b4>)
 800aa7c:	494c      	ldr	r1, [pc, #304]	; (800abb0 <http_recv+0x4c4>)
 800aa7e:	484a      	ldr	r0, [pc, #296]	; (800aba8 <http_recv+0x4bc>)
 800aa80:	f640 1243 	movw	r2, #2371	; 0x943
 800aa84:	f000 f97a 	bl	800ad7c <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	b183      	cbz	r3, 800aaae <http_recv+0x3c2>
 800aa8c:	6963      	ldr	r3, [r4, #20]
 800aa8e:	7c1b      	ldrb	r3, [r3, #16]
 800aa90:	07db      	lsls	r3, r3, #31
 800aa92:	d50c      	bpl.n	800aaae <http_recv+0x3c2>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800aa94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa96:	4947      	ldr	r1, [pc, #284]	; (800abb4 <http_recv+0x4c8>)
 800aa98:	69a0      	ldr	r0, [r4, #24]
 800aa9a:	f7fa fd48 	bl	800552e <lwip_strnstr>
      if (file_start != NULL) {
 800aa9e:	b130      	cbz	r0, 800aaae <http_recv+0x3c2>
        int diff = file_start + 4 - hs->file;
 800aaa0:	69a3      	ldr	r3, [r4, #24]
 800aaa2:	3004      	adds	r0, #4
 800aaa4:	1ac2      	subs	r2, r0, r3
        hs->left -= (u32_t)diff;
 800aaa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hs->file += diff;
 800aaa8:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	6263      	str	r3, [r4, #36]	; 0x24
        if (hs->req != NULL) {
 800aaae:	6a20      	ldr	r0, [r4, #32]
 800aab0:	b118      	cbz	r0, 800aaba <http_recv+0x3ce>
          pbuf_free(hs->req);
 800aab2:	f7fb fa6b 	bl	8005f8c <pbuf_free>
          hs->req = NULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	6223      	str	r3, [r4, #32]
      pbuf_free(p);
 800aaba:	4628      	mov	r0, r5
 800aabc:	f7fb fa66 	bl	8005f8c <pbuf_free>
      if (parsed == ERR_OK) {
 800aac0:	9b00      	ldr	r3, [sp, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d14b      	bne.n	800ab5e <http_recv+0x472>
          http_send(pcb, hs);
 800aac6:	ee18 0a10 	vmov	r0, s16
 800aaca:	4621      	mov	r1, r4
 800aacc:	f7ff fb94 	bl	800a1f8 <http_send>
 800aad0:	e629      	b.n	800a726 <http_recv+0x3a>
        file_name = httpd_default_filenames[loop].name;
 800aad2:	f8da 1000 	ldr.w	r1, [sl]
 800aad6:	e78b      	b.n	800a9f0 <http_recv+0x304>
        file_name = http_uri_buf;
 800aad8:	4619      	mov	r1, r3
 800aada:	e789      	b.n	800a9f0 <http_recv+0x304>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800aadc:	f10b 0b01 	add.w	fp, fp, #1
 800aae0:	f1bb 0f05 	cmp.w	fp, #5
 800aae4:	f10a 0a08 	add.w	sl, sl, #8
 800aae8:	f47f af63 	bne.w	800a9b2 <http_recv+0x2c6>
 800aaec:	e68a      	b.n	800a804 <http_recv+0x118>
      *params = '\0';
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f806 3b01 	strb.w	r3, [r6], #1
      params++;
 800aaf4:	e68e      	b.n	800a814 <http_recv+0x128>
 800aaf6:	461e      	mov	r6, r3
 800aaf8:	e6ae      	b.n	800a858 <http_recv+0x16c>
 800aafa:	9003      	str	r0, [sp, #12]
      pair = strchr(equals, ' ');
 800aafc:	2120      	movs	r1, #32
 800aafe:	4630      	mov	r0, r6
 800ab00:	f000 f994 	bl	800ae2c <strchr>
      if (pair) {
 800ab04:	4603      	mov	r3, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f aeb2 	beq.w	800a870 <http_recv+0x184>
        *pair = '\0';
 800ab0c:	9a03      	ldr	r2, [sp, #12]
 800ab0e:	7002      	strb	r2, [r0, #0]
      pair = NULL;
 800ab10:	4613      	mov	r3, r2
 800ab12:	e6ad      	b.n	800a870 <http_recv+0x184>
      for (i = 0; i < httpd_num_cgis; i++) {
 800ab14:	f108 0801 	add.w	r8, r8, #1
 800ab18:	e689      	b.n	800a82e <http_recv+0x142>
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800ab1a:	212e      	movs	r1, #46	; 0x2e
 800ab1c:	1c78      	adds	r0, r7, #1
 800ab1e:	f000 f985 	bl	800ae2c <strchr>
 800ab22:	46bb      	mov	fp, r7
 800ab24:	e6e0      	b.n	800a8e8 <http_recv+0x1fc>
        tag_check = 1;
 800ab26:	f04f 0901 	mov.w	r9, #1
 800ab2a:	e6ef      	b.n	800a90c <http_recv+0x220>
        tag_check = 1;
 800ab2c:	f04f 0901 	mov.w	r9, #1
 800ab30:	e76d      	b.n	800aa0e <http_recv+0x322>
    hs->file = NULL;
 800ab32:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hs->left = 0;
 800ab36:	6266      	str	r6, [r4, #36]	; 0x24
    hs->retries = 0;
 800ab38:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ab3c:	e7b7      	b.n	800aaae <http_recv+0x3c2>
  clen = pbuf_clen(hs->req);
 800ab3e:	6a20      	ldr	r0, [r4, #32]
 800ab40:	f7fb fb5c 	bl	80061fc <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ab44:	6a23      	ldr	r3, [r4, #32]
 800ab46:	891b      	ldrh	r3, [r3, #8]
 800ab48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab4c:	f4bf aef0 	bcs.w	800a930 <http_recv+0x244>
 800ab50:	2805      	cmp	r0, #5
 800ab52:	f63f aeed 	bhi.w	800a930 <http_recv+0x244>
 800ab56:	f06f 0304 	mvn.w	r3, #4
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	e7ad      	b.n	800aaba <http_recv+0x3ce>
      } else if (parsed == ERR_ARG) {
 800ab5e:	9b00      	ldr	r3, [sp, #0]
 800ab60:	3310      	adds	r3, #16
 800ab62:	f47f ade0 	bne.w	800a726 <http_recv+0x3a>
 800ab66:	e5d9      	b.n	800a71c <http_recv+0x30>
      pbuf_free(p);
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f7fb fa0f 	bl	8005f8c <pbuf_free>
 800ab6e:	e5da      	b.n	800a726 <http_recv+0x3a>
    return ERR_USE;
 800ab70:	f06f 0307 	mvn.w	r3, #7
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	e79a      	b.n	800aaae <http_recv+0x3c2>
    file = http_get_404_file(hs, &uri);
 800ab78:	a905      	add	r1, sp, #20
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f7ff faae 	bl	800a0dc <http_get_404_file>
  if (file != NULL) {
 800ab80:	4606      	mov	r6, r0
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0d5      	beq.n	800ab32 <http_recv+0x446>
 800ab86:	f04f 0900 	mov.w	r9, #0
 800ab8a:	e740      	b.n	800aa0e <http_recv+0x322>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d08d      	beq.n	800aaae <http_recv+0x3c2>
 800ab92:	e77f      	b.n	800aa94 <http_recv+0x3a8>
 800ab94:	20000664 	.word	0x20000664
 800ab98:	20000258 	.word	0x20000258
 800ab9c:	08018bf8 	.word	0x08018bf8
 800aba0:	0801b5d0 	.word	0x0801b5d0
 800aba4:	0801b6c7 	.word	0x0801b6c7
 800aba8:	08018c9a 	.word	0x08018c9a
 800abac:	0801b6da 	.word	0x0801b6da
 800abb0:	0801b6f8 	.word	0x0801b6f8
 800abb4:	0801b6c2 	.word	0x0801b6c2
 800abb8:	08018c08 	.word	0x08018c08

0800abbc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800abbc:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800abbe:	202e      	movs	r0, #46	; 0x2e
 800abc0:	f7fc fc3a 	bl	8007438 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800abc4:	4604      	mov	r4, r0
 800abc6:	b940      	cbnz	r0, 800abda <httpd_init+0x1e>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 800abc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800abcc:	4b14      	ldr	r3, [pc, #80]	; (800ac20 <httpd_init+0x64>)
 800abce:	4915      	ldr	r1, [pc, #84]	; (800ac24 <httpd_init+0x68>)
 800abd0:	4815      	ldr	r0, [pc, #84]	; (800ac28 <httpd_init+0x6c>)
 800abd2:	f640 2272 	movw	r2, #2674	; 0xa72
 800abd6:	f000 b8d1 	b.w	800ad7c <iprintf>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800abda:	2101      	movs	r1, #1
 800abdc:	f7fb fe1a 	bl	8006814 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800abe0:	4912      	ldr	r1, [pc, #72]	; (800ac2c <httpd_init+0x70>)
 800abe2:	2250      	movs	r2, #80	; 0x50
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7fb fccb 	bl	8006580 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800abea:	b130      	cbz	r0, 800abfa <httpd_init+0x3e>
 800abec:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <httpd_init+0x64>)
 800abee:	4910      	ldr	r1, [pc, #64]	; (800ac30 <httpd_init+0x74>)
 800abf0:	480d      	ldr	r0, [pc, #52]	; (800ac28 <httpd_init+0x6c>)
 800abf2:	f640 2257 	movw	r2, #2647	; 0xa57
 800abf6:	f000 f8c1 	bl	800ad7c <iprintf>
    pcb = altcp_listen(pcb);
 800abfa:	4620      	mov	r0, r4
 800abfc:	21ff      	movs	r1, #255	; 0xff
 800abfe:	f7fb fd7b 	bl	80066f8 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800ac02:	4604      	mov	r4, r0
 800ac04:	b930      	cbnz	r0, 800ac14 <httpd_init+0x58>
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <httpd_init+0x64>)
 800ac08:	490a      	ldr	r1, [pc, #40]	; (800ac34 <httpd_init+0x78>)
 800ac0a:	4807      	ldr	r0, [pc, #28]	; (800ac28 <httpd_init+0x6c>)
 800ac0c:	f640 2259 	movw	r2, #2649	; 0xa59
 800ac10:	f000 f8b4 	bl	800ad7c <iprintf>
    altcp_accept(pcb, http_accept);
 800ac14:	4620      	mov	r0, r4
 800ac16:	4908      	ldr	r1, [pc, #32]	; (800ac38 <httpd_init+0x7c>)
}
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 800ac1c:	f7fb be54 	b.w	80068c8 <tcp_accept>
 800ac20:	0801b5d0 	.word	0x0801b5d0
 800ac24:	0801b721 	.word	0x0801b721
 800ac28:	08018c9a 	.word	0x08018c9a
 800ac2c:	0800be4c 	.word	0x0800be4c
 800ac30:	0801b73c 	.word	0x0801b73c
 800ac34:	0801b758 	.word	0x0801b758
 800ac38:	0800a119 	.word	0x0800a119

0800ac3c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	460e      	mov	r6, r1
 800ac40:	4615      	mov	r5, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800ac42:	4607      	mov	r7, r0
 800ac44:	b930      	cbnz	r0, 800ac54 <http_set_ssi_handler+0x18>
 800ac46:	4b0e      	ldr	r3, [pc, #56]	; (800ac80 <http_set_ssi_handler+0x44>)
 800ac48:	490e      	ldr	r1, [pc, #56]	; (800ac84 <http_set_ssi_handler+0x48>)
 800ac4a:	480f      	ldr	r0, [pc, #60]	; (800ac88 <http_set_ssi_handler+0x4c>)
 800ac4c:	f640 2297 	movw	r2, #2711	; 0xa97
 800ac50:	f000 f894 	bl	800ad7c <iprintf>
  httpd_ssi_handler = ssi_handler;
 800ac54:	4c0d      	ldr	r4, [pc, #52]	; (800ac8c <http_set_ssi_handler+0x50>)
 800ac56:	6027      	str	r7, [r4, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800ac58:	b936      	cbnz	r6, 800ac68 <http_set_ssi_handler+0x2c>
 800ac5a:	4b09      	ldr	r3, [pc, #36]	; (800ac80 <http_set_ssi_handler+0x44>)
 800ac5c:	490c      	ldr	r1, [pc, #48]	; (800ac90 <http_set_ssi_handler+0x54>)
 800ac5e:	480a      	ldr	r0, [pc, #40]	; (800ac88 <http_set_ssi_handler+0x4c>)
 800ac60:	f640 229e 	movw	r2, #2718	; 0xa9e
 800ac64:	f000 f88a 	bl	800ad7c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800ac68:	2d00      	cmp	r5, #0
 800ac6a:	dc06      	bgt.n	800ac7a <http_set_ssi_handler+0x3e>
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <http_set_ssi_handler+0x44>)
 800ac6e:	4909      	ldr	r1, [pc, #36]	; (800ac94 <http_set_ssi_handler+0x58>)
 800ac70:	4805      	ldr	r0, [pc, #20]	; (800ac88 <http_set_ssi_handler+0x4c>)
 800ac72:	f640 229f 	movw	r2, #2719	; 0xa9f
 800ac76:	f000 f881 	bl	800ad7c <iprintf>

  httpd_tags = tags;
  httpd_num_tags = num_tags;
 800ac7a:	e9c4 6501 	strd	r6, r5, [r4, #4]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800ac7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac80:	0801b5d0 	.word	0x0801b5d0
 800ac84:	0801b776 	.word	0x0801b776
 800ac88:	08018c9a 	.word	0x08018c9a
 800ac8c:	20000258 	.word	0x20000258
 800ac90:	0801b78b 	.word	0x0801b78b
 800ac94:	0801b799 	.word	0x0801b799

0800ac98 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	460c      	mov	r4, r1
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	b930      	cbnz	r0, 800acae <http_set_cgi_handlers+0x16>
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <http_set_cgi_handlers+0x34>)
 800aca2:	490b      	ldr	r1, [pc, #44]	; (800acd0 <http_set_cgi_handlers+0x38>)
 800aca4:	480b      	ldr	r0, [pc, #44]	; (800acd4 <http_set_cgi_handlers+0x3c>)
 800aca6:	f640 22b2 	movw	r2, #2738	; 0xab2
 800acaa:	f000 f867 	bl	800ad7c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800acae:	2c00      	cmp	r4, #0
 800acb0:	dc06      	bgt.n	800acc0 <http_set_cgi_handlers+0x28>
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <http_set_cgi_handlers+0x34>)
 800acb4:	4908      	ldr	r1, [pc, #32]	; (800acd8 <http_set_cgi_handlers+0x40>)
 800acb6:	4807      	ldr	r0, [pc, #28]	; (800acd4 <http_set_cgi_handlers+0x3c>)
 800acb8:	f640 22b3 	movw	r2, #2739	; 0xab3
 800acbc:	f000 f85e 	bl	800ad7c <iprintf>

  httpd_cgis = cgis;
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <http_set_cgi_handlers+0x44>)
 800acc2:	f8c3 5450 	str.w	r5, [r3, #1104]	; 0x450
  httpd_num_cgis = num_handlers;
 800acc6:	f8c3 444c 	str.w	r4, [r3, #1100]	; 0x44c
}
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	0801b5d0 	.word	0x0801b5d0
 800acd0:	0801b7b0 	.word	0x0801b7b0
 800acd4:	08018c9a 	.word	0x08018c9a
 800acd8:	0801b7be 	.word	0x0801b7be
 800acdc:	20000258 	.word	0x20000258

0800ace0 <__errno>:
 800ace0:	4b01      	ldr	r3, [pc, #4]	; (800ace8 <__errno+0x8>)
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	2000004c 	.word	0x2000004c

0800acec <__libc_init_array>:
 800acec:	b570      	push	{r4, r5, r6, lr}
 800acee:	4d0d      	ldr	r5, [pc, #52]	; (800ad24 <__libc_init_array+0x38>)
 800acf0:	4c0d      	ldr	r4, [pc, #52]	; (800ad28 <__libc_init_array+0x3c>)
 800acf2:	1b64      	subs	r4, r4, r5
 800acf4:	10a4      	asrs	r4, r4, #2
 800acf6:	2600      	movs	r6, #0
 800acf8:	42a6      	cmp	r6, r4
 800acfa:	d109      	bne.n	800ad10 <__libc_init_array+0x24>
 800acfc:	4d0b      	ldr	r5, [pc, #44]	; (800ad2c <__libc_init_array+0x40>)
 800acfe:	4c0c      	ldr	r4, [pc, #48]	; (800ad30 <__libc_init_array+0x44>)
 800ad00:	f001 f876 	bl	800bdf0 <_init>
 800ad04:	1b64      	subs	r4, r4, r5
 800ad06:	10a4      	asrs	r4, r4, #2
 800ad08:	2600      	movs	r6, #0
 800ad0a:	42a6      	cmp	r6, r4
 800ad0c:	d105      	bne.n	800ad1a <__libc_init_array+0x2e>
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad14:	4798      	blx	r3
 800ad16:	3601      	adds	r6, #1
 800ad18:	e7ee      	b.n	800acf8 <__libc_init_array+0xc>
 800ad1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad1e:	4798      	blx	r3
 800ad20:	3601      	adds	r6, #1
 800ad22:	e7f2      	b.n	800ad0a <__libc_init_array+0x1e>
 800ad24:	0801b984 	.word	0x0801b984
 800ad28:	0801b984 	.word	0x0801b984
 800ad2c:	0801b984 	.word	0x0801b984
 800ad30:	0801b988 	.word	0x0801b988

0800ad34 <memcmp>:
 800ad34:	b530      	push	{r4, r5, lr}
 800ad36:	3901      	subs	r1, #1
 800ad38:	2400      	movs	r4, #0
 800ad3a:	42a2      	cmp	r2, r4
 800ad3c:	d101      	bne.n	800ad42 <memcmp+0xe>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	e005      	b.n	800ad4e <memcmp+0x1a>
 800ad42:	5d03      	ldrb	r3, [r0, r4]
 800ad44:	3401      	adds	r4, #1
 800ad46:	5d0d      	ldrb	r5, [r1, r4]
 800ad48:	42ab      	cmp	r3, r5
 800ad4a:	d0f6      	beq.n	800ad3a <memcmp+0x6>
 800ad4c:	1b58      	subs	r0, r3, r5
 800ad4e:	bd30      	pop	{r4, r5, pc}

0800ad50 <memcpy>:
 800ad50:	440a      	add	r2, r1
 800ad52:	4291      	cmp	r1, r2
 800ad54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad58:	d100      	bne.n	800ad5c <memcpy+0xc>
 800ad5a:	4770      	bx	lr
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad66:	4291      	cmp	r1, r2
 800ad68:	d1f9      	bne.n	800ad5e <memcpy+0xe>
 800ad6a:	bd10      	pop	{r4, pc}

0800ad6c <memset>:
 800ad6c:	4402      	add	r2, r0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d100      	bne.n	800ad76 <memset+0xa>
 800ad74:	4770      	bx	lr
 800ad76:	f803 1b01 	strb.w	r1, [r3], #1
 800ad7a:	e7f9      	b.n	800ad70 <memset+0x4>

0800ad7c <iprintf>:
 800ad7c:	b40f      	push	{r0, r1, r2, r3}
 800ad7e:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <iprintf+0x2c>)
 800ad80:	b513      	push	{r0, r1, r4, lr}
 800ad82:	681c      	ldr	r4, [r3, #0]
 800ad84:	b124      	cbz	r4, 800ad90 <iprintf+0x14>
 800ad86:	69a3      	ldr	r3, [r4, #24]
 800ad88:	b913      	cbnz	r3, 800ad90 <iprintf+0x14>
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f8e4 	bl	800af58 <__sinit>
 800ad90:	ab05      	add	r3, sp, #20
 800ad92:	9a04      	ldr	r2, [sp, #16]
 800ad94:	68a1      	ldr	r1, [r4, #8]
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fa6b 	bl	800b274 <_vfiprintf_r>
 800ad9e:	b002      	add	sp, #8
 800ada0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ada4:	b004      	add	sp, #16
 800ada6:	4770      	bx	lr
 800ada8:	2000004c 	.word	0x2000004c

0800adac <rand>:
 800adac:	4b17      	ldr	r3, [pc, #92]	; (800ae0c <rand+0x60>)
 800adae:	b510      	push	{r4, lr}
 800adb0:	681c      	ldr	r4, [r3, #0]
 800adb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800adb4:	b9b3      	cbnz	r3, 800ade4 <rand+0x38>
 800adb6:	2018      	movs	r0, #24
 800adb8:	f000 f980 	bl	800b0bc <malloc>
 800adbc:	63a0      	str	r0, [r4, #56]	; 0x38
 800adbe:	b928      	cbnz	r0, 800adcc <rand+0x20>
 800adc0:	4602      	mov	r2, r0
 800adc2:	4b13      	ldr	r3, [pc, #76]	; (800ae10 <rand+0x64>)
 800adc4:	4813      	ldr	r0, [pc, #76]	; (800ae14 <rand+0x68>)
 800adc6:	214e      	movs	r1, #78	; 0x4e
 800adc8:	f000 f850 	bl	800ae6c <__assert_func>
 800adcc:	4a12      	ldr	r2, [pc, #72]	; (800ae18 <rand+0x6c>)
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <rand+0x70>)
 800add0:	e9c0 2300 	strd	r2, r3, [r0]
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <rand+0x74>)
 800add6:	6083      	str	r3, [r0, #8]
 800add8:	230b      	movs	r3, #11
 800adda:	8183      	strh	r3, [r0, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	2300      	movs	r3, #0
 800ade0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ade4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ade6:	480f      	ldr	r0, [pc, #60]	; (800ae24 <rand+0x78>)
 800ade8:	690a      	ldr	r2, [r1, #16]
 800adea:	694b      	ldr	r3, [r1, #20]
 800adec:	4c0e      	ldr	r4, [pc, #56]	; (800ae28 <rand+0x7c>)
 800adee:	4350      	muls	r0, r2
 800adf0:	fb04 0003 	mla	r0, r4, r3, r0
 800adf4:	fba2 3404 	umull	r3, r4, r2, r4
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	4404      	add	r4, r0
 800adfc:	f144 0000 	adc.w	r0, r4, #0
 800ae00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ae04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	bf00      	nop
 800ae0c:	2000004c 	.word	0x2000004c
 800ae10:	0801b834 	.word	0x0801b834
 800ae14:	0801b84b 	.word	0x0801b84b
 800ae18:	abcd330e 	.word	0xabcd330e
 800ae1c:	e66d1234 	.word	0xe66d1234
 800ae20:	0005deec 	.word	0x0005deec
 800ae24:	5851f42d 	.word	0x5851f42d
 800ae28:	4c957f2d 	.word	0x4c957f2d

0800ae2c <strchr>:
 800ae2c:	b2c9      	uxtb	r1, r1
 800ae2e:	4603      	mov	r3, r0
 800ae30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae34:	b11a      	cbz	r2, 800ae3e <strchr+0x12>
 800ae36:	428a      	cmp	r2, r1
 800ae38:	d1f9      	bne.n	800ae2e <strchr+0x2>
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	4770      	bx	lr
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	bf18      	it	ne
 800ae42:	2300      	movne	r3, #0
 800ae44:	e7f9      	b.n	800ae3a <strchr+0xe>

0800ae46 <strncmp>:
 800ae46:	b510      	push	{r4, lr}
 800ae48:	b16a      	cbz	r2, 800ae66 <strncmp+0x20>
 800ae4a:	3901      	subs	r1, #1
 800ae4c:	1884      	adds	r4, r0, r2
 800ae4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d103      	bne.n	800ae62 <strncmp+0x1c>
 800ae5a:	42a0      	cmp	r0, r4
 800ae5c:	d001      	beq.n	800ae62 <strncmp+0x1c>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1f5      	bne.n	800ae4e <strncmp+0x8>
 800ae62:	1a98      	subs	r0, r3, r2
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	4610      	mov	r0, r2
 800ae68:	e7fc      	b.n	800ae64 <strncmp+0x1e>
	...

0800ae6c <__assert_func>:
 800ae6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae6e:	4614      	mov	r4, r2
 800ae70:	461a      	mov	r2, r3
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <__assert_func+0x2c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4605      	mov	r5, r0
 800ae78:	68d8      	ldr	r0, [r3, #12]
 800ae7a:	b14c      	cbz	r4, 800ae90 <__assert_func+0x24>
 800ae7c:	4b07      	ldr	r3, [pc, #28]	; (800ae9c <__assert_func+0x30>)
 800ae7e:	9100      	str	r1, [sp, #0]
 800ae80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae84:	4906      	ldr	r1, [pc, #24]	; (800aea0 <__assert_func+0x34>)
 800ae86:	462b      	mov	r3, r5
 800ae88:	f000 f8e4 	bl	800b054 <fiprintf>
 800ae8c:	f000 fddc 	bl	800ba48 <abort>
 800ae90:	4b04      	ldr	r3, [pc, #16]	; (800aea4 <__assert_func+0x38>)
 800ae92:	461c      	mov	r4, r3
 800ae94:	e7f3      	b.n	800ae7e <__assert_func+0x12>
 800ae96:	bf00      	nop
 800ae98:	2000004c 	.word	0x2000004c
 800ae9c:	0801b8aa 	.word	0x0801b8aa
 800aea0:	0801b8b7 	.word	0x0801b8b7
 800aea4:	0801b6c6 	.word	0x0801b6c6

0800aea8 <std>:
 800aea8:	2300      	movs	r3, #0
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	4604      	mov	r4, r0
 800aeae:	e9c0 3300 	strd	r3, r3, [r0]
 800aeb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeb6:	6083      	str	r3, [r0, #8]
 800aeb8:	8181      	strh	r1, [r0, #12]
 800aeba:	6643      	str	r3, [r0, #100]	; 0x64
 800aebc:	81c2      	strh	r2, [r0, #14]
 800aebe:	6183      	str	r3, [r0, #24]
 800aec0:	4619      	mov	r1, r3
 800aec2:	2208      	movs	r2, #8
 800aec4:	305c      	adds	r0, #92	; 0x5c
 800aec6:	f7ff ff51 	bl	800ad6c <memset>
 800aeca:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <std+0x38>)
 800aecc:	6263      	str	r3, [r4, #36]	; 0x24
 800aece:	4b05      	ldr	r3, [pc, #20]	; (800aee4 <std+0x3c>)
 800aed0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aed2:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <std+0x40>)
 800aed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aed6:	4b05      	ldr	r3, [pc, #20]	; (800aeec <std+0x44>)
 800aed8:	6224      	str	r4, [r4, #32]
 800aeda:	6323      	str	r3, [r4, #48]	; 0x30
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	0800b81d 	.word	0x0800b81d
 800aee4:	0800b83f 	.word	0x0800b83f
 800aee8:	0800b877 	.word	0x0800b877
 800aeec:	0800b89b 	.word	0x0800b89b

0800aef0 <_cleanup_r>:
 800aef0:	4901      	ldr	r1, [pc, #4]	; (800aef8 <_cleanup_r+0x8>)
 800aef2:	f000 b8c1 	b.w	800b078 <_fwalk_reent>
 800aef6:	bf00      	nop
 800aef8:	0800bb85 	.word	0x0800bb85

0800aefc <__sfmoreglue>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	1e4a      	subs	r2, r1, #1
 800af00:	2568      	movs	r5, #104	; 0x68
 800af02:	4355      	muls	r5, r2
 800af04:	460e      	mov	r6, r1
 800af06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af0a:	f000 f92f 	bl	800b16c <_malloc_r>
 800af0e:	4604      	mov	r4, r0
 800af10:	b140      	cbz	r0, 800af24 <__sfmoreglue+0x28>
 800af12:	2100      	movs	r1, #0
 800af14:	e9c0 1600 	strd	r1, r6, [r0]
 800af18:	300c      	adds	r0, #12
 800af1a:	60a0      	str	r0, [r4, #8]
 800af1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af20:	f7ff ff24 	bl	800ad6c <memset>
 800af24:	4620      	mov	r0, r4
 800af26:	bd70      	pop	{r4, r5, r6, pc}

0800af28 <__sfp_lock_acquire>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sfp_lock_acquire+0x8>)
 800af2a:	f000 b8c5 	b.w	800b0b8 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	2000e4ac 	.word	0x2000e4ac

0800af34 <__sfp_lock_release>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__sfp_lock_release+0x8>)
 800af36:	f000 b8c0 	b.w	800b0ba <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	2000e4ac 	.word	0x2000e4ac

0800af40 <__sinit_lock_acquire>:
 800af40:	4801      	ldr	r0, [pc, #4]	; (800af48 <__sinit_lock_acquire+0x8>)
 800af42:	f000 b8b9 	b.w	800b0b8 <__retarget_lock_acquire_recursive>
 800af46:	bf00      	nop
 800af48:	2000e4a7 	.word	0x2000e4a7

0800af4c <__sinit_lock_release>:
 800af4c:	4801      	ldr	r0, [pc, #4]	; (800af54 <__sinit_lock_release+0x8>)
 800af4e:	f000 b8b4 	b.w	800b0ba <__retarget_lock_release_recursive>
 800af52:	bf00      	nop
 800af54:	2000e4a7 	.word	0x2000e4a7

0800af58 <__sinit>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	4604      	mov	r4, r0
 800af5c:	f7ff fff0 	bl	800af40 <__sinit_lock_acquire>
 800af60:	69a3      	ldr	r3, [r4, #24]
 800af62:	b11b      	cbz	r3, 800af6c <__sinit+0x14>
 800af64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af68:	f7ff bff0 	b.w	800af4c <__sinit_lock_release>
 800af6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af70:	6523      	str	r3, [r4, #80]	; 0x50
 800af72:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <__sinit+0x68>)
 800af74:	4a13      	ldr	r2, [pc, #76]	; (800afc4 <__sinit+0x6c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	62a2      	str	r2, [r4, #40]	; 0x28
 800af7a:	42a3      	cmp	r3, r4
 800af7c:	bf04      	itt	eq
 800af7e:	2301      	moveq	r3, #1
 800af80:	61a3      	streq	r3, [r4, #24]
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f820 	bl	800afc8 <__sfp>
 800af88:	6060      	str	r0, [r4, #4]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 f81c 	bl	800afc8 <__sfp>
 800af90:	60a0      	str	r0, [r4, #8]
 800af92:	4620      	mov	r0, r4
 800af94:	f000 f818 	bl	800afc8 <__sfp>
 800af98:	2200      	movs	r2, #0
 800af9a:	60e0      	str	r0, [r4, #12]
 800af9c:	2104      	movs	r1, #4
 800af9e:	6860      	ldr	r0, [r4, #4]
 800afa0:	f7ff ff82 	bl	800aea8 <std>
 800afa4:	68a0      	ldr	r0, [r4, #8]
 800afa6:	2201      	movs	r2, #1
 800afa8:	2109      	movs	r1, #9
 800afaa:	f7ff ff7d 	bl	800aea8 <std>
 800afae:	68e0      	ldr	r0, [r4, #12]
 800afb0:	2202      	movs	r2, #2
 800afb2:	2112      	movs	r1, #18
 800afb4:	f7ff ff78 	bl	800aea8 <std>
 800afb8:	2301      	movs	r3, #1
 800afba:	61a3      	str	r3, [r4, #24]
 800afbc:	e7d2      	b.n	800af64 <__sinit+0xc>
 800afbe:	bf00      	nop
 800afc0:	0801b830 	.word	0x0801b830
 800afc4:	0800aef1 	.word	0x0800aef1

0800afc8 <__sfp>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	4607      	mov	r7, r0
 800afcc:	f7ff ffac 	bl	800af28 <__sfp_lock_acquire>
 800afd0:	4b1e      	ldr	r3, [pc, #120]	; (800b04c <__sfp+0x84>)
 800afd2:	681e      	ldr	r6, [r3, #0]
 800afd4:	69b3      	ldr	r3, [r6, #24]
 800afd6:	b913      	cbnz	r3, 800afde <__sfp+0x16>
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff ffbd 	bl	800af58 <__sinit>
 800afde:	3648      	adds	r6, #72	; 0x48
 800afe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	d503      	bpl.n	800aff0 <__sfp+0x28>
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	b30b      	cbz	r3, 800b030 <__sfp+0x68>
 800afec:	6836      	ldr	r6, [r6, #0]
 800afee:	e7f7      	b.n	800afe0 <__sfp+0x18>
 800aff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aff4:	b9d5      	cbnz	r5, 800b02c <__sfp+0x64>
 800aff6:	4b16      	ldr	r3, [pc, #88]	; (800b050 <__sfp+0x88>)
 800aff8:	60e3      	str	r3, [r4, #12]
 800affa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800affe:	6665      	str	r5, [r4, #100]	; 0x64
 800b000:	f000 f859 	bl	800b0b6 <__retarget_lock_init_recursive>
 800b004:	f7ff ff96 	bl	800af34 <__sfp_lock_release>
 800b008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b010:	6025      	str	r5, [r4, #0]
 800b012:	61a5      	str	r5, [r4, #24]
 800b014:	2208      	movs	r2, #8
 800b016:	4629      	mov	r1, r5
 800b018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b01c:	f7ff fea6 	bl	800ad6c <memset>
 800b020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b028:	4620      	mov	r0, r4
 800b02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02c:	3468      	adds	r4, #104	; 0x68
 800b02e:	e7d9      	b.n	800afe4 <__sfp+0x1c>
 800b030:	2104      	movs	r1, #4
 800b032:	4638      	mov	r0, r7
 800b034:	f7ff ff62 	bl	800aefc <__sfmoreglue>
 800b038:	4604      	mov	r4, r0
 800b03a:	6030      	str	r0, [r6, #0]
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1d5      	bne.n	800afec <__sfp+0x24>
 800b040:	f7ff ff78 	bl	800af34 <__sfp_lock_release>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	e7ee      	b.n	800b028 <__sfp+0x60>
 800b04a:	bf00      	nop
 800b04c:	0801b830 	.word	0x0801b830
 800b050:	ffff0001 	.word	0xffff0001

0800b054 <fiprintf>:
 800b054:	b40e      	push	{r1, r2, r3}
 800b056:	b503      	push	{r0, r1, lr}
 800b058:	4601      	mov	r1, r0
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	4805      	ldr	r0, [pc, #20]	; (800b074 <fiprintf+0x20>)
 800b05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b062:	6800      	ldr	r0, [r0, #0]
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	f000 f905 	bl	800b274 <_vfiprintf_r>
 800b06a:	b002      	add	sp, #8
 800b06c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b070:	b003      	add	sp, #12
 800b072:	4770      	bx	lr
 800b074:	2000004c 	.word	0x2000004c

0800b078 <_fwalk_reent>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4606      	mov	r6, r0
 800b07e:	4688      	mov	r8, r1
 800b080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b084:	2700      	movs	r7, #0
 800b086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b08a:	f1b9 0901 	subs.w	r9, r9, #1
 800b08e:	d505      	bpl.n	800b09c <_fwalk_reent+0x24>
 800b090:	6824      	ldr	r4, [r4, #0]
 800b092:	2c00      	cmp	r4, #0
 800b094:	d1f7      	bne.n	800b086 <_fwalk_reent+0xe>
 800b096:	4638      	mov	r0, r7
 800b098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b09c:	89ab      	ldrh	r3, [r5, #12]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d907      	bls.n	800b0b2 <_fwalk_reent+0x3a>
 800b0a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	d003      	beq.n	800b0b2 <_fwalk_reent+0x3a>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	47c0      	blx	r8
 800b0b0:	4307      	orrs	r7, r0
 800b0b2:	3568      	adds	r5, #104	; 0x68
 800b0b4:	e7e9      	b.n	800b08a <_fwalk_reent+0x12>

0800b0b6 <__retarget_lock_init_recursive>:
 800b0b6:	4770      	bx	lr

0800b0b8 <__retarget_lock_acquire_recursive>:
 800b0b8:	4770      	bx	lr

0800b0ba <__retarget_lock_release_recursive>:
 800b0ba:	4770      	bx	lr

0800b0bc <malloc>:
 800b0bc:	4b02      	ldr	r3, [pc, #8]	; (800b0c8 <malloc+0xc>)
 800b0be:	4601      	mov	r1, r0
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	f000 b853 	b.w	800b16c <_malloc_r>
 800b0c6:	bf00      	nop
 800b0c8:	2000004c 	.word	0x2000004c

0800b0cc <_free_r>:
 800b0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0ce:	2900      	cmp	r1, #0
 800b0d0:	d048      	beq.n	800b164 <_free_r+0x98>
 800b0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d6:	9001      	str	r0, [sp, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f1a1 0404 	sub.w	r4, r1, #4
 800b0de:	bfb8      	it	lt
 800b0e0:	18e4      	addlt	r4, r4, r3
 800b0e2:	f000 fe01 	bl	800bce8 <__malloc_lock>
 800b0e6:	4a20      	ldr	r2, [pc, #128]	; (800b168 <_free_r+0x9c>)
 800b0e8:	9801      	ldr	r0, [sp, #4]
 800b0ea:	6813      	ldr	r3, [r2, #0]
 800b0ec:	4615      	mov	r5, r2
 800b0ee:	b933      	cbnz	r3, 800b0fe <_free_r+0x32>
 800b0f0:	6063      	str	r3, [r4, #4]
 800b0f2:	6014      	str	r4, [r2, #0]
 800b0f4:	b003      	add	sp, #12
 800b0f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0fa:	f000 bdfb 	b.w	800bcf4 <__malloc_unlock>
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	d90b      	bls.n	800b11a <_free_r+0x4e>
 800b102:	6821      	ldr	r1, [r4, #0]
 800b104:	1862      	adds	r2, r4, r1
 800b106:	4293      	cmp	r3, r2
 800b108:	bf04      	itt	eq
 800b10a:	681a      	ldreq	r2, [r3, #0]
 800b10c:	685b      	ldreq	r3, [r3, #4]
 800b10e:	6063      	str	r3, [r4, #4]
 800b110:	bf04      	itt	eq
 800b112:	1852      	addeq	r2, r2, r1
 800b114:	6022      	streq	r2, [r4, #0]
 800b116:	602c      	str	r4, [r5, #0]
 800b118:	e7ec      	b.n	800b0f4 <_free_r+0x28>
 800b11a:	461a      	mov	r2, r3
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	b10b      	cbz	r3, 800b124 <_free_r+0x58>
 800b120:	42a3      	cmp	r3, r4
 800b122:	d9fa      	bls.n	800b11a <_free_r+0x4e>
 800b124:	6811      	ldr	r1, [r2, #0]
 800b126:	1855      	adds	r5, r2, r1
 800b128:	42a5      	cmp	r5, r4
 800b12a:	d10b      	bne.n	800b144 <_free_r+0x78>
 800b12c:	6824      	ldr	r4, [r4, #0]
 800b12e:	4421      	add	r1, r4
 800b130:	1854      	adds	r4, r2, r1
 800b132:	42a3      	cmp	r3, r4
 800b134:	6011      	str	r1, [r2, #0]
 800b136:	d1dd      	bne.n	800b0f4 <_free_r+0x28>
 800b138:	681c      	ldr	r4, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	6053      	str	r3, [r2, #4]
 800b13e:	4421      	add	r1, r4
 800b140:	6011      	str	r1, [r2, #0]
 800b142:	e7d7      	b.n	800b0f4 <_free_r+0x28>
 800b144:	d902      	bls.n	800b14c <_free_r+0x80>
 800b146:	230c      	movs	r3, #12
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	e7d3      	b.n	800b0f4 <_free_r+0x28>
 800b14c:	6825      	ldr	r5, [r4, #0]
 800b14e:	1961      	adds	r1, r4, r5
 800b150:	428b      	cmp	r3, r1
 800b152:	bf04      	itt	eq
 800b154:	6819      	ldreq	r1, [r3, #0]
 800b156:	685b      	ldreq	r3, [r3, #4]
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	bf04      	itt	eq
 800b15c:	1949      	addeq	r1, r1, r5
 800b15e:	6021      	streq	r1, [r4, #0]
 800b160:	6054      	str	r4, [r2, #4]
 800b162:	e7c7      	b.n	800b0f4 <_free_r+0x28>
 800b164:	b003      	add	sp, #12
 800b166:	bd30      	pop	{r4, r5, pc}
 800b168:	200006ac 	.word	0x200006ac

0800b16c <_malloc_r>:
 800b16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16e:	1ccd      	adds	r5, r1, #3
 800b170:	f025 0503 	bic.w	r5, r5, #3
 800b174:	3508      	adds	r5, #8
 800b176:	2d0c      	cmp	r5, #12
 800b178:	bf38      	it	cc
 800b17a:	250c      	movcc	r5, #12
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	4606      	mov	r6, r0
 800b180:	db01      	blt.n	800b186 <_malloc_r+0x1a>
 800b182:	42a9      	cmp	r1, r5
 800b184:	d903      	bls.n	800b18e <_malloc_r+0x22>
 800b186:	230c      	movs	r3, #12
 800b188:	6033      	str	r3, [r6, #0]
 800b18a:	2000      	movs	r0, #0
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b18e:	f000 fdab 	bl	800bce8 <__malloc_lock>
 800b192:	4921      	ldr	r1, [pc, #132]	; (800b218 <_malloc_r+0xac>)
 800b194:	680a      	ldr	r2, [r1, #0]
 800b196:	4614      	mov	r4, r2
 800b198:	b99c      	cbnz	r4, 800b1c2 <_malloc_r+0x56>
 800b19a:	4f20      	ldr	r7, [pc, #128]	; (800b21c <_malloc_r+0xb0>)
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	b923      	cbnz	r3, 800b1aa <_malloc_r+0x3e>
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 fb2a 	bl	800b7fc <_sbrk_r>
 800b1a8:	6038      	str	r0, [r7, #0]
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f000 fb25 	bl	800b7fc <_sbrk_r>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d123      	bne.n	800b1fe <_malloc_r+0x92>
 800b1b6:	230c      	movs	r3, #12
 800b1b8:	6033      	str	r3, [r6, #0]
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 fd9a 	bl	800bcf4 <__malloc_unlock>
 800b1c0:	e7e3      	b.n	800b18a <_malloc_r+0x1e>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	1b5b      	subs	r3, r3, r5
 800b1c6:	d417      	bmi.n	800b1f8 <_malloc_r+0x8c>
 800b1c8:	2b0b      	cmp	r3, #11
 800b1ca:	d903      	bls.n	800b1d4 <_malloc_r+0x68>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	441c      	add	r4, r3
 800b1d0:	6025      	str	r5, [r4, #0]
 800b1d2:	e004      	b.n	800b1de <_malloc_r+0x72>
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	42a2      	cmp	r2, r4
 800b1d8:	bf0c      	ite	eq
 800b1da:	600b      	streq	r3, [r1, #0]
 800b1dc:	6053      	strne	r3, [r2, #4]
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f000 fd88 	bl	800bcf4 <__malloc_unlock>
 800b1e4:	f104 000b 	add.w	r0, r4, #11
 800b1e8:	1d23      	adds	r3, r4, #4
 800b1ea:	f020 0007 	bic.w	r0, r0, #7
 800b1ee:	1ac2      	subs	r2, r0, r3
 800b1f0:	d0cc      	beq.n	800b18c <_malloc_r+0x20>
 800b1f2:	1a1b      	subs	r3, r3, r0
 800b1f4:	50a3      	str	r3, [r4, r2]
 800b1f6:	e7c9      	b.n	800b18c <_malloc_r+0x20>
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	6864      	ldr	r4, [r4, #4]
 800b1fc:	e7cc      	b.n	800b198 <_malloc_r+0x2c>
 800b1fe:	1cc4      	adds	r4, r0, #3
 800b200:	f024 0403 	bic.w	r4, r4, #3
 800b204:	42a0      	cmp	r0, r4
 800b206:	d0e3      	beq.n	800b1d0 <_malloc_r+0x64>
 800b208:	1a21      	subs	r1, r4, r0
 800b20a:	4630      	mov	r0, r6
 800b20c:	f000 faf6 	bl	800b7fc <_sbrk_r>
 800b210:	3001      	adds	r0, #1
 800b212:	d1dd      	bne.n	800b1d0 <_malloc_r+0x64>
 800b214:	e7cf      	b.n	800b1b6 <_malloc_r+0x4a>
 800b216:	bf00      	nop
 800b218:	200006ac 	.word	0x200006ac
 800b21c:	200006b0 	.word	0x200006b0

0800b220 <__sfputc_r>:
 800b220:	6893      	ldr	r3, [r2, #8]
 800b222:	3b01      	subs	r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	b410      	push	{r4}
 800b228:	6093      	str	r3, [r2, #8]
 800b22a:	da08      	bge.n	800b23e <__sfputc_r+0x1e>
 800b22c:	6994      	ldr	r4, [r2, #24]
 800b22e:	42a3      	cmp	r3, r4
 800b230:	db01      	blt.n	800b236 <__sfputc_r+0x16>
 800b232:	290a      	cmp	r1, #10
 800b234:	d103      	bne.n	800b23e <__sfputc_r+0x1e>
 800b236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23a:	f000 bb33 	b.w	800b8a4 <__swbuf_r>
 800b23e:	6813      	ldr	r3, [r2, #0]
 800b240:	1c58      	adds	r0, r3, #1
 800b242:	6010      	str	r0, [r2, #0]
 800b244:	7019      	strb	r1, [r3, #0]
 800b246:	4608      	mov	r0, r1
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <__sfputs_r>:
 800b24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	4614      	mov	r4, r2
 800b256:	18d5      	adds	r5, r2, r3
 800b258:	42ac      	cmp	r4, r5
 800b25a:	d101      	bne.n	800b260 <__sfputs_r+0x12>
 800b25c:	2000      	movs	r0, #0
 800b25e:	e007      	b.n	800b270 <__sfputs_r+0x22>
 800b260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b264:	463a      	mov	r2, r7
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ffda 	bl	800b220 <__sfputc_r>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d1f3      	bne.n	800b258 <__sfputs_r+0xa>
 800b270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b274 <_vfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	460d      	mov	r5, r1
 800b27a:	b09d      	sub	sp, #116	; 0x74
 800b27c:	4614      	mov	r4, r2
 800b27e:	4698      	mov	r8, r3
 800b280:	4606      	mov	r6, r0
 800b282:	b118      	cbz	r0, 800b28c <_vfiprintf_r+0x18>
 800b284:	6983      	ldr	r3, [r0, #24]
 800b286:	b90b      	cbnz	r3, 800b28c <_vfiprintf_r+0x18>
 800b288:	f7ff fe66 	bl	800af58 <__sinit>
 800b28c:	4b89      	ldr	r3, [pc, #548]	; (800b4b4 <_vfiprintf_r+0x240>)
 800b28e:	429d      	cmp	r5, r3
 800b290:	d11b      	bne.n	800b2ca <_vfiprintf_r+0x56>
 800b292:	6875      	ldr	r5, [r6, #4]
 800b294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b296:	07d9      	lsls	r1, r3, #31
 800b298:	d405      	bmi.n	800b2a6 <_vfiprintf_r+0x32>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	059a      	lsls	r2, r3, #22
 800b29e:	d402      	bmi.n	800b2a6 <_vfiprintf_r+0x32>
 800b2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2a2:	f7ff ff09 	bl	800b0b8 <__retarget_lock_acquire_recursive>
 800b2a6:	89ab      	ldrh	r3, [r5, #12]
 800b2a8:	071b      	lsls	r3, r3, #28
 800b2aa:	d501      	bpl.n	800b2b0 <_vfiprintf_r+0x3c>
 800b2ac:	692b      	ldr	r3, [r5, #16]
 800b2ae:	b9eb      	cbnz	r3, 800b2ec <_vfiprintf_r+0x78>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f000 fb5a 	bl	800b96c <__swsetup_r>
 800b2b8:	b1c0      	cbz	r0, 800b2ec <_vfiprintf_r+0x78>
 800b2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2bc:	07dc      	lsls	r4, r3, #31
 800b2be:	d50e      	bpl.n	800b2de <_vfiprintf_r+0x6a>
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	b01d      	add	sp, #116	; 0x74
 800b2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ca:	4b7b      	ldr	r3, [pc, #492]	; (800b4b8 <_vfiprintf_r+0x244>)
 800b2cc:	429d      	cmp	r5, r3
 800b2ce:	d101      	bne.n	800b2d4 <_vfiprintf_r+0x60>
 800b2d0:	68b5      	ldr	r5, [r6, #8]
 800b2d2:	e7df      	b.n	800b294 <_vfiprintf_r+0x20>
 800b2d4:	4b79      	ldr	r3, [pc, #484]	; (800b4bc <_vfiprintf_r+0x248>)
 800b2d6:	429d      	cmp	r5, r3
 800b2d8:	bf08      	it	eq
 800b2da:	68f5      	ldreq	r5, [r6, #12]
 800b2dc:	e7da      	b.n	800b294 <_vfiprintf_r+0x20>
 800b2de:	89ab      	ldrh	r3, [r5, #12]
 800b2e0:	0598      	lsls	r0, r3, #22
 800b2e2:	d4ed      	bmi.n	800b2c0 <_vfiprintf_r+0x4c>
 800b2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2e6:	f7ff fee8 	bl	800b0ba <__retarget_lock_release_recursive>
 800b2ea:	e7e9      	b.n	800b2c0 <_vfiprintf_r+0x4c>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f0:	2320      	movs	r3, #32
 800b2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2fa:	2330      	movs	r3, #48	; 0x30
 800b2fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b4c0 <_vfiprintf_r+0x24c>
 800b300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b304:	f04f 0901 	mov.w	r9, #1
 800b308:	4623      	mov	r3, r4
 800b30a:	469a      	mov	sl, r3
 800b30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b310:	b10a      	cbz	r2, 800b316 <_vfiprintf_r+0xa2>
 800b312:	2a25      	cmp	r2, #37	; 0x25
 800b314:	d1f9      	bne.n	800b30a <_vfiprintf_r+0x96>
 800b316:	ebba 0b04 	subs.w	fp, sl, r4
 800b31a:	d00b      	beq.n	800b334 <_vfiprintf_r+0xc0>
 800b31c:	465b      	mov	r3, fp
 800b31e:	4622      	mov	r2, r4
 800b320:	4629      	mov	r1, r5
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff ff93 	bl	800b24e <__sfputs_r>
 800b328:	3001      	adds	r0, #1
 800b32a:	f000 80aa 	beq.w	800b482 <_vfiprintf_r+0x20e>
 800b32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b330:	445a      	add	r2, fp
 800b332:	9209      	str	r2, [sp, #36]	; 0x24
 800b334:	f89a 3000 	ldrb.w	r3, [sl]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 80a2 	beq.w	800b482 <_vfiprintf_r+0x20e>
 800b33e:	2300      	movs	r3, #0
 800b340:	f04f 32ff 	mov.w	r2, #4294967295
 800b344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b348:	f10a 0a01 	add.w	sl, sl, #1
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	9307      	str	r3, [sp, #28]
 800b350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b354:	931a      	str	r3, [sp, #104]	; 0x68
 800b356:	4654      	mov	r4, sl
 800b358:	2205      	movs	r2, #5
 800b35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35e:	4858      	ldr	r0, [pc, #352]	; (800b4c0 <_vfiprintf_r+0x24c>)
 800b360:	f7f4 ff4e 	bl	8000200 <memchr>
 800b364:	9a04      	ldr	r2, [sp, #16]
 800b366:	b9d8      	cbnz	r0, 800b3a0 <_vfiprintf_r+0x12c>
 800b368:	06d1      	lsls	r1, r2, #27
 800b36a:	bf44      	itt	mi
 800b36c:	2320      	movmi	r3, #32
 800b36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b372:	0713      	lsls	r3, r2, #28
 800b374:	bf44      	itt	mi
 800b376:	232b      	movmi	r3, #43	; 0x2b
 800b378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b37c:	f89a 3000 	ldrb.w	r3, [sl]
 800b380:	2b2a      	cmp	r3, #42	; 0x2a
 800b382:	d015      	beq.n	800b3b0 <_vfiprintf_r+0x13c>
 800b384:	9a07      	ldr	r2, [sp, #28]
 800b386:	4654      	mov	r4, sl
 800b388:	2000      	movs	r0, #0
 800b38a:	f04f 0c0a 	mov.w	ip, #10
 800b38e:	4621      	mov	r1, r4
 800b390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b394:	3b30      	subs	r3, #48	; 0x30
 800b396:	2b09      	cmp	r3, #9
 800b398:	d94e      	bls.n	800b438 <_vfiprintf_r+0x1c4>
 800b39a:	b1b0      	cbz	r0, 800b3ca <_vfiprintf_r+0x156>
 800b39c:	9207      	str	r2, [sp, #28]
 800b39e:	e014      	b.n	800b3ca <_vfiprintf_r+0x156>
 800b3a0:	eba0 0308 	sub.w	r3, r0, r8
 800b3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	46a2      	mov	sl, r4
 800b3ae:	e7d2      	b.n	800b356 <_vfiprintf_r+0xe2>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	1d19      	adds	r1, r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	9103      	str	r1, [sp, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bfbb      	ittet	lt
 800b3bc:	425b      	neglt	r3, r3
 800b3be:	f042 0202 	orrlt.w	r2, r2, #2
 800b3c2:	9307      	strge	r3, [sp, #28]
 800b3c4:	9307      	strlt	r3, [sp, #28]
 800b3c6:	bfb8      	it	lt
 800b3c8:	9204      	strlt	r2, [sp, #16]
 800b3ca:	7823      	ldrb	r3, [r4, #0]
 800b3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ce:	d10c      	bne.n	800b3ea <_vfiprintf_r+0x176>
 800b3d0:	7863      	ldrb	r3, [r4, #1]
 800b3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d4:	d135      	bne.n	800b442 <_vfiprintf_r+0x1ce>
 800b3d6:	9b03      	ldr	r3, [sp, #12]
 800b3d8:	1d1a      	adds	r2, r3, #4
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	9203      	str	r2, [sp, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfb8      	it	lt
 800b3e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3e6:	3402      	adds	r4, #2
 800b3e8:	9305      	str	r3, [sp, #20]
 800b3ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4d0 <_vfiprintf_r+0x25c>
 800b3ee:	7821      	ldrb	r1, [r4, #0]
 800b3f0:	2203      	movs	r2, #3
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	f7f4 ff04 	bl	8000200 <memchr>
 800b3f8:	b140      	cbz	r0, 800b40c <_vfiprintf_r+0x198>
 800b3fa:	2340      	movs	r3, #64	; 0x40
 800b3fc:	eba0 000a 	sub.w	r0, r0, sl
 800b400:	fa03 f000 	lsl.w	r0, r3, r0
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	4303      	orrs	r3, r0
 800b408:	3401      	adds	r4, #1
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b410:	482c      	ldr	r0, [pc, #176]	; (800b4c4 <_vfiprintf_r+0x250>)
 800b412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b416:	2206      	movs	r2, #6
 800b418:	f7f4 fef2 	bl	8000200 <memchr>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d03f      	beq.n	800b4a0 <_vfiprintf_r+0x22c>
 800b420:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <_vfiprintf_r+0x254>)
 800b422:	bb1b      	cbnz	r3, 800b46c <_vfiprintf_r+0x1f8>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	3307      	adds	r3, #7
 800b428:	f023 0307 	bic.w	r3, r3, #7
 800b42c:	3308      	adds	r3, #8
 800b42e:	9303      	str	r3, [sp, #12]
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	443b      	add	r3, r7
 800b434:	9309      	str	r3, [sp, #36]	; 0x24
 800b436:	e767      	b.n	800b308 <_vfiprintf_r+0x94>
 800b438:	fb0c 3202 	mla	r2, ip, r2, r3
 800b43c:	460c      	mov	r4, r1
 800b43e:	2001      	movs	r0, #1
 800b440:	e7a5      	b.n	800b38e <_vfiprintf_r+0x11a>
 800b442:	2300      	movs	r3, #0
 800b444:	3401      	adds	r4, #1
 800b446:	9305      	str	r3, [sp, #20]
 800b448:	4619      	mov	r1, r3
 800b44a:	f04f 0c0a 	mov.w	ip, #10
 800b44e:	4620      	mov	r0, r4
 800b450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b454:	3a30      	subs	r2, #48	; 0x30
 800b456:	2a09      	cmp	r2, #9
 800b458:	d903      	bls.n	800b462 <_vfiprintf_r+0x1ee>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0c5      	beq.n	800b3ea <_vfiprintf_r+0x176>
 800b45e:	9105      	str	r1, [sp, #20]
 800b460:	e7c3      	b.n	800b3ea <_vfiprintf_r+0x176>
 800b462:	fb0c 2101 	mla	r1, ip, r1, r2
 800b466:	4604      	mov	r4, r0
 800b468:	2301      	movs	r3, #1
 800b46a:	e7f0      	b.n	800b44e <_vfiprintf_r+0x1da>
 800b46c:	ab03      	add	r3, sp, #12
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	462a      	mov	r2, r5
 800b472:	4b16      	ldr	r3, [pc, #88]	; (800b4cc <_vfiprintf_r+0x258>)
 800b474:	a904      	add	r1, sp, #16
 800b476:	4630      	mov	r0, r6
 800b478:	f3af 8000 	nop.w
 800b47c:	4607      	mov	r7, r0
 800b47e:	1c78      	adds	r0, r7, #1
 800b480:	d1d6      	bne.n	800b430 <_vfiprintf_r+0x1bc>
 800b482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b484:	07d9      	lsls	r1, r3, #31
 800b486:	d405      	bmi.n	800b494 <_vfiprintf_r+0x220>
 800b488:	89ab      	ldrh	r3, [r5, #12]
 800b48a:	059a      	lsls	r2, r3, #22
 800b48c:	d402      	bmi.n	800b494 <_vfiprintf_r+0x220>
 800b48e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b490:	f7ff fe13 	bl	800b0ba <__retarget_lock_release_recursive>
 800b494:	89ab      	ldrh	r3, [r5, #12]
 800b496:	065b      	lsls	r3, r3, #25
 800b498:	f53f af12 	bmi.w	800b2c0 <_vfiprintf_r+0x4c>
 800b49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b49e:	e711      	b.n	800b2c4 <_vfiprintf_r+0x50>
 800b4a0:	ab03      	add	r3, sp, #12
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	462a      	mov	r2, r5
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <_vfiprintf_r+0x258>)
 800b4a8:	a904      	add	r1, sp, #16
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f000 f880 	bl	800b5b0 <_printf_i>
 800b4b0:	e7e4      	b.n	800b47c <_vfiprintf_r+0x208>
 800b4b2:	bf00      	nop
 800b4b4:	0801b908 	.word	0x0801b908
 800b4b8:	0801b928 	.word	0x0801b928
 800b4bc:	0801b8e8 	.word	0x0801b8e8
 800b4c0:	0801b948 	.word	0x0801b948
 800b4c4:	0801b952 	.word	0x0801b952
 800b4c8:	00000000 	.word	0x00000000
 800b4cc:	0800b24f 	.word	0x0800b24f
 800b4d0:	0801b94e 	.word	0x0801b94e

0800b4d4 <_printf_common>:
 800b4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	4616      	mov	r6, r2
 800b4da:	4699      	mov	r9, r3
 800b4dc:	688a      	ldr	r2, [r1, #8]
 800b4de:	690b      	ldr	r3, [r1, #16]
 800b4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	bfb8      	it	lt
 800b4e8:	4613      	movlt	r3, r2
 800b4ea:	6033      	str	r3, [r6, #0]
 800b4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4f0:	4607      	mov	r7, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	b10a      	cbz	r2, 800b4fa <_printf_common+0x26>
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	6033      	str	r3, [r6, #0]
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	0699      	lsls	r1, r3, #26
 800b4fe:	bf42      	ittt	mi
 800b500:	6833      	ldrmi	r3, [r6, #0]
 800b502:	3302      	addmi	r3, #2
 800b504:	6033      	strmi	r3, [r6, #0]
 800b506:	6825      	ldr	r5, [r4, #0]
 800b508:	f015 0506 	ands.w	r5, r5, #6
 800b50c:	d106      	bne.n	800b51c <_printf_common+0x48>
 800b50e:	f104 0a19 	add.w	sl, r4, #25
 800b512:	68e3      	ldr	r3, [r4, #12]
 800b514:	6832      	ldr	r2, [r6, #0]
 800b516:	1a9b      	subs	r3, r3, r2
 800b518:	42ab      	cmp	r3, r5
 800b51a:	dc26      	bgt.n	800b56a <_printf_common+0x96>
 800b51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b520:	1e13      	subs	r3, r2, #0
 800b522:	6822      	ldr	r2, [r4, #0]
 800b524:	bf18      	it	ne
 800b526:	2301      	movne	r3, #1
 800b528:	0692      	lsls	r2, r2, #26
 800b52a:	d42b      	bmi.n	800b584 <_printf_common+0xb0>
 800b52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b530:	4649      	mov	r1, r9
 800b532:	4638      	mov	r0, r7
 800b534:	47c0      	blx	r8
 800b536:	3001      	adds	r0, #1
 800b538:	d01e      	beq.n	800b578 <_printf_common+0xa4>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	68e5      	ldr	r5, [r4, #12]
 800b53e:	6832      	ldr	r2, [r6, #0]
 800b540:	f003 0306 	and.w	r3, r3, #6
 800b544:	2b04      	cmp	r3, #4
 800b546:	bf08      	it	eq
 800b548:	1aad      	subeq	r5, r5, r2
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	bf0c      	ite	eq
 800b550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b554:	2500      	movne	r5, #0
 800b556:	4293      	cmp	r3, r2
 800b558:	bfc4      	itt	gt
 800b55a:	1a9b      	subgt	r3, r3, r2
 800b55c:	18ed      	addgt	r5, r5, r3
 800b55e:	2600      	movs	r6, #0
 800b560:	341a      	adds	r4, #26
 800b562:	42b5      	cmp	r5, r6
 800b564:	d11a      	bne.n	800b59c <_printf_common+0xc8>
 800b566:	2000      	movs	r0, #0
 800b568:	e008      	b.n	800b57c <_printf_common+0xa8>
 800b56a:	2301      	movs	r3, #1
 800b56c:	4652      	mov	r2, sl
 800b56e:	4649      	mov	r1, r9
 800b570:	4638      	mov	r0, r7
 800b572:	47c0      	blx	r8
 800b574:	3001      	adds	r0, #1
 800b576:	d103      	bne.n	800b580 <_printf_common+0xac>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b580:	3501      	adds	r5, #1
 800b582:	e7c6      	b.n	800b512 <_printf_common+0x3e>
 800b584:	18e1      	adds	r1, r4, r3
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	2030      	movs	r0, #48	; 0x30
 800b58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b58e:	4422      	add	r2, r4
 800b590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b598:	3302      	adds	r3, #2
 800b59a:	e7c7      	b.n	800b52c <_printf_common+0x58>
 800b59c:	2301      	movs	r3, #1
 800b59e:	4622      	mov	r2, r4
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	47c0      	blx	r8
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d0e6      	beq.n	800b578 <_printf_common+0xa4>
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	e7d9      	b.n	800b562 <_printf_common+0x8e>
	...

0800b5b0 <_printf_i>:
 800b5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	4691      	mov	r9, r2
 800b5b8:	7e27      	ldrb	r7, [r4, #24]
 800b5ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b5bc:	2f78      	cmp	r7, #120	; 0x78
 800b5be:	4680      	mov	r8, r0
 800b5c0:	469a      	mov	sl, r3
 800b5c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5c6:	d807      	bhi.n	800b5d8 <_printf_i+0x28>
 800b5c8:	2f62      	cmp	r7, #98	; 0x62
 800b5ca:	d80a      	bhi.n	800b5e2 <_printf_i+0x32>
 800b5cc:	2f00      	cmp	r7, #0
 800b5ce:	f000 80d8 	beq.w	800b782 <_printf_i+0x1d2>
 800b5d2:	2f58      	cmp	r7, #88	; 0x58
 800b5d4:	f000 80a3 	beq.w	800b71e <_printf_i+0x16e>
 800b5d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5e0:	e03a      	b.n	800b658 <_printf_i+0xa8>
 800b5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5e6:	2b15      	cmp	r3, #21
 800b5e8:	d8f6      	bhi.n	800b5d8 <_printf_i+0x28>
 800b5ea:	a001      	add	r0, pc, #4	; (adr r0, 800b5f0 <_printf_i+0x40>)
 800b5ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b5f0:	0800b649 	.word	0x0800b649
 800b5f4:	0800b65d 	.word	0x0800b65d
 800b5f8:	0800b5d9 	.word	0x0800b5d9
 800b5fc:	0800b5d9 	.word	0x0800b5d9
 800b600:	0800b5d9 	.word	0x0800b5d9
 800b604:	0800b5d9 	.word	0x0800b5d9
 800b608:	0800b65d 	.word	0x0800b65d
 800b60c:	0800b5d9 	.word	0x0800b5d9
 800b610:	0800b5d9 	.word	0x0800b5d9
 800b614:	0800b5d9 	.word	0x0800b5d9
 800b618:	0800b5d9 	.word	0x0800b5d9
 800b61c:	0800b769 	.word	0x0800b769
 800b620:	0800b68d 	.word	0x0800b68d
 800b624:	0800b74b 	.word	0x0800b74b
 800b628:	0800b5d9 	.word	0x0800b5d9
 800b62c:	0800b5d9 	.word	0x0800b5d9
 800b630:	0800b78b 	.word	0x0800b78b
 800b634:	0800b5d9 	.word	0x0800b5d9
 800b638:	0800b68d 	.word	0x0800b68d
 800b63c:	0800b5d9 	.word	0x0800b5d9
 800b640:	0800b5d9 	.word	0x0800b5d9
 800b644:	0800b753 	.word	0x0800b753
 800b648:	680b      	ldr	r3, [r1, #0]
 800b64a:	1d1a      	adds	r2, r3, #4
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	600a      	str	r2, [r1, #0]
 800b650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b658:	2301      	movs	r3, #1
 800b65a:	e0a3      	b.n	800b7a4 <_printf_i+0x1f4>
 800b65c:	6825      	ldr	r5, [r4, #0]
 800b65e:	6808      	ldr	r0, [r1, #0]
 800b660:	062e      	lsls	r6, r5, #24
 800b662:	f100 0304 	add.w	r3, r0, #4
 800b666:	d50a      	bpl.n	800b67e <_printf_i+0xce>
 800b668:	6805      	ldr	r5, [r0, #0]
 800b66a:	600b      	str	r3, [r1, #0]
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	da03      	bge.n	800b678 <_printf_i+0xc8>
 800b670:	232d      	movs	r3, #45	; 0x2d
 800b672:	426d      	negs	r5, r5
 800b674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b678:	485e      	ldr	r0, [pc, #376]	; (800b7f4 <_printf_i+0x244>)
 800b67a:	230a      	movs	r3, #10
 800b67c:	e019      	b.n	800b6b2 <_printf_i+0x102>
 800b67e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b682:	6805      	ldr	r5, [r0, #0]
 800b684:	600b      	str	r3, [r1, #0]
 800b686:	bf18      	it	ne
 800b688:	b22d      	sxthne	r5, r5
 800b68a:	e7ef      	b.n	800b66c <_printf_i+0xbc>
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	6825      	ldr	r5, [r4, #0]
 800b690:	1d18      	adds	r0, r3, #4
 800b692:	6008      	str	r0, [r1, #0]
 800b694:	0628      	lsls	r0, r5, #24
 800b696:	d501      	bpl.n	800b69c <_printf_i+0xec>
 800b698:	681d      	ldr	r5, [r3, #0]
 800b69a:	e002      	b.n	800b6a2 <_printf_i+0xf2>
 800b69c:	0669      	lsls	r1, r5, #25
 800b69e:	d5fb      	bpl.n	800b698 <_printf_i+0xe8>
 800b6a0:	881d      	ldrh	r5, [r3, #0]
 800b6a2:	4854      	ldr	r0, [pc, #336]	; (800b7f4 <_printf_i+0x244>)
 800b6a4:	2f6f      	cmp	r7, #111	; 0x6f
 800b6a6:	bf0c      	ite	eq
 800b6a8:	2308      	moveq	r3, #8
 800b6aa:	230a      	movne	r3, #10
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6b2:	6866      	ldr	r6, [r4, #4]
 800b6b4:	60a6      	str	r6, [r4, #8]
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	bfa2      	ittt	ge
 800b6ba:	6821      	ldrge	r1, [r4, #0]
 800b6bc:	f021 0104 	bicge.w	r1, r1, #4
 800b6c0:	6021      	strge	r1, [r4, #0]
 800b6c2:	b90d      	cbnz	r5, 800b6c8 <_printf_i+0x118>
 800b6c4:	2e00      	cmp	r6, #0
 800b6c6:	d04d      	beq.n	800b764 <_printf_i+0x1b4>
 800b6c8:	4616      	mov	r6, r2
 800b6ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6ce:	fb03 5711 	mls	r7, r3, r1, r5
 800b6d2:	5dc7      	ldrb	r7, [r0, r7]
 800b6d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b6d8:	462f      	mov	r7, r5
 800b6da:	42bb      	cmp	r3, r7
 800b6dc:	460d      	mov	r5, r1
 800b6de:	d9f4      	bls.n	800b6ca <_printf_i+0x11a>
 800b6e0:	2b08      	cmp	r3, #8
 800b6e2:	d10b      	bne.n	800b6fc <_printf_i+0x14c>
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	07df      	lsls	r7, r3, #31
 800b6e8:	d508      	bpl.n	800b6fc <_printf_i+0x14c>
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	6861      	ldr	r1, [r4, #4]
 800b6ee:	4299      	cmp	r1, r3
 800b6f0:	bfde      	ittt	le
 800b6f2:	2330      	movle	r3, #48	; 0x30
 800b6f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6fc:	1b92      	subs	r2, r2, r6
 800b6fe:	6122      	str	r2, [r4, #16]
 800b700:	f8cd a000 	str.w	sl, [sp]
 800b704:	464b      	mov	r3, r9
 800b706:	aa03      	add	r2, sp, #12
 800b708:	4621      	mov	r1, r4
 800b70a:	4640      	mov	r0, r8
 800b70c:	f7ff fee2 	bl	800b4d4 <_printf_common>
 800b710:	3001      	adds	r0, #1
 800b712:	d14c      	bne.n	800b7ae <_printf_i+0x1fe>
 800b714:	f04f 30ff 	mov.w	r0, #4294967295
 800b718:	b004      	add	sp, #16
 800b71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71e:	4835      	ldr	r0, [pc, #212]	; (800b7f4 <_printf_i+0x244>)
 800b720:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	680e      	ldr	r6, [r1, #0]
 800b728:	061f      	lsls	r7, r3, #24
 800b72a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b72e:	600e      	str	r6, [r1, #0]
 800b730:	d514      	bpl.n	800b75c <_printf_i+0x1ac>
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	bf44      	itt	mi
 800b736:	f043 0320 	orrmi.w	r3, r3, #32
 800b73a:	6023      	strmi	r3, [r4, #0]
 800b73c:	b91d      	cbnz	r5, 800b746 <_printf_i+0x196>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	f023 0320 	bic.w	r3, r3, #32
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	2310      	movs	r3, #16
 800b748:	e7b0      	b.n	800b6ac <_printf_i+0xfc>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	f043 0320 	orr.w	r3, r3, #32
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	2378      	movs	r3, #120	; 0x78
 800b754:	4828      	ldr	r0, [pc, #160]	; (800b7f8 <_printf_i+0x248>)
 800b756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b75a:	e7e3      	b.n	800b724 <_printf_i+0x174>
 800b75c:	065e      	lsls	r6, r3, #25
 800b75e:	bf48      	it	mi
 800b760:	b2ad      	uxthmi	r5, r5
 800b762:	e7e6      	b.n	800b732 <_printf_i+0x182>
 800b764:	4616      	mov	r6, r2
 800b766:	e7bb      	b.n	800b6e0 <_printf_i+0x130>
 800b768:	680b      	ldr	r3, [r1, #0]
 800b76a:	6826      	ldr	r6, [r4, #0]
 800b76c:	6960      	ldr	r0, [r4, #20]
 800b76e:	1d1d      	adds	r5, r3, #4
 800b770:	600d      	str	r5, [r1, #0]
 800b772:	0635      	lsls	r5, r6, #24
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	d501      	bpl.n	800b77c <_printf_i+0x1cc>
 800b778:	6018      	str	r0, [r3, #0]
 800b77a:	e002      	b.n	800b782 <_printf_i+0x1d2>
 800b77c:	0671      	lsls	r1, r6, #25
 800b77e:	d5fb      	bpl.n	800b778 <_printf_i+0x1c8>
 800b780:	8018      	strh	r0, [r3, #0]
 800b782:	2300      	movs	r3, #0
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	4616      	mov	r6, r2
 800b788:	e7ba      	b.n	800b700 <_printf_i+0x150>
 800b78a:	680b      	ldr	r3, [r1, #0]
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	600a      	str	r2, [r1, #0]
 800b790:	681e      	ldr	r6, [r3, #0]
 800b792:	6862      	ldr	r2, [r4, #4]
 800b794:	2100      	movs	r1, #0
 800b796:	4630      	mov	r0, r6
 800b798:	f7f4 fd32 	bl	8000200 <memchr>
 800b79c:	b108      	cbz	r0, 800b7a2 <_printf_i+0x1f2>
 800b79e:	1b80      	subs	r0, r0, r6
 800b7a0:	6060      	str	r0, [r4, #4]
 800b7a2:	6863      	ldr	r3, [r4, #4]
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ac:	e7a8      	b.n	800b700 <_printf_i+0x150>
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	47d0      	blx	sl
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d0ab      	beq.n	800b714 <_printf_i+0x164>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	079b      	lsls	r3, r3, #30
 800b7c0:	d413      	bmi.n	800b7ea <_printf_i+0x23a>
 800b7c2:	68e0      	ldr	r0, [r4, #12]
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	4298      	cmp	r0, r3
 800b7c8:	bfb8      	it	lt
 800b7ca:	4618      	movlt	r0, r3
 800b7cc:	e7a4      	b.n	800b718 <_printf_i+0x168>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	47d0      	blx	sl
 800b7d8:	3001      	adds	r0, #1
 800b7da:	d09b      	beq.n	800b714 <_printf_i+0x164>
 800b7dc:	3501      	adds	r5, #1
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	9903      	ldr	r1, [sp, #12]
 800b7e2:	1a5b      	subs	r3, r3, r1
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dcf2      	bgt.n	800b7ce <_printf_i+0x21e>
 800b7e8:	e7eb      	b.n	800b7c2 <_printf_i+0x212>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	f104 0619 	add.w	r6, r4, #25
 800b7f0:	e7f5      	b.n	800b7de <_printf_i+0x22e>
 800b7f2:	bf00      	nop
 800b7f4:	0801b959 	.word	0x0801b959
 800b7f8:	0801b96a 	.word	0x0801b96a

0800b7fc <_sbrk_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d06      	ldr	r5, [pc, #24]	; (800b818 <_sbrk_r+0x1c>)
 800b800:	2300      	movs	r3, #0
 800b802:	4604      	mov	r4, r0
 800b804:	4608      	mov	r0, r1
 800b806:	602b      	str	r3, [r5, #0]
 800b808:	f7f5 f9f6 	bl	8000bf8 <_sbrk>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_sbrk_r+0x1a>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_sbrk_r+0x1a>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	2000e4b0 	.word	0x2000e4b0

0800b81c <__sread>:
 800b81c:	b510      	push	{r4, lr}
 800b81e:	460c      	mov	r4, r1
 800b820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b824:	f000 fa6c 	bl	800bd00 <_read_r>
 800b828:	2800      	cmp	r0, #0
 800b82a:	bfab      	itete	ge
 800b82c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b82e:	89a3      	ldrhlt	r3, [r4, #12]
 800b830:	181b      	addge	r3, r3, r0
 800b832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b836:	bfac      	ite	ge
 800b838:	6563      	strge	r3, [r4, #84]	; 0x54
 800b83a:	81a3      	strhlt	r3, [r4, #12]
 800b83c:	bd10      	pop	{r4, pc}

0800b83e <__swrite>:
 800b83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b842:	461f      	mov	r7, r3
 800b844:	898b      	ldrh	r3, [r1, #12]
 800b846:	05db      	lsls	r3, r3, #23
 800b848:	4605      	mov	r5, r0
 800b84a:	460c      	mov	r4, r1
 800b84c:	4616      	mov	r6, r2
 800b84e:	d505      	bpl.n	800b85c <__swrite+0x1e>
 800b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b854:	2302      	movs	r3, #2
 800b856:	2200      	movs	r2, #0
 800b858:	f000 f9d0 	bl	800bbfc <_lseek_r>
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	4632      	mov	r2, r6
 800b86a:	463b      	mov	r3, r7
 800b86c:	4628      	mov	r0, r5
 800b86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b872:	f000 b869 	b.w	800b948 <_write_r>

0800b876 <__sseek>:
 800b876:	b510      	push	{r4, lr}
 800b878:	460c      	mov	r4, r1
 800b87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b87e:	f000 f9bd 	bl	800bbfc <_lseek_r>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	bf15      	itete	ne
 800b888:	6560      	strne	r0, [r4, #84]	; 0x54
 800b88a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b88e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b892:	81a3      	strheq	r3, [r4, #12]
 800b894:	bf18      	it	ne
 800b896:	81a3      	strhne	r3, [r4, #12]
 800b898:	bd10      	pop	{r4, pc}

0800b89a <__sclose>:
 800b89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89e:	f000 b8db 	b.w	800ba58 <_close_r>
	...

0800b8a4 <__swbuf_r>:
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	460e      	mov	r6, r1
 800b8a8:	4614      	mov	r4, r2
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b118      	cbz	r0, 800b8b6 <__swbuf_r+0x12>
 800b8ae:	6983      	ldr	r3, [r0, #24]
 800b8b0:	b90b      	cbnz	r3, 800b8b6 <__swbuf_r+0x12>
 800b8b2:	f7ff fb51 	bl	800af58 <__sinit>
 800b8b6:	4b21      	ldr	r3, [pc, #132]	; (800b93c <__swbuf_r+0x98>)
 800b8b8:	429c      	cmp	r4, r3
 800b8ba:	d12b      	bne.n	800b914 <__swbuf_r+0x70>
 800b8bc:	686c      	ldr	r4, [r5, #4]
 800b8be:	69a3      	ldr	r3, [r4, #24]
 800b8c0:	60a3      	str	r3, [r4, #8]
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	071a      	lsls	r2, r3, #28
 800b8c6:	d52f      	bpl.n	800b928 <__swbuf_r+0x84>
 800b8c8:	6923      	ldr	r3, [r4, #16]
 800b8ca:	b36b      	cbz	r3, 800b928 <__swbuf_r+0x84>
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	6820      	ldr	r0, [r4, #0]
 800b8d0:	1ac0      	subs	r0, r0, r3
 800b8d2:	6963      	ldr	r3, [r4, #20]
 800b8d4:	b2f6      	uxtb	r6, r6
 800b8d6:	4283      	cmp	r3, r0
 800b8d8:	4637      	mov	r7, r6
 800b8da:	dc04      	bgt.n	800b8e6 <__swbuf_r+0x42>
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 f950 	bl	800bb84 <_fflush_r>
 800b8e4:	bb30      	cbnz	r0, 800b934 <__swbuf_r+0x90>
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	60a3      	str	r3, [r4, #8]
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	6022      	str	r2, [r4, #0]
 800b8f2:	701e      	strb	r6, [r3, #0]
 800b8f4:	6963      	ldr	r3, [r4, #20]
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	4283      	cmp	r3, r0
 800b8fa:	d004      	beq.n	800b906 <__swbuf_r+0x62>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	07db      	lsls	r3, r3, #31
 800b900:	d506      	bpl.n	800b910 <__swbuf_r+0x6c>
 800b902:	2e0a      	cmp	r6, #10
 800b904:	d104      	bne.n	800b910 <__swbuf_r+0x6c>
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f000 f93b 	bl	800bb84 <_fflush_r>
 800b90e:	b988      	cbnz	r0, 800b934 <__swbuf_r+0x90>
 800b910:	4638      	mov	r0, r7
 800b912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b914:	4b0a      	ldr	r3, [pc, #40]	; (800b940 <__swbuf_r+0x9c>)
 800b916:	429c      	cmp	r4, r3
 800b918:	d101      	bne.n	800b91e <__swbuf_r+0x7a>
 800b91a:	68ac      	ldr	r4, [r5, #8]
 800b91c:	e7cf      	b.n	800b8be <__swbuf_r+0x1a>
 800b91e:	4b09      	ldr	r3, [pc, #36]	; (800b944 <__swbuf_r+0xa0>)
 800b920:	429c      	cmp	r4, r3
 800b922:	bf08      	it	eq
 800b924:	68ec      	ldreq	r4, [r5, #12]
 800b926:	e7ca      	b.n	800b8be <__swbuf_r+0x1a>
 800b928:	4621      	mov	r1, r4
 800b92a:	4628      	mov	r0, r5
 800b92c:	f000 f81e 	bl	800b96c <__swsetup_r>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0cb      	beq.n	800b8cc <__swbuf_r+0x28>
 800b934:	f04f 37ff 	mov.w	r7, #4294967295
 800b938:	e7ea      	b.n	800b910 <__swbuf_r+0x6c>
 800b93a:	bf00      	nop
 800b93c:	0801b908 	.word	0x0801b908
 800b940:	0801b928 	.word	0x0801b928
 800b944:	0801b8e8 	.word	0x0801b8e8

0800b948 <_write_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d07      	ldr	r5, [pc, #28]	; (800b968 <_write_r+0x20>)
 800b94c:	4604      	mov	r4, r0
 800b94e:	4608      	mov	r0, r1
 800b950:	4611      	mov	r1, r2
 800b952:	2200      	movs	r2, #0
 800b954:	602a      	str	r2, [r5, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	f7f5 f97e 	bl	8000c58 <_write>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_write_r+0x1e>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_write_r+0x1e>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	2000e4b0 	.word	0x2000e4b0

0800b96c <__swsetup_r>:
 800b96c:	4b32      	ldr	r3, [pc, #200]	; (800ba38 <__swsetup_r+0xcc>)
 800b96e:	b570      	push	{r4, r5, r6, lr}
 800b970:	681d      	ldr	r5, [r3, #0]
 800b972:	4606      	mov	r6, r0
 800b974:	460c      	mov	r4, r1
 800b976:	b125      	cbz	r5, 800b982 <__swsetup_r+0x16>
 800b978:	69ab      	ldr	r3, [r5, #24]
 800b97a:	b913      	cbnz	r3, 800b982 <__swsetup_r+0x16>
 800b97c:	4628      	mov	r0, r5
 800b97e:	f7ff faeb 	bl	800af58 <__sinit>
 800b982:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <__swsetup_r+0xd0>)
 800b984:	429c      	cmp	r4, r3
 800b986:	d10f      	bne.n	800b9a8 <__swsetup_r+0x3c>
 800b988:	686c      	ldr	r4, [r5, #4]
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	d42c      	bmi.n	800b9ee <__swsetup_r+0x82>
 800b994:	06dd      	lsls	r5, r3, #27
 800b996:	d411      	bmi.n	800b9bc <__swsetup_r+0x50>
 800b998:	2309      	movs	r3, #9
 800b99a:	6033      	str	r3, [r6, #0]
 800b99c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9a0:	81a3      	strh	r3, [r4, #12]
 800b9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a6:	e03e      	b.n	800ba26 <__swsetup_r+0xba>
 800b9a8:	4b25      	ldr	r3, [pc, #148]	; (800ba40 <__swsetup_r+0xd4>)
 800b9aa:	429c      	cmp	r4, r3
 800b9ac:	d101      	bne.n	800b9b2 <__swsetup_r+0x46>
 800b9ae:	68ac      	ldr	r4, [r5, #8]
 800b9b0:	e7eb      	b.n	800b98a <__swsetup_r+0x1e>
 800b9b2:	4b24      	ldr	r3, [pc, #144]	; (800ba44 <__swsetup_r+0xd8>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	bf08      	it	eq
 800b9b8:	68ec      	ldreq	r4, [r5, #12]
 800b9ba:	e7e6      	b.n	800b98a <__swsetup_r+0x1e>
 800b9bc:	0758      	lsls	r0, r3, #29
 800b9be:	d512      	bpl.n	800b9e6 <__swsetup_r+0x7a>
 800b9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9c2:	b141      	cbz	r1, 800b9d6 <__swsetup_r+0x6a>
 800b9c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c8:	4299      	cmp	r1, r3
 800b9ca:	d002      	beq.n	800b9d2 <__swsetup_r+0x66>
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff fb7d 	bl	800b0cc <_free_r>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6063      	str	r3, [r4, #4]
 800b9e2:	6923      	ldr	r3, [r4, #16]
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0308 	orr.w	r3, r3, #8
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	b94b      	cbnz	r3, 800ba06 <__swsetup_r+0x9a>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b9f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9fc:	d003      	beq.n	800ba06 <__swsetup_r+0x9a>
 800b9fe:	4621      	mov	r1, r4
 800ba00:	4630      	mov	r0, r6
 800ba02:	f000 f931 	bl	800bc68 <__smakebuf_r>
 800ba06:	89a0      	ldrh	r0, [r4, #12]
 800ba08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba0c:	f010 0301 	ands.w	r3, r0, #1
 800ba10:	d00a      	beq.n	800ba28 <__swsetup_r+0xbc>
 800ba12:	2300      	movs	r3, #0
 800ba14:	60a3      	str	r3, [r4, #8]
 800ba16:	6963      	ldr	r3, [r4, #20]
 800ba18:	425b      	negs	r3, r3
 800ba1a:	61a3      	str	r3, [r4, #24]
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	b943      	cbnz	r3, 800ba32 <__swsetup_r+0xc6>
 800ba20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba24:	d1ba      	bne.n	800b99c <__swsetup_r+0x30>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	0781      	lsls	r1, r0, #30
 800ba2a:	bf58      	it	pl
 800ba2c:	6963      	ldrpl	r3, [r4, #20]
 800ba2e:	60a3      	str	r3, [r4, #8]
 800ba30:	e7f4      	b.n	800ba1c <__swsetup_r+0xb0>
 800ba32:	2000      	movs	r0, #0
 800ba34:	e7f7      	b.n	800ba26 <__swsetup_r+0xba>
 800ba36:	bf00      	nop
 800ba38:	2000004c 	.word	0x2000004c
 800ba3c:	0801b908 	.word	0x0801b908
 800ba40:	0801b928 	.word	0x0801b928
 800ba44:	0801b8e8 	.word	0x0801b8e8

0800ba48 <abort>:
 800ba48:	b508      	push	{r3, lr}
 800ba4a:	2006      	movs	r0, #6
 800ba4c:	f000 f992 	bl	800bd74 <raise>
 800ba50:	2001      	movs	r0, #1
 800ba52:	f7f5 f8fb 	bl	8000c4c <_exit>
	...

0800ba58 <_close_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d06      	ldr	r5, [pc, #24]	; (800ba74 <_close_r+0x1c>)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	602b      	str	r3, [r5, #0]
 800ba64:	f7f5 f905 	bl	8000c72 <_close>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_close_r+0x1a>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_close_r+0x1a>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	2000e4b0 	.word	0x2000e4b0

0800ba78 <__sflush_r>:
 800ba78:	898a      	ldrh	r2, [r1, #12]
 800ba7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	4605      	mov	r5, r0
 800ba80:	0710      	lsls	r0, r2, #28
 800ba82:	460c      	mov	r4, r1
 800ba84:	d458      	bmi.n	800bb38 <__sflush_r+0xc0>
 800ba86:	684b      	ldr	r3, [r1, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	dc05      	bgt.n	800ba98 <__sflush_r+0x20>
 800ba8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dc02      	bgt.n	800ba98 <__sflush_r+0x20>
 800ba92:	2000      	movs	r0, #0
 800ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba9a:	2e00      	cmp	r6, #0
 800ba9c:	d0f9      	beq.n	800ba92 <__sflush_r+0x1a>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800baa4:	682f      	ldr	r7, [r5, #0]
 800baa6:	602b      	str	r3, [r5, #0]
 800baa8:	d032      	beq.n	800bb10 <__sflush_r+0x98>
 800baaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	075a      	lsls	r2, r3, #29
 800bab0:	d505      	bpl.n	800babe <__sflush_r+0x46>
 800bab2:	6863      	ldr	r3, [r4, #4]
 800bab4:	1ac0      	subs	r0, r0, r3
 800bab6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bab8:	b10b      	cbz	r3, 800babe <__sflush_r+0x46>
 800baba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800babc:	1ac0      	subs	r0, r0, r3
 800babe:	2300      	movs	r3, #0
 800bac0:	4602      	mov	r2, r0
 800bac2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bac4:	6a21      	ldr	r1, [r4, #32]
 800bac6:	4628      	mov	r0, r5
 800bac8:	47b0      	blx	r6
 800baca:	1c43      	adds	r3, r0, #1
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	d106      	bne.n	800bade <__sflush_r+0x66>
 800bad0:	6829      	ldr	r1, [r5, #0]
 800bad2:	291d      	cmp	r1, #29
 800bad4:	d82c      	bhi.n	800bb30 <__sflush_r+0xb8>
 800bad6:	4a2a      	ldr	r2, [pc, #168]	; (800bb80 <__sflush_r+0x108>)
 800bad8:	40ca      	lsrs	r2, r1
 800bada:	07d6      	lsls	r6, r2, #31
 800badc:	d528      	bpl.n	800bb30 <__sflush_r+0xb8>
 800bade:	2200      	movs	r2, #0
 800bae0:	6062      	str	r2, [r4, #4]
 800bae2:	04d9      	lsls	r1, r3, #19
 800bae4:	6922      	ldr	r2, [r4, #16]
 800bae6:	6022      	str	r2, [r4, #0]
 800bae8:	d504      	bpl.n	800baf4 <__sflush_r+0x7c>
 800baea:	1c42      	adds	r2, r0, #1
 800baec:	d101      	bne.n	800baf2 <__sflush_r+0x7a>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b903      	cbnz	r3, 800baf4 <__sflush_r+0x7c>
 800baf2:	6560      	str	r0, [r4, #84]	; 0x54
 800baf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baf6:	602f      	str	r7, [r5, #0]
 800baf8:	2900      	cmp	r1, #0
 800bafa:	d0ca      	beq.n	800ba92 <__sflush_r+0x1a>
 800bafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb00:	4299      	cmp	r1, r3
 800bb02:	d002      	beq.n	800bb0a <__sflush_r+0x92>
 800bb04:	4628      	mov	r0, r5
 800bb06:	f7ff fae1 	bl	800b0cc <_free_r>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb0e:	e7c1      	b.n	800ba94 <__sflush_r+0x1c>
 800bb10:	6a21      	ldr	r1, [r4, #32]
 800bb12:	2301      	movs	r3, #1
 800bb14:	4628      	mov	r0, r5
 800bb16:	47b0      	blx	r6
 800bb18:	1c41      	adds	r1, r0, #1
 800bb1a:	d1c7      	bne.n	800baac <__sflush_r+0x34>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0c4      	beq.n	800baac <__sflush_r+0x34>
 800bb22:	2b1d      	cmp	r3, #29
 800bb24:	d001      	beq.n	800bb2a <__sflush_r+0xb2>
 800bb26:	2b16      	cmp	r3, #22
 800bb28:	d101      	bne.n	800bb2e <__sflush_r+0xb6>
 800bb2a:	602f      	str	r7, [r5, #0]
 800bb2c:	e7b1      	b.n	800ba92 <__sflush_r+0x1a>
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	e7ad      	b.n	800ba94 <__sflush_r+0x1c>
 800bb38:	690f      	ldr	r7, [r1, #16]
 800bb3a:	2f00      	cmp	r7, #0
 800bb3c:	d0a9      	beq.n	800ba92 <__sflush_r+0x1a>
 800bb3e:	0793      	lsls	r3, r2, #30
 800bb40:	680e      	ldr	r6, [r1, #0]
 800bb42:	bf08      	it	eq
 800bb44:	694b      	ldreq	r3, [r1, #20]
 800bb46:	600f      	str	r7, [r1, #0]
 800bb48:	bf18      	it	ne
 800bb4a:	2300      	movne	r3, #0
 800bb4c:	eba6 0807 	sub.w	r8, r6, r7
 800bb50:	608b      	str	r3, [r1, #8]
 800bb52:	f1b8 0f00 	cmp.w	r8, #0
 800bb56:	dd9c      	ble.n	800ba92 <__sflush_r+0x1a>
 800bb58:	6a21      	ldr	r1, [r4, #32]
 800bb5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb5c:	4643      	mov	r3, r8
 800bb5e:	463a      	mov	r2, r7
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b0      	blx	r6
 800bb64:	2800      	cmp	r0, #0
 800bb66:	dc06      	bgt.n	800bb76 <__sflush_r+0xfe>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e78e      	b.n	800ba94 <__sflush_r+0x1c>
 800bb76:	4407      	add	r7, r0
 800bb78:	eba8 0800 	sub.w	r8, r8, r0
 800bb7c:	e7e9      	b.n	800bb52 <__sflush_r+0xda>
 800bb7e:	bf00      	nop
 800bb80:	20400001 	.word	0x20400001

0800bb84 <_fflush_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	690b      	ldr	r3, [r1, #16]
 800bb88:	4605      	mov	r5, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	b913      	cbnz	r3, 800bb94 <_fflush_r+0x10>
 800bb8e:	2500      	movs	r5, #0
 800bb90:	4628      	mov	r0, r5
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	b118      	cbz	r0, 800bb9e <_fflush_r+0x1a>
 800bb96:	6983      	ldr	r3, [r0, #24]
 800bb98:	b90b      	cbnz	r3, 800bb9e <_fflush_r+0x1a>
 800bb9a:	f7ff f9dd 	bl	800af58 <__sinit>
 800bb9e:	4b14      	ldr	r3, [pc, #80]	; (800bbf0 <_fflush_r+0x6c>)
 800bba0:	429c      	cmp	r4, r3
 800bba2:	d11b      	bne.n	800bbdc <_fflush_r+0x58>
 800bba4:	686c      	ldr	r4, [r5, #4]
 800bba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0ef      	beq.n	800bb8e <_fflush_r+0xa>
 800bbae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bbb0:	07d0      	lsls	r0, r2, #31
 800bbb2:	d404      	bmi.n	800bbbe <_fflush_r+0x3a>
 800bbb4:	0599      	lsls	r1, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_fflush_r+0x3a>
 800bbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbba:	f7ff fa7d 	bl	800b0b8 <__retarget_lock_acquire_recursive>
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f7ff ff59 	bl	800ba78 <__sflush_r>
 800bbc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbc8:	07da      	lsls	r2, r3, #31
 800bbca:	4605      	mov	r5, r0
 800bbcc:	d4e0      	bmi.n	800bb90 <_fflush_r+0xc>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	059b      	lsls	r3, r3, #22
 800bbd2:	d4dd      	bmi.n	800bb90 <_fflush_r+0xc>
 800bbd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbd6:	f7ff fa70 	bl	800b0ba <__retarget_lock_release_recursive>
 800bbda:	e7d9      	b.n	800bb90 <_fflush_r+0xc>
 800bbdc:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <_fflush_r+0x70>)
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	d101      	bne.n	800bbe6 <_fflush_r+0x62>
 800bbe2:	68ac      	ldr	r4, [r5, #8]
 800bbe4:	e7df      	b.n	800bba6 <_fflush_r+0x22>
 800bbe6:	4b04      	ldr	r3, [pc, #16]	; (800bbf8 <_fflush_r+0x74>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	bf08      	it	eq
 800bbec:	68ec      	ldreq	r4, [r5, #12]
 800bbee:	e7da      	b.n	800bba6 <_fflush_r+0x22>
 800bbf0:	0801b908 	.word	0x0801b908
 800bbf4:	0801b928 	.word	0x0801b928
 800bbf8:	0801b8e8 	.word	0x0801b8e8

0800bbfc <_lseek_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	; (800bc1c <_lseek_r+0x20>)
 800bc00:	4604      	mov	r4, r0
 800bc02:	4608      	mov	r0, r1
 800bc04:	4611      	mov	r1, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	602a      	str	r2, [r5, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f7f5 f83b 	bl	8000c86 <_lseek>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_lseek_r+0x1e>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_lseek_r+0x1e>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	2000e4b0 	.word	0x2000e4b0

0800bc20 <__swhatbuf_r>:
 800bc20:	b570      	push	{r4, r5, r6, lr}
 800bc22:	460e      	mov	r6, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	2900      	cmp	r1, #0
 800bc2a:	b096      	sub	sp, #88	; 0x58
 800bc2c:	4614      	mov	r4, r2
 800bc2e:	461d      	mov	r5, r3
 800bc30:	da07      	bge.n	800bc42 <__swhatbuf_r+0x22>
 800bc32:	2300      	movs	r3, #0
 800bc34:	602b      	str	r3, [r5, #0]
 800bc36:	89b3      	ldrh	r3, [r6, #12]
 800bc38:	061a      	lsls	r2, r3, #24
 800bc3a:	d410      	bmi.n	800bc5e <__swhatbuf_r+0x3e>
 800bc3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc40:	e00e      	b.n	800bc60 <__swhatbuf_r+0x40>
 800bc42:	466a      	mov	r2, sp
 800bc44:	f000 f8b2 	bl	800bdac <_fstat_r>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	dbf2      	blt.n	800bc32 <__swhatbuf_r+0x12>
 800bc4c:	9a01      	ldr	r2, [sp, #4]
 800bc4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc56:	425a      	negs	r2, r3
 800bc58:	415a      	adcs	r2, r3
 800bc5a:	602a      	str	r2, [r5, #0]
 800bc5c:	e7ee      	b.n	800bc3c <__swhatbuf_r+0x1c>
 800bc5e:	2340      	movs	r3, #64	; 0x40
 800bc60:	2000      	movs	r0, #0
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	b016      	add	sp, #88	; 0x58
 800bc66:	bd70      	pop	{r4, r5, r6, pc}

0800bc68 <__smakebuf_r>:
 800bc68:	898b      	ldrh	r3, [r1, #12]
 800bc6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc6c:	079d      	lsls	r5, r3, #30
 800bc6e:	4606      	mov	r6, r0
 800bc70:	460c      	mov	r4, r1
 800bc72:	d507      	bpl.n	800bc84 <__smakebuf_r+0x1c>
 800bc74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	6163      	str	r3, [r4, #20]
 800bc80:	b002      	add	sp, #8
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	ab01      	add	r3, sp, #4
 800bc86:	466a      	mov	r2, sp
 800bc88:	f7ff ffca 	bl	800bc20 <__swhatbuf_r>
 800bc8c:	9900      	ldr	r1, [sp, #0]
 800bc8e:	4605      	mov	r5, r0
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7ff fa6b 	bl	800b16c <_malloc_r>
 800bc96:	b948      	cbnz	r0, 800bcac <__smakebuf_r+0x44>
 800bc98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc9c:	059a      	lsls	r2, r3, #22
 800bc9e:	d4ef      	bmi.n	800bc80 <__smakebuf_r+0x18>
 800bca0:	f023 0303 	bic.w	r3, r3, #3
 800bca4:	f043 0302 	orr.w	r3, r3, #2
 800bca8:	81a3      	strh	r3, [r4, #12]
 800bcaa:	e7e3      	b.n	800bc74 <__smakebuf_r+0xc>
 800bcac:	4b0d      	ldr	r3, [pc, #52]	; (800bce4 <__smakebuf_r+0x7c>)
 800bcae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	6020      	str	r0, [r4, #0]
 800bcb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	9b00      	ldr	r3, [sp, #0]
 800bcbc:	6163      	str	r3, [r4, #20]
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	6120      	str	r0, [r4, #16]
 800bcc2:	b15b      	cbz	r3, 800bcdc <__smakebuf_r+0x74>
 800bcc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f000 f881 	bl	800bdd0 <_isatty_r>
 800bcce:	b128      	cbz	r0, 800bcdc <__smakebuf_r+0x74>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f023 0303 	bic.w	r3, r3, #3
 800bcd6:	f043 0301 	orr.w	r3, r3, #1
 800bcda:	81a3      	strh	r3, [r4, #12]
 800bcdc:	89a0      	ldrh	r0, [r4, #12]
 800bcde:	4305      	orrs	r5, r0
 800bce0:	81a5      	strh	r5, [r4, #12]
 800bce2:	e7cd      	b.n	800bc80 <__smakebuf_r+0x18>
 800bce4:	0800aef1 	.word	0x0800aef1

0800bce8 <__malloc_lock>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__malloc_lock+0x8>)
 800bcea:	f7ff b9e5 	b.w	800b0b8 <__retarget_lock_acquire_recursive>
 800bcee:	bf00      	nop
 800bcf0:	2000e4a8 	.word	0x2000e4a8

0800bcf4 <__malloc_unlock>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__malloc_unlock+0x8>)
 800bcf6:	f7ff b9e0 	b.w	800b0ba <__retarget_lock_release_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	2000e4a8 	.word	0x2000e4a8

0800bd00 <_read_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4d07      	ldr	r5, [pc, #28]	; (800bd20 <_read_r+0x20>)
 800bd04:	4604      	mov	r4, r0
 800bd06:	4608      	mov	r0, r1
 800bd08:	4611      	mov	r1, r2
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	602a      	str	r2, [r5, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f7f4 ffbb 	bl	8000c8a <_read>
 800bd14:	1c43      	adds	r3, r0, #1
 800bd16:	d102      	bne.n	800bd1e <_read_r+0x1e>
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	b103      	cbz	r3, 800bd1e <_read_r+0x1e>
 800bd1c:	6023      	str	r3, [r4, #0]
 800bd1e:	bd38      	pop	{r3, r4, r5, pc}
 800bd20:	2000e4b0 	.word	0x2000e4b0

0800bd24 <_raise_r>:
 800bd24:	291f      	cmp	r1, #31
 800bd26:	b538      	push	{r3, r4, r5, lr}
 800bd28:	4604      	mov	r4, r0
 800bd2a:	460d      	mov	r5, r1
 800bd2c:	d904      	bls.n	800bd38 <_raise_r+0x14>
 800bd2e:	2316      	movs	r3, #22
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	f04f 30ff 	mov.w	r0, #4294967295
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd3a:	b112      	cbz	r2, 800bd42 <_raise_r+0x1e>
 800bd3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd40:	b94b      	cbnz	r3, 800bd56 <_raise_r+0x32>
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 f830 	bl	800bda8 <_getpid_r>
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd52:	f000 b817 	b.w	800bd84 <_kill_r>
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d00a      	beq.n	800bd70 <_raise_r+0x4c>
 800bd5a:	1c59      	adds	r1, r3, #1
 800bd5c:	d103      	bne.n	800bd66 <_raise_r+0x42>
 800bd5e:	2316      	movs	r3, #22
 800bd60:	6003      	str	r3, [r0, #0]
 800bd62:	2001      	movs	r0, #1
 800bd64:	e7e7      	b.n	800bd36 <_raise_r+0x12>
 800bd66:	2400      	movs	r4, #0
 800bd68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	4798      	blx	r3
 800bd70:	2000      	movs	r0, #0
 800bd72:	e7e0      	b.n	800bd36 <_raise_r+0x12>

0800bd74 <raise>:
 800bd74:	4b02      	ldr	r3, [pc, #8]	; (800bd80 <raise+0xc>)
 800bd76:	4601      	mov	r1, r0
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	f7ff bfd3 	b.w	800bd24 <_raise_r>
 800bd7e:	bf00      	nop
 800bd80:	2000004c 	.word	0x2000004c

0800bd84 <_kill_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	; (800bda4 <_kill_r+0x20>)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	4611      	mov	r1, r2
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	f7f4 ff53 	bl	8000c3c <_kill>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d102      	bne.n	800bda0 <_kill_r+0x1c>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	b103      	cbz	r3, 800bda0 <_kill_r+0x1c>
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	bf00      	nop
 800bda4:	2000e4b0 	.word	0x2000e4b0

0800bda8 <_getpid_r>:
 800bda8:	f7f4 bf46 	b.w	8000c38 <_getpid>

0800bdac <_fstat_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	; (800bdcc <_fstat_r+0x20>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	602b      	str	r3, [r5, #0]
 800bdba:	f7f4 ff5d 	bl	8000c78 <_fstat>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	d102      	bne.n	800bdc8 <_fstat_r+0x1c>
 800bdc2:	682b      	ldr	r3, [r5, #0]
 800bdc4:	b103      	cbz	r3, 800bdc8 <_fstat_r+0x1c>
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop
 800bdcc:	2000e4b0 	.word	0x2000e4b0

0800bdd0 <_isatty_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d06      	ldr	r5, [pc, #24]	; (800bdec <_isatty_r+0x1c>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f4 ff51 	bl	8000c82 <_isatty>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_isatty_r+0x1a>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_isatty_r+0x1a>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	2000e4b0 	.word	0x2000e4b0

0800bdf0 <_init>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	bf00      	nop
 800bdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf6:	bc08      	pop	{r3}
 800bdf8:	469e      	mov	lr, r3
 800bdfa:	4770      	bx	lr

0800bdfc <_fini>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr
